<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cookie和Session</title>
    <url>/2020/06/28/Cookie%E5%92%8CSession/</url>
    <content><![CDATA[<h1 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p><strong>会话</strong>：从打开浏览器到关闭浏览器，这个过程就称之为会话。</p>
<p><strong>有状态会话</strong>：举一个常见的例子，我们登录了淘宝之后，关闭浏览器然后再打开淘宝就已经处于登录状态。这就是有状态会话。</p>
<h2 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h2><p>网站是如何知道你曾经访问过？</p>
<ol>
<li>服务器会给客户端一个信物，下次客户端访问服务器时带上这个信物即可（cookie）</li>
<li>客户端访问服务端，服务器会哪一个记录簿记录下来，下次客户端访问时可以进行匹配（session）</li>
</ol>
<p>由此可知：</p>
<ul>
<li>Cookie是客户端的技术</li>
<li>Session是服务端的技术</li>
</ul>
<p>这两个技术共同实现了会话的保存，常见的应用就是登录状态的保存（比如登录之后保持一周的登录状态）</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h3><ul>
<li>Cookie是服务器通知客户端保存键值对的一种技术</li>
<li>客户端有了Cookie之后，会将对应有效路径的Cookie发送给服务器</li>
<li>每个Cookie的大小不能超过4kb</li>
</ul>
<h3 id="如何创建Cookie"><a href="#如何创建Cookie" class="headerlink" title="如何创建Cookie"></a>如何创建Cookie</h3><p>流程图如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200628225106869.png" align="left"/>

<h3 id="服务器如何获取Cookie"><a href="#服务器如何获取Cookie" class="headerlink" title="服务器如何获取Cookie"></a>服务器如何获取Cookie</h3><p>可以通过Request对象获得到所有的Cookie，返回的结果是一个Cookie数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure>

<p>要查找特定key的Cookie，可以编写一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据指定的name查找对应的Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cookies</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">getCookie</span><span class="params">(String name, Cookie[] cookies)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span> || cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> cookie;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Cookie值的修改"><a href="#Cookie值的修改" class="headerlink" title="Cookie值的修改"></a>Cookie值的修改</h3><p>想要修改一个Cookie，只需要在服务器中新创建一个name和原来的Cookie相同的Cookie，然后设置不同的值，将新创建的Cookie返回给浏览器。浏览器接收到之后会进行判断，如果对应name的Cookie已经存在，则使用新的value来更新这个Cookie；如果该Cookie不存在，则新建对应的Cookie。</p>
<h3 id="浏览器查看Cookie"><a href="#浏览器查看Cookie" class="headerlink" title="浏览器查看Cookie"></a>浏览器查看Cookie</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200629140022416.png" align="left"/>

<h3 id="Cookie生命控制"><a href="#Cookie生命控制" class="headerlink" title="Cookie生命控制"></a>Cookie生命控制</h3><p>Cookie也是存在生命周期的，默认情况下Cookie会在浏览器关闭后就消失。但这和我们平时使用网站的体验是不同的，网站上的记住用户名和密码功能通常可以存在一周的时间</p>
<p>为了控制Cookie的存在时间</p>
<p><code>setMaxAge()</code>：</p>
<ul>
<li>正数：表示在指定秒数过后过期</li>
<li>负数：表示浏览器以关闭，Cookie就会被删除（默认值是-1）</li>
<li>零：表示马上删除Cookie</li>
</ul>
<p><strong>浏览器关闭之后Cookie消失</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置Cookie在浏览器关闭之后消失</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = WebUtils.findCookie(<span class="string">"key1"</span>, req.getCookies());</span><br><span class="line">    cookie.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"Cookie会在浏览器关闭之后小时！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一小时之后删除Cookie</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一小时后删除Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">live3600</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = WebUtils.findCookie(<span class="string">"key1"</span>, req.getCookies());</span><br><span class="line">    cookie.setMaxAge(<span class="number">3600</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"Cookie会在3600秒之后消失"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>立即删除Cookie</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deleteNow</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = WebUtils.findCookie(<span class="string">"key1"</span>, req.getCookies());</span><br><span class="line">    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"Cookie删除成功！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Cookie的有效路径设置"><a href="#Cookie的有效路径设置" class="headerlink" title="Cookie的有效路径设置"></a>Cookie的有效路径设置</h3><p>如果发送给客户端的Cookie没有限制，那么就会导致一个浏览器在访问服务器时会将其所有的Cookie都发送给服务器。这很明显是不合理的。我们可以为Cookie设置有效路径。</p>
<p>Cookie的path属性可以有效的过滤哪些Cookie可以发送给服务器，哪些不发。path属性是通过请求地址来进行有效的过滤。</p>
<p><strong>示例</strong>：</p>
<p>CookieA                path=/工程路径</p>
<p>CookieB                path=/工程路径/abc</p>
<p>请求地址如下：</p>
<p><a href="http://localhost/工程路径/a.html" target="_blank" rel="noopener">http://localhost/工程路径/a.html</a></p>
<ul>
<li>CookieA发送</li>
<li>CookieB不发送</li>
</ul>
<p><a href="http://localhost/工程路径/abc/a.html" target="_blank" rel="noopener">http://localhost/工程路径/abc/a.html</a></p>
<ul>
<li>CookieA发送</li>
<li>CookieB发送</li>
</ul>
<p>Servlet程序代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试Cookie的path</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">testPath</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"path1"</span>, <span class="string">"path1"</span>);</span><br><span class="line"><span class="comment">//        cookie.setPath(req.getContextPath());</span></span><br><span class="line">    cookie.setPath( req.getContextPath() + <span class="string">"/abc"</span> );</span><br><span class="line"><span class="comment">//        cookie.setMaxAge(0);</span></span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"创建了一个带有Path路径的Cookie"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Cookie练习—记住用户名密码"><a href="#Cookie练习—记住用户名密码" class="headerlink" title="Cookie练习—记住用户名密码"></a>Cookie练习—记住用户名密码</h3><p><code>login.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src="js/jquery-3.5.1.js" type="text/javascript"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"请输入用户名"</span> value=<span class="string">"$&#123;cookie.username.value&#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"请输入密码"</span> value=<span class="string">"$&#123;cookie.password.value&#125;&#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"remember"</span> value=<span class="string">"remember"</span>/&gt;记住我&amp;emsp;&lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>LoginServlet.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决POST请求的中文乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//创建Cookie</span></span><br><span class="line">        Cookie usernameCookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>, username);</span><br><span class="line">        Cookie passwordCookie = <span class="keyword">new</span> Cookie(<span class="string">"password"</span>, password);</span><br><span class="line">        <span class="keyword">if</span> (req.getParameter(<span class="string">"remember"</span>).length() == <span class="number">0</span>) &#123;</span><br><span class="line">            usernameCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">            passwordCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//设置保存七天</span></span><br><span class="line">            <span class="keyword">int</span> expiry = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>;</span><br><span class="line">            usernameCookie.setMaxAge(expiry);</span><br><span class="line">            passwordCookie.setMaxAge(expiry);</span><br><span class="line">        &#125;</span><br><span class="line">        resp.addCookie(usernameCookie);</span><br><span class="line">        resp.addCookie(passwordCookie);</span><br><span class="line">        <span class="comment">//重定向到首页</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Session（重点）"><a href="#Session（重点）" class="headerlink" title="Session（重点）"></a>Session（重点）</h2><h3 id="什么是会话Session"><a href="#什么是会话Session" class="headerlink" title="什么是会话Session"></a>什么是会话Session</h3><ol>
<li>Session就是一个接口（HttpSession）</li>
<li>Session就是浏览器与服务器之间的会话，每个浏览器都有一个属于自己的Session</li>
<li>Session是一个域对象，我们可以在其中存储会话所需要的数据</li>
</ol>
<h3 id="如何创建Session"><a href="#如何创建Session" class="headerlink" title="如何创建Session"></a>如何创建Session</h3><p>HttpServletRequest中有一个方法：</p>
<p><code>HttpSession getSession()</code>可以用来创建或者获取Session对象。客户端发送所有的请求时都会带有一个name为JSESSIONID的Cookie，这个JSESSIONID唯一标识了这个浏览器，使用<code>getSession()</code>方法时会判断JSESSIONID是否存在于服务器的Session列表的id中，如果没有则新创建一个id为JESSIONID对应value的Session；如果存在，则直接获取这个Session对象。</p>
<p>下面是HttpSession类中的方法：</p>
<p><code>boolean isNew()</code>方法可以判断Session对象是否是新创建的</p>
<p><code>getId()</code>方法可以获取Session的ID（相当于人的身份证号码)，这个值和浏览器中的JSESSIONID的值相同</p>
<p><strong>示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSession</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取或者创建一个Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//输出session的id</span></span><br><span class="line">        System.out.println(session.getId());</span><br><span class="line">        <span class="comment">//输出JSESSIONID的值</span></span><br><span class="line">        System.out.println(WebUtils.getCookie(<span class="string">"JSESSIONID"</span>, req.getCookies()).getValue());</span><br><span class="line">        <span class="comment">//判断session是否为新创建的</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew()) &#123;</span><br><span class="line">            resp.getWriter().println(<span class="string">"新建了一个Session"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().println(<span class="string">"Session已存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Session域数据的存取"><a href="#Session域数据的存取" class="headerlink" title="Session域数据的存取"></a>Session域数据的存取</h3><p>session是四大域对象之一（page、request、session、application）</p>
<p>session域的范围是当前的会话</p>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取或者创建一个Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//向session域中保存数据</span></span><br><span class="line">    session.setAttribute(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">"已经向session域中保存了数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取或者创建一个Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//从session域中获取数据</span></span><br><span class="line">    String value = (String) session.getAttribute(<span class="string">"key1"</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">"从session域中获取到的数据为:"</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Session生命周期控制"><a href="#Session生命周期控制" class="headerlink" title="Session生命周期控制"></a>Session生命周期控制</h3><ul>
<li><code>public void setMaxInactiveInterval(int interval)</code>：设置Session的超时时间（以秒为单位），超过指定时长，Session就会被销毁。<ul>
<li>值为正数的时候，设定Session的超时时长</li>
<li>负数表示永不超时（极少使用）</li>
</ul>
</li>
<li><code>public int getMaxInactiveInterval()</code>：获取Session的超时时间</li>
<li><code>public void invalidate()</code>：让当前Session会话马上超时无效</li>
</ul>
<p>Session的默认超时时长是多少？</p>
<p>Session的默认的超时时长为30分钟。</p>
<p>因为在Tomcat服务器的配置文件<code>web.xml</code>中默认有以下的配置，它就表示了当前Tomcat服务器下所有的Session的默认超时时间：30分钟</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>可以在当前工程的<code>web.xml</code>文件中设置类似如上的配置，可以覆盖Session的默认超时时间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>20<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果只想修改个别Session的超时时长，就可以使用上面的API：<code>setMaxInactiveInterval(int interval)</code>来进行单独的设置。</p>
<p>Tips：session的超时是指客户端两次请求之间的时间超过了session的超时时长</p>
<h3 id="Session的钝化与活化"><a href="#Session的钝化与活化" class="headerlink" title="Session的钝化与活化"></a>Session的钝化与活化</h3><p><strong>钝化</strong>：当服务器正常关闭时,还存活着的session(在设置时间内没有销毁) 会随着服务器的关闭被以文件(“SESSIONS.ser”)的形式存储在tomcat 的work 目录下,这个过程叫做Session 的钝化。</p>
<p><strong>活化</strong>：当服务器再次正常开启时,服务器会找到之前的“SESSIONS.ser” 文件，从中恢复之前保存起来的Session 对象，这个过程叫做Session的活化。</p>
<p><strong>注意事项</strong>：</p>
<ul>
<li>想要随着Session而钝化的类必须实现Serializable接口</li>
<li>只有在服务器正常关闭的情况下Session才会被钝化为文件</li>
<li>被钝化的Session不会因为超过Session的超时时间而过期，这个文件会一直存在，等到服务器开启时才消失</li>
<li>多个Session钝化时，会被保存在一个文件中</li>
</ul>
<h3 id="为什么浏览器以关闭Session就消失了"><a href="#为什么浏览器以关闭Session就消失了" class="headerlink" title="为什么浏览器以关闭Session就消失了"></a>为什么浏览器以关闭Session就消失了</h3><p>因为浏览器关闭后，JSESSIONID这个Cookie就被销毁了（默认值是关闭浏览器时销毁），所以就找不到之前创建的Session了</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h3><p><strong>需求</strong>：实现用户登录成功后显示用户名，注销后重定向到首页并销毁session中的数据</p>
<p><code>login.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/hello?action=login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/hello?action=login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>Servlet中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户名密码</span></span><br><span class="line">    String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    <span class="comment">//保存到Session中</span></span><br><span class="line">    req.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="comment">//转发到登录成功页面</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">"/success.jsp"</span>).forward(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//获取user</span></span><br><span class="line">    User user = (User) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">//移除user</span></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">        session.removeAttribute(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重定向到登录页面</span></span><br><span class="line">    resp.sendRedirect(req.getContextPath() + <span class="string">"/login.jsp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="表单重复提交—验证码"><a href="#表单重复提交—验证码" class="headerlink" title="表单重复提交—验证码"></a>表单重复提交—验证码</h3><p>表单重复提交有三种常见的情况：</p>
<ol>
<li>提交完表单。服务器使用请求转发来进行页面跳转。这个时候，用户按下功能键F5刷新，就会发起最后一个的请求，从而造成表单重复提交的问题。<font color="red">解决方法：使用重定向来解决</font></li>
<li>用户正常提交服务器，但是由于网络延迟等原因，迟迟未收到服务器的响应，这个时候，用户以为提交失败，就会着急，然后多点了几次提交操作，也会造成表单的重复提交</li>
<li>用户正常提交服务器，服务器也没有网络延迟，但是提交完成后，用户回退浏览器，重新提交，也会造成表单的重复提交</li>
</ol>
<h3 id="谷歌kaptcha图片验证码的使用"><a href="#谷歌kaptcha图片验证码的使用" class="headerlink" title="谷歌kaptcha图片验证码的使用"></a>谷歌kaptcha图片验证码的使用</h3><p>谷歌验证码kaptcha使用步骤如下：</p>
<ol>
<li><p>添加kaptcha的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--kaptcha验证码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>在<code>web.xml</code>中配置用于生成验证码的Servlet程序</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/kaptcha.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在表单中使用img标签去显示验证码图片并使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8080/tmp/registServlet"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	验证码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width: 80px;"</span> <span class="attr">name</span>=<span class="string">"code"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/tmp/kaptcha.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 100px; 	height: 28px;"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务器获取谷歌生成的验证码和客户端发送过来的验证码比较使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取Session中的验证码</span></span><br><span class="line">    String token = (String) req.getSession().getAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line">    <span class="comment">//马上删除</span></span><br><span class="line">    req.getSession().removeAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line">    <span class="comment">//获取表单项的验证码</span></span><br><span class="line">    String code = req.getParameter(<span class="string">"code"</span>);</span><br><span class="line">    <span class="keyword">if</span> (token != <span class="keyword">null</span> &amp;&amp; token.equalsIgnoreCase(code)) &#123;</span><br><span class="line">        <span class="comment">//获取用户名参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="comment">//保存到数据库</span></span><br><span class="line">        System.out.println(<span class="string">"保存"</span> + username + <span class="string">"到数据库"</span>);</span><br><span class="line">        <span class="comment">//重定向到ok.jsp</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/ok.jsp"</span>).forward(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"请不要重复提交表单"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>验证码点击刷新功能的实现：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给验证码的图片，绑定单击事件</span></span><br><span class="line">$(<span class="string">"#code_img"</span>).click(function () &#123;</span><br><span class="line">	<span class="comment">// 在事件响应的function 函数中有一个this 对象。这个this 对象，是当前正在响应事件的dom 对象</span></span><br><span class="line">	<span class="comment">// src 属性表示验证码img 标签的图片路径。它可读，可写</span></span><br><span class="line">	<span class="comment">// alert(this.src);</span></span><br><span class="line">	<span class="comment">//?d=new Date()是为了兼容火狐浏览器，防止浏览器缓存</span></span><br><span class="line">	<span class="keyword">this</span>.src = <span class="string">"$&#123;basePath&#125;kaptcha.jpg?d="</span> + <span class="keyword">new</span> Date();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>DCL语言学习</title>
    <url>/2020/06/25/DCL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DCL语言学习"><a href="#DCL语言学习" class="headerlink" title="DCL语言学习"></a>DCL语言学习</h2><p>DCL：Data Control Language，数据控制语言，用于数据库权限管理</p>
<p>MySQL的账户信息保存在<code>mysql</code>这个数据库中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>



<h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><p>新创建的账户没有任何权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名@host <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br></pre></td></tr></table></figure>



<h3 id="修改账户名"><a href="#修改账户名" class="headerlink" title="修改账户名"></a>修改账户名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> 旧账户名@host <span class="keyword">TO</span> 新账户名;</span><br></pre></td></tr></table></figure>



<h3 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 账户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 账户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.* <span class="keyword">TO</span> 用户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">REMOVE 权限列表 ON 数据库.* FROM 用户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><p>必须使用<code>password()</code>函数进行加密</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> 用户名@host = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>);</span><br></pre></td></tr></table></figure>



<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li><code>用户名@host</code>也可以写成<code>用户名</code>，此时相当于<code>用户名@%</code>使用的是默认主机名</li>
<li>GRANT和REVOKE可在几个层次上控制访问权限<ul>
<li>整个服务器，使用 <code>GRANT ALL</code> 和<code>REVOKE ALL</code>；</li>
<li>整个数据库，使用 <code>ON database.*</code>；</li>
<li>特定的表，使用 <code>ON database.table</code>；</li>
<li>特定的列；</li>
<li>特定的存储过程。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DCL</tag>
      </tags>
  </entry>
  <entry>
    <title>DDL语言的学习</title>
    <url>/2020/06/24/DDL%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DDL语言的学习"><a href="#DDL语言的学习" class="headerlink" title="DDL语言的学习"></a>DDL语言的学习</h2><h3 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h3><h4 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h4><p><strong>创建库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名;</span><br></pre></td></tr></table></figure>

<p><strong>修改库</strong>（不推荐修改库）</p>
<p>修改库的字符集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集名称;</span><br></pre></td></tr></table></figure>

<p><strong>删除数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 数据库名;</span><br></pre></td></tr></table></figure>



<h4 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h4><p><strong>创建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 表名(</span><br><span class="line">    列名 列的类型[(长度) 约束]</span><br><span class="line">    ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建book表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>,<span class="comment">#书籍编号</span></span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>),<span class="comment">#书籍名称</span></span><br><span class="line">  price <span class="keyword">DOUBLE</span>,<span class="comment">#书籍价格</span></span><br><span class="line">  author_id <span class="built_in">INT</span>,<span class="comment">#作者编号</span></span><br><span class="line">  publish_date DATETIME<span class="comment">#书籍出版日期</span></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建author表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> author (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>,<span class="comment">#作者编号</span></span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span> (<span class="number">20</span>),<span class="comment">#作者姓名</span></span><br><span class="line">  nation <span class="built_in">VARCHAR</span> (<span class="number">20</span>) <span class="comment">#作者国籍</span></span><br><span class="line">) ;</span><br></pre></td></tr></table></figure>



<p><strong>表的修改</strong></p>
<ul>
<li><p>修改列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> [<span class="keyword">column</span>] 旧列名 新列名 列类型;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列类型或约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 类型和约束;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加新列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 新列名 类型和约束 [<span class="keyword">first</span>|<span class="keyword">after</span> 列名];</span><br></pre></td></tr></table></figure>

<p>可以将新列添加到第一列或者指定列的后面</p>
</li>
<li><p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 <span class="keyword">rename</span> [<span class="keyword">to</span>] 新表名;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><strong>表的删除</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 表名;</span><br></pre></td></tr></table></figure>



<p><strong>表的复制</strong></p>
<ol>
<li><p>复制表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">like</span> 要复制的表;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制表的结构外加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 </span><br><span class="line"><span class="keyword">select</span> 要复制的列 <span class="keyword">from</span> 要复制的表 </span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="常见数据类型介绍"><a href="#常见数据类型介绍" class="headerlink" title="常见数据类型介绍"></a>常见数据类型介绍</h3><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><p><font color="red">1、整型</font></p>
<ul>
<li><code>tinyint</code>：1字节</li>
<li><code>smallint</code>：2字节</li>
<li><code>mediumint</code>：3字节</li>
<li><code>int</code>或<code>integer</code>：4字节</li>
<li><code>bigint</code>：8字节</li>
</ul>
<p><strong>特点</strong>：</p>
<ol>
<li><p>如果不设置无符号还是有符号，默认是有符号，如果想要设置无符号，需要添加<code>unsigned</code>关键字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_int(</span><br><span class="line">	t1 <span class="built_in">int</span>, </span><br><span class="line">    t2 <span class="built_in">int</span> <span class="keyword">unsigned</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果插入的值超过了整型的临界值，则会给出一个警告，并插入整型的临界值</p>
</li>
<li><p>如果不设置长度，会有默认的长度</p>
<p>长度代表了<strong>显示</strong>的最大宽度，如果不够会用零在左边填充，但必须搭配<code>zerofill</code>填充，并且变为无符号整型</p>
</li>
</ol>
<p><font color="red">2、小数</font></p>
<ul>
<li>定点数<ul>
<li><code>dec(M, D)</code>或者<code>decimal(M, D)</code>：<code>M+2</code>个字节</li>
</ul>
</li>
<li>浮点数<ul>
<li><code>float(M, D)</code>：4字节</li>
<li><code>double(M, D)</code>：8字节</li>
</ul>
</li>
</ul>
<p><strong>特点</strong></p>
<ol>
<li><code>M</code>代表的是整数位数+小数位数，<code>D</code>代表小数位数</li>
<li><code>M</code>和<code>D</code>可以省略，如果是<code>decimal</code>则<code>M</code>默认为10，<code>D</code>默认为0，<code>float</code>和<code>double</code>会根据插入的值的精度来决定精度</li>
<li>定点型的精度比较高，如果要求插入的精度比较高则选择<code>decimal</code>，如银行货币等</li>
</ol>
<p><strong>原则</strong>：所选择的类型越简单越好，能保存的数值的类型越小越好</p>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><ul>
<li><p><strong>较短文本</strong></p>
<ul>
<li><p><code>char(M)</code>：最多M个字符（不是字节数），固定长度的字符，相对效率较高，M可以省略，默认为1</p>
</li>
<li><p><code>varchar(M)</code>：最多M个字符（不是字节数），可变长度的字符，相对效率较低，M不可以省略</p>
</li>
<li><p><code>binary</code>和<code>varbinary</code>：用于保存二进制字符串</p>
</li>
<li><p><code>Enum</code>类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> tab_char;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_char(</span><br><span class="line">	c1 ENUM(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">);</span><br><span class="line">DESC tab_char;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'d'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'A'</span>);<span class="comment">#不区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab_char;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Set</code>类型：里面可以保存0~64个元素，类型可以不同</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_set(</span><br><span class="line">    s1 <span class="keyword">SET</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">'c'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>较长的文本</strong></p>
<p><code>text</code>：长文本</p>
<p><code>blob</code>：长二进制文本（一般实际开发中不会把二进制的文件，例如图像、视频、音频等存入数据库中，存储的往往是它们的文件存储路径）</p>
</li>
</ul>
<h4 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h4><table>
<thead>
<tr>
<th align="center">日期和时间类型</th>
<th align="center">字节</th>
<th align="center">最小值</th>
<th align="center">最大值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>date</code></td>
<td align="center">4</td>
<td align="center">1000-01-01</td>
<td align="center">9999-12-31</td>
</tr>
<tr>
<td align="center"><code>datetime</code></td>
<td align="center">8</td>
<td align="center">1000-01-01 00:00:00</td>
<td align="center">9999-12-31 23:59:59</td>
</tr>
<tr>
<td align="center"><code>timestamp</code></td>
<td align="center">4</td>
<td align="center">19700101080001</td>
<td align="center">2038年的某个时刻</td>
</tr>
<tr>
<td align="center"><code>time</code></td>
<td align="center">3</td>
<td align="center">-838:59:59</td>
<td align="center">838:59:59</td>
</tr>
<tr>
<td align="center"><code>year</code></td>
<td align="center">1</td>
<td align="center">1901</td>
<td align="center">2155</td>
</tr>
</tbody></table>
<p><strong>区别</strong></p>
<ol>
<li>timestamp的取值范围较小，datetime的取值范围较大</li>
<li>timestamp和实际的时区有关，更能够反应实际的日期，而datetime则只能反映出插入时的当地时区</li>
<li>timestamp的属性受到<strong>MySQL版本</strong>和<strong>SQL Mode</strong>的影响很大</li>
</ol>
<h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><h4 id="约束的概念和分类"><a href="#约束的概念和分类" class="headerlink" title="约束的概念和分类"></a>约束的概念和分类</h4><p><strong>什么是约束？</strong></p>
<ul>
<li>为了保证<strong>数据的一致性和完整性</strong>，SQL规范以约束的方式对表数据进行<strong>额外的条件限制</strong></li>
<li>约束是表级的强制规定</li>
<li>可以在创建表时规定约束，也可以在修改表的时候修改或增加删除约束</li>
</ul>
<p><strong>约束的分类</strong></p>
<ul>
<li>非空约束：<code>not null</code>，规定某个字段不能为空</li>
<li>唯一约束：<code>unique</code>，规定某个字段在整个表中唯一</li>
<li>主键约束：<code>primary key</code>，主键（唯一且非空）</li>
<li>外键约束：<code>foreign key</code>，外键</li>
<li>检查约束：<code>check</code>，判断是否符合条件</li>
<li>默认约束：<code>default</code>，默认值</li>
</ul>
<p>MySQL不支持检查约束，虽然语法上不会报错，但是没有任何效果，具体细节可以参考W3Cschool手册</p>
<h4 id="列级约束和表级约束"><a href="#列级约束和表级约束" class="headerlink" title="列级约束和表级约束"></a>列级约束和表级约束</h4><ul>
<li>列级约束：每个约束只能作用在一个列上，跟在列的定义后面，六种约束都可以，但是外键约束没有效果</li>
<li>表级约束：可以作用在多个列上，单独定义，除了非空和默认都支持</li>
</ul>
<p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[constraint 约束名] 约束类型(字段) [references 表名(字段)]</span><br></pre></td></tr></table></figure>

<p><strong>通用写法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> major(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">1</span>), </span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>, </span><br><span class="line">seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>, </span><br><span class="line">majorid <span class="built_in">INT</span>, </span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(majorid) <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>列级约束和表级约束对比</strong></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">位置</th>
<th align="center">支持的约束类型</th>
<th align="center">是否可以起约束名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">列级约束</td>
<td align="center">列的后面</td>
<td align="center">语法都支持，但是外键没有效果</td>
<td align="center">不可以</td>
</tr>
<tr>
<td align="center">表级约束</td>
<td align="center">所有列的下面</td>
<td align="center">默认和非空不支持，其它都支持</td>
<td align="center">可以，但是主键没有效果</td>
</tr>
</tbody></table>
<p><strong>主键和唯一对比</strong></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">保证唯一性</th>
<th align="center">是否允许为空</th>
<th align="center">一个表中可以有多少个</th>
<th align="center">是否允许组合</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主键约束</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">至多一个</td>
<td align="center">√，不推荐</td>
</tr>
<tr>
<td align="center">唯一约束</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">可以有多个</td>
<td align="center">√，不推荐</td>
</tr>
</tbody></table>
<h4 id="外键的特点"><a href="#外键的特点" class="headerlink" title="外键的特点"></a>外键的特点</h4><ol>
<li>要求在从表设置外键关系</li>
<li>从表的外键列的类型和主表（引用的表）的关联列的类型要一致或兼容，名称没有要求</li>
<li>要求主表中的关联列必须是个key（一般是主键或者唯一键）</li>
<li>要求插入数据时，主表先插入数据，从表再插入数据；删除数据时，从表先删除数据，主表再删除数据</li>
</ol>
<h4 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h4><p><strong>列级约束的写法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 列类型 约束;</span><br></pre></td></tr></table></figure>

<p><strong>表级约束的写法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">add</span> [<span class="keyword">constraint</span> 约束名] 约束(字段) [<span class="keyword">references</span> 表名(字段)];</span><br></pre></td></tr></table></figure>



<h4 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 列类型;</span><br></pre></td></tr></table></figure>

<p><strong>删除主键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>

<p><strong>删除唯一约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">index</span> 约束名;</span><br></pre></td></tr></table></figure>

<p>可以通过<code>show index from 表名</code>来查询约束名</p>
<p><strong>删除外键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> 外键名;</span><br></pre></td></tr></table></figure>



<h4 id="标识列（自增长列）"><a href="#标识列（自增长列）" class="headerlink" title="标识列（自增长列）"></a>标识列（自增长列）</h4><p><strong>标识列</strong>：可以不用手动插入值，系统提供默认的序列值（从1开始）</p>
<p>使用示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> stu;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> stu(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'李四'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>

<p>MySQL中不支持设置标识列的起始值，但是可以通过如下方式设置增量值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> auto_increment_increment=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>但是一般不推荐修改</p>
<h4 id="级联操作（了解）"><a href="#级联操作（了解）" class="headerlink" title="级联操作（了解）"></a>级联操作（了解）</h4><p>在添加外键约束的最后加上，即可实现级联删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">on <span class="keyword">delete</span> <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure>

<p><strong>级联置空</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">on <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DDL</tag>
      </tags>
  </entry>
  <entry>
    <title>EL和JSTL</title>
    <url>/2020/06/30/EL%E5%92%8CJSTL/</url>
    <content><![CDATA[<h1 id="EL和JSTL"><a href="#EL和JSTL" class="headerlink" title="EL和JSTL"></a>EL和JSTL</h1><h2 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h2><h3 id="EL是什么，有什么作用"><a href="#EL是什么，有什么作用" class="headerlink" title="EL是什么，有什么作用"></a>EL是什么，有什么作用</h3><p>EL：Expression Language，表达式语言。</p>
<p><strong>作用</strong>：EL表达式是为了替代JSP页面中的表达式脚本在JSP页面中输出数据</p>
<p>相较于JSP表达式脚本，EL表达式就显得十分简洁</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setAttribute(<span class="string">"key"</span>, <span class="string">"值"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    表达式脚本输出key的值是:&lt;%=request.getAttribute(<span class="string">"key1"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:request.getAttribute(<span class="string">"key1"</span>)%&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    EL表达式输出key的值是:$&#123;key1&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>EL表达式的格式</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;表达式&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：EL表达式对于null值的显式十分友好，如果表达式的值为null，则会显式为空串，而不是像表达式脚本一样显示为null字符串</p>
<h3 id="EL表达式搜索域数据的顺序"><a href="#EL表达式搜索域数据的顺序" class="headerlink" title="EL表达式搜索域数据的顺序"></a>EL表达式搜索域数据的顺序</h3><p>pageContext&rightarrow;request&rightarrow;session&rightarrow;application</p>
<h3 id="EL表达式输出Bean的各种属性"><a href="#EL表达式输出Bean的各种属性" class="headerlink" title="EL表达式输出Bean的各种属性"></a>EL表达式输出Bean的各种属性</h3><p><code>Person.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] phones;<span class="comment">//数组属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; cities;<span class="comment">//List属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;<span class="comment">//Map属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phones="</span> + Arrays.toString(phones) +</span><br><span class="line">                <span class="string">", cities="</span> + cities +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getPhones() &#123;</span><br><span class="line">        <span class="keyword">return</span> phones;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhones</span><span class="params">(String[] phones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phones = phones;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getCities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCities</span><span class="params">(List&lt;String&gt; cities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cities = cities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String[] phones, List&lt;String&gt; cities, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phones = phones;</span><br><span class="line">        <span class="keyword">this</span>.cities = cities;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>普通属性、数组属性、List属性、集合属性的输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.zxw.pojo.Person"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Map"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.HashMap"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.setName(<span class="string">"张三丰"</span>);</span><br><span class="line">    person.setPhones(<span class="keyword">new</span> String[]&#123;<span class="string">"18688888888"</span>, <span class="string">"18695892461"</span>, <span class="string">"18269547896"</span>&#125;);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; cities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    cities.add(<span class="string">"北京"</span>);</span><br><span class="line">    cities.add(<span class="string">"上海"</span>);</span><br><span class="line">    cities.add(<span class="string">"广州"</span>);</span><br><span class="line">    person.setCities(cities);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">    map.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">    person.setMap(map);</span><br><span class="line"></span><br><span class="line">    pageContext.setAttribute(<span class="string">"p"</span>, person);</span><br><span class="line">%&gt;</span><br><span class="line">输出Person：$&#123; p &#125;&lt;br/&gt;</span><br><span class="line">输出Person的name属性：$&#123; p.name &#125;&lt;br/&gt;</span><br><span class="line">输出Person的phones数组属性值：$&#123; p.phones[<span class="number">0</span>] &#125;&lt;br/&gt;</span><br><span class="line">输出Person的cities集合中的元素值：$&#123; p.cities &#125;&lt;br/&gt;</span><br><span class="line">输出Person的cities集合中指定的元素值：$&#123; p.cities[<span class="number">0</span>] &#125;&lt;br/&gt;</span><br><span class="line">输出Person的Map属性：$&#123; p.map &#125;&lt;br/&gt;</span><br><span class="line">输出Person的Map集合中某个key的值：$&#123; p.map.key1 &#125;&lt;br/&gt;</span><br><span class="line">输出Person的age属性：$&#123; p.age &#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ol>
<li>EL表达式是通过域对象的name属性来访问的</li>
<li>EL表达式的属性由Bean对象的get方法决定而非属性名</li>
</ol>
<h3 id="EL表达式的运算"><a href="#EL表达式的运算" class="headerlink" title="EL表达式的运算"></a>EL表达式的运算</h3><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123; 运算符表达式 &#125;</span><br></pre></td></tr></table></figure>

<p>EL表达式支持如下运算符</p>
<h4 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h4><table>
<thead>
<tr>
<th align="center">关系运算符</th>
<th align="center">说明</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>==</code>或<code>eq</code></td>
<td align="center">等于</td>
<td align="center"><code>${ 5 == 5 }</code>或<code>${ 5 eq 5 }</code></td>
<td align="center">true</td>
</tr>
<tr>
<td align="center"><code>!=</code>或<code>ne</code></td>
<td align="center">不等于</td>
<td align="center"><code>${ 5 != 5 }</code>或<code>${ 5 ne 5 }</code></td>
<td align="center">false</td>
</tr>
<tr>
<td align="center"><code>&lt;</code>或<code>lt</code></td>
<td align="center">小于</td>
<td align="center"><code>${ 3 &lt; 5 }</code>或<code>${ 3 lt 5 }</code></td>
<td align="center">true</td>
</tr>
<tr>
<td align="center"><code>&gt;</code>或<code>gt</code></td>
<td align="center">大于</td>
<td align="center"><code>${ 2 &gt; 10 }</code>或<code>${ 2 gt 10 }</code></td>
<td align="center">false</td>
</tr>
<tr>
<td align="center"><code>&lt;=</code>或<code>le</code></td>
<td align="center">小于等于</td>
<td align="center"><code>${ 5 &lt;= 12 }</code>或<code>${ 5 le 12 }</code></td>
<td align="center">true</td>
</tr>
<tr>
<td align="center"><code>&gt;=</code>或<code>ge</code></td>
<td align="center">大于等于</td>
<td align="center"><code>${ 3 &gt;= 5 }</code>或<code>${ 3 ge 5 }</code></td>
<td align="center">false</td>
</tr>
</tbody></table>
<h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><table>
<thead>
<tr>
<th align="center">逻辑运算符</th>
<th align="center">说明</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&amp;&amp;</code>或<code>and</code></td>
<td align="center">与运算</td>
<td align="center"><code>${ 12 == 12 &amp;&amp; 12 &lt; 11 }</code>或<code>${ 12 == 12 and 12 &lt; 11 }</code></td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">`</td>
<td align="center"></td>
<td align="center"><code>或</code>or`</td>
<td align="center">或运算</td>
</tr>
<tr>
<td align="center"><code>!</code>或<code>not</code></td>
<td align="center">取反运算</td>
<td align="center"><code>${ !true }</code>或<code>${ not true }</code></td>
<td align="center">false</td>
</tr>
</tbody></table>
<h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><table>
<thead>
<tr>
<th align="center">算术运算符</th>
<th align="center">说明</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>+</code></td>
<td align="center">加法</td>
<td align="center"><code>${12 + 18 }</code></td>
<td align="center">30</td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td align="center">减法</td>
<td align="center"><code>${ 18 - 12 }</code></td>
<td align="center">6</td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">乘法</td>
<td align="center"><code>${ 2 * 3 }</code></td>
<td align="center">6</td>
</tr>
<tr>
<td align="center"><code>/</code>或<code>div</code></td>
<td align="center">除法</td>
<td align="center"><code>${ 6 / 3 }</code>或<code>${ 6 div 3}</code></td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"><code>%</code>或<code>mod</code></td>
<td align="center">取模</td>
<td align="center"><code>${ 7 % 3 }</code>或<code>${ 7 mod 3 }</code></td>
<td align="center">1</td>
</tr>
</tbody></table>
<h4 id="empty运算"><a href="#empty运算" class="headerlink" title="empty运算"></a>empty运算</h4><p>empty运算可以判断一个数据是否为空，如果为空，则输出true，不为空输出false。</p>
<p>以下几种情况为空：</p>
<ol>
<li>值为null的时候，为空</li>
<li>值为空串的时候，为空</li>
<li>值是Object类型数组，长度为零的时候</li>
<li>list集合，元素个数为零</li>
<li>map集合，元素个数为零</li>
</ol>
<h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表达式1 ? 表达式2 : 表达式3</span><br></pre></td></tr></table></figure>

<p>如果表达式1的值为真，返回表达式2的值，否则返回表达式3的值</p>
<h4 id="点运算和-中括号运算符"><a href="#点运算和-中括号运算符" class="headerlink" title=".点运算和[]中括号运算符"></a><code>.</code>点运算和<code>[]</code>中括号运算符</h4><p><code>.</code>点运算，可以输出Bean对象中某个属性的值</p>
<p><code>[]</code>中括号运算，可以输出有序集合中某个元素的值。</p>
<p>并且<code>[]</code>中括号运算，还可以输出map集合中key里含有特殊字符的key的值</p>
<p><strong>代码示例</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"a.a.a"</span>, <span class="string">"aaaValue"</span>);</span><br><span class="line">    map.put(<span class="string">"b+b+b"</span>, <span class="string">"bbbValue"</span>);</span><br><span class="line">    map.put(<span class="string">"c-c-c"</span>, <span class="string">"cccValue"</span>);</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; map[<span class="string">'a.a.a'</span>] &#125;&lt;br/&gt;</span><br><span class="line">$&#123; map[<span class="string">'b+b+b'</span>] &#125;&lt;br/&gt;</span><br><span class="line">$&#123; map[<span class="string">'c-c-c'</span>] &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h3 id="EL表达式的11个隐含对象"><a href="#EL表达式的11个隐含对象" class="headerlink" title="EL表达式的11个隐含对象"></a>EL表达式的11个隐含对象</h3><p>EL表达式中11个隐含对象，是EL表达式中自己定义的，可以直接使用</p>
<p><strong>pageContext</strong></p>
<ul>
<li>pageContext：PageContextImpl类型对象，可以获取JSP中的九大内置对象</li>
</ul>
<p><strong>四大域对象相关</strong></p>
<ul>
<li>pageScope：Map&lt;String, Object&gt;类型对象，可以获取pageContext域中的数据</li>
<li>requestScope：Map&lt;String, Object&gt;类型对象，可以获取request域中的数据</li>
<li>sessionScope：Map&lt;String, Object&gt;类型对象，可以获取session域中的数据</li>
<li>applicationScope：Map&lt;String, Object&gt;类型对象，可以获取application域中的数据</li>
</ul>
<p><strong>请求参数相关</strong></p>
<ul>
<li>param：Map&lt;String, String&gt;类型对象，可以获取请求参数的值</li>
<li>paramValues：Map&lt;String, String[]&gt;，可以获取多个值的请求参数</li>
</ul>
<p><strong>请求头相关</strong></p>
<ul>
<li>header：Map&lt;String, String&gt;类型对象，可以获取请求头的值</li>
<li>headerValues：Map&lt;String, String[]&gt;类型对象，可以获取具有多个值的请求头</li>
</ul>
<p><strong>cookiie</strong></p>
<ul>
<li>cookie：Map&lt;String, Cookie&gt;类型，获取当前请求中的cookie信息</li>
</ul>
<p><strong>initParam</strong>：</p>
<ul>
<li>initParam：Map&lt;String, String&gt;类型，它可以获取<code>web.xml</code>中配置的<code>&lt;context-param&gt;</code>中的参数</li>
</ul>
<p><strong>pageContext对象的使用</strong></p>
<ol>
<li>获取协议</li>
<li>服务器IP</li>
<li>服务器端口号</li>
<li><font color="red">获取工程路径</font></li>
<li>获取请求方法</li>
<li>获取客户端IP</li>
<li>获取会话的id编号</li>
</ol>
<p><strong>使用示例</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--</span><br><span class="line"><span class="number">1</span>. 协议：reqeust.getScheme()</span><br><span class="line"><span class="number">2</span>. 服务器IP或域名:request.getServerName()</span><br><span class="line"><span class="number">3</span>. 服务器端口:request.getServerPort()</span><br><span class="line"><span class="number">4</span>. 获取工程路径:request.getContextPath()</span><br><span class="line"><span class="number">5</span>. 获取请求方法:request.getMethod();</span><br><span class="line"><span class="number">6</span>. 获取客户端ip地址:request.getRemoteHost()</span><br><span class="line"><span class="number">7</span>. 获取会话的id编号:session.getId()</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"req"</span>, request);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=request.getScheme()%&gt;&lt;br/&gt;</span><br><span class="line"><span class="number">1</span>. 协议:$&#123; req.scheme &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">2</span>. 服务器IP:$&#123; pageContext.request.serverName &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">3</span>. 服务器端口:$&#123; pageContext.request.serverPort &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">4</span>. 获取工程路径:$&#123; pageContext.request.contextPath &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">5</span>. 获取请求方法:$&#123; pageContext.request.method &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">6</span>. 获取客户端ip地址:$&#123; pageContext.request.remoteHost &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">7</span>. 获取会话的id编号:$&#123; pageContext.session.id &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h2 id="JSTL（重点）"><a href="#JSTL（重点）" class="headerlink" title="JSTL（重点）"></a>JSTL（重点）</h2><p><strong>JSTL</strong>：JSP Standard Tag Library，即JSP标准标签库。这是一个不断完善的开源JSP标签库</p>
<p><strong>作用</strong>：替换JSP中的代码脚本，使得整个JSP页面变得更加简洁</p>
<p>JSTL由五个不同功能的标签库组成：</p>
<table>
<thead>
<tr>
<th align="center">功能范围</th>
<th align="center">URI</th>
<th align="center">前缀</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="red">核心标签库</font>（重点）</td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a></td>
<td align="center"><font color="red">c</font></td>
</tr>
<tr>
<td align="center">格式化</td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/fmt" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/fmt</a></td>
<td align="center">fmt</td>
</tr>
<tr>
<td align="center">函数</td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/functions</a></td>
<td align="center">fn</td>
</tr>
<tr>
<td align="center">数据库<font color="red">(不使用)</font></td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/sql" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/sql</a></td>
<td align="center">sql</td>
</tr>
<tr>
<td align="center">XML<font color="red">(不使用)</font></td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/xml" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/xml</a></td>
<td align="center">x</td>
</tr>
</tbody></table>
<p>在JSP中标签库需要使用<code>taglib</code>指令引入</p>
<p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"前缀名"</span> uri=<span class="string">"标签库的uri"</span> %&gt;</span><br></pre></td></tr></table></figure>



<h3 id="JSTL的使用步骤"><a href="#JSTL的使用步骤" class="headerlink" title="JSTL的使用步骤"></a>JSTL的使用步骤</h3><ol>
<li><p>引入JSTL的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用taglib指令引入对应的标签库（以核心标签库为例）</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="core核心库使用"><a href="#core核心库使用" class="headerlink" title="core核心库使用"></a>core核心库使用</h3><h4 id="c-set（很少使用）"><a href="#c-set（很少使用）" class="headerlink" title="c:set（很少使用）"></a><code>c:set</code>（很少使用）</h4><p><strong>作用</strong>：往域对象中保存数据</p>
<p><strong>属性</strong>：</p>
<ul>
<li>scope：保存的域<ul>
<li><code>page</code>：pageContext域</li>
<li><code>request</code>：request域</li>
<li><code>session</code>：session域</li>
<li><code>application</code>：ServletContext域</li>
</ul>
</li>
<li>var：属性的key</li>
<li>value：属性的值</li>
</ul>
<p><strong>代码示例</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">保存之前:$&#123; sessionScope.abc &#125;&lt;br/&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">"session"</span> <span class="keyword">var</span>=<span class="string">"abc"</span> value=<span class="string">"abcValue"</span>/&gt;</span><br><span class="line">保存之后:$&#123; sessionScope.abc &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h4 id="c-if"><a href="#c-if" class="headerlink" title="c:if"></a><code>c:if</code></h4><p><strong>作用</strong>：if判断</p>
<p><strong>属性</strong>：</p>
<ul>
<li>test：表示判断的条件（用EL表达式）</li>
</ul>
<p><strong>示例代码</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; 12 == 12 &#125;"</span>&gt;</span><br><span class="line">    &lt;h1&gt;12等于12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; 12 != 12 &#125;"</span>&gt;</span><br><span class="line">    &lt;h1&gt;12不等于12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h4 id="c-choose、c-when、c-otherwise"><a href="#c-choose、c-when、c-otherwise" class="headerlink" title="c:choose、c:when、c:otherwise"></a><code>c:choose</code>、<code>c:when</code>、<code>c:otherwise</code></h4><p><strong>作用</strong>：多路判断，类似于if..else if…else</p>
<p><strong>注意</strong>：</p>
<ol>
<li>标签里不能使用HTML注释，要使用JSP注释</li>
<li>when标签的父标签一定要是choose标签</li>
</ol>
<p><strong>示例代码</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">"grade"</span>, <span class="number">59</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test="$&#123; grade &gt;= 90 &#125;"&gt;优&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="$&#123; grade &gt;= 80 &#125;"&gt;良&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="$&#123; grade &gt;= 60 &#125;"&gt;及格&lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;不及格&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h4 id="c-forEach"><a href="#c-forEach" class="headerlink" title="c:forEach"></a><code>c:forEach</code></h4><p><strong>作用</strong>：遍历输出使用</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>begin</code>：开始索引</li>
<li><code>end</code>：结束索引</li>
<li><code>var</code>：表示循环的变量，也是当前正在遍历到的数据</li>
<li><code>step</code>：表示每次增长的量</li>
<li><code>items</code>：表示当前遍历的数据源</li>
<li><code>varStatus</code>：表示当前遍历到的数据的状态，有如下属性<ul>
<li>step：步长（每次的增长量）</li>
<li>begin：开始索引</li>
<li>end：结束索引</li>
<li>count：当前是正在遍历的第几个元素</li>
<li>current：当前遍历的对象</li>
<li>first：对应<code>isFirst()</code>，是否为第一个元素</li>
<li>last：对应<code>isLast()</code>，是否为最后一个元素</li>
<li>index：索引</li>
</ul>
</li>
</ul>
<h5 id="遍历1到10，输出"><a href="#遍历1到10，输出" class="headerlink" title="遍历1到10，输出"></a>遍历1到10，输出</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line"><span class="number">1</span>.遍历<span class="number">1</span> 到<span class="number">10</span>，输出</span><br><span class="line">begin 属性设置开始的索引</span><br><span class="line">end 属性设置结束的索引</span><br><span class="line"><span class="keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> <span class="keyword">var</span>=<span class="string">"i"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;i&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>



<h5 id="遍历Object数组"><a href="#遍历Object数组" class="headerlink" title="遍历Object数组"></a>遍历Object数组</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">遍历对象数组</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">"arr"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"123456"</span>, <span class="string">"654321"</span>, <span class="string">"abcdefg"</span>&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123; requestScope.arr &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span>&gt;</span><br><span class="line">    &lt;h1&gt;$&#123; item &#125;&lt;/h1&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>



<h5 id="遍历Map集合"><a href="#遍历Map集合" class="headerlink" title="遍历Map集合"></a>遍历Map集合</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">遍历Map</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">"北京"</span>);</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">"上海"</span>);</span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">"广州"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123; requestScope.map &#125;"</span> <span class="keyword">var</span>=<span class="string">"entry"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123; entry.key &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; entry.value &#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>



<h5 id="遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息"><a href="#遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息" class="headerlink" title="遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息"></a>遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">遍历List&lt;Student&gt;，其中student有id、username、password、age、phone属性</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = i + <span class="number">1</span>;</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(t, <span class="string">"student"</span> + t, <span class="string">"abcdef"</span> + t, <span class="number">18</span> + t, <span class="string">"1899876041"</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(<span class="string">"students"</span>, students);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;电话&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123; requestScope.students &#125;"</span> <span class="keyword">var</span>=<span class="string">"student"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.id &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.username &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.password &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.age &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.phone &#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>EL</tag>
        <tag>JSTL</tag>
      </tags>
  </entry>
  <entry>
    <title>DML语言学习</title>
    <url>/2020/06/22/DML%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DML语言学习"><a href="#DML语言学习" class="headerlink" title="DML语言学习"></a>DML语言学习</h2><p>DML：Data Manipulation Language，数据操纵语言，用于数据的<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code></p>
<h3 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h3><p><strong>语法</strong>：</p>
<blockquote>
<p>方式一：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名,...) <span class="keyword">values</span>(值<span class="number">1</span>,...);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>,...);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式二：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">set</span> 列名=值,...,列名=值;</span><br></pre></td></tr></table></figure>

<p><strong>两种方式的比较</strong>：</p>
<ol>
<li><p>方式一支持插入多条数据，而方式二不支持</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(<span class="keyword">id</span>, <span class="keyword">name</span>, age)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1001</span>, <span class="string">'张三'</span>, <span class="number">20</span>), (<span class="number">1002</span>, <span class="string">'李四'</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式一还支持子查询，方式二不支持</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(<span class="keyword">id</span>, <span class="keyword">name</span>, age) </span><br><span class="line"><span class="keyword">select</span> <span class="number">1001</span>, <span class="string">'张三'</span>, <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>要求</strong>：</p>
<ol>
<li>插入的值的类型要与列的类型一致或兼容</li>
<li>不可以为null的列必须插入值，可以为null的列如果不想插入值有两种方式<ul>
<li>插入null</li>
<li>在给出的列中去掉这个可以为null的列</li>
</ul>
</li>
<li>列的顺序可以颠倒，只要和插入的值一一对应即可</li>
<li>列和值的个数必须保持一致</li>
<li>可以省略列名，默认为所有列名，而且列的顺序和表中列的顺序一致</li>
</ol>
<h3 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h3><h4 id="修改单表的记录"><a href="#修改单表的记录" class="headerlink" title="修改单表的记录"></a>修改单表的记录</h4><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 							//<span class="number">1</span></span><br><span class="line"><span class="keyword">set</span> 列=新值,...列=新值 				 //<span class="number">3</span></span><br><span class="line"><span class="keyword">where</span> 筛选条件;						  //2</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> stu </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'王五'</span>, age=<span class="number">30</span> </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1001</span>;</span><br></pre></td></tr></table></figure>



<h4 id="修改多表的记录（级联更新）"><a href="#修改多表的记录（级联更新）" class="headerlink" title="修改多表的记录（级联更新）"></a>修改多表的记录（级联更新）</h4><p><strong>SQL92语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名<span class="number">1</span>, 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">set</span> 列=值,...,列=值 </span><br><span class="line"><span class="keyword">where</span> 连接条件 </span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<p><strong>SQL99语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">on</span> 连接条件 </span><br><span class="line"><span class="keyword">set</span> 列=值,...,列=值 </span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>



<h3 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h3><p><strong>语法</strong></p>
<p>单表删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<p>多表删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL92</span></span><br><span class="line"><span class="keyword">delete</span> 别名<span class="number">1</span>, 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span>, 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">where</span> 连接条件 </span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL99</span></span><br><span class="line"><span class="keyword">delete</span> 别名<span class="number">1</span>, 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">inner</span>|<span class="keyword">left</span>|<span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">on</span> 连接条件 </span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<p><strong>清空表</strong></p>
<p>清空数据，实际上是删除这个表，然后再创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>



<p><strong>delete和truncate的区别</strong>：</p>
<ol>
<li>delete可以加where条件语句，truncate不可以</li>
<li>truncate删除的效率高一点</li>
<li>如果存在自增长列，delete后插入会继续增加，而truncate后再插入则会从1开始</li>
<li>truncate删除没有返回值，delete删除会返回受影响的记录数</li>
<li>truncate不能回滚，delete可以回滚</li>
</ol>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>运行以下SQL语句，创建my_employees和users表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_employees (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> (<span class="number">10</span>),</span><br><span class="line">  frist_name <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  last_name <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  user_id <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  salary <span class="keyword">DOUBLE</span> (<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">  user_id <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  department_id <span class="built_in">INT</span></span><br><span class="line">) ;</span><br></pre></td></tr></table></figure>

<p>1、显示my_employees的表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DESC my_employees;</span><br></pre></td></tr></table></figure>

<p>2、向my_employees表中插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_employees </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">'patel'</span>, <span class="string">'Ralph'</span>, <span class="string">'Rpatel'</span>, <span class="number">895</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">'Dancs'</span>, <span class="string">'Betty'</span>, <span class="string">'Bdancs'</span>, <span class="number">860</span>), </span><br><span class="line">(<span class="number">3</span>, <span class="string">'Biri'</span>, <span class="string">'Ben'</span>, <span class="string">'Bbiri'</span>, <span class="number">1100</span>), </span><br><span class="line">(<span class="number">4</span>, <span class="string">'Newman'</span>, <span class="string">'Chad'</span>, <span class="string">'Cnewman'</span>, <span class="number">750</span>), </span><br><span class="line">(<span class="number">5</span>, <span class="string">'Ropeburn'</span>, <span class="string">'Audrey'</span>, <span class="string">'Aropebur'</span>, <span class="number">1550</span>);</span><br></pre></td></tr></table></figure>

<p>3、向user表中插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">'Rpatel'</span>, <span class="number">10</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">'Bdancs'</span>, <span class="number">10</span>), </span><br><span class="line">(<span class="number">3</span>, <span class="string">'Bbiri'</span>, <span class="number">20</span>), </span><br><span class="line">(<span class="number">4</span>, <span class="string">'Cnewman'</span>, <span class="number">30</span>), </span><br><span class="line">(<span class="number">5</span>, <span class="string">'Aropebur'</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure>

<p>4、将3号员工的last_name修改为“drelxer”</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> </span><br><span class="line">  my_employees </span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  last_name = <span class="string">'drelxer'</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">3</span> ;</span><br></pre></td></tr></table></figure>

<p>5、将所有工资少于900的员工的工资修改为1000</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> </span><br><span class="line">  my_employees </span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  salary = <span class="number">1000</span> </span><br><span class="line"><span class="keyword">WHERE</span> salary &lt; <span class="number">900</span> ;</span><br></pre></td></tr></table></figure>

<p>6、将userid 为Bbiri的user表和my_employees表的记录全部删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line">  u,</span><br><span class="line">  e </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">users</span> u </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_employees e </span><br><span class="line">    <span class="keyword">ON</span> u.user_id = e.user_id </span><br><span class="line"><span class="keyword">WHERE</span> u.user_id = <span class="string">'Bbiri'</span> ;</span><br></pre></td></tr></table></figure>

<p>7、删除所有表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_employees;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure>

<p>8、清空表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> my_employees;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2020/06/27/HTTP/</url>
    <content><![CDATA[<p>HTTP相关内容转至<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP</title>
    <url>/2020/06/30/JSP/</url>
    <content><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="JSP是什么，有什么作用"><a href="#JSP是什么，有什么作用" class="headerlink" title="JSP是什么，有什么作用"></a>JSP是什么，有什么作用</h2><p>JSP：Java Server Page，Java服务器页面。</p>
<p><strong>作用</strong>：JSP的主要作用就是替代Servlet程序回传HTML页面的数据</p>
<p>使用Servlet来回传HTML页面，就是在Java程序中写HTML，这既不合适，也不方便。</p>
<h2 id="JSP的本质"><a href="#JSP的本质" class="headerlink" title="JSP的本质"></a>JSP的本质</h2><p>JSP本质上还是一个Servlet程序！！！</p>
<p>当<strong>第一次访问</strong>JSP页面时，Tomcat服务器会帮我们把jsp页面翻译成一个Java源文件，并将它编译成为<code>.class</code>字节码文件</p>
<h2 id="JSP的三种语法"><a href="#JSP的三种语法" class="headerlink" title="JSP的三种语法"></a>JSP的三种语法</h2><h3 id="JSP头部的page指令"><a href="#JSP头部的page指令" class="headerlink" title="JSP头部的page指令"></a>JSP头部的page指令</h3><p>jsp的page指令可以修改jsp页面中一些重要的属性，或行为。</p>
<ul>
<li><code>language</code>属性：表示jsp翻译后是什么语言文件，暂时只支持Java</li>
<li><code>contentType</code>属性：表示jsp返回的数据类型是什么。也是源码中<code>response.setContentType()</code>的参数值</li>
<li><code>pageEncoding</code>属性：表示当前jsp页面文件本身的字符集</li>
<li><code>import</code>属性：跟Java源代码中一样，用于导包，导类</li>
</ul>
<p>下面两个属性是给输出流使用的：</p>
<ul>
<li><code>autoFlush</code>属性：设置out输出流缓冲区满了之后，是否自动刷新缓冲区，默认值为true</li>
<li><code>buffer</code>属性：设置out缓冲区的大小，默认为<strong>8kb</strong></li>
<li><code>errorPage</code>属性：设置当前jsp页面运行时出错，自动跳转去的错误页面路径</li>
</ul>
<blockquote>
<p>errorPage表示错误后自动跳转去的路径</p>
<p>这个路径一般都是斜杠打头，它表示请求地址为：<a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a></p>
</blockquote>
<ul>
<li><code>isErrorPage</code>属性：设置当前jsp页面是否是错误页面信息，默认值是false。如果为true，则可以获取异常信息</li>
<li><code>session</code>属性：设置访问当前jsp页面，是否会创建HttpSession对象，默认为true</li>
<li><code>extends</code>属性：设置jsp翻译出来的Java类默认继承谁</li>
</ul>
<h3 id="JSP中的常用脚本"><a href="#JSP中的常用脚本" class="headerlink" title="JSP中的常用脚本"></a>JSP中的常用脚本</h3><h4 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h4><p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%! 声明java代码 %&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：可以给jsp翻译出来的Java类定义<strong>属性</strong>和<strong>方法</strong>甚至是静态代码块、内部类等。</p>
<h4 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h4><p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%=表达式%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：在jsp页面上输出数据</p>
<p><strong>特点</strong>：</p>
<ol>
<li>所有表达式脚本都会被翻译到<code>_jspService()</code>方法中</li>
<li>表达式脚本都会被翻译成为<code>out.println()</code>输出到页面上</li>
<li>由于表达式脚本翻译的内容都在<code>_jspService()</code>方法中，所以<code>_jspService()</code>方法中的对象都可以直接使用</li>
<li>表达式脚本中的表达式<strong>不能</strong>以分号结尾</li>
</ol>
<p>后面会介绍EL表达式，其作用就是为了替代表达式脚本</p>
<h4 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h4><p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	Java代码</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：可以在代码脚本中编写Java语句</p>
<p><strong>特点</strong>：</p>
<ol>
<li>代码脚本翻译之后都在<code>_jspService()</code>方法中</li>
<li>代码脚本中可以使用<code>_jspService()</code>中定义的所有对象</li>
<li>可以由多个代码脚本组合使用</li>
<li>代码脚本可以和表达式脚本组合使用，用于在jsp页面上输出数据</li>
</ol>
<h3 id="JSP的三种注释"><a href="#JSP的三种注释" class="headerlink" title="JSP的三种注释"></a>JSP的三种注释</h3><h4 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是HTML注释 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML注释会被翻译到Java源代码中。在<code>_jspService</code>方法里，以<code>out.write</code>输出到客户端</p>
<h4 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行Java注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行Java注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档Java注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>Java注释会被翻译到Java源代码中</p>
<h4 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- 这是jsp注释 --&gt;</span><br></pre></td></tr></table></figure>

<p>jsp注释可以注释掉，jsp页面中的所有代码（只在jsp中有效，不会被翻译到Java源代码中）</p>
<h2 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h2><p>&emsp;jsp中的内置对象，是指Tomcat在翻译jsp成为Servlet源码后，内部提供的九大对象，叫内置对象（一般只有8个，对于errorPage=“true”的页面多一个），如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200430155111671.png" align="left"/>

<p><strong>JSP的九大内置对象如下表所示</strong></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PageContext pageContext</td>
<td align="center">jsp的上下文对象</td>
</tr>
<tr>
<td align="center">Object page = this</td>
<td align="center">指向当前jsp对象</td>
</tr>
<tr>
<td align="center">HttpServletRequest request</td>
<td align="center">请求对象</td>
</tr>
<tr>
<td align="center">HttpServletResponse response</td>
<td align="center">响应对象</td>
</tr>
<tr>
<td align="center">JspWriter out</td>
<td align="center">jsp输出流对象</td>
</tr>
<tr>
<td align="center">HttpSession session</td>
<td align="center">会话对象</td>
</tr>
<tr>
<td align="center">ServletContext application</td>
<td align="center">Servlet上下文对象</td>
</tr>
<tr>
<td align="center">ServletConfig config</td>
<td align="center">Servlet配置对象</td>
</tr>
<tr>
<td align="center">Throwable exception</td>
<td align="center">异常对象</td>
</tr>
</tbody></table>
<h2 id="JSP四大域对象"><a href="#JSP四大域对象" class="headerlink" title="JSP四大域对象"></a>JSP四大域对象</h2><ul>
<li><code>pageContext</code>：PageContext类，当前JSP页面范围有效</li>
<li><code>request</code>：HttpServletRequest类，当前请求有效</li>
<li><code>session</code>：HttpSession类，当前会话有效</li>
<li><code>application</code>：ServletContext类，整个Web工程中有效</li>
</ul>
<p>四大域对象根据范围从小到达的顺序是：</p>
<p>pageContext&rightarrow;request&rightarrow;session&rightarrow;application</p>
<p>如果不显式指明，则查询的顺序也是从小到大的</p>
<h2 id="JSP中out输出和response-getWriter-输出的区别"><a href="#JSP中out输出和response-getWriter-输出的区别" class="headerlink" title="JSP中out输出和response.getWriter()输出的区别"></a>JSP中<code>out</code>输出和<code>response.getWriter()</code>输出的区别</h2><p>reponse中表示响应，我们经常用于设置返回给客户端的内容（输出）</p>
<p>out也是给用户输出使用的</p>
<p><code>output.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: zxw</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">30</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">01</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;output&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.write(<span class="string">"out输出1"</span>);</span><br><span class="line">    out.write(<span class="string">"out输出2"</span>);</span><br><span class="line">    response.getWriter().write(<span class="string">"response输出1"</span>);</span><br><span class="line">    response.getWriter().write(<span class="string">"response输出2"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>结果发现：即使使用out先输出，显示在页面上时也会在使用response.getWriter()的后面</p>
<p><strong>那么为什么会出现这种情况？</strong></p>
<p>![image-20200430171141403](C:/Users/zxw/Desktop/Java Web/08-jsp/jsp.assets/image-20200430171141403.png)</p>
<p>因为当JSP页面中所有代码执行完成后会做以下两个操作：</p>
<ol>
<li>执行<code>out.flush()</code>操作，会把out缓冲区的数据<strong>追加写入到response缓冲区末尾</strong></li>
<li>会执行<code>response.getWrtier()</code>的刷新操作，把全部数据写给客户端</li>
</ol>
<p>所以会出现，out输出的内容在response输出内容后面的情况</p>
<p>由于jsp翻译之后，底层源代码都是使用out来进行输出，所以一般情况下。我们在jsp页面中统一使用out来进行输出。避免打乱页面输出内容的顺序。</p>
<p><code>out.write()</code>输出字符串没有问题</p>
<p><code>out.print()</code>输出任意数据都没有问题（都转换成字符串后调用的write输出）</p>
<p><font color="red">结论：在jsp页面中，可以同一使用<code>out.print()</code>来进行输出</font></p>
<h2 id="JSP的常用标签"><a href="#JSP的常用标签" class="headerlink" title="JSP的常用标签"></a>JSP的常用标签</h2><h3 id="JSP静态包含"><a href="#JSP静态包含" class="headerlink" title="JSP静态包含"></a>JSP静态包含</h3><p>可以实现一个jsp页面的多次复用</p>
<p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">""</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>file属性指定你要包含的jsp页面的路径</p>
<p>地址中的第一个斜杠<code>/</code>表示为<a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a> 映射到代码的web目录</p>
<p><strong>静态包含的特点</strong>：</p>
<ol>
<li>静态包含不会翻译被包含的jsp页面</li>
<li>静态包含其实就是把被包含的jsp页面代码拷贝到包含的位置执行输出（使用<code>out.write()</code>）</li>
</ol>
<p>示例说明：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"/include/footer.jsp"</span> %&gt;</span><br></pre></td></tr></table></figure>



<h3 id="JSP动态包含"><a href="#JSP动态包含" class="headerlink" title="JSP动态包含"></a>JSP动态包含</h3><p><strong>格式</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=""&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>

<p>page属性指定你要包含的jsp页面路径</p>
<p>动态包含也可以像静态包含一样，把被包含的内容执行输出到包含位置</p>
<p><strong>动态包含的特点</strong>：</p>
<ol>
<li><p>动态包含会把包含的jsp页面也翻译成Java代码</p>
</li>
<li><p>动态包含底层代码使用如下代码去调用被包含jsp页面执行输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JspRuntimeLibrary.include(request, response, <span class="string">"/include/footer.jsp"</span>, out, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态包含还可以传递参数</p>
</li>
</ol>
<p><strong>使用示例</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"/include/footer.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"username"</span> value=<span class="string">"张三"</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>

<p>获取参数：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">username:&lt;%=request.getParameter(<span class="string">"username"</span>)%&gt;&lt;br/&gt;</span><br><span class="line">password:&lt;%=request.getParameter(<span class="string">"password"</span>)%&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="JSP转发"><a href="#JSP转发" class="headerlink" title="JSP转发"></a>JSP转发</h3><p><strong>格式</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page="页面路径"&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>



<h2 id="JSP练习题"><a href="#JSP练习题" class="headerlink" title="JSP练习题"></a>JSP练习题</h2><h3 id="练习一：在JSP页面输出九九乘法表"><a href="#练习一：在JSP页面输出九九乘法表" class="headerlink" title="练习一：在JSP页面输出九九乘法表"></a>练习一：在JSP页面输出九九乘法表</h3><p><code>九九乘法表.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;使用JSP和HTML表格输出九九乘法表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=<span class="string">"1px"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">    &lt;thead&gt;九九乘法表&lt;/thead&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=j + "*" + i + "=" + (j * i)%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="练习二：jsp输出一个表格，里面有10个学生信息"><a href="#练习二：jsp输出一个表格，里面有10个学生信息" class="headerlink" title="练习二：jsp输出一个表格，里面有10个学生信息"></a>练习二：jsp输出一个表格，里面有10个学生信息</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.zxw.pojo.Student"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: zxw</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">30</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">54</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;使用表格输出学生信息&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(i + <span class="number">1</span>, <span class="string">"name"</span> + (i + <span class="number">1</span>), <span class="number">18</span> + i, <span class="string">"phone"</span> + (i + <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">    &lt;thead&gt;学生信息表&lt;/thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;联系电话&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;%student.getId()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getName()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getAge()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getPhone()%&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2020/06/27/Tomcat/</url>
    <content><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h3 id="什么是JavaWeb"><a href="#什么是JavaWeb" class="headerlink" title="什么是JavaWeb"></a>什么是JavaWeb</h3><p><strong>JavaWeb</strong>：就是Java语言编写的可以通过浏览器访问的程序，叫做JavaWeb。</p>
<p>JavaWeb是基于<strong>请求</strong>和<strong>响应</strong>来开发的</p>
<h3 id="什么是请求"><a href="#什么是请求" class="headerlink" title="什么是请求"></a>什么是请求</h3><p><strong>请求</strong>：客户端向服务器发送数据，叫做请求</p>
<h3 id="什么是响应"><a href="#什么是响应" class="headerlink" title="什么是响应"></a>什么是响应</h3><p><strong>响应</strong>：服务器向客户端回传数据，叫做响应</p>
<h3 id="请求和响应的关系"><a href="#请求和响应的关系" class="headerlink" title="请求和响应的关系"></a>请求和响应的关系</h3><p>请求和响应往往是成对出现的，它们的关系如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627152700650.png"/>

<h2 id="Web资源的分类"><a href="#Web资源的分类" class="headerlink" title="Web资源的分类"></a>Web资源的分类</h2><p>Web资源根据使用的技术和呈现的效果不同，分为两类：</p>
<ul>
<li><strong>静态资源</strong>：html、css、js、txt、mp4等</li>
<li><strong>动态资源</strong>：jsp、servlet</li>
</ul>
<h2 id="常用的Web服务器"><a href="#常用的Web服务器" class="headerlink" title="常用的Web服务器"></a>常用的Web服务器</h2><p>下面介绍常见的三种Web服务器</p>
<ul>
<li><strong>Tomcat</strong>：由<strong>Apache</strong>组织提供的一种Web服务器，提供对<strong>jsp</strong>和<strong>servlet</strong>的支持。它是一种<strong>轻量级的JavaWeb容器</strong>（服务器），也是当前应用对广泛的JavaWeb服务器（<strong>免费</strong>）</li>
<li><strong>JBoss</strong>：是一个遵循JavaEE规范的、开放源代码的、纯Java的EJB服务器，它<strong>支持所有的JavaEE规范（免费)</strong></li>
<li><strong>WebLogic</strong>：是Oracle公司的产品，是目前应用最广泛的Web服务器，支持JavaEE规范，而且不断地完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）</li>
</ul>
<h2 id="Tomcat服务器和Servlet、JSP、JDK之间的对应关系"><a href="#Tomcat服务器和Servlet、JSP、JDK之间的对应关系" class="headerlink" title="Tomcat服务器和Servlet、JSP、JDK之间的对应关系"></a>Tomcat服务器和Servlet、JSP、JDK之间的对应关系</h2><table>
<thead>
<tr>
<th align="center">Tomcat版本</th>
<th align="center">Servlet版本</th>
<th align="center">JSP版本</th>
<th align="center">JDK版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">7.0</td>
<td align="center">3.0</td>
<td align="center">2.2</td>
<td align="center">6.0</td>
</tr>
<tr>
<td align="center">8.0</td>
<td align="center">3.1</td>
<td align="center">2.3</td>
<td align="center">7.0</td>
</tr>
<tr>
<td align="center">9.0</td>
<td align="center">4.0</td>
<td align="center">2.4</td>
<td align="center">8.0</td>
</tr>
</tbody></table>
<p>Servlet3.0开始，支持了注解开发</p>
<h2 id="Tomcat的使用"><a href="#Tomcat的使用" class="headerlink" title="Tomcat的使用"></a>Tomcat的使用</h2><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><p>Tomcat官网：<a href="http://tomcat.apache.org" target="_blank" rel="noopener">http://tomcat.apache.org</a></p>
<p>找到所需要的Tomcat版本下载压缩包，并解压到安装目录即可</p>
<h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin			专门用来存放Tomcat服务器的可执行程序</span><br><span class="line">conf		专门用来存放Tomcat服务器的配置文件</span><br><span class="line">lib			专门用来存放Tomcat服务器的jar包</span><br><span class="line">logs		专门用来存放Tomcat服务器运行时输出的日志信息</span><br><span class="line">temp		专门用来存放Tomcat运行时产生的临时数据</span><br><span class="line">webapps		专门用来存放部署的Web工程</span><br><span class="line">work		是Tomcat工作时的目录，用来存放Tomcat运行时jsp翻译为Servlet的源码，和Session钝化的目录</span><br></pre></td></tr></table></figure>



<h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><p><strong>方式一</strong></p>
<p>找到Tomcat的bin目录下的startup.bat文件，双击启动Tomcat服务器</p>
<p><strong>方式二</strong>：</p>
<p>使用cmd进入到bin目录，运行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catalina run</span><br></pre></td></tr></table></figure>



<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>找到conf目录下的<code>server.xml</code>文件，可以进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>Tomcat的默认端口号为8080，可以修改port属性的值来指定Tomcat的端口号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以通过修改Host标签的name属性来指定访问的主机名</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p><strong>方式一</strong><br>将对应的web工程拷贝到webapps目录下</p>
<p><strong>方式二</strong><br>在Tomcat的conf目录下的<code>\Catalina\localhost\</code>下创建如下配置文件</p>
<p><code>abc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/abc"</span> <span class="attr">docBase</span>=<span class="string">"D:\book"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>推荐使用方式一进行部署</p>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><strong>请你谈谈浏览器是如何访问的？</strong></p>
<p>首先会在电脑中的hosts文件中查找有没有对应的域名，如果有则使用这个IP地址访问；如果没有就去DNS服务器中查找，找到就是用找到的IP地址访问，否则就找不到</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>TCL语言学习</title>
    <url>/2020/06/24/TCL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="TCL语言学习"><a href="#TCL语言学习" class="headerlink" title="TCL语言学习"></a>TCL语言学习</h2><p>TCL：Transaction Control Language，事务控制语言。</p>
<p><strong>事务</strong>：事务由单独单元的一个或多个SQL语句组成，在这个单元中，每个SQL语句都是相互依赖的。而整个单独单元作为一个<strong>不可分割</strong>的整体，如果单元中某条SQL语句的执行发生了错误，整个单元就会回滚。所有受到影响的数据将回滚到事务发生之前的状态；只有当单元中的<strong>所有</strong>SQL语句都顺利执行，事务才能顺利执行！</p>
<p><strong>MySQL的存储引擎（了解）</strong></p>
<p>1、概念：在MySQL中的数据用各种不同的技术存储在文件（或内存）中</p>
<p>2、通过<code>show engines;</code>来查看MySQL支持的存储引擎</p>
<p>3、在MySQL中用的最多的存储引擎有：<code>innodb</code>、<code>myisam</code>、<code>memory</code>等。其中<code>innodb</code>支持事务，而<code>myisam</code>和<code>memory</code>不支持事务</p>
<h3 id="事务的特点"><a href="#事务的特点" class="headerlink" title="事务的特点"></a>事务的特点</h3><p>事务的特点（ACID）</p>
<ol>
<li><p>原子性（Atomicity）</p>
<p>原子性是指事务是一个不可分割的工作单位，事务的操作要么都发生，要么都不发生</p>
</li>
<li><p>一致性（Consistency）</p>
<p>事务必须使得数据库从一个一致性状态转换到另一个一致性状态</p>
</li>
<li><p>隔离性（Isolation）</p>
<p>事务的隔离性是指一个事务的执行不能被其它事务干扰，即一个一个事务内部的操作及使用的数据对并发的其它事务是隔离的，并发执行的各个事务之间不能相互干扰</p>
</li>
<li><p>持久性（Durability）</p>
<p>持久性是指一个事务一旦被提交，它对数据库中的数据的改变就是永久性的，接下来的其它操作和数据库故障不应该对其由任何影响。</p>
</li>
</ol>
<h3 id="事务的创建"><a href="#事务的创建" class="headerlink" title="事务的创建"></a>事务的创建</h3><p><strong>隐式事务</strong>：事务没有明显的开启和结束标记。比如：<code>insert</code>、<code>update</code>、<code>delete</code>语句</p>
<p>可以通过<code>show variables like ‘autocommit;</code>来查看是否开启了事务的自动提交，如果开启了，那么每个SQL语句都会作为一个事务自动提交（commit）</p>
<p><strong>显式事务</strong>：事务具有明显的开启和结束标记。</p>
<p>要使用显式事务，首先需要手动禁用自动提交功能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>注意，该命令仅仅对本次会话有效。</p>
<p><strong>事务的创建步骤</strong></p>
<ol>
<li><p>开启事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>; <span class="comment">#可以省略</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写事务中的SQL语句</p>
</li>
<li><p>结束事务</p>
<ul>
<li>提交事务：<code>commit;</code></li>
<li>回滚事务：<code>rollback;</code></li>
</ul>
</li>
</ol>
<h3 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h3><p><strong>事务的并发会引发的问题</strong></p>
<p>对于同时运行的多个事务，当这些事务访问数据库中<strong>相同</strong>的数据时，如果没有采取必要的隔离机制，就会导致各种问题：</p>
<ul>
<li><strong>脏读</strong>：对于两个事务T1、T2，T1读取了已经被T2更新但是还没有修改的字段之后，若T2回滚，T1读取的内容就是临时且无效的</li>
<li><strong>不可重复读</strong>：对于两个事务T1、T2，T1读取了一个字段，然后T2更新了该字段之后，T1再次读取同一个字段，值就不相同了</li>
<li><strong>幻读</strong>：对于两个事务T1、T2，T1从表中读取了一个字段，然后T2在表中插入了一些新的数据后，如果T1再次读取同一个表，就会多出几行记录</li>
</ul>
<p><strong>数据的隔离界别</strong></p>
<ul>
<li><code>READ UNCOMMITTED</code>：读取未提交的数据，最低的隔离级别，解决不了任何事务并发问题</li>
<li><code>READ COMMITTED</code>：读取已提交的数据，可以避免脏读的问题，不能解决不可重复读和幻读的问题</li>
<li><code>REPEATABLE READ</code>：可以重复读，可以解决脏读、不可重复读的问题，但是会出现幻读</li>
<li><code>SERIALIZABLE</code>：串行化，效率最低，隔离级别最高，解决了所有的事务并发问题</li>
</ul>
<p>Oracle支持<code>READ COMMITTED</code>和<code>SERIALIZABLE</code>，默认为<code>READ COMMITTED</code></p>
<p>MySQL支持四种隔离界别，默认为<code>REPEATABLE READ</code></p>
<p><strong>查询数据库的隔离级别</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br></pre></td></tr></table></figure>

<p><strong>设置数据库的隔离界别</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别;</span><br></pre></td></tr></table></figure>



<p>Tips：</p>
<ul>
<li><p>每启动一个MySQL程序，就会获得一个单独的数据库连接，每个数据库连接都有一个全局变量<code>@@tx_isolation</code>，表示当前的事务隔离级别</p>
</li>
<li><p>设置数据库的全局隔离级别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="回滚点的使用"><a href="#回滚点的使用" class="headerlink" title="回滚点的使用"></a>回滚点的使用</h3><p><strong>设置保存点</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">savepoint</span> 保存点名;</span><br></pre></td></tr></table></figure>

<p><strong>回滚到指定的保存点</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> 保存点名;</span><br></pre></td></tr></table></figure>



<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#回滚点的使用</span></span><br><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span>(<span class="string">'张三'</span>, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">SAVEPOINT</span> p1;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span>(<span class="string">'李四'</span>, <span class="number">20000</span>);</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> p1;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>TCL</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2020/06/27/Maven/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h2><p>Maven项目对象模型（POM），可以通过一小段描述信息来管理项目的构建，报告文档的项目管理工具软件。</p>
<h2 id="为什么要学习Maven"><a href="#为什么要学习Maven" class="headerlink" title="为什么要学习Maven"></a>为什么要学习Maven</h2><p>在JavaWeb开发中往往需要导入大量的jar包，这个过程很容易出错。</p>
<p>Maven正是为了解决这个问题而诞生的！</p>
<h2 id="Maven的下载与安装"><a href="#Maven的下载与安装" class="headerlink" title="Maven的下载与安装"></a>Maven的下载与安装</h2><p>Maven官网：<a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></p>
<p>下载zip压缩包，并解压到你的开发环境中</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在系统环境变量中，进行如下配置：</p>
<ul>
<li>M2_HOME：maven的bin目录的路径</li>
<li>MAVEN_HOME：maven的目录</li>
<li>系统的path中：添加<code>%MAVEN_HOME%\bin</code></li>
</ul>
<p><strong>测试Maven是否安装成功</strong>：打开cmd，执行<code>mvn -version</code>，出现如下结果，则说明安装成功!</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627193217830.png"/>



<h2 id="阿里云镜像"><a href="#阿里云镜像" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h2><p>在国内访问Maven的中央仓库的速度是在太慢，甚至无法连接，此时就需要配置一个镜像。</p>
<p>国内可以使用阿里云的镜像，打开conf目录下的settings.xml文件，进行如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>同样是在settings.xml文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\environment\maven\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="IDEA中Maven的配置"><a href="#IDEA中Maven的配置" class="headerlink" title="IDEA中Maven的配置"></a>IDEA中Maven的配置</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627200856012.png"/>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627201220554.png"/>



<h3 id="IDEA中Maven的常见操作"><a href="#IDEA中Maven的常见操作" class="headerlink" title="IDEA中Maven的常见操作"></a>IDEA中Maven的常见操作</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627205338475.png" align="left"/>

<h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><p><strong>资源导出问题</strong></p>
<p>在<code>pom.xml</code>中添加下述内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    .......</span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>maven依赖如何查找？</strong></p>
<p>可以去<a href="https://mvnrepository.com/查找想要的依赖" target="_blank" rel="noopener">https://mvnrepository.com/查找想要的依赖</a></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet详解</title>
    <url>/2020/06/27/Servlet%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Servlet详解"><a href="#Servlet详解" class="headerlink" title="Servlet详解"></a>Servlet详解</h1><h3 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h3><ul>
<li>Servlet是Java EE规范之一</li>
<li>Servlet是JavaWeb的三大组件之一</li>
<li>Servlet是运行在服务器上的Java程序，可以接受客户端发送过来的请求，并响应数据给客户端</li>
</ul>
<h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><p>1、构建一个普通Maven项目，删除src目录，之后就在这个工程下新建Module，而这个工程就是Maven主工程</p>
<p>2、使用模板创建一个Module，继承这个主工程。关于Maven父子工程的关系</p>
<p>父项目中会有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;Servlet&lt;&#x2F;module&gt;</span><br><span class="line">&lt;&#x2F;modules&gt;</span><br></pre></td></tr></table></figure>

<p>子项目中会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的jar包，子项目都可以使用（可以理解为继承）</p>
<p>3、Maven环境优化</p>
<ol>
<li>修改web.xml和Tomcat的版本一致（可以在webapps的examples中找到对应的web.xml）</li>
<li>将maven的结构搭建完整</li>
</ol>
<p>4、编写一个Servlet程序</p>
<ol>
<li>编写一个HelloServlet类</li>
<li>实现Servlet接口，直接继承HttpServlet类</li>
</ol>
<p><code>HelloServlet.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloServlet被访问了!"</span>);</span><br><span class="line">        <span class="comment">//解决中文乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf8"</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">"HelloServlet被访问了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、在<code>web.xml</code>中编写Servlet的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zxw.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、配置Tomcat</p>
<p>7、启动测试，在浏览器输入<a href="http://localhost:8080/servlet/hello" target="_blank" rel="noopener">http://localhost:8080/servlet/hello</a></p>
<h3 id="Servlet的继承体系"><a href="#Servlet的继承体系" class="headerlink" title="Servlet的继承体系"></a>Servlet的继承体系</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200628091939027.png" align="left"/>

<h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>Servlet是由Web服务器调用，Web服务器在收到浏览器请求之后</p>
<p>1、浏览器访问Web容器，Web容器根据<code>web.xml</code>中的映射找到对应的Servlet类</p>
<p>2、如果该Servlet类是第一次被访问</p>
<ul>
<li>如果<code>web.xml</code>中配置了load-on-startup，则会在服务器启动时就加载Servlet类，否则会在第一次访问时加载</li>
</ul>
<p>3、每次访问该Servlet都会调用其service方法</p>
<p>4、当Web容器关闭时，会调用Servlet的destroy方法</p>
<h2 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h2><h3 id="ServletConfig是什么"><a href="#ServletConfig是什么" class="headerlink" title="ServletConfig是什么"></a>ServletConfig是什么</h3><ul>
<li>ServletConfig就是Servlet的配置信息的类</li>
<li>Servlet和ServletConfig类的对象都是由Web容器负责创建，供开发人员使用</li>
<li>ServletConfig会在Servlet创建时创建</li>
</ul>
<h3 id="ServletConfig的作用"><a href="#ServletConfig的作用" class="headerlink" title="ServletConfig的作用"></a>ServletConfig的作用</h3><ol>
<li>获取Servlet的别名，即<code>web.xml</code>文件中配置的<code>servlet-name</code>标签中的内容</li>
<li>获取servlet配置中的<code>init-param</code>标签的内容</li>
<li>获取ServletContext对象</li>
</ol>
<p><code>web.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet-name标签给Servlet程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet-class标签是Servlet程序的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zxw.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 参数值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>HelloServlet.java</code>中演示ServletConfig的三种用途</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取servlet程序的别名servlet-name的值</span></span><br><span class="line">    System.out.println(servletConfig.getServletName());</span><br><span class="line">    <span class="comment">//2.获取init-param</span></span><br><span class="line">    String username = servletConfig.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="comment">//3.获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = servletConfig.getServletContext();</span><br><span class="line">    System.out.println(servletContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><font color="red">注意点：</font></p>
<p>在使用继承HttpServlet的方式时，需要调用父类的<code>init(ServletConfig)</code>方法</p>
<h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><h3 id="ServletContext是什么"><a href="#ServletContext是什么" class="headerlink" title="ServletContext是什么"></a>ServletContext是什么</h3><ul>
<li>ServletContext是一个接口，它表示Servlet上下文对象</li>
<li>一个Web工程只有一个ServletContext对象</li>
<li>ServletContext是一个域对象，作用域是整个Web工程</li>
<li>ServletContext在Web工程启动时创建，在Web工程停止时销毁</li>
</ul>
<p><strong>什么是域对象？</strong></p>
<p>域对象和Java中的Map有些类似</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">存数据</th>
<th align="center">取数据</th>
<th align="center">删除数据</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Map</td>
<td align="center">put()</td>
<td align="center">get()</td>
<td align="center">remove()</td>
</tr>
<tr>
<td align="center">域对象</td>
<td align="center">setAttribute()</td>
<td align="center">getAttribute()</td>
<td align="center">removeAttribute()</td>
</tr>
</tbody></table>
<h3 id="ServletContext的作用"><a href="#ServletContext的作用" class="headerlink" title="ServletContext的作用"></a>ServletContext的作用</h3><ol>
<li>获取<code>web.xml</code>中配置的上下文参数<code>context-param</code></li>
<li>获取当前的工程路径，格式<code>/工程路径</code></li>
<li>获取工程部署后在服务器硬盘上的绝对路径</li>
<li>作为域对象存取数据</li>
</ol>
<p>ServletContext代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line">    <span class="comment">//1. 获取web.xml中配置的上下文参数context-param</span></span><br><span class="line">    String password = servletContext.getInitParameter(<span class="string">"password"</span>);</span><br><span class="line">    <span class="comment">//2. 获取当前的工程路径，格式：/工程路径</span></span><br><span class="line">    System.out.println(<span class="string">"当前工程路径："</span> + servletContext.getContextPath());</span><br><span class="line">    <span class="comment">//3. 获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">    System.out.println(<span class="string">"工程部署的路径为："</span> + servletContext.getRealPath(<span class="string">"/"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 像Map一样存取数据</span></span><br><span class="line">    servletContext.setAttribute(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    String name = (String) servletContext.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    servletContext.removeAttribute(<span class="string">"name"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h2><p>不难理解，HttpServletRequest和HttpServletResponse是对HTTP中请求和响应的封装。web服务器在接收客户端的HTTP请求之后，会创建一个代表请求的HttpServletRequest对象和一个代表响应的HttpServletResponse对象。</p>
<h3 id="常用属性和方法"><a href="#常用属性和方法" class="headerlink" title="常用属性和方法"></a>常用属性和方法</h3><h4 id="向浏览器发送数据的方法"><a href="#向浏览器发送数据的方法" class="headerlink" title="向浏览器发送数据的方法"></a>向浏览器发送数据的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这个两个流不能同时使用，否则会报错！</p>
<h4 id="向浏览器发送响应头的方法"><a href="#向浏览器发送响应头的方法" class="headerlink" title="向浏览器发送响应头的方法"></a>向浏览器发送响应头的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置响应编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String charset)</span></span>;</span><br><span class="line"><span class="comment">//设置响应体的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> len)</span></span>;</span><br><span class="line"><span class="comment">//设置响应内容的类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String type)</span></span>;</span><br><span class="line"><span class="comment">//set表示设置（无论是否存在），add在存在时保持原有值不变，没有则添加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String name, <span class="keyword">long</span> date)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String name, <span class="keyword">long</span> date)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String name, String value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String name, String value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String name, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String name, <span class="keyword">int</span> value)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="响应的状态码"><a href="#响应的状态码" class="headerlink" title="响应的状态码"></a>响应的状态码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

<p>响应状态码的含义详见<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md#三http-状态码" target="_blank" rel="noopener">HTTP</a>相关内容</p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p><strong>步骤</strong>：</p>
<ol>
<li>获取要下载文件的路径</li>
<li>获取下载的文件名</li>
<li>让浏览器能够支持我们想要下载的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端</li>
</ol>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取要下载文件的路径</span></span><br><span class="line">        String realPath = <span class="string">"D:\\Java EE workspace\\JavaWeb\\response\\target\\classes\\张三.png"</span>;</span><br><span class="line">        System.out.println(<span class="string">"下载文件的路径:"</span> + realPath);</span><br><span class="line">        <span class="comment">//2. 获取下载的文件名</span></span><br><span class="line">        String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"文件名为:"</span> + fileName);</span><br><span class="line">        <span class="comment">//3. 让浏览器能够支持我们想要下载的东西(Content-disposition)，让中文文件名URL编码</span></span><br><span class="line">        resp.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">//4. 获取下载文件的输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//5. 创建缓冲区</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//6. 获取OutputStream对象</span></span><br><span class="line">        ServletOutputStream os = resp.getOutputStream();</span><br><span class="line">        <span class="comment">//7. 将FileOutputStream流写到buffer缓冲区</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//8. 使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class="line">            os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流对象</span></span><br><span class="line">        os.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><p><strong>方式一</strong>(不推荐)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置响应状态码为302，表示重定向</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//设置响应头，说明告诉客户端新地址</span></span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>（推荐）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="响应的乱码解决"><a href="#响应的乱码解决" class="headerlink" title="响应的乱码解决"></a>响应的乱码解决</h3><p>上面的代码如果回传的是包含中文的字符串就会出现乱码，下面是解决的方式：</p>
<p><strong>方式一（不推荐）</strong></p>
<ol>
<li>设置response的字符集为UTF-8</li>
<li>通过响应头设置浏览器使用UTF-8</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//解决响应中文乱码问题</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="comment">//通过响应头设置浏览器也是用UTF-8字符集</span></span><br><span class="line">    response.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">//获取字节输出流</span></span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//回传字符串</span></span><br><span class="line">    out.write(<span class="string">"response响应内容"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>（推荐）</p>
<p>使用Response对象的<code>setContentType()</code>方法设置字符集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        //解决响应中文乱码问题</span></span><br><span class="line"><span class="comment">//        response.setCharacterEncoding("UTF-8");</span></span><br><span class="line"><span class="comment">//        //通过响应头设置浏览器也是用UTF-8字符集</span></span><br><span class="line"><span class="comment">//        response.setHeader("Content-Type", "text/html;charset=utf-8");</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html; charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">//获取字节输出流</span></span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//回传字符串</span></span><br><span class="line">    out.write(<span class="string">"response响应内容"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="HttpServletResquest类"><a href="#HttpServletResquest类" class="headerlink" title="HttpServletResquest类"></a>HttpServletResquest类</h2><h3 id="HttpServletRequest类是什么"><a href="#HttpServletRequest类是什么" class="headerlink" title="HttpServletRequest类是什么"></a>HttpServletRequest类是什么</h3><p>HttpServletRequest将浏览器发送过来的请求信息进行了封装，然后传递到service方法中供Servlet使用</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul>
<li><code>getRequestURI()</code>：获取请求的资源路径</li>
<li><code>getRequestURL()</code>：获取请求的统一资源定位符（绝对路径）</li>
<li><code>getRemoteHost()</code>：获取客户端的ip地址</li>
<li><code>getHeader()</code>：获取请求头</li>
<li><code>getParameter()</code>：获取请求的参数</li>
<li><code>getParamterValues()</code>：获取请求的参数（多个值的时候使用）</li>
<li><code>getMethod()</code>：获取请求的方式GET或POST</li>
<li><code>setAttribute(key, value)</code>：设置域数据</li>
<li><code>getAttribute(key)</code>：得到域数据</li>
<li><code>getRequestDispatcher()</code>：获取请求转发对象</li>
</ul>
<p><strong>常用API示例代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//处理POST请求的中文乱码问题</span></span><br><span class="line">    request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="comment">//HttpServletRequest的常用方法</span></span><br><span class="line">    <span class="comment">//getRequestURI：获取请求的同一资源路径</span></span><br><span class="line">    System.out.println(request.getRequestURI());</span><br><span class="line">    <span class="comment">//getRequestURL()：获取请求的统一资源定位符</span></span><br><span class="line">    System.out.println(request.getRequestURL());</span><br><span class="line">    <span class="comment">//getRemoteHost()：获取IP地址</span></span><br><span class="line">    System.out.println(request.getRemoteHost());</span><br><span class="line">    <span class="comment">//获取请求头</span></span><br><span class="line">    System.out.println(request.getHeader(<span class="string">"User-Agent"</span>));</span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(Arrays.toString(request.getParameterValues(<span class="string">"hobby"</span>)));</span><br><span class="line">    <span class="comment">//获取请求方式</span></span><br><span class="line">    System.out.println(request.getMethod());</span><br><span class="line">    <span class="comment">//设置域数据</span></span><br><span class="line">    request.setAttribute(<span class="string">"studentName"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    <span class="comment">//得到域数据</span></span><br><span class="line">    System.out.println(request.getAttribute(<span class="string">"studentName"</span>));</span><br><span class="line">    <span class="comment">//得到请求转发对象</span></span><br><span class="line">    RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">"hello"</span>);</span><br><span class="line">    dispatcher.forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="POST请求的中文乱码问题处理"><a href="#POST请求的中文乱码问题处理" class="headerlink" title="POST请求的中文乱码问题处理"></a>POST请求的中文乱码问题处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理POST请求的中文乱码问题</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>



<h3 id="GET请求的中文乱码问题处理"><a href="#GET请求的中文乱码问题处理" class="headerlink" title="GET请求的中文乱码问题处理"></a>GET请求的中文乱码问题处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get请求的中文乱码问题处理</span></span><br><span class="line">Map&lt;String, String[]&gt; parameters = request.getParameterMap();</span><br><span class="line">parameters.forEach(<span class="keyword">new</span> BiConsumer&lt;String, String[]&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s, String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对strings进行处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                strings[i] = <span class="keyword">new</span> String(strings[i].getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Tomcat 8.0及以上版本中GET请求已经不会出现中文乱码的问题</p>
<h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求转发，转发发生在服务器内部，所以只有一次请求</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br></pre></td></tr></table></figure>

<p><strong>请求转发的特点</strong></p>
<ol>
<li>浏览器的地址栏不会发生变化</li>
<li>由于转发是发生在服务器的内部，所以只需要一次请求</li>
<li>可以共享request域中的数据</li>
<li>可以转发到WEB-INF目录下的资源</li>
<li>不能转发到工程外的内容</li>
</ol>
<h3 id="base标签的作用"><a href="#base标签的作用" class="headerlink" title="base标签的作用"></a>base标签的作用</h3><p>base标签可以设置当前页面中的所有相对路径是相对哪一个路径进行跳转的</p>
<h3 id="web中-的不同含义"><a href="#web中-的不同含义" class="headerlink" title="web中/的不同含义"></a>web中<code>/</code>的不同含义</h3><ul>
<li><p><code>/</code>被浏览器解析，得到的地址是<code>http://ip:port/</code></p>
</li>
<li><p><code>/</code>被服务器解析，得到的地址是<code>http://ip:port/工程路径/</code></p>
</li>
</ul>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><strong>请求转发和请求重定向的区别</strong></p>
<p><strong>相同点</strong>：都可以实现页面的跳转</p>
<p><strong>不同点</strong>：</p>
<ol>
<li>请求转发，浏览器地址栏不会发生改变；请求重定向，浏览器地址栏会发生改变</li>
<li>请求转发只有一次请求，请求重定向则有两次请求</li>
<li>请求转发可以转发到WEB-INF目录下的资源，但是不能转发到工程外的资源；请求重定向不能转发到WEB-INF目录下的资源，但是可以转发到工程外部的资源</li>
</ol>
<h2 id="抽取BaseServlet"><a href="#抽取BaseServlet" class="headerlink" title="抽取BaseServlet"></a>抽取BaseServlet</h2><p>通过继承原生的HttpServlet每个Servlet只能实现一个功能，如果功能比较多就会出现很多Servlet，所以需要对HttpServlet进一步处理，使得我们可以在一个Servlet中处理多个业务</p>
<p><code>BaseServlet</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GET = <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POST = <span class="string">"POST"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理POST请求的中文乱码问题</span></span><br><span class="line">        <span class="keyword">if</span> (POST.equals(req.getMethod())) &#123;</span><br><span class="line">            req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解决响应乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf8"</span>);</span><br><span class="line">        <span class="comment">//获取传入的action参数</span></span><br><span class="line">        String action = req.getParameter(<span class="string">"action"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据传入的参数获取对应的Method对象</span></span><br><span class="line">            Method method = <span class="keyword">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest<span class="class">.<span class="keyword">class</span>, <span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            <span class="comment">//调用业务方法</span></span><br><span class="line">            method.invoke(<span class="keyword">this</span>, req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很显然这里的BaseServlet还不是很完善，如果有其它想要添加的Servlet的通用功能，可以通过修改BaseServlet来实现。</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>DQL语言学习</title>
    <url>/2020/06/20/DQL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DQL语言学习"><a href="#DQL语言学习" class="headerlink" title="DQL语言学习"></a>DQL语言学习</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>导入SQL脚本，创建用于练习的数据库<code>myemployees</code></p>
<p><code>myemployees.sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQLyog Ultimate v10.00 Beta1</span></span><br><span class="line"><span class="comment">MySQL - 5.5.15 : Database - myemployees</span></span><br><span class="line"><span class="comment">*********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=''*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`myemployees`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET gb2312 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`myemployees`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `departments` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`departments`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`departments`</span> (</span><br><span class="line">  <span class="string">`department_id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`department_name`</span> <span class="built_in">varchar</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`manager_id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`location_id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`department_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`loc_id_fk`</span> (<span class="string">`location_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`loc_id_fk`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`location_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`locations`</span> (<span class="string">`location_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">271</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `departments` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`departments`</span>(<span class="string">`department_id`</span>,<span class="string">`department_name`</span>,<span class="string">`manager_id`</span>,<span class="string">`location_id`</span>) <span class="keyword">values</span> (<span class="number">10</span>,<span class="string">'Adm'</span>,<span class="number">200</span>,<span class="number">1700</span>),(<span class="number">20</span>,<span class="string">'Mar'</span>,<span class="number">201</span>,<span class="number">1800</span>),(<span class="number">30</span>,<span class="string">'Pur'</span>,<span class="number">114</span>,<span class="number">1700</span>),(<span class="number">40</span>,<span class="string">'Hum'</span>,<span class="number">203</span>,<span class="number">2400</span>),(<span class="number">50</span>,<span class="string">'Shi'</span>,<span class="number">121</span>,<span class="number">1500</span>),(<span class="number">60</span>,<span class="string">'IT'</span>,<span class="number">103</span>,<span class="number">1400</span>),(<span class="number">70</span>,<span class="string">'Pub'</span>,<span class="number">204</span>,<span class="number">2700</span>),(<span class="number">80</span>,<span class="string">'Sal'</span>,<span class="number">145</span>,<span class="number">2500</span>),(<span class="number">90</span>,<span class="string">'Exe'</span>,<span class="number">100</span>,<span class="number">1700</span>),(<span class="number">100</span>,<span class="string">'Fin'</span>,<span class="number">108</span>,<span class="number">1700</span>),(<span class="number">110</span>,<span class="string">'Acc'</span>,<span class="number">205</span>,<span class="number">1700</span>),(<span class="number">120</span>,<span class="string">'Tre'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">130</span>,<span class="string">'Cor'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">140</span>,<span class="string">'Con'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">150</span>,<span class="string">'Sha'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">160</span>,<span class="string">'Ben'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">170</span>,<span class="string">'Man'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">180</span>,<span class="string">'Con'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">190</span>,<span class="string">'Con'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">200</span>,<span class="string">'Ope'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">210</span>,<span class="string">'IT '</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">220</span>,<span class="string">'NOC'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">230</span>,<span class="string">'IT '</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">240</span>,<span class="string">'Gov'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">250</span>,<span class="string">'Ret'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">260</span>,<span class="string">'Rec'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">270</span>,<span class="string">'Pay'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `employees` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employees`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line">  <span class="string">`employee_id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone_number`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`job_id`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salary`</span> <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`commission_pct`</span> <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`manager_id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`department_id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`hiredate`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`employee_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`dept_id_fk`</span> (<span class="string">`department_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`job_id_fk`</span> (<span class="string">`job_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`dept_id_fk`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`department_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`departments`</span> (<span class="string">`department_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`job_id_fk`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`job_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`jobs`</span> (<span class="string">`job_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">207</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `employees` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`employees`</span>(<span class="string">`employee_id`</span>,<span class="string">`first_name`</span>,<span class="string">`last_name`</span>,<span class="string">`email`</span>,<span class="string">`phone_number`</span>,<span class="string">`job_id`</span>,<span class="string">`salary`</span>,<span class="string">`commission_pct`</span>,<span class="string">`manager_id`</span>,<span class="string">`department_id`</span>,<span class="string">`hiredate`</span>) <span class="keyword">values</span> (<span class="number">100</span>,<span class="string">'Steven'</span>,<span class="string">'K_ing'</span>,<span class="string">'SKING'</span>,<span class="string">'515.123.4567'</span>,<span class="string">'AD_PRES'</span>,<span class="number">24000.00</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">90</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">101</span>,<span class="string">'Neena'</span>,<span class="string">'Kochhar'</span>,<span class="string">'NKOCHHAR'</span>,<span class="string">'515.123.4568'</span>,<span class="string">'AD_VP'</span>,<span class="number">17000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">102</span>,<span class="string">'Lex'</span>,<span class="string">'De Haan'</span>,<span class="string">'LDEHAAN'</span>,<span class="string">'515.123.4569'</span>,<span class="string">'AD_VP'</span>,<span class="number">17000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">103</span>,<span class="string">'Alexander'</span>,<span class="string">'Hunold'</span>,<span class="string">'AHUNOLD'</span>,<span class="string">'590.423.4567'</span>,<span class="string">'IT_PROG'</span>,<span class="number">9000.00</span>,<span class="literal">NULL</span>,<span class="number">102</span>,<span class="number">60</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">104</span>,<span class="string">'Bruce'</span>,<span class="string">'Ernst'</span>,<span class="string">'BERNST'</span>,<span class="string">'590.423.4568'</span>,<span class="string">'IT_PROG'</span>,<span class="number">6000.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">105</span>,<span class="string">'David'</span>,<span class="string">'Austin'</span>,<span class="string">'DAUSTIN'</span>,<span class="string">'590.423.4569'</span>,<span class="string">'IT_PROG'</span>,<span class="number">4800.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">106</span>,<span class="string">'Valli'</span>,<span class="string">'Pataballa'</span>,<span class="string">'VPATABAL'</span>,<span class="string">'590.423.4560'</span>,<span class="string">'IT_PROG'</span>,<span class="number">4800.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">107</span>,<span class="string">'Diana'</span>,<span class="string">'Lorentz'</span>,<span class="string">'DLORENTZ'</span>,<span class="string">'590.423.5567'</span>,<span class="string">'IT_PROG'</span>,<span class="number">4200.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">108</span>,<span class="string">'Nancy'</span>,<span class="string">'Greenberg'</span>,<span class="string">'NGREENBE'</span>,<span class="string">'515.124.4569'</span>,<span class="string">'FI_MGR'</span>,<span class="number">12000.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">109</span>,<span class="string">'Daniel'</span>,<span class="string">'Faviet'</span>,<span class="string">'DFAVIET'</span>,<span class="string">'515.124.4169'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">9000.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">110</span>,<span class="string">'John'</span>,<span class="string">'Chen'</span>,<span class="string">'JCHEN'</span>,<span class="string">'515.124.4269'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">8200.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">111</span>,<span class="string">'Ismael'</span>,<span class="string">'Sciarra'</span>,<span class="string">'ISCIARRA'</span>,<span class="string">'515.124.4369'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">7700.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">112</span>,<span class="string">'Jose Manuel'</span>,<span class="string">'Urman'</span>,<span class="string">'JMURMAN'</span>,<span class="string">'515.124.4469'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">7800.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">113</span>,<span class="string">'Luis'</span>,<span class="string">'Popp'</span>,<span class="string">'LPOPP'</span>,<span class="string">'515.124.4567'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">6900.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">114</span>,<span class="string">'Den'</span>,<span class="string">'Raphaely'</span>,<span class="string">'DRAPHEAL'</span>,<span class="string">'515.127.4561'</span>,<span class="string">'PU_MAN'</span>,<span class="number">11000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">115</span>,<span class="string">'Alexander'</span>,<span class="string">'Khoo'</span>,<span class="string">'AKHOO'</span>,<span class="string">'515.127.4562'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">116</span>,<span class="string">'Shelli'</span>,<span class="string">'Baida'</span>,<span class="string">'SBAIDA'</span>,<span class="string">'515.127.4563'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2900.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">117</span>,<span class="string">'Sigal'</span>,<span class="string">'Tobias'</span>,<span class="string">'STOBIAS'</span>,<span class="string">'515.127.4564'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">118</span>,<span class="string">'Guy'</span>,<span class="string">'Himuro'</span>,<span class="string">'GHIMURO'</span>,<span class="string">'515.127.4565'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">119</span>,<span class="string">'Karen'</span>,<span class="string">'Colmenares'</span>,<span class="string">'KCOLMENA'</span>,<span class="string">'515.127.4566'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">120</span>,<span class="string">'Matthew'</span>,<span class="string">'Weiss'</span>,<span class="string">'MWEISS'</span>,<span class="string">'650.123.1234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">8000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">121</span>,<span class="string">'Adam'</span>,<span class="string">'Fripp'</span>,<span class="string">'AFRIPP'</span>,<span class="string">'650.123.2234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">8200.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">122</span>,<span class="string">'Payam'</span>,<span class="string">'Kaufling'</span>,<span class="string">'PKAUFLIN'</span>,<span class="string">'650.123.3234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">7900.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">123</span>,<span class="string">'Shanta'</span>,<span class="string">'Vollman'</span>,<span class="string">'SVOLLMAN'</span>,<span class="string">'650.123.4234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">6500.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">124</span>,<span class="string">'Kevin'</span>,<span class="string">'Mourgos'</span>,<span class="string">'KMOURGOS'</span>,<span class="string">'650.123.5234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">5800.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">125</span>,<span class="string">'Julia'</span>,<span class="string">'Nayer'</span>,<span class="string">'JNAYER'</span>,<span class="string">'650.124.1214'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">126</span>,<span class="string">'Irene'</span>,<span class="string">'Mikkilineni'</span>,<span class="string">'IMIKKILI'</span>,<span class="string">'650.124.1224'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2700.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">127</span>,<span class="string">'James'</span>,<span class="string">'Landry'</span>,<span class="string">'JLANDRY'</span>,<span class="string">'650.124.1334'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2400.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">128</span>,<span class="string">'Steven'</span>,<span class="string">'Markle'</span>,<span class="string">'SMARKLE'</span>,<span class="string">'650.124.1434'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2200.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">129</span>,<span class="string">'Laura'</span>,<span class="string">'Bissot'</span>,<span class="string">'LBISSOT'</span>,<span class="string">'650.124.5234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3300.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">130</span>,<span class="string">'Mozhe'</span>,<span class="string">'Atkinson'</span>,<span class="string">'MATKINSO'</span>,<span class="string">'650.124.6234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">131</span>,<span class="string">'James'</span>,<span class="string">'Marlow'</span>,<span class="string">'JAMRLOW'</span>,<span class="string">'650.124.7234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">132</span>,<span class="string">'TJ'</span>,<span class="string">'Olson'</span>,<span class="string">'TJOLSON'</span>,<span class="string">'650.124.8234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2100.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">133</span>,<span class="string">'Jason'</span>,<span class="string">'Mallin'</span>,<span class="string">'JMALLIN'</span>,<span class="string">'650.127.1934'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3300.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">134</span>,<span class="string">'Michael'</span>,<span class="string">'Rogers'</span>,<span class="string">'MROGERS'</span>,<span class="string">'650.127.1834'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2900.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">135</span>,<span class="string">'Ki'</span>,<span class="string">'Gee'</span>,<span class="string">'KGEE'</span>,<span class="string">'650.127.1734'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2400.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">136</span>,<span class="string">'Hazel'</span>,<span class="string">'Philtanker'</span>,<span class="string">'HPHILTAN'</span>,<span class="string">'650.127.1634'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2200.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">137</span>,<span class="string">'Renske'</span>,<span class="string">'Ladwig'</span>,<span class="string">'RLADWIG'</span>,<span class="string">'650.121.1234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3600.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">138</span>,<span class="string">'Stephen'</span>,<span class="string">'Stiles'</span>,<span class="string">'SSTILES'</span>,<span class="string">'650.121.2034'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">139</span>,<span class="string">'John'</span>,<span class="string">'Seo'</span>,<span class="string">'JSEO'</span>,<span class="string">'650.121.2019'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2700.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">140</span>,<span class="string">'Joshua'</span>,<span class="string">'Patel'</span>,<span class="string">'JPATEL'</span>,<span class="string">'650.121.1834'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">141</span>,<span class="string">'Trenna'</span>,<span class="string">'Rajs'</span>,<span class="string">'TRAJS'</span>,<span class="string">'650.121.8009'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3500.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">142</span>,<span class="string">'Curtis'</span>,<span class="string">'Davies'</span>,<span class="string">'CDAVIES'</span>,<span class="string">'650.121.2994'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">143</span>,<span class="string">'Randall'</span>,<span class="string">'Matos'</span>,<span class="string">'RMATOS'</span>,<span class="string">'650.121.2874'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">144</span>,<span class="string">'Peter'</span>,<span class="string">'Vargas'</span>,<span class="string">'PVARGAS'</span>,<span class="string">'650.121.2004'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">145</span>,<span class="string">'John'</span>,<span class="string">'Russell'</span>,<span class="string">'JRUSSEL'</span>,<span class="string">'011.44.1344.429268'</span>,<span class="string">'SA_MAN'</span>,<span class="number">14000.00</span>,<span class="number">0.40</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">146</span>,<span class="string">'Karen'</span>,<span class="string">'Partners'</span>,<span class="string">'KPARTNER'</span>,<span class="string">'011.44.1344.467268'</span>,<span class="string">'SA_MAN'</span>,<span class="number">13500.00</span>,<span class="number">0.30</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">147</span>,<span class="string">'Alberto'</span>,<span class="string">'Errazuriz'</span>,<span class="string">'AERRAZUR'</span>,<span class="string">'011.44.1344.429278'</span>,<span class="string">'SA_MAN'</span>,<span class="number">12000.00</span>,<span class="number">0.30</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">148</span>,<span class="string">'Gerald'</span>,<span class="string">'Cambrault'</span>,<span class="string">'GCAMBRAU'</span>,<span class="string">'011.44.1344.619268'</span>,<span class="string">'SA_MAN'</span>,<span class="number">11000.00</span>,<span class="number">0.30</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">149</span>,<span class="string">'Eleni'</span>,<span class="string">'Zlotkey'</span>,<span class="string">'EZLOTKEY'</span>,<span class="string">'011.44.1344.429018'</span>,<span class="string">'SA_MAN'</span>,<span class="number">10500.00</span>,<span class="number">0.20</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">150</span>,<span class="string">'Peter'</span>,<span class="string">'Tucker'</span>,<span class="string">'PTUCKER'</span>,<span class="string">'011.44.1344.129268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10000.00</span>,<span class="number">0.30</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">151</span>,<span class="string">'David'</span>,<span class="string">'Bernstein'</span>,<span class="string">'DBERNSTE'</span>,<span class="string">'011.44.1344.345268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9500.00</span>,<span class="number">0.25</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">152</span>,<span class="string">'Peter'</span>,<span class="string">'Hall'</span>,<span class="string">'PHALL'</span>,<span class="string">'011.44.1344.478968'</span>,<span class="string">'SA_REP'</span>,<span class="number">9000.00</span>,<span class="number">0.25</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">153</span>,<span class="string">'Christopher'</span>,<span class="string">'Olsen'</span>,<span class="string">'COLSEN'</span>,<span class="string">'011.44.1344.498718'</span>,<span class="string">'SA_REP'</span>,<span class="number">8000.00</span>,<span class="number">0.20</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">154</span>,<span class="string">'Nanette'</span>,<span class="string">'Cambrault'</span>,<span class="string">'NCAMBRAU'</span>,<span class="string">'011.44.1344.987668'</span>,<span class="string">'SA_REP'</span>,<span class="number">7500.00</span>,<span class="number">0.20</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">155</span>,<span class="string">'Oliver'</span>,<span class="string">'Tuvault'</span>,<span class="string">'OTUVAULT'</span>,<span class="string">'011.44.1344.486508'</span>,<span class="string">'SA_REP'</span>,<span class="number">7000.00</span>,<span class="number">0.15</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">156</span>,<span class="string">'Janette'</span>,<span class="string">'K_ing'</span>,<span class="string">'JKING'</span>,<span class="string">'011.44.1345.429268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10000.00</span>,<span class="number">0.35</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">157</span>,<span class="string">'Patrick'</span>,<span class="string">'Sully'</span>,<span class="string">'PSULLY'</span>,<span class="string">'011.44.1345.929268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9500.00</span>,<span class="number">0.35</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">158</span>,<span class="string">'Allan'</span>,<span class="string">'McEwen'</span>,<span class="string">'AMCEWEN'</span>,<span class="string">'011.44.1345.829268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9000.00</span>,<span class="number">0.35</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">159</span>,<span class="string">'Lindsey'</span>,<span class="string">'Smith'</span>,<span class="string">'LSMITH'</span>,<span class="string">'011.44.1345.729268'</span>,<span class="string">'SA_REP'</span>,<span class="number">8000.00</span>,<span class="number">0.30</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">160</span>,<span class="string">'Louise'</span>,<span class="string">'Doran'</span>,<span class="string">'LDORAN'</span>,<span class="string">'011.44.1345.629268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7500.00</span>,<span class="number">0.30</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">161</span>,<span class="string">'Sarath'</span>,<span class="string">'Sewall'</span>,<span class="string">'SSEWALL'</span>,<span class="string">'011.44.1345.529268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7000.00</span>,<span class="number">0.25</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">162</span>,<span class="string">'Clara'</span>,<span class="string">'Vishney'</span>,<span class="string">'CVISHNEY'</span>,<span class="string">'011.44.1346.129268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10500.00</span>,<span class="number">0.25</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">163</span>,<span class="string">'Danielle'</span>,<span class="string">'Greene'</span>,<span class="string">'DGREENE'</span>,<span class="string">'011.44.1346.229268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9500.00</span>,<span class="number">0.15</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">164</span>,<span class="string">'Mattea'</span>,<span class="string">'Marvins'</span>,<span class="string">'MMARVINS'</span>,<span class="string">'011.44.1346.329268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7200.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">165</span>,<span class="string">'David'</span>,<span class="string">'Lee'</span>,<span class="string">'DLEE'</span>,<span class="string">'011.44.1346.529268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6800.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">166</span>,<span class="string">'Sundar'</span>,<span class="string">'Ande'</span>,<span class="string">'SANDE'</span>,<span class="string">'011.44.1346.629268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6400.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">167</span>,<span class="string">'Amit'</span>,<span class="string">'Banda'</span>,<span class="string">'ABANDA'</span>,<span class="string">'011.44.1346.729268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6200.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">168</span>,<span class="string">'Lisa'</span>,<span class="string">'Ozer'</span>,<span class="string">'LOZER'</span>,<span class="string">'011.44.1343.929268'</span>,<span class="string">'SA_REP'</span>,<span class="number">11500.00</span>,<span class="number">0.25</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">169</span>,<span class="string">'Harrison'</span>,<span class="string">'Bloom'</span>,<span class="string">'HBLOOM'</span>,<span class="string">'011.44.1343.829268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10000.00</span>,<span class="number">0.20</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">170</span>,<span class="string">'Tayler'</span>,<span class="string">'Fox'</span>,<span class="string">'TFOX'</span>,<span class="string">'011.44.1343.729268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9600.00</span>,<span class="number">0.20</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">171</span>,<span class="string">'William'</span>,<span class="string">'Smith'</span>,<span class="string">'WSMITH'</span>,<span class="string">'011.44.1343.629268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7400.00</span>,<span class="number">0.15</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">172</span>,<span class="string">'Elizabeth'</span>,<span class="string">'Bates'</span>,<span class="string">'EBATES'</span>,<span class="string">'011.44.1343.529268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7300.00</span>,<span class="number">0.15</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">173</span>,<span class="string">'Sundita'</span>,<span class="string">'Kumar'</span>,<span class="string">'SKUMAR'</span>,<span class="string">'011.44.1343.329268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6100.00</span>,<span class="number">0.10</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">174</span>,<span class="string">'Ellen'</span>,<span class="string">'Abel'</span>,<span class="string">'EABEL'</span>,<span class="string">'011.44.1644.429267'</span>,<span class="string">'SA_REP'</span>,<span class="number">11000.00</span>,<span class="number">0.30</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">175</span>,<span class="string">'Alyssa'</span>,<span class="string">'Hutton'</span>,<span class="string">'AHUTTON'</span>,<span class="string">'011.44.1644.429266'</span>,<span class="string">'SA_REP'</span>,<span class="number">8800.00</span>,<span class="number">0.25</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">176</span>,<span class="string">'Jonathon'</span>,<span class="string">'Taylor'</span>,<span class="string">'JTAYLOR'</span>,<span class="string">'011.44.1644.429265'</span>,<span class="string">'SA_REP'</span>,<span class="number">8600.00</span>,<span class="number">0.20</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">177</span>,<span class="string">'Jack'</span>,<span class="string">'Livingston'</span>,<span class="string">'JLIVINGS'</span>,<span class="string">'011.44.1644.429264'</span>,<span class="string">'SA_REP'</span>,<span class="number">8400.00</span>,<span class="number">0.20</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">178</span>,<span class="string">'Kimberely'</span>,<span class="string">'Grant'</span>,<span class="string">'KGRANT'</span>,<span class="string">'011.44.1644.429263'</span>,<span class="string">'SA_REP'</span>,<span class="number">7000.00</span>,<span class="number">0.15</span>,<span class="number">149</span>,<span class="literal">NULL</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">179</span>,<span class="string">'Charles'</span>,<span class="string">'Johnson'</span>,<span class="string">'CJOHNSON'</span>,<span class="string">'011.44.1644.429262'</span>,<span class="string">'SA_REP'</span>,<span class="number">6200.00</span>,<span class="number">0.10</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">180</span>,<span class="string">'Winston'</span>,<span class="string">'Taylor'</span>,<span class="string">'WTAYLOR'</span>,<span class="string">'650.507.9876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">181</span>,<span class="string">'Jean'</span>,<span class="string">'Fleaur'</span>,<span class="string">'JFLEAUR'</span>,<span class="string">'650.507.9877'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">182</span>,<span class="string">'Martha'</span>,<span class="string">'Sullivan'</span>,<span class="string">'MSULLIVA'</span>,<span class="string">'650.507.9878'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">183</span>,<span class="string">'Girard'</span>,<span class="string">'Geoni'</span>,<span class="string">'GGEONI'</span>,<span class="string">'650.507.9879'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">184</span>,<span class="string">'Nandita'</span>,<span class="string">'Sarchand'</span>,<span class="string">'NSARCHAN'</span>,<span class="string">'650.509.1876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">4200.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">185</span>,<span class="string">'Alexis'</span>,<span class="string">'Bull'</span>,<span class="string">'ABULL'</span>,<span class="string">'650.509.2876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">4100.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">186</span>,<span class="string">'Julia'</span>,<span class="string">'Dellinger'</span>,<span class="string">'JDELLING'</span>,<span class="string">'650.509.3876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3400.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">187</span>,<span class="string">'Anthony'</span>,<span class="string">'Cabrio'</span>,<span class="string">'ACABRIO'</span>,<span class="string">'650.509.4876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3000.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">188</span>,<span class="string">'Kelly'</span>,<span class="string">'Chung'</span>,<span class="string">'KCHUNG'</span>,<span class="string">'650.505.1876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3800.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">189</span>,<span class="string">'Jennifer'</span>,<span class="string">'Dilly'</span>,<span class="string">'JDILLY'</span>,<span class="string">'650.505.2876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3600.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">190</span>,<span class="string">'Timothy'</span>,<span class="string">'Gates'</span>,<span class="string">'TGATES'</span>,<span class="string">'650.505.3876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2900.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">191</span>,<span class="string">'Randall'</span>,<span class="string">'Perkins'</span>,<span class="string">'RPERKINS'</span>,<span class="string">'650.505.4876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">192</span>,<span class="string">'Sarah'</span>,<span class="string">'Bell'</span>,<span class="string">'SBELL'</span>,<span class="string">'650.501.1876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">4000.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">193</span>,<span class="string">'Britney'</span>,<span class="string">'Everett'</span>,<span class="string">'BEVERETT'</span>,<span class="string">'650.501.2876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3900.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">194</span>,<span class="string">'Samuel'</span>,<span class="string">'McCain'</span>,<span class="string">'SMCCAIN'</span>,<span class="string">'650.501.3876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">195</span>,<span class="string">'Vance'</span>,<span class="string">'Jones'</span>,<span class="string">'VJONES'</span>,<span class="string">'650.501.4876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">196</span>,<span class="string">'Alana'</span>,<span class="string">'Walsh'</span>,<span class="string">'AWALSH'</span>,<span class="string">'650.507.9811'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">197</span>,<span class="string">'Kevin'</span>,<span class="string">'Feeney'</span>,<span class="string">'KFEENEY'</span>,<span class="string">'650.507.9822'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3000.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">198</span>,<span class="string">'Donald'</span>,<span class="string">'OConnell'</span>,<span class="string">'DOCONNEL'</span>,<span class="string">'650.507.9833'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">199</span>,<span class="string">'Douglas'</span>,<span class="string">'Grant'</span>,<span class="string">'DGRANT'</span>,<span class="string">'650.507.9844'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">200</span>,<span class="string">'Jennifer'</span>,<span class="string">'Whalen'</span>,<span class="string">'JWHALEN'</span>,<span class="string">'515.123.4444'</span>,<span class="string">'AD_ASST'</span>,<span class="number">4400.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">10</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">201</span>,<span class="string">'Michael'</span>,<span class="string">'Hartstein'</span>,<span class="string">'MHARTSTE'</span>,<span class="string">'515.123.5555'</span>,<span class="string">'MK_MAN'</span>,<span class="number">13000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">20</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">202</span>,<span class="string">'Pat'</span>,<span class="string">'Fay'</span>,<span class="string">'PFAY'</span>,<span class="string">'603.123.6666'</span>,<span class="string">'MK_REP'</span>,<span class="number">6000.00</span>,<span class="literal">NULL</span>,<span class="number">201</span>,<span class="number">20</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">203</span>,<span class="string">'Susan'</span>,<span class="string">'Mavris'</span>,<span class="string">'SMAVRIS'</span>,<span class="string">'515.123.7777'</span>,<span class="string">'HR_REP'</span>,<span class="number">6500.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">40</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">204</span>,<span class="string">'Hermann'</span>,<span class="string">'Baer'</span>,<span class="string">'HBAER'</span>,<span class="string">'515.123.8888'</span>,<span class="string">'PR_REP'</span>,<span class="number">10000.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">70</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">205</span>,<span class="string">'Shelley'</span>,<span class="string">'Higgins'</span>,<span class="string">'SHIGGINS'</span>,<span class="string">'515.123.8080'</span>,<span class="string">'AC_MGR'</span>,<span class="number">12000.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">206</span>,<span class="string">'William'</span>,<span class="string">'Gietz'</span>,<span class="string">'WGIETZ'</span>,<span class="string">'515.123.8181'</span>,<span class="string">'AC_ACCOUNT'</span>,<span class="number">8300.00</span>,<span class="literal">NULL</span>,<span class="number">205</span>,<span class="number">110</span>,<span class="string">'2016-03-03 00:00:00'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `jobs` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`jobs`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`jobs`</span> (</span><br><span class="line">  <span class="string">`job_id`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`job_title`</span> <span class="built_in">varchar</span>(<span class="number">35</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`min_salary`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`max_salary`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`job_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `jobs` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`jobs`</span>(<span class="string">`job_id`</span>,<span class="string">`job_title`</span>,<span class="string">`min_salary`</span>,<span class="string">`max_salary`</span>) <span class="keyword">values</span> (<span class="string">'AC_ACCOUNT'</span>,<span class="string">'Public Accountant'</span>,<span class="number">4200</span>,<span class="number">9000</span>),(<span class="string">'AC_MGR'</span>,<span class="string">'Accounting Manager'</span>,<span class="number">8200</span>,<span class="number">16000</span>),(<span class="string">'AD_ASST'</span>,<span class="string">'Administration Assistant'</span>,<span class="number">3000</span>,<span class="number">6000</span>),(<span class="string">'AD_PRES'</span>,<span class="string">'President'</span>,<span class="number">20000</span>,<span class="number">40000</span>),(<span class="string">'AD_VP'</span>,<span class="string">'Administration Vice President'</span>,<span class="number">15000</span>,<span class="number">30000</span>),(<span class="string">'FI_ACCOUNT'</span>,<span class="string">'Accountant'</span>,<span class="number">4200</span>,<span class="number">9000</span>),(<span class="string">'FI_MGR'</span>,<span class="string">'Finance Manager'</span>,<span class="number">8200</span>,<span class="number">16000</span>),(<span class="string">'HR_REP'</span>,<span class="string">'Human Resources Representative'</span>,<span class="number">4000</span>,<span class="number">9000</span>),(<span class="string">'IT_PROG'</span>,<span class="string">'Programmer'</span>,<span class="number">4000</span>,<span class="number">10000</span>),(<span class="string">'MK_MAN'</span>,<span class="string">'Marketing Manager'</span>,<span class="number">9000</span>,<span class="number">15000</span>),(<span class="string">'MK_REP'</span>,<span class="string">'Marketing Representative'</span>,<span class="number">4000</span>,<span class="number">9000</span>),(<span class="string">'PR_REP'</span>,<span class="string">'Public Relations Representative'</span>,<span class="number">4500</span>,<span class="number">10500</span>),(<span class="string">'PU_CLERK'</span>,<span class="string">'Purchasing Clerk'</span>,<span class="number">2500</span>,<span class="number">5500</span>),(<span class="string">'PU_MAN'</span>,<span class="string">'Purchasing Manager'</span>,<span class="number">8000</span>,<span class="number">15000</span>),(<span class="string">'SA_MAN'</span>,<span class="string">'Sales Manager'</span>,<span class="number">10000</span>,<span class="number">20000</span>),(<span class="string">'SA_REP'</span>,<span class="string">'Sales Representative'</span>,<span class="number">6000</span>,<span class="number">12000</span>),(<span class="string">'SH_CLERK'</span>,<span class="string">'Shipping Clerk'</span>,<span class="number">2500</span>,<span class="number">5500</span>),(<span class="string">'ST_CLERK'</span>,<span class="string">'Stock Clerk'</span>,<span class="number">2000</span>,<span class="number">5000</span>),(<span class="string">'ST_MAN'</span>,<span class="string">'Stock Manager'</span>,<span class="number">5500</span>,<span class="number">8500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `locations` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`locations`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`locations`</span> (</span><br><span class="line">  <span class="string">`location_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`street_address`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`postal_code`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`city`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`state_province`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`location_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3201</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `locations` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`locations`</span>(<span class="string">`location_id`</span>,<span class="string">`street_address`</span>,<span class="string">`postal_code`</span>,<span class="string">`city`</span>,<span class="string">`state_province`</span>,<span class="string">`country_id`</span>) <span class="keyword">values</span> (<span class="number">1000</span>,<span class="string">'1297 Via Cola di Rie'</span>,<span class="string">'00989'</span>,<span class="string">'Roma'</span>,<span class="literal">NULL</span>,<span class="string">'IT'</span>),(<span class="number">1100</span>,<span class="string">'93091 Calle della Testa'</span>,<span class="string">'10934'</span>,<span class="string">'Venice'</span>,<span class="literal">NULL</span>,<span class="string">'IT'</span>),(<span class="number">1200</span>,<span class="string">'2017 Shinjuku-ku'</span>,<span class="string">'1689'</span>,<span class="string">'Tokyo'</span>,<span class="string">'Tokyo Prefecture'</span>,<span class="string">'JP'</span>),(<span class="number">1300</span>,<span class="string">'9450 Kamiya-cho'</span>,<span class="string">'6823'</span>,<span class="string">'Hiroshima'</span>,<span class="literal">NULL</span>,<span class="string">'JP'</span>),(<span class="number">1400</span>,<span class="string">'2014 Jabberwocky Rd'</span>,<span class="string">'26192'</span>,<span class="string">'Southlake'</span>,<span class="string">'Texas'</span>,<span class="string">'US'</span>),(<span class="number">1500</span>,<span class="string">'2011 Interiors Blvd'</span>,<span class="string">'99236'</span>,<span class="string">'South San Francisco'</span>,<span class="string">'California'</span>,<span class="string">'US'</span>),(<span class="number">1600</span>,<span class="string">'2007 Zagora St'</span>,<span class="string">'50090'</span>,<span class="string">'South Brunswick'</span>,<span class="string">'New Jersey'</span>,<span class="string">'US'</span>),(<span class="number">1700</span>,<span class="string">'2004 Charade Rd'</span>,<span class="string">'98199'</span>,<span class="string">'Seattle'</span>,<span class="string">'Washington'</span>,<span class="string">'US'</span>),(<span class="number">1800</span>,<span class="string">'147 Spadina Ave'</span>,<span class="string">'M5V 2L7'</span>,<span class="string">'Toronto'</span>,<span class="string">'Ontario'</span>,<span class="string">'CA'</span>),(<span class="number">1900</span>,<span class="string">'6092 Boxwood St'</span>,<span class="string">'YSW 9T2'</span>,<span class="string">'Whitehorse'</span>,<span class="string">'Yukon'</span>,<span class="string">'CA'</span>),(<span class="number">2000</span>,<span class="string">'40-5-12 Laogianggen'</span>,<span class="string">'190518'</span>,<span class="string">'Beijing'</span>,<span class="literal">NULL</span>,<span class="string">'CN'</span>),(<span class="number">2100</span>,<span class="string">'1298 Vileparle (E)'</span>,<span class="string">'490231'</span>,<span class="string">'Bombay'</span>,<span class="string">'Maharashtra'</span>,<span class="string">'IN'</span>),(<span class="number">2200</span>,<span class="string">'12-98 Victoria Street'</span>,<span class="string">'2901'</span>,<span class="string">'Sydney'</span>,<span class="string">'New South Wales'</span>,<span class="string">'AU'</span>),(<span class="number">2300</span>,<span class="string">'198 Clementi North'</span>,<span class="string">'540198'</span>,<span class="string">'Singapore'</span>,<span class="literal">NULL</span>,<span class="string">'SG'</span>),(<span class="number">2400</span>,<span class="string">'8204 Arthur St'</span>,<span class="literal">NULL</span>,<span class="string">'London'</span>,<span class="literal">NULL</span>,<span class="string">'UK'</span>),(<span class="number">2500</span>,<span class="string">'Magdalen Centre, The Oxford Science Park'</span>,<span class="string">'OX9 9ZB'</span>,<span class="string">'Oxford'</span>,<span class="string">'Oxford'</span>,<span class="string">'UK'</span>),(<span class="number">2600</span>,<span class="string">'9702 Chester Road'</span>,<span class="string">'09629850293'</span>,<span class="string">'Stretford'</span>,<span class="string">'Manchester'</span>,<span class="string">'UK'</span>),(<span class="number">2700</span>,<span class="string">'Schwanthalerstr. 7031'</span>,<span class="string">'80925'</span>,<span class="string">'Munich'</span>,<span class="string">'Bavaria'</span>,<span class="string">'DE'</span>),(<span class="number">2800</span>,<span class="string">'Rua Frei Caneca 1360 '</span>,<span class="string">'01307-002'</span>,<span class="string">'Sao Paulo'</span>,<span class="string">'Sao Paulo'</span>,<span class="string">'BR'</span>),(<span class="number">2900</span>,<span class="string">'20 Rue des Corps-Saints'</span>,<span class="string">'1730'</span>,<span class="string">'Geneva'</span>,<span class="string">'Geneve'</span>,<span class="string">'CH'</span>),(<span class="number">3000</span>,<span class="string">'Murtenstrasse 921'</span>,<span class="string">'3095'</span>,<span class="string">'Bern'</span>,<span class="string">'BE'</span>,<span class="string">'CH'</span>),(<span class="number">3100</span>,<span class="string">'Pieter Breughelstraat 837'</span>,<span class="string">'3029SK'</span>,<span class="string">'Utrecht'</span>,<span class="string">'Utrecht'</span>,<span class="string">'NL'</span>),(<span class="number">3200</span>,<span class="string">'Mariano Escobedo 9991'</span>,<span class="string">'11932'</span>,<span class="string">'Mexico City'</span>,<span class="string">'Distrito Federal,'</span>,<span class="string">'MX'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure>

<p><strong>employees表的信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">employee_id</td>
<td align="center">员工编号</td>
</tr>
<tr>
<td align="center">first_name</td>
<td align="center">名</td>
</tr>
<tr>
<td align="center">last_name</td>
<td align="center">姓</td>
</tr>
<tr>
<td align="center">email</td>
<td align="center">邮箱</td>
</tr>
<tr>
<td align="center">phone_number</td>
<td align="center">手机号码</td>
</tr>
<tr>
<td align="center">job_id</td>
<td align="center">工种编号</td>
</tr>
<tr>
<td align="center">salary</td>
<td align="center">工资</td>
</tr>
<tr>
<td align="center">commission_pct</td>
<td align="center">奖金率</td>
</tr>
<tr>
<td align="center">manager_id</td>
<td align="center">上级领导的编号</td>
</tr>
<tr>
<td align="center">department_id</td>
<td align="center">部门编号</td>
</tr>
<tr>
<td align="center">hiredate</td>
<td align="center">入职日期</td>
</tr>
</tbody></table>
<p><strong>departments表信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">department_id</td>
<td align="center">部门编号</td>
</tr>
<tr>
<td align="center">department_name</td>
<td align="center">部门名称</td>
</tr>
<tr>
<td align="center">manager_id</td>
<td align="center">部门主管编号</td>
</tr>
<tr>
<td align="center">location_id</td>
<td align="center">位置编号</td>
</tr>
</tbody></table>
<p><strong>jobs表信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">job_id</td>
<td align="center">工种编号</td>
</tr>
<tr>
<td align="center">job_title</td>
<td align="center">工种名称</td>
</tr>
<tr>
<td align="center">min_salary</td>
<td align="center">最低工资</td>
</tr>
<tr>
<td align="center">max_salary</td>
<td align="center">最高工资</td>
</tr>
</tbody></table>
<p><strong>locations表信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">location_id</td>
<td align="center">位置编号</td>
</tr>
<tr>
<td align="center">street_address</td>
<td align="center">街道</td>
</tr>
<tr>
<td align="center">postal_code</td>
<td align="center">邮编</td>
</tr>
<tr>
<td align="center">city</td>
<td align="center">城市</td>
</tr>
<tr>
<td align="center">state_province</td>
<td align="center">州/省</td>
</tr>
<tr>
<td align="center">country_id</td>
<td align="center">国家编号</td>
</tr>
</tbody></table>
<h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表 </span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>

<ol>
<li>查询列表可以是表中的字段、常量值、表达式、函数</li>
<li>查询结果是一个虚拟的表格</li>
</ol>
<p><strong>使用示例</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础查询</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">SELECT 查询列表 </span></span><br><span class="line"><span class="comment">FROM 表名;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">USE</span> myemployees ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.查询表中的单个字段</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查询表中的多个字段</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, email <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查询表中的所有字段</span></span><br><span class="line"><span class="comment">#方式一：</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="string">`employee_id`</span>,</span><br><span class="line">  <span class="string">`first_name`</span>,</span><br><span class="line">  <span class="string">`last_name`</span>,</span><br><span class="line">  <span class="string">`email`</span>,</span><br><span class="line">  <span class="string">`phone_number`</span>,</span><br><span class="line">  <span class="string">`job_id`</span>,</span><br><span class="line">  <span class="string">`salary`</span>,</span><br><span class="line">  <span class="string">`commission_pct`</span>,</span><br><span class="line">  <span class="string">`manager_id`</span>,</span><br><span class="line">  <span class="string">`department_id`</span>,</span><br><span class="line">  <span class="string">`hiredate`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br><span class="line">  </span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查询常量值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.查询表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.查询函数</span></span><br><span class="line"><span class="comment">#version()表示MySQL的版本</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.起别名</span></span><br><span class="line"><span class="comment">#方式一:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>+<span class="number">2</span> <span class="keyword">AS</span> 和;</span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> 姓, first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二:</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 姓, first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#8.去重</span></span><br><span class="line"><span class="comment">#使用distinct关键字来去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span>;</span><br></pre></td></tr></table></figure>

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1、下面的语句是否可以执行成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name, job_id, salary <span class="keyword">as</span> sal <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>

<p>2、下面的语句是否可以执行成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>

<p>3、找出下面语句中的错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id, last_name， salary * <span class="number">12</span> “ANNUAL SALARY” <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>

<p>4、显示表departments的结构，并查询其中的全部数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DESC departments;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> departments;</span><br></pre></td></tr></table></figure>

<p>5、显示表employees中的全部job_id（不能重复）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p>6、显示出表employees的全部列，各个列之间使用逗号连接，列头显示成OUT_PUT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里给出了如何处理null值</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>) <span class="keyword">AS</span> 奖金率,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>连接使用concat函数</p>
<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	查询列表</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	表名</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">	筛选条件;</span><br></pre></td></tr></table></figure>

<p><strong>执行顺序</strong>：</p>
<ol>
<li>先执行from，从数据库中查看该表是否存在</li>
<li>执行where，查询符合条件的记录</li>
<li>执行select，选出指定的列显示结果</li>
</ol>
<p><strong>筛选条件的种类</strong></p>
<p>1、条件表达式</p>
<p>条件运算符：<code>&gt;</code>、<code>&lt;</code>、<code>=</code>、<code>!=</code>、<code>&lt;&gt;</code></p>
<p>2、逻辑表达式</p>
<p>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>、<code>AND</code>、<code>OR</code>、<code>NOT</code></p>
<p>3、模糊查询：<code>like</code>、<code>between and</code>、<code>in</code>、<code>is null</code></p>
<p><strong>按条件表达式筛选</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工工资大于10000的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt; <span class="number">10000</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门编号不等于90的员工名和部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id &lt;&gt; <span class="number">90</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>按逻辑表达式筛选</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按逻辑表达式筛选</span></span><br><span class="line"><span class="comment">#查询工资在10000到20000之间的员工名、工资及奖金</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt;= <span class="number">10000</span> </span><br><span class="line">  <span class="keyword">AND</span> salary &lt;= <span class="number">20000</span> ;</span><br><span class="line">  </span><br><span class="line"><span class="comment">#查询部门编号不是90到110之间，或工资高于15000的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id &lt; <span class="number">90</span> </span><br><span class="line">  <span class="keyword">OR</span> department_id &gt; <span class="number">110</span> </span><br><span class="line">  <span class="keyword">OR</span> salary &gt; <span class="number">15000</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<p>通配符：</p>
<ul>
<li><code>%</code>：表示任意多个字符，包含0个字符</li>
<li><code>_</code>：表示单个字符</li>
</ul>
<p>转义字符可以使用<code>\</code>，也可以使用<code>ESCAPE</code>关键字来指定转义字符</p>
<p><code>LIKE</code>的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LIKE的使用</span></span><br><span class="line"><span class="comment">#查询员工名中包含字符a的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'%a%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工第三个字符为a的第五个字符为e的员工名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'__a_e%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询第二个字符为下划线的员工名</span></span><br><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'_\_%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'_$_%'</span> ESCAPE <span class="string">'$'</span> ;</span><br></pre></td></tr></table></figure>

<p><code>BETWEEN AND</code>的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#BETWEEN AND</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">between x and y相当于[x, y]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#查询员工编号在100到120之间的所有的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">BETWEEN</span> <span class="number">100</span> </span><br><span class="line">  <span class="keyword">AND</span> <span class="number">200</span> ;</span><br></pre></td></tr></table></figure>

<p><code>IN</code>关键字的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#IN</span></span><br><span class="line"><span class="comment">#查询员工的工种编号是AD_VP、AD_PRES、IT_PROG中的一个的员工名和工种编号</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  job_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">IN</span> (<span class="string">'AD_VP'</span>, <span class="string">'AD_PRES'</span>, <span class="string">'IT_PROG'</span>) ;</span><br></pre></td></tr></table></figure>

<p><code>IS NULL</code>的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#IS NULL</span></span><br><span class="line"><span class="comment">#查询没有奖金的员工名和奖金率</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工和奖金率</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>安全等于</strong>：<code>&lt;=&gt;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资为12000的员工信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> salary &lt;=&gt; <span class="number">12000</span>;</span><br></pre></td></tr></table></figure>

<p><code>is null</code>：只能判断null值</p>
<p><code>&lt;=&gt;</code>：既可以判断null值，也能判断是否等于，但是可读性较差，不建议使用！</p>
<h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p>1、查询员工号为176的员工的员工名、部门号以及年薪</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_id,</span><br><span class="line">  salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) 年薪 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">176</span> ;</span><br></pre></td></tr></table></figure>

<p>2、查询没有奖金，且工资小于18000的员工的工资和员工名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span> </span><br><span class="line">  <span class="keyword">AND</span> salary &lt; <span class="number">18000</span> ;</span><br></pre></td></tr></table></figure>

<p>3、查询job_id不为<code>IT</code>或者工资为12000的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> job_id &lt;&gt; <span class="string">'IT'</span> </span><br><span class="line">  <span class="keyword">OR</span> salary = <span class="number">12000</span> ;</span><br></pre></td></tr></table></figure>

<p>4、查询departments表中涉及到了哪些位置编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">  location_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments ;</span><br></pre></td></tr></table></figure>

<h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><p><strong>问题</strong>：<code>select * from employees;</code>和<code>select * from employees where commisson_pct like ‘%%’ and last_name like ‘%%’;</code>结果是否一样，说明原因</p>
<p>答：结果不一样，前者包含了null的记录，而后者不包含。</p>
<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  查询列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  表名 </span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列表 【<span class="keyword">ASC</span> | <span class="keyword">DESC</span>】 ;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong></p>
<ol>
<li><code>ASC</code>代表升序，是默认值，<code>DESC</code>代表降序</li>
<li><code>ORDER BY</code>可以支持单个字段、多个字段、表达式、函数、别名</li>
<li><code>ORDER BY</code>一般放在查询语句的最后，除了<code>LIMIT</code>子句</li>
</ol>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#排序查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照工资升序/降序查询员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门编号大于等于90的员工信息，按照入职时间先后进行排序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id &gt;= <span class="number">90</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hiredate <span class="keyword">ASC</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照表达式排序：按照年薪的高低显示员工的信息（降序）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *,</span><br><span class="line">  salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) 年薪 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#按函数排序：按照姓名的长度显示员工的姓名和工资（升序）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  <span class="keyword">LENGTH</span>(last_name) 姓名长度 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 姓名长度 ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个字段排序：查询员工信息，先按照工资排序（升序），再按员工编号排序降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>,</span><br><span class="line">  employee_id <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<h4 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h4><p>1、查询员工的姓名和部门编号和年薪，按年薪降序，按姓名升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_id,</span><br><span class="line">  salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) 年薪 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>,</span><br><span class="line">  last_name <span class="keyword">ASC</span> ;</span><br></pre></td></tr></table></figure>

<p>2、选择工资不在8000到17000的员工的姓名和工资，按工资降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &lt; <span class="number">8000</span> </span><br><span class="line">  <span class="keyword">OR</span> salary &gt; <span class="number">17000</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<p>3、查询邮箱中包含e的员工信息，并按照邮箱的字节数降序，再按部门编号升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *,</span><br><span class="line">  <span class="keyword">LENGTH</span>(email) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">'%e%'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>(email) <span class="keyword">DESC</span>,</span><br><span class="line">  department_id <span class="keyword">ASC</span> ;</span><br></pre></td></tr></table></figure>



<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><p><strong>分类</strong></p>
<ul>
<li>单行函数：例如，<code>length()</code>、<code>ifnull()</code>、<code>concat()</code>等</li>
<li>多行函数：又称聚合函数、组函数、统计函数</li>
</ul>
<h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><p>字符相关的函数：</p>
<ul>
<li><p><code>length()</code>：获取参数值的字节个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">'张三lala'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>concat()</code>：拼接字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CONCAT</span>(last_name, <span class="string">'_'</span>, first_name) 姓名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>upper()</code>、<code>lower()</code>：大写和小写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">'hello'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">'HELLO'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>substr()</code>、<code>substring()</code>：截取子串</p>
<p>注意：SQL中的索引是从1开始的，<code>[startIndex, endIndex]</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'hello'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'hello'</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>案例：姓名中的首字符大写，其它字符小写，然后用_拼接，显示出来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CONCAT</span>(</span><br><span class="line">    <span class="keyword">UPPER</span>(<span class="keyword">SUBSTR</span>(last_name, <span class="number">1</span>, <span class="number">1</span>)),</span><br><span class="line">    <span class="string">'_'</span>,</span><br><span class="line">    <span class="keyword">SUBSTR</span>(last_name, <span class="number">2</span>)</span><br><span class="line">  ) 员工名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>instr()</code>：返回子串第一次出现的索引，找不到则返回0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">'hello'</span>, <span class="string">'el'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>trim()</code>：去除字符串前后的空格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">'  hello  '</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>lpad()</code>：用指定的字符实现左填充指定长度</p>
</li>
<li><p><code>rpad()</code>：用指定的字符实现右填充指定长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">LPAD</span>(<span class="string">'张三'</span>, <span class="number">10</span>, <span class="string">'*'</span>) 左填充,</span><br><span class="line">  RPAD(<span class="string">'张三'</span>, <span class="number">10</span>, <span class="string">'*'</span>) 右填充 ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>replace()</code>：替换所有</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">REPLACE</span>(<span class="string">'hello'</span>, <span class="string">'e'</span>, <span class="string">'a'</span>) ;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ul>
<li><p><code>round()</code>：四舍五入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">1.28</span>);<span class="comment">#1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">-1.28</span>);<span class="comment">#-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">3.145</span>, <span class="number">2</span>);<span class="comment">#3.15</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ceil()</code>：向上取整</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">1.001</span>);<span class="comment">#2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>float()</code>：向下取整</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">1.999</span>);<span class="comment">#1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>truncate()</code>：截断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">3.1415926</span>, <span class="number">2</span>);<span class="comment">#3.14</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>mod()</code>：取余</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">10</span>, <span class="number">3</span>);<span class="comment">#1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">10</span>, <span class="number">-3</span>);<span class="comment">#1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">-10</span>, <span class="number">3</span>);<span class="comment">#-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">-10</span>, <span class="number">-3</span>);<span class="comment">#-1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><table>
<thead>
<tr>
<th align="center">格式符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>%Y</code></td>
<td align="center">四位的年份</td>
</tr>
<tr>
<td align="center"><code>%y</code></td>
<td align="center">两位的年份</td>
</tr>
<tr>
<td align="center"><code>%m</code></td>
<td align="center">月份（01，02，…，12）</td>
</tr>
<tr>
<td align="center"><code>%c</code></td>
<td align="center">月份（1，2，…，12）</td>
</tr>
<tr>
<td align="center"><code>%d</code></td>
<td align="center">日（01，02，…）</td>
</tr>
<tr>
<td align="center"><code>%H</code></td>
<td align="center">小时（24小时制）</td>
</tr>
<tr>
<td align="center"><code>%h</code></td>
<td align="center">小时（12小时制）</td>
</tr>
<tr>
<td align="center"><code>%i</code></td>
<td align="center">分钟（00，…，59）</td>
</tr>
<tr>
<td align="center"><code>%s</code></td>
<td align="center">秒（00，…，59）</td>
</tr>
</tbody></table>
<ul>
<li><p><code>now()</code>：返回当前系统日期时间，格式为<code>YYYY-MM-dd HH:mm:ss</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>curdate()</code>：返回当前日期，不包含时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>curtime()</code>：返回当前时间，不包含日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>year()</code>、<code>month()</code>、<code>monthname()</code>、<code>day()</code>、<code>hour()</code>等</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">YEAR</span>(<span class="keyword">NOW</span>()) 年,</span><br><span class="line">  <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>()) 月,</span><br><span class="line">  MONTHNAME(<span class="keyword">NOW</span>()) 月份名称<span class="comment">#英文,</span></span><br><span class="line">  <span class="keyword">DAY</span>(<span class="keyword">NOW</span>()) 日,</span><br><span class="line">  <span class="keyword">HOUR</span>(<span class="keyword">CURTIME</span>()) 时,</span><br><span class="line">  <span class="keyword">MINUTE</span>(<span class="keyword">CURTIME</span>()) 分,</span><br><span class="line">  <span class="keyword">SECOND</span>(<span class="keyword">CURTIME</span>()) 秒,</span><br><span class="line">  <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>()) 星期<span class="comment">#0表示周一，6表示周日 ;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>str_to_date()</code>：将日期格式的字符串转换为指定格式的日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">'2020-01-01 08-00-00'</span>, <span class="string">'%Y-%c-%d %H-%i-%s'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>date_format()</code>：将日期转换为指定格式的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(), <span class="string">'%Y-%c-%d %H-%i-%s'</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="其它函数【补充】"><a href="#其它函数【补充】" class="headerlink" title="其它函数【补充】"></a>其它函数【补充】</h4><ul>
<li><p><code>version()</code>：当前数据库的版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>database()</code>：当前正在使用的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>user()</code>：当前用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="流程控制函数【补充】"><a href="#流程控制函数【补充】" class="headerlink" title="流程控制函数【补充】"></a>流程控制函数【补充】</h4><ul>
<li><p><code>if()</code>：if else的效果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">10</span> &gt; <span class="number">5</span>, <span class="string">'大'</span>, <span class="string">'小'</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>case()</code></p>
<ul>
<li><p>用法一：类似于<strong>switch case</strong></p>
<p><strong>格式</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值或 语句1;</span><br><span class="line">when 常量2 then 要显示的值或 语句2;</span><br><span class="line">...</span><br><span class="line">else 常量n then 要显示的值或 语句n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例：查询员工的工资，要求</span></span><br><span class="line"><span class="comment">部门号=30，显示工资为原来的1.1倍</span></span><br><span class="line"><span class="comment">部门号=40，显示工资为原来的1.2倍</span></span><br><span class="line"><span class="comment">部门号=50，显示工资为原来的1.3倍</span></span><br><span class="line"><span class="comment">其它部门，显示原工资</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    (salary) </span><br><span class="line">    <span class="keyword">WHEN</span> department_id = <span class="number">30</span> </span><br><span class="line">    <span class="keyword">THEN</span> salary * <span class="number">1.1</span> </span><br><span class="line">    <span class="keyword">WHEN</span> department_id = <span class="number">40</span> </span><br><span class="line">    <span class="keyword">THEN</span> salary * <span class="number">1.2</span> </span><br><span class="line">    <span class="keyword">WHEN</span> department_id = <span class="number">50</span> </span><br><span class="line">    <span class="keyword">THEN</span> salary * <span class="number">1.3</span> </span><br><span class="line">    <span class="keyword">ELSE</span> salary </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> 新工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用法二：<strong>多重if</strong></p>
<p><strong>格式</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case</span><br><span class="line">when 条件1 then 要显示的值1或 语句1;</span><br><span class="line">when 条件2 then 要显示的值2或 语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或 语句n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查询员工的工资情况</span></span><br><span class="line"><span class="comment">工资&gt;20000，显示A</span></span><br><span class="line"><span class="comment">工资&gt;15000, 显示B</span></span><br><span class="line"><span class="comment">工资&gt;10000, 显示C</span></span><br><span class="line"><span class="comment">其它显示D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  salary, </span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> salary &gt; <span class="number">20000</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'A'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> salary &gt; <span class="number">15000</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'B'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> salary &gt; <span class="number">10000</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'C'</span> </span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">'D'</span> </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> 工资级别 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="常见函数总结"><a href="#常见函数总结" class="headerlink" title="常见函数总结"></a>常见函数总结</h4><p>字符函数：length、concat、substr/substring、instr、trim、upper、lower、lpad、rpad、replace</p>
<p>数学函数：round、ceil、floor、truncate、mod</p>
<p>日期函数：now、curdate、curtime、year、month、monthname、day、hour、minute、second、weekday、str_to_date、date_format</p>
<p>其它函数：version、database、user</p>
<p>控制函数：if、case</p>
<h4 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h4><p>1、显示系统时间日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>() <span class="keyword">AS</span> 系统时间日期;</span><br></pre></td></tr></table></figure>

<p>2、查询员工号、姓名、工资以及工资提高百分之二十之后的结果（new salary）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  salary * <span class="number">1.2</span> <span class="string">'new salary'</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>3、将员工的姓名按照首字母排序，并写出姓名的长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  <span class="keyword">LENGTH</span>(last_name) 姓名长度 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SUBSTR</span>(last_name, <span class="number">1</span>, <span class="number">1</span>) ;</span><br></pre></td></tr></table></figure>

<p>4、编写一个查询，产生下面的结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt; Dream Salary</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CONCAT</span>(</span><br><span class="line">    last_name,</span><br><span class="line">    <span class="string">' earns '</span>,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="string">' monthly but wants '</span>,</span><br><span class="line">    salary * <span class="number">3</span>,</span><br><span class="line">    <span class="string">' Dream Salary'</span></span><br><span class="line">  ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>5、使用case函数，按照下面条件编写SQL语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">job				grade</span><br><span class="line">AD_PRES			A</span><br><span class="line">ST_MAN			B</span><br><span class="line">IT_PROG			C</span><br><span class="line">others			D</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    (job_id) </span><br><span class="line">    <span class="keyword">WHEN</span> job_id = <span class="string">'AD_PRES'</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'A'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> job_id = <span class="string">'ST_MAN'</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'B'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> job_id = <span class="string">'IT_PROG'</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'C'</span> </span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">'D'</span> </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> grade </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>



<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><strong>分组函数（多行/聚合/组函数）</strong></p>
<ul>
<li><code>sum</code>：求和</li>
<li><code>avg</code>：平均值</li>
<li><code>min</code>：最小值</li>
<li><code>max</code>：最大值</li>
<li><code>count</code>：统计非空个数</li>
</ul>
<p>注意事项：</p>
<ol>
<li><p>sum和avg一般只用于处理数值类型，而max、min、count则可以处理任何类型</p>
</li>
<li><p>sum、avg、max、min、count都忽略null值</p>
</li>
<li><p>可以和distinct搭配使用，起到去重的作用</p>
</li>
<li><p>count函数详细介绍</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#count详细介绍</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#count只要一行记录不全是null就可以计数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">#count(1)相当于在表中加了一列1然后进行统计</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MYISAM存储引擎下，count(*)的效率最高</span></span><br><span class="line"><span class="comment">INNODB存储引擎下，count(*)和count(1)的效率差不多，比count(字段)的效率高</span></span><br><span class="line"><span class="comment">综上所属，一般使用count(*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>和分组函数一起查询的字段要求是<code>group by</code>后面的字段</p>
</li>
</ol>
<p><strong>小练习</strong></p>
<p>1、查询公司员工工资的最大值、最小值、平均值，总和</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary),</span><br><span class="line">  <span class="keyword">MIN</span>(salary),</span><br><span class="line">  <span class="keyword">AVG</span>(salary),</span><br><span class="line">  <span class="keyword">SUM</span>(salary) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>2、查询员工表中最大入职日期和最小入职日期相差的天数</p>
<p>这里需要用到<code>datediff</code>函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DATEDIFF</span>(<span class="keyword">MAX</span>(hiredate), <span class="keyword">MIN</span>(hiredate)) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>3、查询部门编号为90的员工个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">COUNT</span>(*) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id = <span class="number">90</span> ;</span><br></pre></td></tr></table></figure>

<h4 id="group-by子句"><a href="#group-by子句" class="headerlink" title="group by子句"></a>group by子句</h4><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  查询列表（一般包含分组函数） </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  表名 </span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组表达式 </span><br><span class="line"><span class="keyword">HAVING</span> 分组后的筛选条件 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段值 ;</span><br></pre></td></tr></table></figure>

<p>group by出现在where子句后</p>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个工种的最高工资（简单的分组查询）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最高工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个位置上的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">COUNT</span>(*),</span><br><span class="line">  location_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询邮箱中包含a字符的每个部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">AVG</span>(salary) 平均工资,</span><br><span class="line">  department_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">'%a%'</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的每个领导手下员工的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最高工资,</span><br><span class="line">  manager_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询哪个部门的员工个数大于2</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_id,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line"><span class="keyword">HAVING</span> 员工个数 &gt; <span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个工种有奖金的员工的最高工资大于12000的工种编号和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最高工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id </span><br><span class="line"><span class="keyword">HAVING</span> 最高工资 &gt; <span class="number">12000</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询领导编号大于102的每个领导手下的最低工资&gt;5000的领导编号是哪个以及对应工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  manager_id,</span><br><span class="line">  salary,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id &gt; <span class="number">102</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id </span><br><span class="line"><span class="keyword">HAVING</span> 最低工资 &gt; <span class="number">5000</span> ;</span><br></pre></td></tr></table></figure>

<p>查询的筛选条件分为两种：</p>
<ul>
<li>分组前筛选条件，也就是where子句，放在group by之前</li>
<li>分组后筛选条件，也就是having子句，放在group by之后</li>
</ul>
<p>分组函数作为条件一定要放在having子句后，能用分组前筛选则有限考虑使用分组前筛选</p>
<p>tips：</p>
<ul>
<li>group by子句支持单个字段、多个字段（不分顺序）、表达式或者函数（使用得较少）</li>
<li>也可以添加排序，使用order by子句，放在查询语句的最后</li>
</ul>
<h4 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h4><p>1、查询各job_id的员工工资的最大值、最小值、平均值、总和，并按照job_id升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最大工资,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最小工资,</span><br><span class="line">  <span class="keyword">AVG</span>(salary) 平均工资,</span><br><span class="line">  <span class="keyword">SUM</span>(salary) 工资总和 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> job_id ;</span><br></pre></td></tr></table></figure>

<p>2、查询员工最高工资和最低工资的差距</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary) - <span class="keyword">MIN</span>(salary) 差距 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>3、查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计算在内</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  manager_id,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id </span><br><span class="line"><span class="keyword">HAVING</span> 最低工资 &gt;= <span class="number">6000</span> ;</span><br></pre></td></tr></table></figure>

<p>4、查询所有部门的编号，员工数量和平均工资值，并按照平均工资降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_id,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工数量,</span><br><span class="line">  <span class="keyword">AVG</span>(salary) 平均工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 平均工资 <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<p>5、选择具有各个job_id的员工人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工人数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id ;</span><br></pre></td></tr></table></figure>



<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p><strong>连接查询</strong>：又称为多表查询或者多表连接，当查询的字段来自于多个表或涉及到多个表时则要使用连接查询。</p>
<p><strong>笛卡尔乘积</strong>：假设表1有$m$行记录，表2有$n$行记录那么它们的笛卡尔积有$m\times n$行记录。笛卡尔积出现的原因时没有有效的连接条件。</p>
<p><strong>分类</strong></p>
<p>按照年代可以分为：</p>
<ul>
<li>SQL92标准(MySQL中仅仅支持内连接（可以忽略）</li>
<li>SQL99标准：支持所有的内连接+外连接(MySQL中不支持全外连接)+交叉连接</li>
</ul>
<p>按照功能可以分为：</p>
<ul>
<li>内连接<ul>
<li>等值连接</li>
<li>非等值连接</li>
<li>自连接</li>
</ul>
</li>
<li>外连接<ul>
<li>左外连接</li>
<li>右外连接</li>
<li>全外连接</li>
</ul>
</li>
<li>交叉连接</li>
</ul>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><h5 id="SQL92标准"><a href="#SQL92标准" class="headerlink" title="SQL92标准"></a>SQL92标准</h5><p><font color="red">1、等值连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和对应的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees,</span><br><span class="line">  departments </span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id = departments.department_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：查询员工名、工种号、工种名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  e.job_id,</span><br><span class="line">  job_title </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  jobs j </span><br><span class="line"><span class="keyword">WHERE</span> e.job_id = j.job_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工名和部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> e.department_id = d.department_id </span><br><span class="line">  <span class="keyword">AND</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询城市名中第二个字符为o的对应的部门名和城市名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name,</span><br><span class="line">  city </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d,</span><br><span class="line">  locations l </span><br><span class="line"><span class="keyword">WHERE</span> d.location_id = l.location_id </span><br><span class="line">  <span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">'_o%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个城市的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  city,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 部门个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  locations l,</span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> l.location_id = d.location_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询出每个部门名和部门领导编号以及该部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  d.department_id, </span><br><span class="line">  department_name,</span><br><span class="line">  d.manager_id,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> e.department_id = d.department_id  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.department_id ;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果给表起了别名，就需要使用别名来访问有歧义的字段，原来的表名会失效。</p>
<p><font color="red">2、非等值连接</font></p>
<p>首先执行如下SQL语句，创建job_grade表并插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> job_grades (</span><br><span class="line">  grade_level <span class="built_in">VARCHAR</span> (<span class="number">3</span>),</span><br><span class="line">  lowest_sal <span class="built_in">INT</span>,</span><br><span class="line">  highest_sal <span class="built_in">INT</span></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'A'</span>, <span class="number">1000</span>, <span class="number">2999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'B'</span>, <span class="number">3000</span>, <span class="number">5999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'C'</span>, <span class="number">6000</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'D'</span>, <span class="number">10000</span>, <span class="number">14999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'E'</span>, <span class="number">15000</span>, <span class="number">24999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'F'</span>, <span class="number">25000</span>, <span class="number">40000</span>);</span><br></pre></td></tr></table></figure>

<p>非等值连接使用示例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工资和工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  grade_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  job_grades </span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">  <span class="keyword">AND</span> highest_sal ;</span><br></pre></td></tr></table></figure>

<p><font color="red">3、自连接</font></p>
<p>自连接就是做连接的两张表是同一个表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名以及它上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  e1.last_name 员工名,</span><br><span class="line">  e2.last_name 上级名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e1,</span><br><span class="line">  employees e2 </span><br><span class="line"><span class="keyword">WHERE</span> e1.manager_id = e2.employee_id ;</span><br></pre></td></tr></table></figure>

<h5 id="SQL99标准"><a href="#SQL99标准" class="headerlink" title="SQL99标准"></a>SQL99标准</h5><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  查询列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  表<span class="number">1</span> 别名<span class="number">1</span> [连接类型] </span><br><span class="line">  <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line">    <span class="keyword">ON</span> 连接条件 </span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件 </span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">BY</span> 分组] </span><br><span class="line">[<span class="keyword">having</span> 分组后的筛选条件]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">BY</span> 排序列表] ;</span><br></pre></td></tr></table></figure>



<p><font color="red">1、等值连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名、部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询名字中包含e的员工名和工种名（添加筛选）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  job_title </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j </span><br><span class="line">    <span class="keyword">ON</span> e.job_id = j.job_id </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'%e%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门个数大于3的城市名和部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  city,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 部门个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  locations l </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> l.location_id = d.location_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city </span><br><span class="line"><span class="keyword">HAVING</span> 部门个数 &gt; <span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询哪个部门的员工数&gt;3的部门名和员工个数，并按个数降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name </span><br><span class="line"><span class="keyword">HAVING</span> 员工个数 &gt; <span class="number">3</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 员工个数 <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工名、部门名、工种名，并按部门名降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name,</span><br><span class="line">  job_title </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j </span><br><span class="line">    <span class="keyword">ON</span> e.job_id = j.job_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>



<p><font color="red">2、非等值连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  grade_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades </span><br><span class="line">    <span class="keyword">ON</span> salary <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">    <span class="keyword">AND</span> highest_sal ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个工资级别个数大于20的个数，并且按照工资级别降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  grade_level,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades jg</span><br><span class="line">    <span class="keyword">ON</span> salary <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">    <span class="keyword">AND</span> highest_sal </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level </span><br><span class="line"><span class="keyword">HAVING</span> 个数 &gt; <span class="number">20</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<p><font color="red">3、自连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名字包含k的员工的名字和它上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  e1.last_name 员工名,</span><br><span class="line">  e2.last_name 上级名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e1 </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees e2 </span><br><span class="line">    <span class="keyword">ON</span> e1.manager_id = e2.employee_id </span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="keyword">LIKE</span> <span class="string">'%k%'</span> ;</span><br></pre></td></tr></table></figure>



<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>一般用于查询一个表中有，另外一个表中没有的情况</p>
<p>外连接的查询结果=内连接结果+主表中有从表中没有的记录</p>
<p><strong>左外连接</strong></p>
<p><code>left [outer] join</code>，左边是主表</p>
<p><strong>右外连接</strong></p>
<p><code>right [outer] join</code>，右边是主表</p>
<p><strong>全外连接</strong></p>
<p><code>full [outer] join</code>，两边都是主表</p>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询哪个部门没有员工(左外连接实现)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name, </span><br><span class="line">  employee_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d </span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> employees e </span><br><span class="line">    <span class="keyword">ON</span> d.department_id = e.department_id </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IS</span> <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询你哪个部门没有员工(右外连接实现)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name,</span><br><span class="line">  employee_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IS</span> <span class="literal">NULL</span> ;</span><br></pre></td></tr></table></figure>

<p>MySQL不支持全外连接！</p>
<h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><p>交叉连接返回的就是两张表的笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#departments和locations的笛卡尔积</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_id,</span><br><span class="line">  l.location_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d </span><br><span class="line">  <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> locations l ;</span><br></pre></td></tr></table></figure>



<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><strong>概念</strong>：出现在其它语句中的select语句，称为<strong>子查询</strong>或<strong>内查询</strong>。外部的查询称为<strong>主查询</strong></p>
<p><strong>特点</strong>：</p>
<ol>
<li>子查询放在小括号内</li>
<li>子查询一般放在条件的右侧</li>
<li>标量子查询一般搭配单行操作符使用</li>
<li>列子查询一般搭配多行操作符使用：<code>in</code>、<code>not in</code>、<code>any</code>、<code>some</code>、<code>all</code></li>
<li>子查询优先于主查询（因为主查询用到了子查询的结果）</li>
</ol>
<blockquote>
<p>分类</p>
</blockquote>
<p><strong>按照结果集的行列数</strong></p>
<ul>
<li>标量子查询：结果集为一行一列</li>
<li>列子查询：结果集为一列多行</li>
<li>行子查询：结果集为一行多列</li>
<li>表子查询：结果集为多行多列</li>
</ul>
<p><strong>按子查询出现的位置</strong></p>
<ul>
<li><p>select后：仅仅支持标量子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  d.*,</span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(*) </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e </span><br><span class="line">  <span class="keyword">WHERE</span> e.department_id = d.department_id) 员工个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d ;</span><br><span class="line">  </span><br><span class="line"><span class="comment">#查询员工号=102的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    department_name </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    departments d </span><br><span class="line">  <span class="keyword">WHERE</span> d.department_id = e.department_id) 部门名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">102</span> ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>from后面：支持表子查询，将子查询的结果当作一张表，注意必须要为这个表起一个别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的平均工资的工资等级</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  a.department_name,</span><br><span class="line">  a.平均工资,</span><br><span class="line">  jg.grade_level 工资等级 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    e.department_id,</span><br><span class="line">    department_name,</span><br><span class="line">    <span class="keyword">AVG</span>(salary) 平均工资 </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e </span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">      <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id) a </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades jg </span><br><span class="line">    <span class="keyword">ON</span> a.平均工资 <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">    <span class="keyword">AND</span> highest_sal ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>where或having后面：标量子查询、列子查询、行子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  <span class="comment">#标量子查询</span></span><br><span class="line">  <span class="comment">#谁的工资比Abel高</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> salary &gt; </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      salary </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> last_name = <span class="string">'Abel'</span>) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#返回job_id与141号员工相同，salary比143号员工多的员工姓名、job_id和工资</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    job_id,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> job_id = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      job_id </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> employee_id = <span class="number">141</span>) </span><br><span class="line">    <span class="keyword">AND</span> salary &gt; </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      salary </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> employee_id = <span class="number">143</span>) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#返回公司工资最少的员工的last_name,job_id和salary</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    job_id,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> salary = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) ;</span><br><span class="line">      </span><br><span class="line">  <span class="comment">#查询最低工资大于50号部门的最低工资的部门id和其最低工资</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    a.department_id,</span><br><span class="line">    a.最低工资 </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      department_id,</span><br><span class="line">      <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) a </span><br><span class="line">  <span class="keyword">WHERE</span> a.最低工资 &gt; </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> department_id = <span class="number">50</span>) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#列子查询</span></span><br><span class="line">  <span class="comment">#返回location_id是1400或1700的部门中所有员工的姓名</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">      department_id </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      departments </span><br><span class="line">    <span class="keyword">WHERE</span> location_id <span class="keyword">IN</span> (<span class="number">1400</span>, <span class="number">1700</span>)) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#返回其它部门中比job_id为'IT_PROG'部门任一工资低的员工的：工号、姓名、job_id以及salary</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    employee_id,</span><br><span class="line">    last_name,</span><br><span class="line">    job_id,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> salary &lt; <span class="keyword">ANY</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      salary </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> job_id = <span class="string">'IT_PROG'</span>) </span><br><span class="line">    <span class="keyword">AND</span> job_id &lt;&gt; <span class="string">'IT_PROG'</span> ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#行子查询</span></span><br><span class="line">  <span class="comment">#查询员工编号最小且工资最高的员工信息</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    * </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> employee_id = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(employee_id) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) </span><br><span class="line">    <span class="keyword">AND</span> salary = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MAX</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) ;</span><br><span class="line">      </span><br><span class="line">  <span class="comment">#使用行子查询实现</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> (employee_id, salary) = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(employee_id),</span><br><span class="line">      <span class="keyword">MAX</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>exists后面（相关子查询）：表子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有员工的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    * </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e </span><br><span class="line">  <span class="keyword">WHERE</span> e.department_id = d.department_id) ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h4><p>1、查询和Zlotkey相同部门的员工姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id = </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    department_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> last_name = <span class="string">'Zlotkey'</span>) ;</span><br></pre></td></tr></table></figure>

<p>2、查询工资比公司平均工资高的员工的员工号、姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资比公司平均工资高的员工的员工号、姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt; </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">AVG</span>(salary) </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees) ;</span><br></pre></td></tr></table></figure>

<p>3、查询各部门中工资比本部门平均工资高的员工的员工号、姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询各部门中工资比本部门平均工资高的员工的员工号、姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e1 </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt; </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">AVG</span>(salary) </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e2 </span><br><span class="line">  <span class="keyword">WHERE</span> e2.department_id = e1.department_id) ;</span><br></pre></td></tr></table></figure>

<p>4、查询姓名中包含字母u的员工在相同部门的员工的员工号和姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    department_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'%u%'</span>) ;</span><br></pre></td></tr></table></figure>

<p>5、查询在部门的location_id为1700的部门工作的员工的员工号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">DISTINCT</span> department_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    departments </span><br><span class="line">  <span class="keyword">WHERE</span> location_id = <span class="number">1700</span>) ;</span><br></pre></td></tr></table></figure>

<p>6、查询管理者是King的员工姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id = </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    employee_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> last_name = <span class="string">'King'</span>) ;</span><br></pre></td></tr></table></figure>



<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line">[<span class="keyword">join</span> <span class="keyword">type</span>] <span class="keyword">join</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组后的筛选</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段</span><br><span class="line"><span class="keyword">limit</span> <span class="keyword">offset</span>, <span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>

<p><code>offset</code>从0开始，表示开始显示的索引，<code>size</code>表示要显示的条目数，如果offset为0则可以省略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询前5条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">5</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询第11条到第25条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>, <span class="number">15</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工信息，工资较高的前10名显示出来</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">10</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>:</p>
<ol>
<li><p>limit语句放在最后（无论是执行顺序还是在语法中的位置）</p>
</li>
<li><p>分页公式：要显示的页数为<code>page</code>，每页的条目数为<code>size</code>，则分页的公式为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">LIMIT (page-1)*size, size;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h4><p>已知表stuinfo</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">学号</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">姓名</td>
</tr>
<tr>
<td align="center">email</td>
<td align="center">邮箱</td>
</tr>
<tr>
<td align="center">grade_id</td>
<td align="center">年级编号</td>
</tr>
<tr>
<td align="center">sex</td>
<td align="center">性别</td>
</tr>
<tr>
<td align="center">age</td>
<td align="center">年龄</td>
</tr>
</tbody></table>
<p>和表grade</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">年级编号</td>
</tr>
<tr>
<td align="center">grade_name</td>
<td align="center">年级名称</td>
</tr>
</tbody></table>
<p>1、查询所有学院的邮箱的用户名（注：邮箱@前面的字符）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(email, <span class="keyword">instr</span>(email, <span class="string">'@'</span>)<span class="number">-1</span>) 用户名 <span class="keyword">from</span> stuinfo</span><br></pre></td></tr></table></figure>

<p>2、查询男生和女生的个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) 个数 <span class="keyword">from</span> stuinfo <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure>

<p>3、查询所有年龄大于18岁的学生的姓名和年级名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, grade_name </span><br><span class="line"><span class="keyword">from</span> stuinfo s <span class="keyword">inner</span> <span class="keyword">join</span> grade g </span><br><span class="line"><span class="keyword">on</span> s.grade_id=g.id </span><br><span class="line"><span class="keyword">where</span> age&gt;<span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>4、查询哪个年级的学生最小年龄大于20岁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> grade_name, <span class="keyword">min</span>(age) 最小年龄 </span><br><span class="line"><span class="keyword">from</span> grade g <span class="keyword">inner</span> <span class="keyword">join</span> stuinfo s</span><br><span class="line"><span class="keyword">on</span> g.id=s.grade_id </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> grade_name </span><br><span class="line"><span class="keyword">having</span> 最小年龄&gt;<span class="number">20</span>;</span><br></pre></td></tr></table></figure>



<h3 id="union联合查询（了解"><a href="#union联合查询（了解" class="headerlink" title="union联合查询（了解)"></a>union联合查询（了解)</h3><p><code>union</code>：联合、合并，将多条查询语句的结果合并成一个结果</p>
<p><strong>应用场景</strong>：要查询的结果来自于多个表，且多个表没有直接的连接关系，但是查询的信息一致时</p>
<p><strong>特点</strong>:</p>
<ol>
<li>要求多条查询语句的查询列数是一致的！</li>
<li>要求多条查询语句查询的每一列的类型和顺序最好是一致的</li>
<li><code>union</code>关键字默认去除重复项，如果使用<code>union all</code>可以包含重复项</li>
</ol>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DQL</tag>
      </tags>
  </entry>
  <entry>
    <title>初识MySQL</title>
    <url>/2020/06/19/%E5%88%9D%E8%AF%86MySQL/</url>
    <content><![CDATA[<h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><h3 id="为什么要学习数据库"><a href="#为什么要学习数据库" class="headerlink" title="为什么要学习数据库"></a>为什么要学习数据库</h3><ol>
<li>数据库是JavaEE开发的必备技能</li>
<li>数据库能够保证数据的安全存储</li>
<li>数据是软件开发中的核心部分</li>
<li>数据库可以实现数据的持久化存储</li>
</ol>
<h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>数据库（DataBase，简称DB），是长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p>
<p><strong>作用</strong>：安全地持久化并管理数据，减少数据的冗余</p>
<p><strong>数据库分类</strong></p>
<ul>
<li>关系型数据库<ul>
<li>常见的关系型数据库有：MySQL、SQL Server、Oracle等</li>
<li>关系型数据库通过外键来建立表与表之间的联系</li>
</ul>
</li>
<li>非关系型数据库<ul>
<li>常见的非关系型数据库：Redis、MongoDB等</li>
<li>非关系型数据库数据以对象的形式存在于数据库中，对象之间的关系通过对象的属性来实现</li>
</ul>
</li>
</ul>
<h3 id="什么是DBMS"><a href="#什么是DBMS" class="headerlink" title="什么是DBMS"></a>什么是DBMS</h3><p>DBMS：DataBase Management System，即数据库管理系统。是用于管理数据的计算机软件。</p>
<p><strong>作用</strong>：数据库管理系统使用户能方便地定义和操纵数据，维护数据的安全性和完整性，以及进行多用户下的并发控制和恢复数据库。</p>
<p>我们所学习的MySQL实际上是一个数据库管理系统！！！</p>
<h3 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h3><p>MySQL是一个<strong>开源</strong>、<strong>免费</strong>的<strong>关系型数据库</strong></p>
<p>MySQL由瑞典MySQL AB公司开发，现在属于Oracle旗下的产品。MySQL是现在<strong>最流行</strong>的关系型数据库管理系统之一！</p>
<p><strong>MySQL的官网</strong>：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><blockquote>
<p>这里介绍压缩版的MySQL的下载与安装</p>
</blockquote>
<p><font color="red">1、下载软件</font></p>
<p>我的电脑是win10 64位系统，所以下载的是MySQL 5.7 64位版本：<a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</a></p>
<p><font color="red">2、安装步骤</font></p>
<ol>
<li><p>下载得到zip格式的压缩包</p>
</li>
<li><p>解压到自己平时安装开发环境的目录，我的目录是：<code>D:\environment</code></p>
</li>
<li><p>添加环境变量：计算机&rightarrow;右键属性&rightarrow;高级系统设置&rightarrow;环境变量</p>
<p>设置在Path环境变量中添加，bin目录对应的路径</p>
</li>
<li><p>编辑<code>my.ini</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;D:\environment\mysql-5.7.19-winx64\</span><br><span class="line">datadir&#x3D;D:\environment\mysql-5.7.19-winx64\data\</span><br><span class="line">port&#x3D;3306</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
</li>
<li><p>以管理员权限启动cmd，并切换至MySQL的bin目录下，然后输入<code>mysqld -install</code>（安装mysql）</p>
</li>
<li><p>再输入<code>mysqld -initialize-insecure</code>初始化数据文件</p>
</li>
<li><p>然后启动使用<code>net start mysql</code>启动mysql服务，使用命令mysql -uroot -p进入mysql管理界面（密码可为空）</p>
</li>
<li><p>进入界面后更改root密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span></span><br><span class="line"><span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> Host = <span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改my.ini文件，删除<code>skip-grant-tables</code></p>
</li>
<li><p>重启mysql服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200620082752605.png" align="center"/>

</li>
</ol>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>由于之前已经设置了环境变量，所以可以在任意位置是使用mysql中bin目录下的命令</p>
<p><strong>登录数据库的命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql [-h服务器主机地址] -u用户名 -p用户密码</span><br></pre></td></tr></table></figure>

<p>服务器地址可以省略，默认值为本机<code>localhost</code>，连接远程数据库时需要写上。</p>
<p><strong>基本的数据库操作命令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span></span><br><span class="line"><span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> Host = <span class="string">'localhost'</span>; <span class="comment">--修改密码</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;<span class="comment">--刷新mysql系统权限相关表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;<span class="comment">--显示所有数据库</span></span><br><span class="line"><span class="keyword">use</span> 数据库名称;<span class="comment">--切换到指定名称的数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">--显示当前数据库中的所有表</span></span><br><span class="line">desc 表名;<span class="comment">--显示表结构</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;<span class="comment">--显示创建表的语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名;<span class="comment">--创建指定名称的数据库</span></span><br><span class="line"></span><br><span class="line">exit; <span class="comment">--退出MySQL</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>变量</title>
    <url>/2020/06/24/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>分类</strong></p>
<ul>
<li>系统变量<ul>
<li>全局变量</li>
<li>会话变量</li>
</ul>
</li>
<li>自定义变量<ul>
<li>用户变量</li>
<li>局部变量</li>
</ul>
</li>
</ul>
<h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>变量由系统提供，不是用户自定义的，属于服务器层面</p>
<p><strong>使用的语法</strong></p>
<ol>
<li><p>查看所有的系统变量（全局使用<code>global</code>，会话使用<code>session</code>或者省略）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span>|[<span class="keyword">session</span>] <span class="keyword">variables</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看满足条件的部分系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span>|[<span class="keyword">session</span>] <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%char%'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看指定的某个系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @@<span class="keyword">global</span>|[<span class="keyword">session</span>].系统变量名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为某个指定的系统变量赋值</p>
<p><strong>方式一</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span>|[<span class="keyword">session</span>] 系统变量名=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @@<span class="keyword">global</span>|[<span class="keyword">session</span>].系统变量名=值;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><strong>全局变量的作用域</strong>：服务器每次启动将为所有的全局变量赋初始值，针对于所有的会话都有效，但是不能跨重启（即重启后会失效）</p>
<p><strong>会话变量的作用域</strong>：针对当前的会话（连接）有效</p>
<h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>含义：变量是用户自定义的，不是由系统提供的</p>
<p><strong>使用步骤</strong></p>
<ul>
<li>声明</li>
<li>赋值</li>
<li>使用（查看、比较、运算）</li>
</ul>
<h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p><strong>作用域</strong>：针对当前会话（连接）有效，和会话变量的作用域相同</p>
<ol>
<li><p>声明并初始化</p>
<p><strong>方式一</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @用户变量名=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @用户变量名:=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式三</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @用户变量名:=值;</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值（更新用户变量值）</p>
<p><strong>方式一</strong>：通过set或者select（set可以省略<code>:</code>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>|<span class="keyword">select</span> @用户变量名:=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：通过<code>select into</code>的方式（要求结果为一个值）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> 变量名 </span><br><span class="line"><span class="keyword">from</span> 表;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @用户变量名;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p><strong>作用域</strong>：仅仅在定义它的<code>begin</code>、<code>end</code>中</p>
<ol>
<li><p>声明</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> 变量名 类型 [<span class="keyword">default</span> 值];</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>|<span class="keyword">select</span> 局部变量名:=值;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> 局部变量名 </span><br><span class="line"><span class="keyword">from</span> 表;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 局部变量名;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="用户变量和局部变量的对比"><a href="#用户变量和局部变量的对比" class="headerlink" title="用户变量和局部变量的对比"></a>用户变量和局部变量的对比</h4><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">作用域</th>
<th align="center">定义和使用的位置</th>
<th align="center">语法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">用户变量</td>
<td align="center">当前的会话</td>
<td align="center">会话中的任何位置</td>
<td align="center">必须加上@符号，不用限定类型</td>
</tr>
<tr>
<td align="center">局部变量</td>
<td align="center">begin end中</td>
<td align="center">只能在begin end中，且为第一句话</td>
<td align="center">一般不用加@符号，需要限定类型</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL变量</tag>
      </tags>
  </entry>
  <entry>
    <title>存储过程和函数</title>
    <url>/2020/06/24/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h2><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p><strong>概念</strong>：一组预先编译号的SQL语句的集合，理解成批处理语句</p>
<p><strong>好处</strong>：</p>
<ol>
<li>提高了代码的复用性</li>
<li>简化了操作</li>
<li>减少了编译次数和数据库的连接次数，提高了效率</li>
</ol>
<h4 id="存储过程的语法"><a href="#存储过程的语法" class="headerlink" title="存储过程的语法"></a>存储过程的语法</h4><p><strong>创建语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(参数列表) </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	存储过程体(一组合法的<span class="keyword">SQL</span>语句)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>Tips：</p>
<ol>
<li><p>参数列表包括三部分</p>
<ul>
<li>参数模式<ul>
<li><code>in</code>：该参数可以作为输入，也就是说该参数需要调用方传入值</li>
<li><code>out</code>：该参数可以作为输出，也就是该参数可以作为返回值</li>
<li><code>inout</code>：该参数既可以作为输入，也可以作为输出。既需要传入值，也可以返回值</li>
</ul>
</li>
<li>参数名</li>
<li>参数类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数示例</span></span><br><span class="line">in stuname varchar(20)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果存储过程只有一句SQL，那么<code>begin end</code>可以省略</p>
</li>
<li><p>存储过程体中的每条SQL语句的结尾都要求加上<code>;</code>，存储过程的结尾可以使用<code>delimiter</code>重新设置</p>
</li>
</ol>
<p><strong>调用语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> 存储过程名(实参列表);</span><br></pre></td></tr></table></figure>





<p><strong>空参存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向admin表中插入五条记录</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username, <span class="string">`password`</span>) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'张三'</span>,<span class="string">'10001'</span>), </span><br><span class="line">    (<span class="string">'李四'</span>,<span class="string">'10002'</span>), </span><br><span class="line">    (<span class="string">'王五'</span>,<span class="string">'10003'</span>), </span><br><span class="line">    (<span class="string">'王二'</span>,<span class="string">'10004'</span>), </span><br><span class="line">    (<span class="string">'李明'</span>,<span class="string">'10005'</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp1();</span><br></pre></td></tr></table></figure>



<p><strong>带in模式参数的存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建存储过程，判断是定用户名和密码是否能够登录成功</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> login (</span><br><span class="line">  <span class="keyword">IN</span> username <span class="built_in">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">  <span class="keyword">IN</span> <span class="string">`password`</span> <span class="built_in">VARCHAR</span> (<span class="number">20</span>)</span><br><span class="line">) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="built_in">INT</span> ;</span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">result</span> </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">admin</span> </span><br><span class="line">  <span class="keyword">WHERE</span> admin.username = username </span><br><span class="line">    <span class="keyword">AND</span> admin.<span class="string">`password`</span> = <span class="string">`password`</span> ;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="keyword">result</span>&gt;<span class="number">0</span>,<span class="string">'登录成功'</span>, <span class="string">'登录失败'</span>) <span class="keyword">AS</span> 登录结果;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">CALL</span> login(<span class="string">'张三'</span>,<span class="string">'10001'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>带out模式参数的存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询admin表中的记录数</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> total(<span class="keyword">OUT</span> <span class="keyword">num</span> <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">num</span> <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">num</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">CALL</span> total(@<span class="keyword">num</span>);</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">num</span>;</span><br></pre></td></tr></table></figure>

<p><strong>带inout模式参数的存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#传入两个值a、b，翻倍后返回</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> twice_as_much(INOUT a <span class="built_in">INT</span>, INOUT b <span class="built_in">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SET</span> a=a*<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">SET</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">SET</span> @a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">CALL</span> twice_as_much(@a,@b);</span><br><span class="line"><span class="keyword">SELECT</span> @a, @b;</span><br></pre></td></tr></table></figure>



<h4 id="存储过程的删除"><a href="#存储过程的删除" class="headerlink" title="存储过程的删除"></a>存储过程的删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名;</span><br></pre></td></tr></table></figure>



<h4 id="存储过程的查看"><a href="#存储过程的查看" class="headerlink" title="存储过程的查看"></a>存储过程的查看</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名;</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong>：存储过程不能修改，只能删除后重新创建</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>概念</strong>：一组预先编译好的SQL语句集合，可以理解成批处理语句。</p>
<p><strong>好处</strong>：</p>
<ol>
<li>提高了代码的复用性</li>
<li>简化了操作</li>
<li>减少了编译次数以及数据库服务器的连接次数，提高了效率</li>
</ol>
<h4 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(参数列表) <span class="keyword">returns</span> 返回类型</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  函数体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ol>
<li>参数列表包括两部分<ul>
<li>参数名</li>
<li>参数类型</li>
</ul>
</li>
<li>函数体：肯定有return语句，如果没有会报错</li>
<li>函数体中仅有一句SQL语句时，可以省略<code>begin end</code></li>
<li>使用<code>delimiter</code>设置结束标记</li>
</ol>
<h4 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数名(参数列表);</span><br></pre></td></tr></table></figure>

<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询用户名包含指定字符的admin表中的记录数</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_admin_count(<span class="keyword">str</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> c <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> c <span class="keyword">FROM</span> <span class="keyword">admin</span> <span class="keyword">WHERE</span> admin.username <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(<span class="string">'%'</span>,<span class="keyword">str</span>,<span class="string">'%'</span>);</span><br><span class="line">  RETURN c;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">SELECT</span> get_admin_count(<span class="string">'王'</span>);</span><br></pre></td></tr></table></figure>



<h4 id="函数的查看和删除"><a href="#函数的查看和删除" class="headerlink" title="函数的查看和删除"></a>函数的查看和删除</h4><p><strong>查看函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">function</span> 函数名;</span><br></pre></td></tr></table></figure>

<p><strong>删除函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> 函数名;</span><br></pre></td></tr></table></figure>



<h4 id="函数与存储过程的区别"><a href="#函数与存储过程的区别" class="headerlink" title="函数与存储过程的区别"></a>函数与存储过程的区别</h4><p><strong>存储过程</strong>：可以有0个或多个返回值，适合做批量插入、批量更新</p>
<p><strong>函数</strong>：有且仅有一个返回值，适合处理数据之后返回一个结果</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>存储过程</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制结构:</title>
    <url>/2020/06/24/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><p><strong>功能</strong>：实现简单的双分支</p>
<p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(表达式1, 表达式2, 表达式3)</span><br></pre></td></tr></table></figure>

<p>如果表达式1返回true，则返回表达式2的值，否则返回表达式3的值</p>
<h4 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h4><p>如果是语句，则使用<code>end case</code>否则使用<code>end</code></p>
<p><strong>情况一</strong>：类似于Java中的switch语句，一般用于实现等值判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 变量|表达式|字段</span><br><span class="line">when 要判断的值 then 返回的值1|语句;</span><br><span class="line">when 要判断的值 then 返回的值2|语句;</span><br><span class="line">...</span><br><span class="line">else 要返回的值n|语句;</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】</span><br></pre></td></tr></table></figure>



<p><strong>情况二</strong>：类似于Java中的多重if语句，一般用于实现区间判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case</span><br><span class="line">when 要判断的条件1 then 返回值1|语句;</span><br><span class="line">when 要判断的条件2 then 返回值2|语句;</span><br><span class="line">...</span><br><span class="line">else 要返回值的值n|语句;</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>：</p>
<ul>
<li>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方</li>
<li>可以作为独立的语句去使用，此时只能放在<code>begin end</code>中</li>
<li>如果else省略且所有的条件都不满足，则返回null</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例</span></span><br><span class="line"><span class="comment">#创建存储过程，根据传入的成绩来显示等级</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> test_case;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_case(<span class="keyword">IN</span> score <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">CASE</span></span><br><span class="line">	<span class="keyword">WHEN</span> score &gt;= <span class="number">90</span> <span class="keyword">AND</span> score &lt;= <span class="number">100</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">'A'</span>;</span><br><span class="line">	WHEN score &gt;= 80 THEN SELECT 'B';</span><br><span class="line">	WHEN score &gt;= 60 THEN SELECT 'C';</span><br><span class="line">	ELSE <span class="keyword">SELECT</span> <span class="string">'D'</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">CALL</span> test_case(<span class="number">95</span>);</span><br></pre></td></tr></table></figure>



<h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><p><strong>功能</strong>：实现多重分支</p>
<p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件1 then 语句1;</span><br><span class="line">elseif 条件2 then 语句2;</span><br><span class="line">...</span><br><span class="line">【else 语句n;】</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3.if结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> test_if;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> test_if(score <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">IF</span> score&gt;=<span class="number">90</span> <span class="keyword">AND</span> score&lt;=<span class="number">100</span> <span class="keyword">THEN</span> <span class="keyword">RETURN</span> <span class="string">'A'</span>;</span><br><span class="line">	ELSEIF score&gt;=80 THEN RETURN 'B';</span><br><span class="line">	ELSEIF score&gt;=60 THEN RETURN 'C';</span><br><span class="line">	ELSE RETURN 'D';</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">SELECT</span> test_if(<span class="number">55</span>);</span><br></pre></td></tr></table></figure>



<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>分类：</p>
<ul>
<li><code>while</code></li>
<li><code>loop</code></li>
<li><code>repeat</code></li>
</ul>
<p><strong>循环控制</strong></p>
<p><code>iterate</code>类似于Java中的<code>continue</code></p>
<p><code>leave</code>类似于Java中的<code>break</code></p>
<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签:】 while 循环条件 <span class="keyword">do</span> </span><br><span class="line">	循环体</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span> 【标签】;</span><br></pre></td></tr></table></figure>

<h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签:】 loop</span><br><span class="line">	循环体</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">loop</span> 【标签】;</span><br></pre></td></tr></table></figure>

<p>如果没有循环控制的话就是死循环，可以用来模拟简单的死循环</p>
<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签:】 repeat</span><br><span class="line">	循环体</span><br><span class="line">until 结束循环的条件</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span> 【标签】;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>流程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/2020/06/25/%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>操作数据库</title>
    <url>/2020/06/20/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="结构化从查询语句分类"><a href="#结构化从查询语句分类" class="headerlink" title="结构化从查询语句分类"></a>结构化从查询语句分类</h3><p><font color="red">1、DDL</font></p>
<p>DDL：Data Definition Language，数据定义语言，是用于描述数据库中要存储的现实世界实体的语言。</p>
<p><strong>作用</strong>：定义和管理数据对象，例如数据库、表等</p>
<p><strong>相关命令</strong>：CREATE、DROP、ALTER</p>
<p><font color="red">2、DML</font></p>
<p>DML：Data Manipulation Language，数据操纵语言，用户通过它可以实现对数据库的基本操作。</p>
<p><strong>作用</strong>：操作数据库对象所包含的数据</p>
<p><strong>相关命令</strong>：INSERT、UPDATE、DELETE</p>
<p><font color="red">3、DQL</font></p>
<p>DQL：Data Query Language，数据查询语言。</p>
<p><strong>作用</strong>：查询数据库中的数据</p>
<p><strong>相关命令</strong>：SELECT</p>
<p><font color="red">4、DCL</font></p>
<p>DCL：Data Control Language，数据控制语言。</p>
<p><strong>作用</strong>：用于管理数据库的语言，可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、存储程序、用户自定义函数等数据库对象的控制权。</p>
<p><strong>相关命令</strong>：GRANT、REVOKE、commit、rollback</p>
<h3 id="操作数据库-1"><a href="#操作数据库-1" class="headerlink" title="操作数据库"></a>操作数据库</h3><blockquote>
<p>命令行操作数据库</p>
</blockquote>
<p><strong>创建数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`数据库名`</span> [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> 字符集] [<span class="keyword">COLLATE</span> 数据库排序规则];</span><br></pre></td></tr></table></figure>

<p><strong>删除数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] <span class="string">`数据库名`</span>;</span><br></pre></td></tr></table></figure>

<p><strong>查看所有数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br></pre></td></tr></table></figure>

<p><strong>使用（切换到）数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="string">`数据库名`</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>SQLyog学习数据库命令的方式</p>
</blockquote>
<p>下面将介绍如何通过SQLyog操作数据库，然后学习对应操作的数据库命令</p>
<p>以创建数据库一个名称为school的数据库为例：</p>
<ul>
<li><p>首先右键创建一个数据库</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200620103704632.png" alt="image-20200620103704632"></p>
</li>
<li><p>打开历史记录页面，查看创建数据库对应的语句</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200620103830427.png" alt="image-20200620103830427"></p>
</li>
</ul>
<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>创建数据表属于DDL的一种，语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名`</span> (</span><br><span class="line">    <span class="string">`字段名1`</span> 列类型 [属性][索引][注释], </span><br><span class="line">    <span class="string">`字段名2`</span> 列类型 [属性][索引][注释], </span><br><span class="line">    ...</span><br><span class="line">    <span class="string">`字段名n`</span> 列类型 [属性][索引][注释], </span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure>

<p>反引号用于区分MySQL保留字和普通字符，使用了反引号则表示是普通字符。</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>视图讲解</title>
    <url>/2020/06/24/%E8%A7%86%E5%9B%BE%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="视图讲解"><a href="#视图讲解" class="headerlink" title="视图讲解"></a>视图讲解</h1><p><strong>概念</strong>：MySQL从5.01版本开始提供视图功能。一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时<strong>动态生成的</strong>，只保存了SQL逻辑，不保存查询结果</p>
<p><strong>应用场景</strong></p>
<ul>
<li>多个地方用到同样的查询结果</li>
<li>该查询结果使用的SQL语句比较复杂</li>
</ul>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询姓张的学生名和专业</span></span><br><span class="line"><span class="keyword">SELECT</span> stuname, majorname </span><br><span class="line"><span class="keyword">FROM</span> stuinfo s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m</span><br><span class="line"><span class="keyword">ON</span> s.majorid=m.id </span><br><span class="line"><span class="keyword">WHERE</span> s.stuname <span class="keyword">LIKE</span> <span class="string">'张%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1 <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> stuname, majorname </span><br><span class="line"><span class="keyword">FROM</span> stuinfo s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m </span><br><span class="line"><span class="keyword">ON</span> s.majorid=m.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用视图查询</span></span><br><span class="line"><span class="keyword">SELECT</span> stuname, majorname </span><br><span class="line"><span class="keyword">FROM</span> v1 </span><br><span class="line"><span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'张%'</span>;</span><br></pre></td></tr></table></figure>



<p><strong>视图的好处</strong></p>
<ul>
<li>重用SQL语句</li>
<li>简化复杂的SQL操作，不必知道它的查询细节</li>
<li>保护数据，提高安全性</li>
</ul>
<h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>



<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p><strong>方式一</strong></p>
<p>视图存在则修改，视图不在则创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> 视图名</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名 </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>



<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名, 视图名,...;</span><br></pre></td></tr></table></figure>



<h3 id="查看视图结构"><a href="#查看视图结构" class="headerlink" title="查看视图结构"></a>查看视图结构</h3><p><strong>语法</strong></p>
<p>查询创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名;</span><br></pre></td></tr></table></figure>

<p>显示视图结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc 视图名;</span><br></pre></td></tr></table></figure>



<h3 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> myv1 </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> last_name, email </span><br><span class="line"><span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> myv1 <span class="keyword">values</span>(<span class="string">'张三'</span>, <span class="string">'zs@qq.com'</span>);</span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">update</span> myv1 <span class="keyword">set</span> last_name=<span class="string">'李四'</span> <span class="keyword">where</span> last_name=<span class="string">'张三'</span>;</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> myv1 <span class="keyword">where</span> last_name=<span class="string">'李四'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：对视图的更新会导致对原始表的更新，一般来说，视图不应该更新！（更新视图会导致数据不安全）</p>
<p><strong>什么情况下，视图是不可以更新的？</strong></p>
<ol>
<li><p>包含以下关键字的SQL语句：</p>
<p>分组函数：<code>distinct</code>、<code>group by</code>、<code>having</code>、<code>union</code>或者<code>union all</code></p>
</li>
<li><p>常量视图</p>
</li>
<li><p>select中包含子查询</p>
</li>
<li><p>join</p>
</li>
<li><p>from一个不能更新的视图</p>
</li>
<li><p>where子句的子查询引用了from子句中的表</p>
</li>
</ol>
<h3 id="视图和表的对比"><a href="#视图和表的对比" class="headerlink" title="视图和表的对比"></a>视图和表的对比</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">创建语法的关键字</th>
<th align="center">是否实际占用物理空间</th>
<th align="center">使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">视图</td>
<td align="center"><code>create view</code></td>
<td align="center">只是保存了SQL逻辑</td>
<td align="center">增删改查，一般不使用增删改</td>
</tr>
<tr>
<td align="center">表</td>
<td align="center"><code>create table</code></td>
<td align="center">保存了数据</td>
<td align="center">增删改查</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>视图</tag>
      </tags>
  </entry>
  <entry>
    <title>三层架构和MVC</title>
    <url>/2020/07/02/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E5%92%8CMVC/</url>
    <content><![CDATA[<h1 id="三层架构和MVC"><a href="#三层架构和MVC" class="headerlink" title="三层架构和MVC"></a>三层架构和MVC</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>JavaWeb的三层架构是指：</p>
<ul>
<li>表现层：与用户直接接触，接收用户的请求进行处理，然后将响应的内容返回给用户</li>
<li>业务逻辑层：具体业务逻辑的实现</li>
<li>数据访问层：与数据库进行交互</li>
</ul>
<p>为了降低各层之间的耦合度，三层架构中使用了面向接口编程，上层调用下层是通过接口实现的。</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200702215919230.png" align="left"/>

<p>MVC：</p>
<ul>
<li>Model：模型，主要分为两类<ul>
<li>数据Bean：包含了实体类JavaBean，承载业务数据</li>
<li>业务Bean：包含了Service、Dao对象</li>
</ul>
</li>
<li>View：视图，为用户提供直接交互的界面</li>
<li>Controller：控制器，用于将用户的请求传递给相应的Model进行处理，并根据Model返回的结果做出响应，跳转到对应的视图</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>三层架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Listener和Filter</title>
    <url>/2020/07/02/Listener%E5%92%8CFilter/</url>
    <content><![CDATA[<h1 id="Listener和Filter"><a href="#Listener和Filter" class="headerlink" title="Listener和Filter"></a>Listener和Filter</h1><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><h3 id="监听器概述"><a href="#监听器概述" class="headerlink" title="监听器概述"></a>监听器概述</h3><p>Listener就是监听器，和Servlet、Filter组成了JavaWeb的三大组件。</p>
<p>Listener由三个部分组成</p>
<ul>
<li>事件源</li>
<li>事件</li>
<li>监听器</li>
</ul>
<p>可以这样理解，事件源相当于小偷，事件是小偷偷东西，监听器就是经常。当小偷（事件源）偷东西了（事件）经常（监听器）就会对小偷进行抓捕（监听器中的方法）</p>
<p><strong>监听器的分类</strong>：</p>
<ul>
<li>监听域对象创建与销毁的监听器</li>
<li>监听域对象操作域属性的监听器</li>
<li>监听HttpSession的监听器</li>
</ul>
<p><strong>监听器的配置</strong></p>
<p>监听器在<code>web.xml</code>中的配置十分简单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>监听器全类名路径<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="创建与销毁监听器"><a href="#创建与销毁监听器" class="headerlink" title="创建与销毁监听器"></a>创建与销毁监听器</h3><p><strong>ServletContext相关</strong></p>
<ul>
<li>ServletContextListener：<ul>
<li><code>void contextInitialized(ServletContextEvent event)</code>：Web服务器启动时调用</li>
<li><code>void contextDestroyed(ServletContextEvent event)</code>：Web服务器关闭时调用</li>
</ul>
</li>
</ul>
<p><strong>HttpSession相关</strong></p>
<ul>
<li>HttpSessionListener：<ul>
<li><code>void sessionCreated(HttpSessionEvent event)</code>：会话创建时调用</li>
<li><code>void sessionDestroyed(HttpSessionEvent event)</code>：会话销毁时调用</li>
</ul>
</li>
</ul>
<p><strong>ServletRequest相关</strong></p>
<ul>
<li>ServletRequestListener<ul>
<li><code>void requestInitialized(ServletRequestEvent event)</code>：请求开始时调用</li>
<li><code>void requestDestroyed(ServletRequestEvent event)</code>：请求结束时调用</li>
</ul>
</li>
</ul>
<p><strong>相关Event的介绍</strong></p>
<ul>
<li>ServletContextEvent：<code>ServletContext getServletContext()</code></li>
<li>HttpSessionEvent：<code>HttpSession getSession()</code></li>
<li>ServletRequestEvent：<ul>
<li><code>ServletRequest getServletRequest()</code></li>
<li><code>ServletContext getServletContext()</code></li>
</ul>
</li>
</ul>
<h3 id="操作属性域的监听器"><a href="#操作属性域的监听器" class="headerlink" title="操作属性域的监听器"></a>操作属性域的监听器</h3><p><strong>ServletContext相关</strong></p>
<ul>
<li>ServletContextAttributeListener<ul>
<li><code>void attributeAdded(ServletContextAttributeEvent event)</code>：向ServletContext域中添加属性时调用</li>
<li><code>void attributeReplaced(ServletContextAttributeEvent event)</code>：向ServletContext域中更新属性时调用</li>
<li><code>void attributeRemoved(ServletContextAttributeEvent event)</code>：向ServletContext域中移除属性时调用</li>
</ul>
</li>
</ul>
<p><strong>HttpSession相关</strong></p>
<ul>
<li>HttpSessionAttributeListener<ul>
<li><code>void attributeAdded(HttpSessionAttributeEvent event)</code>：向session域中添加属性时调用</li>
<li><code>void attributeReplaced(HttpSessionAttributeEvent event)</code>：向session域中更新属性时调用</li>
<li><code>void attributeRemoved(HttpSessionAttributeEvent event)</code>：向session域中移除属性时调用</li>
</ul>
</li>
</ul>
<p><strong>ServletRequest相关</strong></p>
<ul>
<li>ServletRequestAttributeListener<ul>
<li><code>void attributeAdded(ServletRequestAttributeEvent event)</code>：向request域中添加属性时调用</li>
<li><code>void attributeReplaced(ServletRequestAttributeEvent event)</code>：向request域中更新属性时调用</li>
<li><code>void attributeRemoved(ServletRequestAttributeEvent event)</code>：向request域中移除属性时调用</li>
</ul>
</li>
</ul>
<p><strong>向关Event介绍</strong></p>
<ul>
<li>ServletContextAttributeEvent<ul>
<li><code>String getName()</code>：获取当前操作的属性名</li>
<li><code>Object getValue()</code>：获取当前操作的属性值</li>
<li><code>ServletContext getServletContext()</code>：获取ServletContext对象</li>
</ul>
</li>
<li>HttpSessionAttributeEvent<ul>
<li><code>String getName()</code>：获取当前操作的属性名</li>
<li><code>Object getValue()</code>：获取当前操作的属性值</li>
<li><code>HttpSession getSession()</code>：获取当前的session对象</li>
</ul>
</li>
<li>ServletRequestAttributeEvent<ul>
<li><code>String getName()</code>：获取当前操作的属性名</li>
<li><code>Object getValue()</code>：获取当前操作的属性值</li>
<li><code>ServletRequest getServletRequest()</code>：获取request</li>
<li><code>ServletContext getServletContext()</code>：获取ServletContext对象</li>
</ul>
</li>
</ul>
<h3 id="HttpSession的监听器"><a href="#HttpSession的监听器" class="headerlink" title="HttpSession的监听器"></a>HttpSession的监听器</h3><p>还有两个与HttpSession相关的特殊的监听器，这两个监听器的特点如下：</p>
<ol>
<li>不用在<code>web.xml</code>中进行配置</li>
<li>这两个监听器不是监听Session的，而是监听Bean的。即让Bean类实现监听器接口，然后再把Bean对象添加到Session与中</li>
</ol>
<p>这两个监听器是：</p>
<ul>
<li>HttpSessionBindingListener：<ul>
<li><code>void valueBound(HttpSessionBindingEvent event)</code>：当监听器对象被添加到session中会调用这个方法</li>
<li><code>void valueUnbound(HttpSessionBindingEvent event)</code>：当监听器对象从session中移除时会调用这个方法</li>
</ul>
</li>
<li>HttpSessionActivationListener<ul>
<li><code>void sessionWillPassivate(HttpSessionEvent event)</code>：当对象感知被活化时调用本方法</li>
<li><code>void sessionDidActivate(HttpSessionEvent event)</code>：当对象感知被钝化时调用被方法</li>
</ul>
</li>
</ul>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="什么是Filter"><a href="#什么是Filter" class="headerlink" title="什么是Filter"></a>什么是Filter</h3><ol>
<li>Filter是JavaWeb的三大组件之一</li>
<li>Filter是Java EE规范</li>
<li>Filter的作用是：拦截请求，过滤响应</li>
</ol>
<p>拦截请求常见的应用场景：</p>
<ol>
<li>权限检查</li>
<li>日志操作</li>
<li>事务管理</li>
<li>…</li>
</ol>
<h3 id="Filter的使用步骤"><a href="#Filter的使用步骤" class="headerlink" title="Filter的使用步骤"></a>Filter的使用步骤</h3><ol>
<li>编写一个类实现Filter接口</li>
<li>实现<code>doFilter</code>方法</li>
<li>在<code>web.xml</code>中配置Filter（类似于Servlet的配置）</li>
</ol>
<p><strong>用户权限校验</strong></p>
<p>要求：在你的web工程下，有一个admin目录。这个admin目录下的所有资源（html页面、jpg图片、jsp文件等等）都必须是用户登录之后才允许访问的。</p>
<p>思考：根据之前我们学过的内容。我们知道，用户登录之后都会把用户信息保存到Session域中。所以要检查用户是否登录，可以判断session中是否包含有用户登录的信息即可！！！</p>
<p>在jsp页面中进行权限验证：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//检查是已经登录</span></span><br><span class="line">    Object user = session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//转发到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>很明显这种方式只适合于<code>.jsp</code>文件</p>
<p><code>Filter</code>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-09 9:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doFilter方法专门用户拦截请求，过滤响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//进行权限检查</span></span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        Object user = req.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//转发到登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>文件中的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- filter标签用于配置一个过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给filter起一个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zxw.web.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表示当前的拦截路径给哪个Filter使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置拦截路径</span></span><br><span class="line"><span class="comment">    /表示请求地址为：http://ip:port/工程路径/ 映射到idea的web目录</span></span><br><span class="line"><span class="comment">    /admin/*表示 web下的admin目录下的所有内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><p>Filter接口中有如下三个方法：</p>
<ul>
<li><code>void init(FilterConfig filterConfig)</code>：初始化方法，在web工程启动时执行</li>
<li><code>void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</code>：每次拦截到请求都会执行</li>
<li><code>void destroy()</code>：销毁方法，在web工程关闭时执行</li>
</ul>
<h3 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h3><p>FilterConfig类就是Filter的配置类。</p>
<p>Tomcat在创建Filter的同时也会创建一个FilterConfig类对象，其中包含了Filter配置文件的相关信息</p>
<p><strong>FilterConfig的作用</strong></p>
<ol>
<li>获取Filter的名称，即<code>filter-name</code>标签中的内容</li>
<li>获取Filter配置中<code>init-param</code>中的初始化参数</li>
<li>获取ServletContext对象</li>
</ol>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("filter的init（FilterConfig filterConfig)");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取Filter的名称，即`&lt;filter-name&gt;`标签中的内容</span></span><br><span class="line">    System.out.println(<span class="string">"filter-name的值是:"</span> + filterConfig.getFilterName());</span><br><span class="line">    <span class="comment">//2. 获取在Filter中配置的`init-param`初始化参数</span></span><br><span class="line">    System.out.println(<span class="string">"url:"</span> + filterConfig.getInitParameter(<span class="string">"url"</span>));</span><br><span class="line">    <span class="comment">//3. 获取ServletContext对象</span></span><br><span class="line">    System.out.println(filterConfig.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- filter标签用于配置一个过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给filter起一个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zxw.web.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表示当前的拦截路径给哪个Filter使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置拦截路径</span></span><br><span class="line"><span class="comment">    /表示请求地址为：http://ip:port/工程路径/ 映射到idea的web目录</span></span><br><span class="line"><span class="comment">    /admin/*表示 web下的admin目录下的所有内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="FilterChain过滤器链"><a href="#FilterChain过滤器链" class="headerlink" title="FilterChain过滤器链"></a>FilterChain过滤器链</h3><p>FilterChain就是过滤链，因为Filter向链条一样一次执行，只有前面的过滤器执行了FilterChain对象的<code>doFilter</code>方法放行之后，后面的Filter或者Servlet等Web资源才能够执行！如果Filter没有放行，那么就会被拦截，后面的该过滤器的后置代码以及链后面的内容都不会执行！</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200702181800408.png" align="left"/>

<p><strong>FilterChain.doFilter()方法的作用</strong>：</p>
<ol>
<li>执行下一个Filter过滤器（如果有）</li>
<li>执行目标资源（没有Filter)</li>
</ol>
<p>在多个Filter过滤器执行的时候，它们执行的有限顺序是由它们在<code>web.xml</code>中从上到下配置的顺序决定的！！！</p>
<p><strong>多个Filter过滤器执行的特点</strong>：</p>
<ol>
<li>所有filter和目标资源<strong>默认</strong>都执行在同一个线程中!</li>
<li>多个Filter共同执行的时候，它们都是用同一个Request对象</li>
</ol>
<h3 id="Filter的拦截路径"><a href="#Filter的拦截路径" class="headerlink" title="Filter的拦截路径"></a>Filter的拦截路径</h3><h4 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h4><p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/target.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上配置的路径，表示请求地址必须为：<code>http://ip:port/工程路径/target.jsp</code>  才会被过滤器过滤</p>
<h4 id="目录匹配"><a href="#目录匹配" class="headerlink" title="目录匹配"></a>目录匹配</h4><p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表示请求地址为：<code>http://ip:port/工程路径/admin/*</code>才会被过滤器过滤</p>
<h4 id="后缀名匹配"><a href="#后缀名匹配" class="headerlink" title="后缀名匹配"></a>后缀名匹配</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>过滤所有.html结尾的路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>过滤所有.do结尾的路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上配置的路径，表示请求地址必须是以.action结尾才会被拦截</p>
<p><strong>注意：</strong><font color="red">Filter过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！</font></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>监听器</tag>
        <tag>过滤器</tag>
        <tag>Listener</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2020/07/03/MyBatis/</url>
    <content><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><h3 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h3><ul>
<li>MyBatis是一个优秀的<strong>持久层框架</strong></li>
<li>它支持自定义SQL、存储过程以及高级映射</li>
<li>MyBatis免除了几乎所有的JDBC代码以及设置参数和获取结果集的工作。</li>
<li>MyBatis可以通过简单的<strong>XML</strong>或<strong>注解</strong>来配置和映射原始类型、接口和Java POJO为数据库中的记录（ORM）</li>
</ul>
<blockquote>
<p>MyBatis原名iBatis，是apache的一个开源项目，2010年迁移到了google code，并且改名为MyBatis，我们现在所说的MyBatis一般指的是MyBatis 3.0之后的版本</p>
</blockquote>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p><strong>什么是持久化？</strong></p>
<p>持久化就是把数据保存到可长期保存数据的存储设备中的技术，例如：JDBC以及文件的IO。</p>
<p><strong>为什么需要持久化？</strong></p>
<p>内存中的数据一旦掉电数据就会丢失而且内存的价格，所以将数据长期存储在内存中是不可靠的，此时就需要使用一种技术将内存中的数据长期存储在一种可掉电式存储设备中，这就是持久化技术诞生的原因。</p>
<h3 id="持久层（DAO）"><a href="#持久层（DAO）" class="headerlink" title="持久层（DAO）"></a>持久层（DAO）</h3><p>什么是持久层？</p>
<ul>
<li>持久层就是完成将数据在内存和可掉电式存储设备之间转化的代码模块（和业务逻辑层、表现层共同构成了JavaWeb三层架构）</li>
<li>持久层专注于数据的持久化功能并且应当尽量避免和其它层的耦合（有清晰的界限）</li>
</ul>
<h3 id="为什么要学习MyBatis？"><a href="#为什么要学习MyBatis？" class="headerlink" title="为什么要学习MyBatis？"></a>为什么要学习MyBatis？</h3><p>前面已经学习了使用JDBC来实现持久层，但是JDBC充其量也只能算是一个持久层的工具类，而持久层是有很多重复性的功能需要完成，如果全部都是用这些工具类来完成，对于开发人员来说成本太高。</p>
<p>框架之所以称之为框架，就是在其中封装了很多我们经常使用的功能，这些功能大大地提高了开发效率，减少了重复代码的编写</p>
<p>MyBatis是一个<strong>半自动</strong>的ORM（Object Relationship Mapping，对象关系映射）框架（半自动是因为仍然需要自己编写SQL语句，Hibernate是一个全自动的ORM框架）。</p>
<p><strong>框架的作用</strong>：很多东西不使用框架也可以实现，但是使用了框架会变得更简单！</p>
<h2 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h2><p><strong>1、创建数据库和表并插入数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mybatis;</span><br><span class="line"><span class="keyword">USE</span> mybatis;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_employee(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">    last_name <span class="built_in">VARCHAR</span>(<span class="number">255</span>), </span><br><span class="line">    gender <span class="built_in">CHAR</span>(<span class="number">1</span>), </span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_employee(last_name, gender, email) <span class="keyword">VALUES</span>(<span class="string">'tom'</span>, <span class="number">0</span>, <span class="string">'tom@qq.com'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>2、添加mybatis、mysql驱动、junit4以及log4j的依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、编写实体类和持久层接口</strong></p>
<p><code>Employee.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>EmployeeDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、编写主配置文件和映射配置文件</strong></p>
<p>主配置文件<code>SqlMapConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 连接数据库的相关参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/zxw/dao/EmployeeDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>EmployeeDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.EmployeeDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"employeeMap"</span> <span class="attr">type</span>=<span class="string">"com.zxw.domain.Employee"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"employeeMap"</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM tb_employee</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>5、log4j的配置文件</strong></p>
<p><code>log4j.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6、编写测试类</strong></p>
<p><strong>`HelloMyBatis.java</strong>`</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMyBatis</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取主配置文件的输入流对象</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//获取SqlSession</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//通过SqlSession对象获取EmployeeDao的代理类对象</span></span><br><span class="line">        EmployeeDao employeeDao = sqlSession.getMapper(EmployeeDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用代理dao类对象中的方法</span></span><br><span class="line">        List&lt;Employee&gt; employees = employeeDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><ul>
<li>SqlSession的实例<font color="red">不是线程安全</font>的，因此是不能被共享的</li>
<li>SqlSession每次<font color="red">使用完成后需要正确关闭</font>，这个关闭操作是必须的</li>
<li>SqlSession可以直接调用方法的id（例如：com.zxw.dao.EmployeeDao.findAll）进行数据库操作，但是我们一般还是推荐使用SqlSession获取到Dao接口的代理类，执行对象的方法，这样可以以更安全地进行类型检查操作。</li>
</ul>
<h2 id="MyBatis全局配置文件"><a href="#MyBatis全局配置文件" class="headerlink" title="MyBatis全局配置文件"></a>MyBatis全局配置文件</h2><p>MyBatis的配置文件包含了影响MyBatis行为的设置（settings）和属性（properties）信息。文档的顶层结构如下：</p>
<ul>
<li>configuration 配置<ul>
<li>properties 属性</li>
<li>settings 设置</li>
<li>typeAliases 类名命名</li>
<li>typeHandlers 类型处理器</li>
<li>objectFactory 对象工厂</li>
<li>plugins 插件</li>
<li>environments 环境<ul>
<li>envrionment 环境变量<ul>
<li>transactionManager 事务管理器</li>
<li>dataSource 数据源</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider 数据库厂商标识</li>
<li>mappers 映射器</li>
</ul>
</li>
</ul>
<h3 id="properties属性"><a href="#properties属性" class="headerlink" title="properties属性"></a>properties属性</h3><p>properties标签可以引入properties文件的内容，或者在其内部使用property标签来添加键值对</p>
<p><strong>使用示例</strong></p>
<p><code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>在主配置文件中使用<code>properties</code>标签引入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入db.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改数据源的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>property标签的使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"key1"</span> <span class="attr">value</span>=<span class="string">"value1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>如果属性在不止一个地方进行了配置，那么MyBatis将按照下面的顺序来加载：</strong></p>
<ul>
<li>在properties标签内指定的属性首先被读取</li>
<li>然后根据properties元素中的resource属性读取类路径下属性文件或根据url属性指定的路径去读取属性文件，并覆盖已读取的同名属性</li>
<li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性</li>
</ul>
<h3 id="settings设置"><a href="#settings设置" class="headerlink" title="settings设置"></a>settings设置</h3><p>settings标签中配置的内容是MyBatis中极为重要的设置，它们会改变MyBatis的运行时行为。</p>
<p>详细内容请参考：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p>
<table>
<thead>
<tr>
<th align="left">设置名</th>
<th align="left">描述</th>
<th align="left">有效值</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cacheEnabled</td>
<td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">lazyLoadingEnabled</td>
<td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">aggressiveLazyLoading</td>
<td align="left">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td>
<td align="left">true | false</td>
<td align="left">false （在 3.4.1 及之前的版本中默认为 true）</td>
</tr>
<tr>
<td align="left">multipleResultSetsEnabled</td>
<td align="left">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">useColumnLabel</td>
<td align="left">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">useGeneratedKeys</td>
<td align="left">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">autoMappingBehavior</td>
<td align="left">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>
<td align="left">NONE, PARTIAL, FULL</td>
<td align="left">PARTIAL</td>
</tr>
<tr>
<td align="left">autoMappingUnknownColumnBehavior</td>
<td align="left">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td>
<td align="left">NONE, WARNING, FAILING</td>
<td align="left">NONE</td>
</tr>
<tr>
<td align="left">defaultExecutorType</td>
<td align="left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>
<td align="left">SIMPLE REUSE BATCH</td>
<td align="left">SIMPLE</td>
</tr>
<tr>
<td align="left">defaultStatementTimeout</td>
<td align="left">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>
<td align="left">任意正整数</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">defaultFetchSize</td>
<td align="left">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>
<td align="left">任意正整数</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">defaultResultSetType</td>
<td align="left">指定语句默认的滚动策略。（新增于 3.5.2）</td>
<td align="left">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">safeRowBoundsEnabled</td>
<td align="left">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">safeResultHandlerEnabled</td>
<td align="left">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>
<td align="left">true | false</td>
<td align="left">True</td>
</tr>
<tr>
<td align="left">mapUnderscoreToCamelCase</td>
<td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">localCacheScope</td>
<td align="left">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>
<td align="left">SESSION | STATEMENT</td>
<td align="left">SESSION</td>
</tr>
<tr>
<td align="left">jdbcTypeForNull</td>
<td align="left">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td>
<td align="left">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>
<td align="left">OTHER</td>
</tr>
<tr>
<td align="left">lazyLoadTriggerMethods</td>
<td align="left">指定对象的哪些方法触发一次延迟加载。</td>
<td align="left">用逗号分隔的方法列表。</td>
<td align="left">equals,clone,hashCode,toString</td>
</tr>
<tr>
<td align="left">defaultScriptingLanguage</td>
<td align="left">指定动态 SQL 生成使用的默认脚本语言。</td>
<td align="left">一个类型别名或全限定类名。</td>
<td align="left">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>
</tr>
<tr>
<td align="left">defaultEnumTypeHandler</td>
<td align="left">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td>
<td align="left">一个类型别名或全限定类名。</td>
<td align="left">org.apache.ibatis.type.EnumTypeHandler</td>
</tr>
<tr>
<td align="left">callSettersOnNulls</td>
<td align="left">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">returnInstanceForEmptyRow</td>
<td align="left">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">logPrefix</td>
<td align="left">指定 MyBatis 增加到日志名称的前缀。</td>
<td align="left">任何字符串</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">logImpl</td>
<td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">proxyFactory</td>
<td align="left">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>
<td align="left">CGLIB | JAVASSIST</td>
<td align="left">JAVASSIST （MyBatis 3.3 以上）</td>
</tr>
<tr>
<td align="left">vfsImpl</td>
<td align="left">指定 VFS 的实现</td>
<td align="left">自定义 VFS 的实现的类全限定名，以逗号分隔。</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">useActualParamName</td>
<td align="left">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">configurationFactory</td>
<td align="left">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td>
<td align="left">一个类型别名或完全限定类名。</td>
<td align="left">未设置</td>
</tr>
</tbody></table>
<p>这里以mapUnderscoreToCamelCase为例，它表示是否将数据库中字段和实体类中的驼峰命名属性进行映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启数据库和驼峰命名属性的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启了之后，就可以将驼峰命名的属性和数据库中单词之间以下划线分隔的方式进行映射！</p>
<h3 id="typeAliases别名处理器"><a href="#typeAliases别名处理器" class="headerlink" title="typeAliases别名处理器"></a>typeAliases别名处理器</h3><ul>
<li><p>类型别名是为Java类型设置一个短的名字，可以方便我们引用某个类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.zxw.bean.Employee"</span> <span class="attr">alias</span>=<span class="string">"employee"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.zxw.bean.Department"</span> <span class="attr">alias</span>=<span class="string">"department"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类很多的情况下，可以批量设置别名这个包下的每一个类创建一个默认的别名，就是简单类名小写：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以使用@Alias注解为其指定一个别名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"emp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>值得注意的是，MyBatis已经为许多常见的Java类型内建了相应的类型别名。它们都是<font color="red">大小写不敏感</font>的，我们在起别名的时候千万不要占有已有的别名</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200523211851599.png" align="left"/>

<h3 id="typeHandlers类型处理器"><a href="#typeHandlers类型处理器" class="headerlink" title="typeHandlers类型处理器"></a>typeHandlers类型处理器</h3><p>MyBatis在预处理语句（PreparedStatement）中设置一个参数，或者是从结果集中取出一个值，都会使用到<font color="red">类型处理器</font>将获取的值以合适的方式进行转换。</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200523212051649.png" align="left"/>



<h4 id="日期类型的处理"><a href="#日期类型的处理" class="headerlink" title="日期类型的处理"></a>日期类型的处理</h4><ul>
<li><p><font color="red">日期和时间的处理</font>，JDK 1.8以前一直是一个头疼的问题。我们通常使用<font color="red">JSR310</font>规范领导者Stephen Colebourne创建的<font color="red">Joda-Time</font>来操作。1.8已经实现了全部的JSR310规范了。</p>
</li>
<li><p>日期时间处理上，我们可以使用MyBatis基于JSR310（Date and Time API）编写的各种<font color="red">日期时间处理器</font>。</p>
</li>
<li><p>MyBatis 3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的。</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200523212605564.png" align="left"/>



</li>
</ul>
<h4 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a>自定义类型处理器</h4><ul>
<li>我们可以重写类型处理器或创建自己的类型处理器来处理不支持或非标准的类型</li>
<li>步骤：<ol>
<li>实现<code>org.apache.ibatis.type.TypeHandler</code>接口或继承<code>org.apache.ibatis.type.BaseTypeHandler</code>类</li>
<li>指定其映射某个JDBC类型（可选操作）</li>
<li>在MyBatis全局配置文件中注册</li>
</ol>
</li>
</ul>
<p>在讲到<strong>MyBatis原理</strong>的章节时，会对自定义类型处理器进行仔细的研究！</p>
<h3 id="plugins插件"><a href="#plugins插件" class="headerlink" title="plugins插件"></a>plugins插件</h3><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过<font color="red">动态代理机制</font>，可以介入四大对象的任何一个方法的执行。在插件开发章节会进行详细介绍！</p>
<ul>
<li><font color="red">Executor</font>（update、query、flushStatements、commit、rollback、getTransaction、close、isClosed）</li>
<li><font color="red">ParameterHandler</font>（getParameterObject、setParameters）</li>
<li><font color="red">ResultSetHandler</font> (handleResultSets, handleOutputParameters)</li>
<li><font color="red">StatementHandler</font> (prepare, parameterize, batch, update, query)</li>
</ul>
<h3 id="environments环境"><a href="#environments环境" class="headerlink" title="environments环境"></a>environments环境</h3><ul>
<li>MyBatis可以配置多种环境，比如开发、测试和生产环境等</li>
<li>每种环境使用一个<code>environment</code>标签进行配置并指定唯一标识符</li>
<li>可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境</li>
</ul>
<h4 id="environment-指定具体环境"><a href="#environment-指定具体环境" class="headerlink" title="environment-指定具体环境"></a>environment-指定具体环境</h4><ul>
<li>id：指定当前环境的唯一标识</li>
<li>transactionManager和dataSource都必须有</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h5><ul>
<li><p>type：JDBC | MANAGED | 自定义</p>
<ul>
<li><p><code>JDBC</code>：使用了JDBC的提交和回滚设置,依赖于从数据源得到的连接来管理事务范围</p>
<p>JdbcTransactionManager</p>
</li>
<li><p><code>MANAGED</code>：不提交或回滚一个连接，让容器来管理事务的整个生命周期（比如Java EE应用服务器的上下文）。</p>
<p>ManagedTransactionFactory</p>
</li>
<li><p><code>自定义</code>：实现TransactionFactory接口，type=全类名/别名</p>
</li>
</ul>
</li>
</ul>
<h5 id="dataSource"><a href="#dataSource" class="headerlink" title="dataSource"></a>dataSource</h5><ul>
<li>type：UNPOOLED | POOLED | JNDI | 自定义<ul>
<li>UNPOOLED：不使用连接池，UnpooledDataSourceFactory</li>
<li>POOLED：使用连接池，PooledDataSourceFactory</li>
<li>JNDI：在EJB或应用服务器这类容器中查找指定的数据源</li>
<li>自定义：实现DataSourceFactory接口，定义数据源的获取方式</li>
</ul>
</li>
<li><font color="red">实际开发中，使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</font></li>
</ul>
<h3 id="databaseProvider数据库厂商标识"><a href="#databaseProvider数据库厂商标识" class="headerlink" title="databaseProvider数据库厂商标识"></a>databaseProvider数据库厂商标识</h3><ul>
<li><p>MyBatis可以根据不同的数据库厂商执行不同的语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库厂商标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Type：DB_VENDOR</p>
<ul>
<li>使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义。</li>
</ul>
</li>
<li><p>Property-name：数据库厂商标识</p>
</li>
<li><p>Property-value：为标识起一个别名，方便SQL语句使用databaseId属性引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"employee"</span> <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">	select * from tb_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>DB_VENDOR</p>
<ul>
<li>会通过DatabaseMetaData#getDatabaseProductName()返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短</li>
</ul>
<p>MyBatis匹配规则如下：</p>
<ol>
<li>如果没有配置databaseIdProvider标签，那么<code>databaseId=null</code></li>
<li>如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置<code>databaseId=配置指定的值</code>，否则依旧为null</li>
<li>如果databaseId不为null，它只会找到配置databaseId的SQL语句</li>
<li>MyBatis会加载<font color="red">不带databaseId</font>属性和带有<font color="red">匹配当前数据库databaseId属性的所有语句</font>。如果同时找到带有databaseId和不带databaseId的相同语句，则后者会被舍弃。</li>
</ol>
<h3 id="mappers映射"><a href="#mappers映射" class="headerlink" title="mappers映射"></a>mappers映射</h3><ul>
<li><p>mapper逐个注册SQL映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/zxw/dao/Person.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///D:/UserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.zxw.dao.AccountDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或者使用批量注册：</p>
<p>这种方式要求SQL映射文件必须和接口名相同并且在同一目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="MyBatis映射配置文件"><a href="#MyBatis映射配置文件" class="headerlink" title="MyBatis映射配置文件"></a>MyBatis映射配置文件</h2><p>MyBatis真正强大之处在于它的语句映射，这是它的魔力所在。映射器的XML文件相对简单，如果你将它和具有相同功能的JDBC代码进行比较，就会发现它省掉了将近95%的代码。MyBatis致力于减少使用成本，让用户能够更专注于SQL代码。</p>
<p>QL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p>
<ul>
<li><code>cache</code>：该命名空间的缓存配置</li>
<li><code>cache-ref</code>：引用其它命名空间的缓存配置</li>
<li><code>resultMap</code>：描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素</li>
<li><s><code>parameterMap</code> – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。</s></li>
<li><code>sql</code>：可被其它语句引用的可重用语句块</li>
<li><code>insert</code>：映射插入语句</li>
<li><code>update</code>：映射更新语句</li>
<li><code>delete</code>：映射删除语句</li>
<li><code>select</code>：映射查询语句</li>
</ul>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>查询语句是MyBatis中最常用的元素之一，光能把数据存到数据库中价值并不大，还要能重新取出来才有用，多数应用也都是查询比修改频繁。MyBatis的基本原则之一是：<strong>在每个插入、更新或删除操作之间，通常会执行多个查询操作</strong>。因此，MyBatis在查询和结果映射做了相当多的改进。一个简单的select元素是非常简单的。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">	select * from person where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句名为selectPerson，接受一个int（或Integer）类型的参数，并返回一个HashMap类型的对象，其中键是列名，值便是结果行中的对应值。</p>
<p>注意参数符号：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>这就告诉MyBatis创建一个预处理语句（PreparedStatement）参数，在JDBC中，这样一个参数在SQL中会由一个<code>?</code>来标识，并被传递到一个新的预处理语句中，就像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//近似的JDBC代码，非MyBatis代码</span></span><br><span class="line">String selectPerson = <span class="string">"SELECT * FROM person WHERE id=?"</span>;</span><br><span class="line">ps.setInt(<span class="number">1</span>, id);</span><br></pre></td></tr></table></figure>

<p>当然，使用JDBC就意味着使用更多的代码，以便提取结果并将它们映射到对象实例中，而这就是MyBatis的拿手好戏。参数和结果映射细节会分别在后面单独的小节中说明。</p>
<p><strong>select元素的属性</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>id</code></td>
<td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td align="left"><code>parameterType</code></td>
<td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="left"><del>parameterMap</del></td>
<td align="left">用于引用外部 parameterMap 的属性，目前<strong>已被废弃</strong>。请使用行内参数映射和 parameterType 属性。</td>
</tr>
<tr>
<td align="left"><code>resultType</code></td>
<td align="left">期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td align="left"><code>resultMap</code></td>
<td align="left">对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td align="left"><code>flushCache</code></td>
<td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td>
</tr>
<tr>
<td align="left"><code>useCache</code></td>
<td align="left">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td>
</tr>
<tr>
<td align="left"><code>timeout</code></td>
<td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td align="left"><code>fetchSize</code></td>
<td align="left">这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="left"><code>resultSetType</code></td>
<td align="left">FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。</td>
</tr>
<tr>
<td align="left"><code>databaseId</code></td>
<td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
</tr>
<tr>
<td align="left"><code>resultOrdered</code></td>
<td align="left">这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：<code>false</code>。</td>
</tr>
<tr>
<td align="left"><code>resultSets</code></td>
<td align="left">这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。</td>
</tr>
</tbody></table>
<h3 id="insert、update和delete"><a href="#insert、update和delete" class="headerlink" title="insert、update和delete"></a>insert、update和delete</h3><p>数据变更语句insert、update和delete的实现非常接近：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"insertAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"updateAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"deleteAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>insert、update、delete元素的属性</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>id</code></td>
<td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td align="left"><code>parameterType</code></td>
<td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="left"><code>parameterMap</code></td>
<td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td>
</tr>
<tr>
<td align="left"><code>flushCache</code></td>
<td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td>
</tr>
<tr>
<td align="left"><code>timeout</code></td>
<td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="left"><code>useGeneratedKeys</code></td>
<td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td>
</tr>
<tr>
<td align="left"><code>keyProperty</code></td>
<td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>keyColumn</code></td>
<td align="left">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>databaseId</code></td>
<td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
</tr>
</tbody></table>
<p>下面是insert、update、delete的语句的示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span>&gt;</span></span><br><span class="line">	insert into user(id, name, gender, email) </span><br><span class="line">    values(#&#123;id&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></span><br><span class="line">	update user </span><br><span class="line">    set name=#&#123;name&#125;, </span><br><span class="line">    	gender=#&#123;gender&#125;, </span><br><span class="line">    	email=#&#123;email&#125;</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delte</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span>&gt;</span></span><br><span class="line">	delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delte</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="插入语句的主键生成"><a href="#插入语句的主键生成" class="headerlink" title="插入语句的主键生成"></a>插入语句的主键生成</h4><p>如前所述，插入语句的配置规则更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，并且提供了多种生成方式。</p>
<p>首先，如果你的<strong>数据库支持自动生成主键的字段</strong>（比如MySQL和SQL Server），那么你可以设置<code>useGenerateKeys=“true”</code>，然后把<code>keyProperty</code>设置为目标属性就OK了。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">useGenerateKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">	insert into user(name, gender, email) </span><br><span class="line">    values(#&#123;name&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你的数据库还支持多行插入，你也可以传一个User数组或集合，并返回自动生成的主键</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUsers"</span> <span class="attr">useGenerateKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">	insert into user(name, gender, email) values </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">    	(#&#123;item.name&#125;, #&#123;item.gender&#125;, #&#123;item.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于<strong>不支持自动生成主键列的数据库和可能不支持自动生成主键的JDBC驱动</strong>，MyBatis还有另外一种方式生成主键。</p>
<p>这里有一个简单（也很傻）的示例，它可以生成一个随机ID（不建议实际使用，这里只是为了展示MyBatis处理问题的灵活性和宽容度）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFOER"</span>&gt;</span></span><br><span class="line">    	select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user(id, name, gender, email) </span><br><span class="line">    values (#&#123;id&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面示例中，首先会运行<code>selectKey</code>元素中的语句，并设置user的id，然后才会调用插入语句。这样就实现了数据库自动生成主键类似的行为，同时保持了Java代码的简洁。</p>
<p><code>selectKey</code>元素描述如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">order</span>=<span class="string">"BEFORE"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>keyProperty</code></td>
<td align="left"><code>selectKey</code> 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>keyColumn</code></td>
<td align="left">返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>resultType</code></td>
<td align="left">结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。</td>
</tr>
<tr>
<td align="left"><code>order</code></td>
<td align="left">可以设置为 <code>BEFORE</code> 或 <code>AFTER</code>。如果设置为 <code>BEFORE</code>，那么它首先会生成主键，设置 <code>keyProperty</code> 再执行插入语句。如果设置为 <code>AFTER</code>，那么先执行插入语句，然后是 <code>selectKey</code> 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="left">和前面一样，MyBatis 支持 <code>STATEMENT</code>，<code>PREPARED</code> 和 <code>CALLABLE</code> 类型的映射语句，分别代表 <code>Statement</code>, <code>PreparedStatement</code> 和 <code>CallableStatement</code> 类型。</td>
</tr>
</tbody></table>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>这个元素可以用来定义可重用的SQL代码片段，以便在其他语句中使用。参数可以静态地（在加载的时候）确定下来，并且可以在不同的<code>include</code>元素中定义不同的参数值。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id, $&#123;alias&#125;.username, $&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个SQL片段可以在其他语句中使用，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  from some_table t1</span><br><span class="line">    cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以在<code>include</code>元素的<code>refid</code>属性或内部语句中使用属性值，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sometable"</span>&gt;</span></span><br><span class="line">  $&#123;prefix&#125;Table</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">  from</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"$&#123;include_target&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    field1, field2, field3</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"Some"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include_target"</span> <span class="attr">value</span>=<span class="string">"sometable"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="单个参数的传递"><a href="#单个参数的传递" class="headerlink" title="单个参数的传递"></a>单个参数的传递</h4><p>之前见到的所有语句都使用了简单的参数形式。实际上，参数是MyBatis非常强大的元素。对于大多数简单的使用场景，你都不需要使用复杂的参数，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">	select id, username, password </span><br><span class="line">    from user </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这个示例说明了一个非常简单的命名参数映射。鉴于参数类型（parameterType）会被自动设置为<code>int</code>这个参数可以随意命名。原始类型或简单数据类型（比如Integer和String）因为没有其他属性，会用它们的值来作为参数。</p>
<h4 id="多个参数的传递"><a href="#多个参数的传递" class="headerlink" title="多个参数的传递"></a>多个参数的传递</h4><p><strong>方式一</strong>：顺序传递法</p>
<p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(String username, String password)</span></span>;</span><br></pre></td></tr></table></figure>

<p>对应映射配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;0&#125; and password=#&#123;1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#{}</code>里面的数字代表传入参数的顺序</p>
<p>不建议使用这种方式，不直观，参数如果调换了顺序容易出错</p>
<p><strong>方式二</strong>：@Param注解传入参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String usernmae, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式在参数不多的情况下可以使用</p>
<p><strong>方式三</strong>：Map传参法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#{}</code>里面的名称对应的是Map中的key</p>
<p><strong>方式四</strong>：Java Bean传参法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用了别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#{}</code>中的名称就是对应User类对象的属性</p>
<p>这种方式很直观，但是需要创建一个实体类，不易于扩展，需要增加属性，可以看情况使用。</p>
<p>更多MyBatis参数有关的内容参考：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Parameters" target="_blank" rel="noopener">MyBatis参数</a></p>
<h5 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a><code>#{}</code>和<code>${}</code>的区别</h5><p><code>#{}</code>是预编译处理，<code>${}</code>是字符串替换。</p>
<p>Mybatis在处理<code>#{}</code>时，会将sql中的<code>#{}</code>替换为?号，调用PreparedStatement的set方法来赋值；</p>
<p>Mybatis在处理<code>${}</code>时，就是把<code>${}</code>替换成变量的值。</p>
<p>使用<code>#{}</code>可以有效的防止SQL注入，提高系统安全性。</p>
<h3 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h3><p><code>resultMap</code>元素是MyBatis中最重要最强大的元素。它用于结果映射，下面是一个简单的示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">	select id, username, password </span><br><span class="line">    from user </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个查询语句没有显式指明resultMap，而是给出了<code>resultType</code>的值为Map，所以会将所有的结果映射成一个HashMap中。在绝大多数情况下，只需要指定<code>resultType</code>的值即可，很多时候会指定<code>resultType</code>为一个JavaBean或者POJO。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.User"</span>&gt;</span></span><br><span class="line">	select id, username, password </span><br><span class="line">    from user </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句会将结果封装到一个User对象的对应属性当中（注意，这种方式一般要求属性名和数据库中表对应的列名相同）</p>
<p>即使列名与JavaBean中的属性名不匹配也没有关系，有两种方式来处理这个问题：</p>
<p><strong>方式一</strong>：使用别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">	select </span><br><span class="line">    	user_id as id, </span><br><span class="line">    	user_name as username, </span><br><span class="line">    	user_password as password </span><br><span class="line">    from user </span><br><span class="line">    where user_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：使用<code>resultMap</code>属性</p>
<p>首先需要定义一个resultMap</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"user_password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后再查询语句的<code>resultMap</code>属性引用这个id即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line">	select user_id, user_name, user_password </span><br><span class="line">    from user </span><br><span class="line">    where user_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h4><p>MyBatis创建时的一个思想就是：数据库不可能永远是你想要的那个样子，我们希望所有的数据都具备良好的第三范式或者BCNF范式，可以现实并非如此，resultMap就是MyBatis对于这个问题的解决方法</p>
<p><strong>resultMap子标签</strong></p>
<ul>
<li><code>constructor</code>：用于在实例化类时，注入结果到构造方法中<ul>
<li><code>idArg</code>：ID参数；标记出作为 ID 的结果可以帮助提高整体性能</li>
<li><code>arg</code>：将被注入到构造方法的一个普通结果</li>
</ul>
</li>
<li><code>id</code>：一个ID结果；标记出作为 ID 的结果可以帮助提高整体性能</li>
<li><code>result</code>：注入到一个字段或JavaBean属性的普通结果</li>
<li><code>association</code>：关联一个复杂类型</li>
<li><code>collection</code>：关联一个复杂类型的集合</li>
<li><code>discriminator</code>：根据情况来决定使用哪个resultMap<ul>
<li>case：基于某些值的结果映射</li>
</ul>
</li>
</ul>
<p><strong>resultMap标签的属性</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>id</code></td>
<td align="center">当前命名空间中的一个唯一标识，用于标识一个结果映射。</td>
</tr>
<tr>
<td align="center"><code>type</code></td>
<td align="center">类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。</td>
</tr>
<tr>
<td align="center"><code>autoMapping</code></td>
<td align="center">如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。</td>
</tr>
</tbody></table>
<p><strong>Tips</strong>: 最好逐步建立结果映射。单元测试可以在这个过程中起到很大帮助。 如果你尝试一次性创建巨大的结果映射，不仅容易出错，难度也会直线上升。 所以，从最简单的形态开始，逐步迭代。而且别忘了单元测试！ 有时候，框架的行为像是一个黑盒子（无论是否开源）。因此，为了确保实现的行为与你的期望相一致，最好编写单元测试。 并且单元测试在提交 bug 时也能起到很大的作用。</p>
<p><strong>resultMap中的子标签和属性的细节请参考</strong>：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Result_Maps" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Result_Maps</a></p>
<h3 id="MyBatis多表查询"><a href="#MyBatis多表查询" class="headerlink" title="MyBatis多表查询"></a>MyBatis多表查询</h3><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>以用户和账户之间的一对多关系为例。</p>
<p><strong>步骤</strong>：</p>
<ol>
<li>建立两张表：用户表、账户表<ul>
<li>让用户表和账户表之间具备一对多的关系：需要在账户表中添加外键</li>
</ul>
</li>
<li>建立两个实体类：用户实体类和账户实体类<ul>
<li>让用户实体类和账户实体类之间能够体现出一对多的关系</li>
</ul>
</li>
<li>建立两个配置文件<ul>
<li>用户配置文件</li>
<li>账户配置文件 </li>
</ul>
</li>
<li>实现配置<ul>
<li>当我们查询用户时可以同时得到用户下所包含的账户信息</li>
<li>当我们查询账户时可以同时得到账户的所属用户信息</li>
</ul>
</li>
</ol>
<h5 id="一对一查询（多对一）"><a href="#一对一查询（多对一）" class="headerlink" title="一对一查询（多对一）"></a>一对一查询（多对一）</h5><p>如果只从一个账户来看，那么多对一也就是一对一。</p>
<p><code>Account.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有账户，同时还要获取当前账户的所属用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>AccountDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装account和user的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有账户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">    select u.*, a.id aid, a.uid, a.money</span><br><span class="line">    from account a, user u</span><br><span class="line">    where a.uid=u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h5><p><code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>UserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">    select u.*, a.id aid, a.uid, a.money</span><br><span class="line">    from user u left outer join account a</span><br><span class="line">    on u.id=a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>以用户和角色为例。</p>
<p><strong>步骤</strong>：</p>
<ol>
<li>建立两张表：用户表、角色表<ul>
<li>让用户表和角色表之间具备多对多的关系：需要使用中间表，中间表中包含各自的主键，在中间表中是外键</li>
</ul>
</li>
<li>建立两个实体类：用户实体类和角色实体类<ul>
<li>让用户实体类和角色实体类之间能够体现出多对多的关系</li>
<li>各自包含对方一个集合引用</li>
</ul>
</li>
<li>建立两个配置文件<ul>
<li>用户配置文件</li>
<li>角色配置文件 </li>
</ul>
</li>
<li>实现配置<ul>
<li>当我们查询用户时可以同时得到用户下所包含的角色信息</li>
<li>当我们查询角色时可以同时得到角色的所包含用户信息</li>
</ul>
</li>
</ol>
<h5 id="Role到User多对多"><a href="#Role到User多对多" class="headerlink" title="Role到User多对多"></a>Role到User多对多</h5><p>实体类<code>Role.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line">    <span class="comment">//多对多的关系映射</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Role&#123;"</span> +</span><br><span class="line">                <span class="string">"roleId="</span> + roleId +</span><br><span class="line">                <span class="string">", roleName='"</span> + roleName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", roleDesc='"</span> + roleDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDesc</span><span class="params">(String roleDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDesc = roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dao接口<code>RoleDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>RoleDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义role表的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleUserMap"</span> <span class="attr">type</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"roleId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_name"</span> <span class="attr">property</span>=<span class="string">"roleName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_desc"</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"roleUserMap"</span>&gt;</span></span><br><span class="line">    SELECT u.*, r.id rid, r.role_name, r.role_desc</span><br><span class="line">    FROM role r LEFT OUTER JOIN user_role ur</span><br><span class="line">    ON r.id=ur.rid</span><br><span class="line">    LEFT OUTER JOIN USER u</span><br><span class="line">    ON ur.uid=u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="User到Role的多对多"><a href="#User到Role的多对多" class="headerlink" title="User到Role的多对多"></a>User到Role的多对多</h5><p>实体类<code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//多对多关系映射</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dao接口<code>UserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>UserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">    SELECT u.*, r.id rid, r.role_name, r.role_desc FROM USER u LEFT OUTER JOIN user_role ur</span><br><span class="line">    ON u.id=ur.uid</span><br><span class="line">    LEFT OUTER JOIN role r</span><br><span class="line">    ON ur.rid=r.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="延迟加载策略"><a href="#延迟加载策略" class="headerlink" title="延迟加载策略"></a>延迟加载策略</h3><p>前面介绍了MyBatis的一对一、一对多、多对多实现，这些加载方式都是立即加载的，即查询一个对象的同时会将其关联对象的信息也查询出来。</p>
<p><strong>延迟加载</strong>：与立即加载相对应的就是延迟加载，延迟加载就是在需要使用的时候才对关联的对象进行查询，延迟记载也称为<strong>懒加载</strong></p>
<p><strong>优点</strong>：先从单表查询，需要时再从关联表去关联查询，大大提高了数据库的性能（单表查询的效率要高于多表查询）</p>
<p><strong>坏处</strong>：因为只有需要使用到的时候才会进行查询，查询的过程也会占用一定的时间，所以可能会造成用户的等待时间边长，从而影响用户的体验。</p>
<p><strong>要使用延迟记载需要在主配置文件中开启延迟加载</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打开延迟加载的开关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将积极加载修改为按需加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>lazyLoadingEnabled</code>的默认值为<code>false</code>，<code>aggressivLazyLoading</code>的默认值在3.4.1（包含）前为true，之后为false</p>
<h4 id="使用assocation实现懒加载"><a href="#使用assocation实现懒加载" class="headerlink" title="使用assocation实现懒加载"></a>使用<code>assocation</code>实现懒加载</h4><p><strong>需求</strong>：查询账户信息同时查询用户信息</p>
<p>修改<code>AccountDao.xml</code>的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.AccountDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义封装account和user的ResultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容</span></span><br><span class="line"><span class="comment">         select属性指定的内容是查询用户的唯一标志</span></span><br><span class="line"><span class="comment">         column指定用户根据id查询时参数的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">javaType</span>=<span class="string">"user"</span> <span class="attr">select</span>=<span class="string">"com.zxw.dao.UserDao.findById"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有账户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">        select * from account;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有账户信息同时包含用户名和地址信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccount"</span> <span class="attr">resultType</span>=<span class="string">"accountUser"</span>&gt;</span></span><br><span class="line">        select a.*, u.username, u.address from account a, user u where u.id=a.uid;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时就实现了使用<code>assocation</code>实现延迟加载，</p>
<p><code>fetchType</code>属性：<code>assocation</code>标签的属性，可以自定义是否懒加载</p>
<ul>
<li><code>eager</code>：立即加载</li>
<li><code>lazy</code>：延迟加载</li>
</ul>
<h4 id="使用collection实现懒加载"><a href="#使用collection实现懒加载" class="headerlink" title="使用collection实现懒加载"></a>使用<code>collection</code>实现懒加载</h4><p><strong>需求</strong>：实现查询用户延迟加载账户信息</p>
<p><strong>在<code>AccountDao</code>中添加根据uid查询账户信息的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据uid查询账户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>在<code>AccountDao.xml</code>中进行配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据uid查询账户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    select * from account where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改<code>UserDao.xml</code>中的配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义User的ResultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置user对象中accounts集合的映射</span></span><br><span class="line"><span class="comment">        column指定使用user表中的id作为account的uid进行查询</span></span><br><span class="line"><span class="comment">        select指定查询账户信息的语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">"com.zxw.dao.AccountDao.findById"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>collection</code>标签中也有<code>fetchType</code>属性</p>
<ul>
<li><code>eager</code>：立即加载</li>
<li><code>lazy</code>：延迟加载</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>这部分主要介绍了<code>cache</code>标签的使用，可以结合<strong>缓存机制</strong>章节进行学习，<code>cache</code>标签的细节参考：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache</a></p>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态SQL是MyBatis的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p>
<p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p>
<p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserIf"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">	select * from user where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">    	and id=#&#123;id&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">    	and username=#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">    	and password=#&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="choose（when、otherwise）"><a href="#choose（when、otherwise）" class="headerlink" title="choose（when、otherwise）"></a>choose（when、otherwise）</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.zxw.bean.Employee"</span>&gt;</span></span><br><span class="line">	select * from tb_employee </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">            	id=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName != null"</span>&gt;</span></span><br><span class="line">            	last_name=#&#123;lastName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            	1=1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><p>前面几个例子已经合宜地解决了一个臭名昭著的动态 SQL 问题。现在回到之前的 “if” 示例，这次我们将 “state = ‘ACTIVE’” 设置成动态条件，看看会发生什么。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br></pre></td></tr></table></figure>

<p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br><span class="line">AND title like ‘someTitle’</span><br></pre></td></tr></table></figure>

<p>这个查询也会失败。这个问题不能简单地用条件元素来解决。这个问题是如此的难以解决，以至于解决过的人不会再想碰到这种问题。</p>
<p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p>
<p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p>
<p>用于动态更新语句的类似解决方案叫做 <em>set<em>。</em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthorIfNecessary"</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bio != null"</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p>
<p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>collection</code>：是属性中的集合</li>
<li><code>item</code>：是遍历出来的每一个元素</li>
<li><code>open</code>：是循环前面添加的内容</li>
<li><code>close</code>：是循环后面添加的内容</li>
<li><code>separator</code>：是循环结果用什么分隔符进行分隔</li>
<li><code>index</code><ul>
<li>当迭代列表、集合等可迭代对象或者数组时<ul>
<li><font color="red">index</font>是当前<font color="red">迭代的次数</font>，<font color="red">item</font>的值是本次<font color="red">迭代获取的元素</font></li>
</ul>
</li>
<li>当使用字典（或者Map.Entry对象的集合时）<ul>
<li><font color="red">index</font>是键，<font color="red">item</font>是值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。比如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update</span>(&#123;<span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">  <span class="string">"update Author"</span>,</span><br><span class="line">  <span class="string">"  &lt;set&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='username != null'&gt;username=#&#123;username&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='password != null'&gt;password=#&#123;password&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='email != null'&gt;email=#&#123;email&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='bio != null'&gt;bio=#&#123;bio&#125;&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"  &lt;/set&gt;"</span>,</span><br><span class="line">  <span class="string">"where id=#&#123;id&#125;"</span>,</span><br><span class="line">  <span class="string">"&lt;/script&gt;"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAuthorValues</span><span class="params">(Author author)</span></span>;</span><br></pre></td></tr></table></figure>



<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="多数据库支持"><a href="#多数据库支持" class="headerlink" title="多数据库支持"></a>多数据库支持</h3><p>如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如下面的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多数据库支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId == 'oracle'"</span>&gt;</span></span><br><span class="line">      select seq_users.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId == 'db2'"</span>&gt;</span></span><br><span class="line">      select nextval for seq_users from sysibm.sysdummy1"</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p><strong>缓存</strong>：存储在内存中的临时数据</p>
<ul>
<li>MyBatis包含了一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存</li>
</ul>
<p><strong>一级缓存和二级缓存</strong></p>
<ol>
<li>默认情况下，只开启了一级缓存（SqlSession级别的缓存，也称为<strong>本地缓存</strong>）</li>
<li>二级缓存需要手动开启和配置，它是基于namespace级别的缓存</li>
<li>为了提高可扩展性，MyBatis提供了一个Cache接口，可以通过实现Cache接口来自定义二级缓存</li>
</ol>
<p>MyBatis中缓存的查询顺序如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526092059788.png" align="left"/>



<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul>
<li><p>一级缓存（<strong>local cache</strong>），即<strong>本地缓存</strong>，作用域默认为sqlSession。当Session flush或者close后，该Session中的所有cache都会被清空</p>
</li>
<li><p><font color="red">本地缓存不能被关闭</font>，但是可以调用<code>clearCache()</code>来清空本地缓存，或者改变缓存的作用域</p>
</li>
<li><p>在MyBatis 3.1之后，可以配置本地缓存的作用域（在settings标签中配置）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200525090549356.png" align="left"/>

</li>
</ul>
<p><strong>一级缓存原理</strong></p>
<ul>
<li>同一次会话期间，只要查询过的数据都会保存在当前sqlSession的一个Map中，这个Map的key是：hashCode+查询的SqlId+编写的sql查询语句+参数</li>
</ul>
<p><strong>一级缓存失效的四种情况</strong></p>
<ol>
<li>不同的SqlSession对应不同的一级缓存</li>
<li>同一个SqlSession但是<strong>查询条件不同</strong></li>
<li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li>
<li>同一个SqlSession两次查询期间清空了缓存</li>
</ol>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul>
<li>二级缓存（second level cache），全局作用域缓存</li>
<li>二级缓存默认不开启，需要手动配置</li>
<li>MyBatis提供了二级缓存的接口及实现，缓存要求POJO实现Serializable接口</li>
<li>二级缓存在<strong>SqlSession关闭或提交</strong>之后才会生效</li>
</ul>
<p><strong>使用步骤</strong></p>
<ol>
<li><p>全局配置文件中开启二级缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要使用二级缓存的映射文件处使用cache标签配置缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>cache标签的相关内容可以查看<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache</a></p>
</li>
<li><p>注意定义个POJO类需要实现Serializable接口</p>
</li>
<li><p>在对应的select标签中配置<code>useCache</code>属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>useCache的默认值为true，如果需要配置查询的SQL语句不使用二级缓存，则需要设置<code>useCache=false</code></p>
</li>
</ol>
<h4 id="缓存相关属性"><a href="#缓存相关属性" class="headerlink" title="缓存相关属性"></a>缓存相关属性</h4><p><strong>cache标签的相关属性：</strong></p>
<ul>
<li><code>eviction</code>：缓存回收策略<ul>
<li><code>LRU</code>—最近最少使用的：移除最长时间不被使用的对象，<strong>默认值</strong></li>
<li><code>FIFO</code>—先进先出：按对象进入缓存的顺序来移除它们</li>
<li><code>SOFT</code>—软引用：移除基于垃圾回收器状态和软引用规则的对象</li>
<li><code>WEAK</code>—弱引用：更积极地移除基于垃圾回收器状态和弱引用规则的对象</li>
</ul>
</li>
<li><code>flushInterval</code>：刷新间隔，单位为毫秒<ul>
<li>默认情况下不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li>
</ul>
</li>
<li><code>readOnly</code>：只读<ul>
<li><code>true</code>：只读缓存：会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势</li>
<li><code>false</code>：读写缓存：会返回对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li>
</ul>
</li>
</ul>
<h3 id="缓存有关配置"><a href="#缓存有关配置" class="headerlink" title="缓存有关配置"></a>缓存有关配置</h3><ol>
<li>全局setting的<font color="red">cacheEabled</font><ul>
<li>配置二级缓存的开关。一级缓存一直是打开的</li>
</ul>
</li>
<li>select标签的<font color="red">useCache</font>属性<ul>
<li>配置这个select是否使用二级缓存。一级缓存一直是使用的</li>
</ul>
</li>
<li>sql标签的<font color="red">flushCache属性</font>：<ul>
<li>增删改默认flushCache=true。sql执行以后会同时清空一级缓存和二级缓存。查询默认flushCache=false</li>
</ul>
</li>
<li>sqlSession.clearCache()：<ul>
<li>只是用来清空一级缓存</li>
</ul>
</li>
<li>当在某一个作用域（一级缓存Session/二级缓存Namespaces）进行C/U/D操作后，默认该作用域下<font color="red">所有的select中的缓存都被clear</font></li>
</ol>
<h3 id="第三方缓存整合"><a href="#第三方缓存整合" class="headerlink" title="第三方缓存整合"></a>第三方缓存整合</h3><ul>
<li>EhCache是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider</li>
<li>MyBatis定义了Cache接口方便我们进行自定义拓展</li>
</ul>
<p><strong>整合步骤</strong>：</p>
<ol>
<li><p>导入ehcache，MyBatis整合ehcache包、slf4j的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.sf.ehcache/ehcache --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写<code>ehcache.xml</code>配置文件</p>
</li>
<li><p>配置cache标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.chaches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><strong>参照缓存</strong>：若想在命名空间中共享相同的缓存配置和实例。可以使用<code>cache-ref</code>标签来引用另一个缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.UserDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Spring整合"><a href="#Spring整合" class="headerlink" title="Spring整合"></a>Spring整合</h2><ol>
<li><p>查看不同版本的MyBatis整合Spring时使用的适配包：<a href="http://mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/index.html</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200525095500301.png" align="left"/>
</li>
<li><p>下载整合适配包：<a href="https://github.com/mybatis/spring/releases" target="_blank" rel="noopener">https://github.com/mybatis/spring/releases</a></p>
</li>
<li><p>官方整合示例：<a href="https://github.com/mybatis/jpetstore-6" target="_blank" rel="noopener">jpetstore</a></p>
</li>
</ol>
<p>具体的整合步骤请参考SpringMVC中SSM整合的相关内容！</p>
<h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><ul>
<li>MyBatis Generator</li>
<li>简称MBG，是一个专门为<strong>MyBatis</strong>框架使用者定制的<strong>代码生成器</strong>，可以快速根据数据库中的表生成对应的映射文件、接口以及bean类。支持基本的增删改查，以及QBC风格的条件查询。但是表连接、存储过程等这些复杂的SQL的定义仍需手动编写</li>
</ul>
<p><strong>官方文档地址</strong>：<a href="http://mybatis.org/generator/" target="_blank" rel="noopener">http://mybatis.org/generator/</a></p>
<p><strong>官方工程地址</strong>：<a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases</a></p>
<h3 id="MBG的使用"><a href="#MBG的使用" class="headerlink" title="MBG的使用"></a>MBG的使用</h3><p><strong>使用步骤</strong>：</p>
<ol>
<li>编写MBG的配置文件（下面是几处重要的配置）<ul>
<li><code>jdbcConnection</code>：配置数据库连接信息</li>
<li><code>javaModelGenerator</code>：配置JavaBean的生成策略</li>
<li><code>sqlMapGenerator</code>：配置映射文件的生成策略</li>
<li><code>javaClientGenerator</code>：配置Mapper接口的生成策略</li>
<li><code>table</code>：要逆向解析的数据库表名<ul>
<li>tableName：表名</li>
<li>domainObjectName：对应Bean的类名</li>
</ul>
</li>
</ul>
</li>
<li>运行代码生成器生成代码</li>
</ol>
<p><strong>注意</strong>：</p>
<p>Context标签：</p>
<ul>
<li><code>targetRuntime=“MyBatis3”</code>：可以生成带条件的增删改查</li>
<li><code>targetRuntime=“MyBatis3Simple”</code>：可以生成基本的增上改查</li>
<li>如果再次生成，建议将之前生成的数据删除，避免xml向后追加内容出现问题</li>
</ul>
<ol>
<li><p>添加Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建<code>generatorConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"simple"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jdbcConnection：如何连接到目标数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaModelGenerator：指定JavaBean的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.zxw.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sqlMapGenerator：sql映射生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.zxw.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaClientGenerator 指定mapper接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.zxw.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定要逆向分析哪些表，根据表创建JavaBean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> <span class="attr">mapperName</span>=<span class="string">"UserDao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"account"</span> <span class="attr">domainObjectName</span>=<span class="string">"Account"</span> <span class="attr">mapperName</span>=<span class="string">"AccountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Java程序来启动MBG生成代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(in);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.selectAll().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将MyBatis3Simple改为MyBatis3可以生成类似于QBC风格的查询，即根据条件查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserExample userExample = <span class="keyword">new</span> UserExample();</span><br><span class="line">    UserExample.Criteria criteria = userExample.createCriteria();</span><br><span class="line">    criteria.andUsernameLike(<span class="string">"%王%"</span>);</span><br><span class="line">    criteria.andSexEqualTo(<span class="string">"男"</span>);</span><br><span class="line">    userDao.selectByExample(userExample).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><strong>MyBatis框架分层</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526092147300.png" align="left"/>

<h3 id="获取SqlSessionFactory对象"><a href="#获取SqlSessionFactory对象" class="headerlink" title="获取SqlSessionFactory对象"></a>获取SqlSessionFactory对象</h3><p>在MyBatis快速入门中，给出了获取SqlSessionFactory对象的流程，可以通过debug来查看框架具体是如何实现的。</p>
<ol>
<li>使用Resources类获取配置文件的输入流对象</li>
<li>使用<code>new SqlSessionFactoryBuilder().build(inputStream)</code>来获得SqlSessionFactory</li>
</ol>
<p>那么SqlSessionFactoryBuilder的<code>build</code>方法到底是如何生成一个SqlSessionFactory对象的？</p>
<ol>
<li>使用配置文件的输入流对象创建一个解析XML的解析器<code>parser</code></li>
<li>调用<code>parser.parse()</code>得到一个<code>Configuration</code>对象</li>
<li>调用SqlSessionFactoryBuilder对象的<code>build</code>方法传入这个Configuration对象得到SqlSessionFactory对象（实际上是调用<code>new DefaultSqlSessionFactory(config)</code>)</li>
</ol>
<p>通过分析源码我们可以得知，MyBatis将主配置文件封装成为一个Configuration类对象，通过这个Configuration对象就可以获得主配置文件中的所有内容！</p>
<h3 id="获取SqlSession对象"><a href="#获取SqlSession对象" class="headerlink" title="获取SqlSession对象"></a>获取SqlSession对象</h3><p><strong>步骤</strong></p>
<ol>
<li>调用SqlSessionFactory对象的<code>openSession</code></li>
<li><code>openSession</code>方法中调用<code>openSessionFromDataSource</code>方法来获取SqlSession对象</li>
</ol>
<p><strong>openSessionFromDataSource</strong>方法详解</p>
<p>有三个参数：</p>
<ul>
<li><code>ExecutorType execType</code>：执行器类型</li>
<li><code>TransactionIsolationLevel level</code>：事务隔离级别</li>
<li><code>boolean autoCommit</code>：自动提交</li>
</ul>
<p>在openSessionFromDataSource方法中：</p>
<ul>
<li><p>首先会通过配置文件得到数据源（dataSource），然后通过TransactionFactory工厂传入dataSource、level、autoCommit来得到一个Transaction对象</p>
</li>
<li><p>通过configuration对象的<code>newExecutor</code>方法传入这个事务对象tx、执行器类型execType来创建一个执行器Executor对象</p>
<p>根据传入的executorType以及是否开启了二级缓存（cacheEnabled）来创建executor</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200706223901368.png" align="left"/>
</li>
<li><p>最后通过<code>new DefaultSqlSession(configuration, executor, autoCommit)</code>来创建一个SqlSession接口的实现类对象</p>
</li>
</ul>
<h3 id="获得接口的代理类对象"><a href="#获得接口的代理类对象" class="headerlink" title="获得接口的代理类对象"></a>获得接口的代理类对象</h3><ol>
<li><code>sqlSession.getMapper(type)</code>这个方法中返回了<code>configuration.getMapper(type, sqlSession)</code></li>
<li><code>configuration.getMapper(type, sqlSession)</code>中返回了<code>mapperRegistry.getMapper(type, sqlSession)</code></li>
<li><code>mapperRegistry.getMapper(type, sqlSession)</code><ul>
<li>首先通过<code>knowMappers.get(type)</code>获取MapperProxyFactory对象</li>
<li>返回<code>mapperProxyFactory.newInstance(sqlSession)</code></li>
</ul>
</li>
<li><code>mapperProxyFactory.newInstance(sqlSession)</code><ul>
<li>首先通过<code>new MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache)</code>创建MapperProxy对象</li>
<li>返回<code>mapperProxyFactory(mapperProxy)</code><ul>
<li>MapperProxy实现了InvocationHandler，所以可以通过Proxy类来创建代理对象</li>
<li>返回<code>Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy)</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="查询流程"><a href="#查询流程" class="headerlink" title="查询流程"></a>查询流程</h3><p><code>sqlSession.getMapper(type)</code>方法最终会返回一个dao接口的代理对象，调用这个代理对象中的方法，实际上就是执行MapperProxy的<code>invoke</code>方法</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526172532038.png" align="left"/>

<p><strong>StatementHandler</strong>：处理SQL语句预编译，设置参数等相关工作</p>
<p><strong>ParameterHandler</strong>：设置预编译参数</p>
<p><strong>ResultSetHandler</strong>：处理结果集</p>
<p><strong>TypeHandler</strong>：javaBean类型和数据库的映射</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>根据配置文件（全局、sql映射），初始化出Configuration对象</p>
</li>
<li><p>创建一个DefaultSqlSession对象，它里面包含Configuration以及Executor（根据全局配置文件中的defaultExecutorType创建出对应的Executor）</p>
</li>
<li><p>DefaultSqlSession.getMapper()，拿到Mapper接口对应的MapProxy</p>
</li>
<li><p>MapProxy里面有DefaultSqlSession</p>
</li>
<li><p>执行增删改查方法：</p>
<ol>
<li>调用DefaultSqlSession的增删改查（Executor）</li>
<li>会创建一个StatementHandler对象（同时也会创建出ParameterHandler和ResultSetHandler）</li>
<li>调用StatementHandler的预编译参数以及设置参数值（使用ParameterHandler来给SQL设置参数）</li>
<li>调用StatementHandler的增删改查方法</li>
<li>ResultSetHandler封装结果</li>
</ol>
</li>
</ol>
<h2 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h2><ul>
<li>MyBatis<font color="blue">在四大对象的创建过程中，都会有插件进行介入</font>。插件可以利用动态代理机制一层一层的包装目标对象，而实现在目标对象执行目标方法之前进行拦截的效果。</li>
<li>MyBatis允许在已映射语句执行过程中的某一点进行拦截调用</li>
<li>默认情况下，MyBatis允许使用插件拦截的方法调用包括：<ul>
<li><font color="blue">Executor</font>（update、query、flushStatements、commit、rollback）</li>
<li><font color="blue">ParameterHandler</font>（getParameterObject、setParameters）</li>
<li><font color="blue">ResultSetHandler</font>（handleResultSets、handleOutputParameters）</li>
<li><font color="blue">StatementHandler</font>（prepare、parameterize、batch、update、query）</li>
</ul>
</li>
</ul>
<h3 id="插件开发-1"><a href="#插件开发-1" class="headerlink" title="插件开发"></a>插件开发</h3><ul>
<li><p><font color="blue">插件开发步骤</font>：</p>
<ol>
<li><p>编写插件实现<code>Interceptor</code>接口，并使用<code>@Interceptors</code>注解完成插件签名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-26 20:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成插件签名：告诉MyBatis用来拦截哪个对象的哪个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// type：要拦截类的（四大对象之一）</span></span><br><span class="line"><span class="comment">// method：要拦截的方法</span></span><br><span class="line"><span class="comment">// args：方法的参数</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;</span><br><span class="line">        <span class="meta">@Signature</span>(type=StatementHandler<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"parameterize"</span>, args=&#123;Statement<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyFirstPlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * intercept 拦截目标对象的目标方法执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFirstPlugin intercept..., method:"</span> + invocation.getMethod());</span><br><span class="line">        <span class="comment">//执行目标方法</span></span><br><span class="line">        Object proceed = invocation.proceed();</span><br><span class="line">        <span class="comment">//返回执行后的返回值</span></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * plugin：包装目标对象</span></span><br><span class="line"><span class="comment">     * 包装：为目标对象创建一个代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFirstPlugin plugin...,要包装的对象:"</span> + target);</span><br><span class="line">        <span class="comment">//我们可以借助Plugin的wrap方法使用当前的拦截器来包装目标对象</span></span><br><span class="line">        Object wrap = Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//返回当前target的动态代理对象</span></span><br><span class="line">        <span class="keyword">return</span> wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setProperties</span></span><br><span class="line"><span class="comment">     *  将插件在配置文件中配置的properties设置进来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFirstPlugin setProperties..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"插件配置的信息："</span> + properties.getProperty(<span class="string">"username"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ol start="2">
<li><p>在全局配置文件中注册插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插件配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.zxw.plugin.MyFirstPlugin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"tomcat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyFirstPlugin setProperties...</span><br><span class="line">插件配置的信息：zhangsan</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.executor.CachingExecutor@6b57696f</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.scripting.defaults.DefaultParameterHandler@64f6106c</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.executor.resultset.DefaultResultSetHandler@74a10858</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.executor.statement.RoutingStatementHandler@28ac3dc3</span><br><span class="line">DEBUG 05-26 21:00:14,451 &#x3D;&#x3D;&gt;  Preparing: SELECT * FROM user WHERE id &#x3D; ?;   (BaseJdbcLogger.java:143) </span><br><span class="line">MyFirstPlugin intercept..., method:public abstract void org.apache.ibatis.executor.statement.StatementHandler.parameterize(java.sql.Statement) throws java.sql.SQLException</span><br><span class="line">DEBUG 05-26 21:00:14,482 &#x3D;&#x3D;&gt; Parameters: 41(Integer)  (BaseJdbcLogger.java:143) </span><br><span class="line">DEBUG 05-26 21:00:14,496 &lt;&#x3D;&#x3D;      Total: 1  (BaseJdbcLogger.java:143) </span><br><span class="line">User&#123;id&#x3D;41, username&#x3D;&#39;老王&#39;, birthday&#x3D;Tue Feb 27 17:47:08 CST 2018, sex&#x3D;&#39;男&#39;, address&#x3D;&#39;北京&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>首先调用了拦截器的setProperties()方法为拦截器设置了属性</p>
<p>然后分别按照MyBatis的四大对象的调用顺序，执行interceptorChain.pluginAll()方法，调用所有插件的<code>plugin</code>方法，所以我们编写的<code>plugin</code>方法被执行了四次</p>
<p>最后，调用生成的Dao接口代理类对象的方法，当执行使用Statement的parameterize方法设置参数时会被插件的<code>intercept</code>方法拦截，我们编写的<code>intercept</code>方法首先打印了调用的方法信息，然后执行该方法并返回。</p>
<h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><ol>
<li><p>按照插件注解声明，按照插件配置顺序调用插件的plugin方法，生成被拦截对象的动态代理</p>
</li>
<li><p>多个插件依次生成目标对象的代理对象，层层包裹，先声明的先包裹，形成代理链</p>
</li>
<li><p>目标方法执行时依次从外到内执行插件的intercept方法（和配置的顺序相反）</p>
</li>
</ol>
<ol start="4">
<li><p>多个插件的情况下，我们往往需要在某个插件中分离出目标对象。可以借助MyBatis提供的SystemMeatObject类来进行获取最后一层的h以及target属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * intercept 拦截目标对象的目标方法执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> invocation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MyFirstPlugin intercept..., method:"</span> + invocation.getMethod());</span><br><span class="line">    <span class="comment">//动态改变SQL运行的参数，实际查询42号</span></span><br><span class="line">    Object target = invocation.getTarget();</span><br><span class="line">    System.out.println(<span class="string">"当前拦截到的对象:"</span> + target);</span><br><span class="line">    <span class="comment">//拿到StatementHandler里的ParameterHandler里的parameterObject的值</span></span><br><span class="line">    MetaObject metaObject = SystemMetaObject.forObject(target);</span><br><span class="line">    Object value = metaObject.getValue(<span class="string">"parameterHandler.parameterObject"</span>);</span><br><span class="line">    System.out.println(<span class="string">"SQL语句用的参数是"</span> + value);</span><br><span class="line">    <span class="comment">//修改参数的值</span></span><br><span class="line">    metaObject.setValue(<span class="string">"parameterHandler.parameterObject"</span>, <span class="number">42</span>);</span><br><span class="line">    <span class="comment">//执行目标方法</span></span><br><span class="line">    Object proceed = invocation.proceed();</span><br><span class="line">    <span class="comment">//返回执行后的返回值</span></span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="扩展：MyBatis实用场景"><a href="#扩展：MyBatis实用场景" class="headerlink" title="扩展：MyBatis实用场景"></a>扩展：MyBatis实用场景</h3><pre><code>1. PageHelper插件进行分页
2. 批量操作
3. 存储过程
4. typeHandler处理枚举</code></pre><h4 id="PageHelper插件进行分页"><a href="#PageHelper插件进行分页" class="headerlink" title="PageHelper插件进行分页"></a>PageHelper插件进行分页</h4><ul>
<li>PageHelper是MyBatis中非常方便的第三方分页插件</li>
<li><a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></li>
<li><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></li>
<li>我们可以对照官方文档的说明，快速的使用插件</li>
</ul>
<p>   <strong>使用步骤</strong></p>
<ol>
<li><p>添加maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在MyBatis全局配置文件中配置分页插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用PageHelper提供的方法进行分页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分页操作</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    userDao.findAll().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">"当前页码："</span> + page.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">"总记录数："</span> + page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"每页的记录数："</span> + page.getPageSize());</span><br><span class="line">    System.out.println(<span class="string">"总页码："</span> + page.getPages());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>可以使用更强大的PageInfo封装返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分页操作</span></span><br><span class="line">    PageHelper.startPage(<span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="comment">//使用更为强大的PageInfo, 第二个参数为连续分页页数</span></span><br><span class="line">    PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(users, <span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">"当前页码："</span> + pageInfo.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">"总记录数："</span> + pageInfo.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"每页的记录数："</span> + pageInfo.getPageSize());</span><br><span class="line">    System.out.println(<span class="string">"总页码："</span> + pageInfo.getPages());</span><br><span class="line">    <span class="keyword">int</span>[] nums = pageInfo.getNavigatepageNums();</span><br><span class="line">    <span class="comment">//打印连续分页的页码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>可以说，这个分页插件实现了分页操作的所有逻辑！</p>
<h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>注意要修改url，开启批量处理：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/eesy_mybatis?allowMultiQueries=true</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>默认的<code>openSession()</code>方法没有参数，它会创建有如下特性的</p>
<ul>
<li>会开启一个事务（也就是<font color="red">不自动提交</font>）</li>
<li>连接对象会从环境配置的数据源实例得到</li>
<li>事务隔离级别将使用驱动或数据源的默认设置</li>
<li>预处理语句不会被复用，也不会批量处理更新</li>
</ul>
</li>
<li><p><code>openSession</code>方法的<code>ExecutorType</code>类型的参数，枚举类型：</p>
<ul>
<li><code>ExecutorType.SIMPLE</code>：这个执行器类型不做特殊的事情（这是默认装配的）。它<font color="blue">为每个语句的执行创建一个新的预处理语句</font></li>
<li><code>ExecutorType.REUSE</code>：这个执行其<font color="blue">会复用预处理语句</font></li>
<li><code>ExecutorType.BATCH</code>：这个执行器会<font color="blue">批量执行所有更新语句</font></li>
</ul>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526221714709.png" align="left"/>
</li>
<li><p>批量操作我们是使用MyBatis提供的BatchExector进行的，它的底层就是通过jdbc攒SQL的方式进行的。我们也可以攒够一定数量后发给数据库一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试批量操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在调用openSession方法时传入执行器的类型</span></span><br><span class="line">    userDao = factory.openSession(ExecutorType.BATCH).getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//插入100万条数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"user"</span> + i);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        user.setSex(i % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">"男"</span> : <span class="string">"女"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"address"</span> + i);</span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"共耗时:"</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>最终结果：共耗时:87774毫秒</p>
<ul>
<li><p>与Spring整合中，我们推荐，额外的配置一个可以专门用来执行批量操作的sqlSession</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要用到批量操作的时候，我们可以注入配置的这个批量SqlSession。通过它获取到mapper映射器进行操作</p>
</li>
</ul>
<p><strong><font color="red">注意：</font></strong></p>
<ol>
<li>批量操作是在<font color="red"><code>sqlSession.commit()</code></font>以后才发送sql语句给数据库进行执行的</li>
<li>如果我们想让其提前执行，以方便后续可能的查询操作获取数据，我们可以使用<font color="red"><code>sqlSession.flushStatements()</code></font>方法，让其直接冲刷到数据库进行执行</li>
</ol>
<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><ul>
<li><p>实际开发中，我们也会写一些存储过程，MyBatis也支持对存储过程的调用</p>
</li>
<li><p><font color="red">一个简单的存储过程</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> <span class="keyword">test</span>()</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">	<span class="keyword">select</span> <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="red">存储过程的调用</font></p>
<ol>
<li><p>select标签中<code>statementType=“CALLABLE”</code></p>
</li>
<li><p>标签体中调用语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;call procedure_name(#&#123;param1_info&#125;, #&#123;param2_info&#125;)&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<h4 id="自定义TypeHandler"><a href="#自定义TypeHandler" class="headerlink" title="自定义TypeHandler"></a>自定义TypeHandler</h4><ul>
<li>我们可以通过自定义<code>TypeHandler</code>的形式来在设置参数或取出结果集的时候自定义封装策略</li>
</ul>
<p><strong>步骤</strong>：</p>
<ol>
<li><p>实现<code>TypeHandler</code>接口或者继承<code>BaseTypeHandler</code></p>
</li>
<li><p>使用<code>@MappedTypes</code>定义处理的Java类型</p>
<p>使用<code>@MappedJdbcTypes</code>定义jdbcType类型</p>
</li>
<li><p>在自定义结果集标签或者参数处理的时候声明使用自定义<code>TypeHandler</code>进行处理或者在全局配置<code>TypeHandler</code>要处理的JavaType</p>
</li>
</ol>
<p>创建一个UserStatus枚举类：</p>
<p><code>UserStatus</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserStatus &#123;</span><br><span class="line">    BUSY(<span class="number">100</span>, <span class="string">"繁忙"</span>),</span><br><span class="line">    FREE(<span class="number">200</span>, <span class="string">"空闲"</span>),</span><br><span class="line">    VOCATION(<span class="number">300</span>, <span class="string">"度假中"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserStatus</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserStatus <span class="title">getUserStatusByCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">return</span> BUSY;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> FREE;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">300</span>:</span><br><span class="line">                <span class="keyword">return</span> VOCATION;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> FREE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实体类中添加该属性：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200527220119798.png" alt="image-20200527220119798" style="zoom:80%;"  align="left"/>

<p><strong>测试在没有自定义枚举类的TypeHandler插入一条记录</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnumTypeHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"testUser1"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"Beijing"</span>);</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setUserStatus(UserStatus.BUSY);</span><br><span class="line">    userDao.saveUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库中的结果：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200527220251012.png" align="left"/>

<p>可以看到如果不自定义枚举类，那么会默认将插入枚举的名字（name），枚举有索引和名字（索引默认从0开始）</p>
<p>默认使用EnumTypeHandler，会插入枚举类的名字</p>
<p>使用EnumOrdinalTypeHandler，会插入枚举类的索引</p>
<p><strong>自定义枚举类的TypeHandler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-27 22:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEnumTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">UserStatus</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义当前数据如何保存到数据库中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jdbcType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, UserStatus parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//传入状态码</span></span><br><span class="line">        ps.setString(i, parameter.getCode().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserStatus <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//根据从数据库中拿到的状态吗返回枚举对象</span></span><br><span class="line">        <span class="keyword">int</span> code = Integer.parseInt(rs.getString(columnName));</span><br><span class="line">        <span class="keyword">return</span> UserStatus.getUserStatusByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserStatus <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> code = Integer.parseInt(rs.getString(columnIndex));</span><br><span class="line">        <span class="keyword">return</span> UserStatus.getUserStatusByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserStatus <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> code = Integer.parseInt(cs.getString(columnIndex));</span><br><span class="line">        <span class="keyword">return</span> UserStatus.getUserStatusByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>全局配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.zxw.handler.MyEnumTypeHandler"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">javaType</span>=<span class="string">"com.zxw.domain.UserStatus"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200527222748783.png" align="left"/>

<p>这样就实现了自定义一个枚举类型的TypeHandler</p>
<p><strong>参数位置设置自定义TypeHandler</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span>&gt;</span></span><br><span class="line">	insert into user(username, birthday, sex, address, user_status) </span><br><span class="line">    values(#&#123;username&#125;, #&#123;birthday&#125;, #&#123;sex&#125;, #&#123;address&#125;, </span><br><span class="line">    #&#123;userStatus,typeHandler=com.zxw.handler.MyEnumTypeHandler&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在ResultMap中指定TypeHandler</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_status"</span> <span class="attr">property</span>=<span class="string">"userStatus"</span> <span class="attr">typeHandler</span>=<span class="string">"com.zxw.handler.MyEnumTypeHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Web框架</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>ORM</tag>
        <tag>持久层</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（一）</title>
    <url>/2020/07/07/Spring%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（一）"><a href="#Spring（一）" class="headerlink" title="Spring（一）"></a>Spring（一）</h1><h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><h3 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h3><p>&emsp;&emsp;Spring是分层的Java SE/EE应用<font color="red">全栈</font>轻量级开源框架，以<font color="red">IoC（控制反转）</font>和<font color="red">AOP（面向切面编程）</font>为内核，提供了表现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能够整合开源世界众多著名的第三方框架和类库，现在已经成为了使用最多的Java EE企业应用开源框架。</p>
<h3 id="Spring的发展历程"><a href="#Spring的发展历程" class="headerlink" title="Spring的发展历程"></a>Spring的发展历程</h3><p>1997年IBM提出了EJB思想</p>
<p>1998年，SUN定制了开发标准规范EJB 1.0</p>
<p>1999年，EJB 1.1发布</p>
<p>2001年，EJB 2.0发布</p>
<p>2003年，EJB 2.1发布 </p>
<p>2006年，EJB 3.0发布</p>
<p><font color="red">Rod Johnson（Spring之父）</font></p>
<p>​    Expert One-to-One J2EE Design and Development(2002)</p>
<p>​    阐述了J2EE使用EJB开发设计的优点及解决方案</p>
<p>​    Expert One-to-One J2EE Development without EJB(2004)</p>
<p>​    阐述了J2EE开发不适用EJB的解决方案（Spring雏形）</p>
<p><font color="red">2017年9月发布了spring的最新版本spring5.0通用版（GA）</font></p>
<h3 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h3><p><strong>方便解耦，简化开发</strong></p>
<p>通过Spring提供了IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的程序过度耦合。用户也不必为单例模式类、属性文件解析等这些很底层的需求编写代码，可以专注于上层的应用</p>
<p><strong>AOP编程的支持</strong></p>
<p>通过Spring的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能都可以通过AOP轻松应付。</p>
<p><strong>声明式事务的支持</strong></p>
<p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式事务方式灵活地进行事务管理，提高开发效率和质量</p>
<p><strong>方便程序的测试</strong></p>
<p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试变得十分简单</p>
<p><strong>方便集成各种优秀的框架</strong></p>
<p>Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Strusts、Hibernate、Hessian、MyBatis等）的直接支持</p>
<p><strong>降低Java EE API的使用难度</strong></p>
<p>Spring对Java EE API（如JDBC、JavaMail、远程调用）进行了简单的封装，使得这些API的使用难度大大降低</p>
<p><strong>Spring源码是经典学习范例</strong></p>
<p>Spring的源代码设计精妙、结构清晰，处处体现了对Java设计模式的灵活运行以及对Java技术的高深造诣，Spring的源码具有很高的学习价值。</p>
<h3 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200511224649549.png" align="left"/>

<h2 id="IoC的概念和作用"><a href="#IoC的概念和作用" class="headerlink" title="IoC的概念和作用"></a>IoC的概念和作用</h2><h3 id="程序的耦合和解耦（了解）"><a href="#程序的耦合和解耦（了解）" class="headerlink" title="程序的耦合和解耦（了解）"></a>程序的耦合和解耦（了解）</h3><p><strong>耦合性</strong>（Coupling），也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表名其独立性越差。耦合性存在于各个领域，并非软件设计中独有的。</p>
<p>在软件工程中，耦合指的就是对象之间的依赖性。对象之间的耦合越高，维护成本就越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则：<font color="red">高内聚，低耦合</font></p>
<h3 id="解决程序耦合的思路"><a href="#解决程序耦合的思路" class="headerlink" title="解决程序耦合的思路"></a>解决程序耦合的思路</h3><h4 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h4><p><code>bean.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accountService</span>=<span class="string">com.zxw.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span>=<span class="string">com.zxw.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>

<p><code>BeanFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个创建Bean对象的工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Bean在计算机英语中，有可重用组件的含义</span></span><br><span class="line"><span class="comment"> * JavaBean</span></span><br><span class="line"><span class="comment"> *          JavaBean的范围远大于实体类！！！</span></span><br><span class="line"><span class="comment"> * JavaBean：用Java语言编写的可重用组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * BeanFactory就是用来创建Service和Dao对象的</span></span><br><span class="line"><span class="comment"> *      1.需要一个配置文件用来创建service和dao</span></span><br><span class="line"><span class="comment"> *          配置内容：唯一标识=全限定类名（key=value）</span></span><br><span class="line"><span class="comment"> *      2.通过读取配置文件通过反射创建对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置文件可以是XML，也可以是Properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个map用于存放创建的对象。我们称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取Properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration&lt;Object&gt; keys = props.keys();</span><br><span class="line">            <span class="comment">//遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span>(keys.hasMoreElements()) &#123;</span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key获取value</span></span><br><span class="line">                String basePath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(basePath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器中</span></span><br><span class="line">                beans.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 根据Bean的名称获取Bean对象</span></span><br><span class="line"><span class="comment">//     * @param beanName</span></span><br><span class="line"><span class="comment">//     * @return</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    public static Object getBean(String beanName) &#123;</span></span><br><span class="line"><span class="comment">//        Object bean = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            String beanPath =  props.getProperty(beanName);</span></span><br><span class="line"><span class="comment">//            bean = Class.forName(beanPath).newInstance();</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return bean;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Bean的名称获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="控制反转—Inversion-of-Control"><a href="#控制反转—Inversion-of-Control" class="headerlink" title="控制反转—Inversion of Control"></a>控制反转—Inversion of Control</h4><p><strong>控制反转</strong>：（Inversion of Control，缩写为IoC），是面向对象编程的一种设计原则，可以用来减低计算机代码之间的<strong>耦合度</strong>。其中最常见的方式叫做<strong>依赖注入</strong>（DI，Dependency Injection），还有一种方式叫做<strong>依赖查找</strong>（Dependency Lookup）。通过控制反转，对象在被创建时，由一个调空系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p>
<h2 id="使用Spring的IoC解决程序耦合"><a href="#使用Spring的IoC解决程序耦合" class="headerlink" title="使用Spring的IoC解决程序耦合"></a>使用Spring的IoC解决程序耦合</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ol>
<li><p>创建Maven工程，添加Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Dao、Service层接口和实现类</p>
<p><code>UserService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserService中的addUser方法执行了"</span>);</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserDaoImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserDao中的addUser方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Spring的配置文件<code>bean.xml</code>，文件名随意，但是不能是中文，在配置文件中配置相关bean的id和class属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将对象的创建交给Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.zxw.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试使用Spring IoC获取Bean对象</p>
<ol>
<li><p>获取核心容器对象ApplicationContext（有三种常用的实现类，这里只给出了一种，后续会有说明）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据id获取bean对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取方式一：强制类型转换</span></span><br><span class="line">UserService userService = (UserService) ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line"><span class="comment">//获取方式二：传入Class类型</span></span><br><span class="line">UserDao userDao = ac.getBean(<span class="string">"userDao"</span>, UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>





</li>
</ol>
</li>
</ol>
<h3 id="ApplicationContext的三个常用实现类"><a href="#ApplicationContext的三个常用实现类" class="headerlink" title="ApplicationContext的三个常用实现类"></a>ApplicationContext的三个常用实现类</h3><ol>
<li><p><code>ClassPathXmlApplicationContext</code>：它可以加载类路径下的配置文件，要求配置文件必须在类路径下！（推荐使用这个实现类）</p>
</li>
<li><p><code>FileSystemXmlApplicationContext</code>：可以加载磁盘任意路径下的配置文件（要求有访问权限）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"D:\\JavaCode\\day01_eesy_03spring\\src\\main\\resources\\bean.xml"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>AnnotationConfigApplicationContext</code>：它用于读取注解创建容器（即使用注解替代配置文件），会在Spring（二）中详细讲解</p>
</li>
</ol>
<h3 id="BeanFactory和ApplicationContext的区别和联系"><a href="#BeanFactory和ApplicationContext的区别和联系" class="headerlink" title="BeanFactory和ApplicationContext的区别和联系"></a>BeanFactory和ApplicationContext的区别和联系</h3><p><strong>ApplicationContext</strong>（实际开发中会使用该接口）</p>
<ul>
<li>它在构建核心容器时，创建对象采取的策略是立即加载。也就是说一旦读取完配置文件，bean对象就会被创建</li>
<li><strong>适用于单例对象</strong></li>
</ul>
<p><strong>BeanFactory</strong></p>
<ul>
<li><p>它在构建核心容器时，创建对象的策略是延迟加载的方式。即，什么时候通过id来获取bean对象，什么时候才会创建这个bean对象</p>
</li>
<li><p><strong>适用于多例对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"bean.xml"</span>);</span><br><span class="line">BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">AccountService accountService = factory.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="Spring基于XML的IoC细节（掌握"><a href="#Spring基于XML的IoC细节（掌握" class="headerlink" title="Spring基于XML的IoC细节（掌握)"></a>Spring基于XML的IoC细节（掌握)</h3><h4 id="IoC中bean标签和管理对象细节"><a href="#IoC中bean标签和管理对象细节" class="headerlink" title="IoC中bean标签和管理对象细节"></a>IoC中bean标签和管理对象细节</h4><h5 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h5><p><strong>作用</strong>：用于配置对象让Spring创建。<strong>默认情况下</strong>它调用的是类的<strong>无参构造函数</strong>。如果没有无参构造函数则不能创建成功</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>id</code>：对象的唯一标识，用于获取该bean对象</li>
<li><code>class</code>：指定类的全限定类名。用于通过反射来创建对象，默认情况下调用无参构造函数</li>
<li><code>scope</code>：指定对象的作用范围<ul>
<li><code>singleton</code>：单例，<strong>默认值</strong></li>
<li><code>prototype</code>：多例的</li>
<li><code>request</code>：Web项目中，Spring创建一个bean的对象，将对象存入request域中</li>
<li><code>session</code>：Web项目中，Spring创建一个bean对象，将对象存入session域中</li>
<li><code>global session</code>：Web项目中，<font color="blue">应用在Portlet环境</font>，如果没有<font color="blue">Portlet环境</font>那么global session相当于session</li>
</ul>
</li>
</ul>
<h5 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h5><ol>
<li><p><strong>默认构造函数创建</strong></p>
<p>在Spring配置文件中使用bean标签配以id和class属性，但没有其它属性的标签时，使用默认构造函数创建。如果没有默认构造函数，则对象无法创建！！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用某个类的方法创建对象并存入Spring容器中</strong></p>
<p><code>InstanceFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件的相关内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.zxw.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用某个类的静态方法创建对象并存入Spring容器中</strong></p>
<p><code>StaticFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件的相关内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"com.zxw.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="bean的作用范围和生命周期"><a href="#bean的作用范围和生命周期" class="headerlink" title="bean的作用范围和生命周期"></a>bean的作用范围和生命周期</h5><p><code>scope</code>属性用于指定bean的作用范围：</p>
<ul>
<li><p><code>singleton</code>：<strong>单例对象</strong></p>
<p>一个应用只有一个对象的实例，作用范围就是整个应用</p>
<p><strong>生命周期</strong>：（和Spring容器相同）</p>
<ul>
<li>对象出生：当应用加载，创建容器时，对象就创建了</li>
<li>对象存在：只要容器存在，对象就一直存在</li>
<li>对象死亡：当应用卸载时，销毁容器时，对象就被销毁了</li>
</ul>
</li>
<li><p><code>prototype</code>：<strong>多例对象</strong></p>
<p>每次访问对象时，都会重新创建新的对象实例</p>
<p><strong>生命周期</strong>：</p>
<ul>
<li>对象出生：当使用对象时就会创建对象实例</li>
<li>对象存在：只要对象还在使用中，对象就一直存在</li>
<li>对象死亡：当对象长时间不使用时，就会被Java垃圾回收器回收了</li>
</ul>
</li>
<li><p><code>request</code>：Web项目中，Spring创建一个Bean的对象，将对象存入到request域中</p>
</li>
<li><p><code>session</code>：Web项目中，Spring创建一个Bean对象，将对象存入到session域中</p>
</li>
<li><p><code>global session</code>：Web项目中，<font color="blue">应用在Portlet集群环境</font>，如果没有<font color="blue">Portlet集群环境</font>那么global session相当于session</p>
</li>
</ul>
<h4 id="Spring的依赖注入"><a href="#Spring的依赖注入" class="headerlink" title="Spring的依赖注入"></a>Spring的依赖注入</h4><p>依赖注入：DI，Dependency Injection</p>
<p>IoC的作用：降低程序间的耦合（依赖关系），依赖关系的管理以后都交给Spring来维护</p>
<p>在当前类中需要用到其他类的对象，由Spring为我们提供，我们只需要在配置文件中说明，就称之为<strong>依赖注入</strong></p>
<p><strong>能够注入的数据类型</strong>：</p>
<ul>
<li>基本类型和String</li>
<li>其它bean类型（在配置文件或者注解中配置过的bean）</li>
<li>复杂类型/集合类型</li>
</ul>
<p><strong>注入的方式</strong></p>
<ul>
<li>构造函数注入</li>
<li>set方法注入</li>
<li>注解注入（Spring（二）中的内容）</li>
</ul>
<h5 id="使用构造函数注入"><a href="#使用构造函数注入" class="headerlink" title="使用构造函数注入"></a>使用构造函数注入</h5><p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了！name="</span> + name +</span><br><span class="line">                <span class="string">", age="</span> + age + <span class="string">", birthday="</span> + birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.使用构造函数提供</span></span><br><span class="line"><span class="comment">    使用的标签：constructor-arg</span></span><br><span class="line"><span class="comment">    标签出现的位置：bean标签的内部</span></span><br><span class="line"><span class="comment">    标签中的属性：</span></span><br><span class="line"><span class="comment">        type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个活着某些参数的类型</span></span><br><span class="line"><span class="comment">        index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引从0开始</span></span><br><span class="line"><span class="comment">        name：用于指定给构造函数中指定名称的参数赋值</span></span><br><span class="line"><span class="comment">        =========以上三个用于指定给构造函数的哪个参数赋值，常用name=======</span></span><br><span class="line"><span class="comment">        value：用于提供基本类型和String类型的数据</span></span><br><span class="line"><span class="comment">        ref：用于指定其他的bean类型数据。它指的是在spring的IoC核心容器中出现过的bean对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    优势：</span></span><br><span class="line"><span class="comment">        在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功</span></span><br><span class="line"><span class="comment">    弊端：</span></span><br><span class="line"><span class="comment">        改变了bean对象的实例化方式，使我们在创建对象时，即使用不到这些数据也必须提供</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span>  <span class="attr">value</span>=<span class="string">"泰斯特"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="使用set方法注入"><a href="#使用set方法注入" class="headerlink" title="使用set方法注入"></a>使用set方法注入</h5><p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.使用set方法注入</span></span><br><span class="line"><span class="comment">    涉及的标签：property</span></span><br><span class="line"><span class="comment">    出现的位置：bean标签的内部</span></span><br><span class="line"><span class="comment">    标签的属性：</span></span><br><span class="line"><span class="comment">        name：用于指定给set方法中指定名称的参数赋值</span></span><br><span class="line"><span class="comment">        value：用于提供基本类型和String类型的数据</span></span><br><span class="line"><span class="comment">        ref：用于指定其他的bean类型数据。它指的是在spring的IoC核心容器中出现过的bean对象</span></span><br><span class="line"><span class="comment">    优势：</span></span><br><span class="line"><span class="comment">        创建对象时没有明确的限制，可以直接使用默认构造函数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    弊端：如果某个成员必须有值，则获取对象时有可能set方法没有执行（此处即使缺少对应的property标签也不会报错）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService2"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="复杂类型-集合类型的注入"><a href="#复杂类型-集合类型的注入" class="headerlink" title="复杂类型/集合类型的注入"></a>复杂类型/集合类型的注入</h5><p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zxw.service.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--复杂类型/集合类型的注入</span></span><br><span class="line"><span class="comment">    用于给List结构集合注入的标签：</span></span><br><span class="line"><span class="comment">        list、array、set</span></span><br><span class="line"><span class="comment">    用于给Map结构集合注入的标签：</span></span><br><span class="line"><span class="comment">        map props</span></span><br><span class="line"><span class="comment">    总结：结构相同，标签可以互换</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService3"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testA"</span> <span class="attr">value</span>=<span class="string">"AAA"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testB"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testC"</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testD"</span>&gt;</span>DDD<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>DI</tag>
        <tag>控制反转</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（二）</title>
    <url>/2020/07/08/Spring%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（二）"><a href="#Spring（二）" class="headerlink" title="Spring（二）"></a>Spring（二）</h1><h2 id="Spring中IoC的常用注解"><a href="#Spring中IoC的常用注解" class="headerlink" title="Spring中IoC的常用注解"></a>Spring中IoC的常用注解</h2><blockquote>
<p>&emsp;&emsp;学习基于注解的IoC配置，首先得有一个认知：即注解配置和XML配置要实现的功能是一样的，都是要降低程序见的耦合，只是配置的形式不一样。</p>
</blockquote>
<h3 id="用于创建对象的注解"><a href="#用于创建对象的注解" class="headerlink" title="用于创建对象的注解"></a>用于创建对象的注解</h3><p>要使用注解，首先需要在<code>bean.xml</code>中引入context命名空间，然后配置要扫描的包：</p>
<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知Spring要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用了<code>component-scan</code>标签配置了要扫描了包之后，Spring就会扫描这些包中的有关注解（例如@Component、@Controller、@Service、@Repository等），使用这些标签进行配置和在XML配置文件中编写<code>bean</code>标签的作用相同！</p>
<h4 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h4><p><strong>作用</strong>：将当前类对象存入Spring IoC容器中</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定bean的id。默认值为当前类名且首字母小写</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取Spring的IoC容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//通过id获取对象的bean对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Controller、-Service、-Repository"><a href="#Controller、-Service、-Repository" class="headerlink" title="@Controller、@Service、@Repository"></a>@Controller、@Service、@Repository</h4><p>可以通过查看源代码来了解这三个注解，这三个注解其实都是@Component的别名，所以<strong>作用和@Component</strong>一样，从单词的含义可以知道：</p>
<p>@Controller：控制层bean</p>
<p>@Service：业务层bean</p>
<p>@Respository：持久层bean</p>
<h3 id="用于注入数据的注解"><a href="#用于注入数据的注解" class="headerlink" title="用于注入数据的注解"></a>用于注入数据的注解</h3><p><strong>作用</strong>：和在XML配置文件中的bean标签里写一个property标签的功能相同</p>
<h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p><strong>作用</strong>：自动按照类型注入。只要容器里有一个bean对象和要注入的变量类型匹配，就可以注入成功。此方式只能用于IoC容器中只存在一个该类型的bean对象的情况，如果存在多个则自动注入id和变量名相同的bean</p>
<p><strong>出现位置</strong>：成员变量或者方法上</p>
<p><strong>细节</strong>：在使用注解注入数据时，set方法不是必须的</p>
<p><strong>使用示例</strong></p>
<p>注意：虽然不提供set方法也能够直接使用属性注入，但是Spring不推荐这种方式，所以这里@Autowired写在set方法上</p>
<p><code>AccountDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutowired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//AccountDao</span></span><br><span class="line">    AccountDao accountDao = ac.getBean(<span class="string">"accountDao"</span>, AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(accountDao);</span><br><span class="line">    <span class="comment">//AccountService</span></span><br><span class="line">    AccountService accountService = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(accountService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><p><strong>作用</strong>：在@Autowired的基础上再按照名称注入。它在给类成员注入时不能单独使用，但是在给方法参数注入时可以（后面会讲解）</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定要注入bean的id</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(@Qualifier(<span class="string">"accountDao"</span>)</span> AccountDao accountDao) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p><strong>作用</strong>：直接按照bean的id来注入，它可以独立使用</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>name</code>：用于指定bean的id</li>
</ul>
<p><strong>使用示例</strong></p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p><strong>作用</strong>：用于注入基本类型和String类型的数据</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定数据的值，它可以使用Spring中的SpEL（也就是Spring中的EL表达式）</li>
</ul>
<p>SpEL写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;表达式&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：集合类型的注入只能通过XML来实现。</p>
<h3 id="用于改变作用范围的注解"><a href="#用于改变作用范围的注解" class="headerlink" title="用于改变作用范围的注解"></a>用于改变作用范围的注解</h3><p><strong>作用</strong>：和XML配置文件中bean标签的scope属性的作用相同</p>
<h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><p><strong>作用</strong>：指定bean的作用范围</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：常用取值：singleton、prototype、request、session、global session</li>
</ul>
<p><strong>示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScopeAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取bean</span></span><br><span class="line">    AccountService as1 = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    AccountService as2 = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(as1 == as2);<span class="comment">//false,scope为prototype</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="与bean的生命周期相关的注解（了解）"><a href="#与bean的生命周期相关的注解（了解）" class="headerlink" title="与bean的生命周期相关的注解（了解）"></a>与bean的生命周期相关的注解（了解）</h3><p><strong>作用</strong>：作用和XML配置文件中bean标签的<code>init-method</code>和<code>destroy-method</code>属性一样</p>
<h4 id="PostConstruct和-PreDestroy"><a href="#PostConstruct和-PreDestroy" class="headerlink" title="@PostConstruct和@PreDestroy"></a>@PostConstruct和@PreDestroy</h4><p>@PostConstruct用于指定初始化方法，即bean对象创建时调用的方法</p>
<p>@PreDestroy用于指定销毁方法，即bean对象销毁时调用的方法</p>
<p><strong>示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销毁方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLifeCycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取bean</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//手动关闭核心容器</span></span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="案例：使用xml方式-注解方式实现表单的CRUD操作"><a href="#案例：使用xml方式-注解方式实现表单的CRUD操作" class="headerlink" title="案例：使用xml方式+注解方式实现表单的CRUD操作"></a>案例：使用xml方式+注解方式实现表单的CRUD操作</h2><h3 id="在pom-xml中引入依赖"><a href="#在pom-xml中引入依赖" class="headerlink" title="在pom.xml中引入依赖"></a>在<code>pom.xml</code>中引入依赖</h3><p>这里使用dbutils来实现持久层，使用德鲁伊数据库连接池</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbutils/commons-dbutils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="实体类Account"><a href="#实体类Account" class="headerlink" title="实体类Account"></a>实体类Account</h3><p><code>Account.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Dao层接口及其实现类"><a href="#Dao层接口及其实现类" class="headerlink" title="Dao层接口及其实现类"></a>Dao层接口及其实现类</h3><p><code>AccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定id的账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"qr"</span>)</span><br><span class="line">    <span class="keyword">private</span> QueryRunner qr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account where id=?"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"insert into account(name, money) values(?,?)"</span>;</span><br><span class="line">            qr.update(sql, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">            qr.update(sql, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">            qr.update(sql, id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Service层接口及其实现类"><a href="#Service层接口及其实现类" class="headerlink" title="Service层接口及其实现类"></a>Service层接口及其实现类</h3><p><code>AccountService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定id的账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="bean-xml中的配置"><a href="#bean-xml中的配置" class="headerlink" title="bean.xml中的配置"></a><code>bean.xml</code>中的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知Spring要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置QueryRunner --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"qr"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取service接口的代理类对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="改造基于注解的IoC案例，使用纯注解方式实现"><a href="#改造基于注解的IoC案例，使用纯注解方式实现" class="headerlink" title="改造基于注解的IoC案例，使用纯注解方式实现"></a>改造基于注解的IoC案例，使用纯注解方式实现</h2><p>纯注解的方式也可以实现Spring的配置，这里主要介绍如何使用注解来替代配置文件中的配置。实际开发中一般使用xml+注解的方式进行配置（使用xml方便的地方就用xml，用注解配置简单的地方就使用注解）</p>
<h3 id="删除bean-xml配置文件，使用配置类替代配置文件"><a href="#删除bean-xml配置文件，使用配置类替代配置文件" class="headerlink" title="删除bean.xml配置文件，使用配置类替代配置文件"></a>删除<code>bean.xml</code>配置文件，使用配置类替代配置文件</h3><p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>下面介绍几种用于替代XML配置的注解</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p><strong>作用</strong>：指定当前类是一个配置类</p>
<p><strong>细节</strong>：当配置类作为<code>AnnotationConfigApplicationContext</code>的构造函数的参数时，该注解可以不写</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p><strong>作用</strong>：用于通过注解指定Spring在创建容器时要扫描的包</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包</li>
<li><code>basePackages</code></li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p><strong>作用</strong>：用于把当前方法的返回值作为bean对象存入Spring的IoC容器中</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>name</code>：用于指定bean的id。默认值是当前的方法名</li>
</ul>
<p><strong>细节</strong>：当使用该注解配置方法时，如果方法有参数，Spring框架回去容器中查找有没有可用的bean对象，查找的方式和@Autowired相同</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个DataSource对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.setProperty(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"driverClassName"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:3306/spring"</span>);</span><br><span class="line">            <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"qr"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p><strong>作用</strong>：用于导入其他的配置类</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定其他配置类的字节码（<code>.class</code>）（是一个数组类型）</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="meta">@Import</span>(JdbcConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JdbcConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个DataSource对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.setProperty(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"driverClassName"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:3306/spring"</span>);</span><br><span class="line">            <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"qr"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><p><strong>作用</strong>：用于指定properties文件的位置</p>
<p><strong>属性</strong>：</p>
<ul>
<li><p><code>value</code>：指定文件的名称和路径</p>
<p><strong>关键字</strong>：<code>classpath</code>表示在类路径下</p>
</li>
</ul>
<p>在maven工程的resources目录下创建jdbcConfig.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>



<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="meta">@Import</span>(JdbcConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@PropertySource("classpath:jdbcConfig.properties")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>前面已经介绍过可以使用@Value注入基本类型和String类型，且@Value注解中可以使用SpEL</p>
<p><code>JdbcConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个DataSource对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.setProperty(<span class="string">"username"</span>, username);</span><br><span class="line">            props.setProperty(<span class="string">"password"</span>, password);</span><br><span class="line">            props.setProperty(<span class="string">"driverClassName"</span>, driverClassName);</span><br><span class="line">            props.setProperty(<span class="string">"url"</span>, url);</span><br><span class="line">            <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"qr"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>使用纯注解方式，ApplicationContext的获取方式有所不同，可以使用<code>AnnotationConfigApplicationContext</code>。</p>
<p>测试方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//获取service接口的代理类对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="问题：XML和注解者两种方式哪一个更好？"><a href="#问题：XML和注解者两种方式哪一个更好？" class="headerlink" title="问题：XML和注解者两种方式哪一个更好？"></a>问题：XML和注解者两种方式哪一个更好？</h3><p>实际开发中，应该根据公司项目的要求使用对应的方式。两种方式各有利弊，对于我们自己编写的类，使用注解更为方便；但是对于外部提供的类来说使用注解反而更加复杂。所以应当根据实际情况而定。</p>
<h2 id="Spring和Junit的整合"><a href="#Spring和Junit的整合" class="headerlink" title="Spring和Junit的整合"></a>Spring和Junit的整合</h2><p>实际开发中，开发和测试是由不同的人来负责的，负责测试的人可能不知道如何使用Spring，所以在测试方法中通过ApplicationContext获取AccountService的方式是不合理的。</p>
<p>Spring整合Junit就是为了解决这个问题</p>
<p><strong>使用步骤</strong></p>
<ol>
<li><p>导入Spring整合Junit的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Junit提供的一个注解将原有的main方法替换了，替换成Spring提供的<code>@Runwith</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>告知Spring的运行器，Spring的IoC容器是基于XML的还是基于注解的，并且说明位置</p>
<p>@ContextConfiguration</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>locations</code>：指定XML文件的位置，加上classpath关键字表示在类路径上</li>
<li><code>classes</code>：指定注解类所在的位置</li>
</ul>
<p><strong>使用XML配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=<span class="string">"classpath:bean.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用注解配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意</strong>：当我们使用Spring 5.0及以上的版本时，需要保证Junit的版本在4.12及以上</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>控制反转</tag>
        <tag>Spring Junit整合</tag>
        <tag>Spring配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（三）</title>
    <url>/2020/07/11/Spring%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（三）"><a href="#Spring（三）" class="headerlink" title="Spring（三）"></a>Spring（三）</h1><h2 id="添加事务管理"><a href="#添加事务管理" class="headerlink" title="添加事务管理"></a>添加事务管理</h2><h3 id="JDBC事务管理"><a href="#JDBC事务管理" class="headerlink" title="JDBC事务管理"></a>JDBC事务管理</h3><p>根据之前有关JDBC的知识，如果一个连接中没有设置开启事务，那么事务默认是自动提交的。在<code>AccountService</code>中添加一个<code>transfer</code>转账方法，用于从一个账户转账到另外一个账户（此处需要在<code>AccountDao</code>中添加一个<code>findAccountByName</code>方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Float money)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先根据name查询账户</span></span><br><span class="line">    Account fromAccount = accountDao.findAccountByName(from);</span><br><span class="line">    Account toAccount = accountDao.findAccountByName(to);</span><br><span class="line">    <span class="comment">//转出账户减少</span></span><br><span class="line">    fromAccount.setMoney(fromAccount.getMoney() - money);</span><br><span class="line">    <span class="comment">//转入账户增加</span></span><br><span class="line">    toAccount.setMoney(toAccount.getMoney() + money);</span><br><span class="line">    <span class="comment">//更新账户信息</span></span><br><span class="line">    accountDao.updateAccount(fromAccount);</span><br><span class="line">    <span class="comment">//模拟事务过程中发生了异常</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    accountDao.updateAccount(toAccount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于没有进行事务管理，会导致转账业务操作发生异常（即事务失去了一致性），在一次转账逻辑中建立了四次连接，这很明显不符合事务的要求，所有的事务都应当在业务层中完成，所以在事务的执行过程中获取的连接应当是同一个连接对象，可以将连接与当前线程绑定，此时可以使用ThreadLocal类创建一个用于获取连接的ConnectionUtils工具类：</p>
<p><code>ConnectionUtils.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个和当前线程绑定的Connection，如果没有则创建并绑定然后返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//先从ThreadLocal中获取</span></span><br><span class="line">            Connection conn = tl.get();</span><br><span class="line">            <span class="comment">//如果ThreadLocal中没有则创建并绑定</span></span><br><span class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn = dataSource.getConnection();</span><br><span class="line">                tl.set(conn);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 考虑到Tomcat中使用了线程池技术，一个线程可以被重复使用，所以提供一个将</span></span><br><span class="line"><span class="comment">     * Connection对象和当前线程解绑的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了连接的工具类，还需要一个用于事务管理的工具类：<code>TransactionManager</code></p>
<p><code>TransactionManager.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"connectionUtils"</span>)</span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollbackTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>AccountDaoImpl.java</code>使用ConnectionUtils来获取连接对象，确保获取的连接对象在同一个线程中是相同的</p>
<p><code>AccountDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"qr"</span>)</span><br><span class="line">    <span class="keyword">private</span> QueryRunner qr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"connectionUtils"</span>)</span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(connectionUtils.getConnection(), sql, <span class="keyword">new</span> BeanListHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account where id=?"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(connectionUtils.getConnection(), sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"insert into account(name, money) values(?,?)"</span>;</span><br><span class="line">            qr.update(connectionUtils.getConnection(), sql, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">            qr.update(connectionUtils.getConnection(), sql, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">            qr.update(connectionUtils.getConnection(), sql, id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account where name=?"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(connectionUtils.getConnection(), sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>AccountServiceImpl</code>，使用TransactionManager来管理事务</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"txManager"</span>)</span><br><span class="line">    <span class="keyword">private</span> TransactionManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            List&lt;Account&gt; accounts = accountDao.findAllAccount();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">            <span class="keyword">return</span> accounts;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            Account account = accountDao.findAccountById(id);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">            <span class="keyword">return</span> account;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            accountDao.saveAccount(account);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            accountDao.updateAccount(account);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            accountDao.deleteAccount(id);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            <span class="comment">//首先根据name查询账户</span></span><br><span class="line">            Account fromAccount = accountDao.findAccountByName(from);</span><br><span class="line">            Account toAccount = accountDao.findAccountByName(to);</span><br><span class="line">            <span class="comment">//转出账户减少</span></span><br><span class="line">            fromAccount.setMoney(fromAccount.getMoney() - money);</span><br><span class="line">            <span class="comment">//转入账户增加</span></span><br><span class="line">            toAccount.setMoney(toAccount.getMoney() + money);</span><br><span class="line">            <span class="comment">//更新账户信息</span></span><br><span class="line">            accountDao.updateAccount(fromAccount);</span><br><span class="line">            <span class="comment">//模拟事务过程中发生了异常</span></span><br><span class="line"><span class="comment">//            int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateAccount(toAccount);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>bean.xml</code>中配置相关的bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知Spring要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置QueryRunner --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"qr"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里不再需要传入dataSource了，因为在获取连接时已经用到了--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name="ds" ref="dataSource"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="分析案例中的问题"><a href="#分析案例中的问题" class="headerlink" title="分析案例中的问题"></a>分析案例中的问题</h3><p>在<code>AccountServiceImpl</code>中有很多重复的内容，这些内容和事务的管理有关，形式如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    txManager.beginTransaction();</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    txManager.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    txManager.rollback();</span><br><span class="line">    <span class="comment">//异常处理</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放并解绑连接</span></span><br><span class="line">    txManager.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然出现了这么多重复的内容是需要进行优化的，那么该如何进行优化？</p>
<p>这里就要回顾之前学过的动态代理了</p>
<h3 id="回顾动态代理"><a href="#回顾动态代理" class="headerlink" title="回顾动态代理"></a>回顾动态代理</h3><p>动态代理的作用就是在不修改源码的基础上对方法进行增强。下面将介绍两种动态代理的实现：</p>
<ul>
<li>JDK中提供的动态代理实现Proxy类</li>
<li>第三方类库实现动态代理cglib</li>
</ul>
<h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><p><strong>如何创建代理对象</strong>：使用<code>Proxy</code>类的<code>newProxyInstance</code>方法，这个方法有三个参数：</p>
<ul>
<li><code>ClassLoader</code>：类加载器，它是用于加载代理类对象的字节码的，和被代理类使用相同的类加载器（可以通过被代理类对象获得）</li>
<li><code>Class[] interfaces</code>：字节码数组，它是用于让代理类和被代理类拥有相同的方法</li>
<li><code>InvocationHandler</code>：用于提供增强代码，决定如何增强代码。一般提供该接口的匿名内部类，需要字节实现。</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>IProducer</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对生产厂家要求的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Producer</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱: "</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱:"</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Client</code>类，用于演示Proxy的基于接口的动态代理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(</span><br><span class="line">                producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义：</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy 代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method 表示当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args  当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>  和被代理对象的方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">//提供增强的代码</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float) args[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money * <span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="cglib"><a href="#cglib" class="headerlink" title="cglib"></a>cglib</h4><p>maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1_3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>涉及的类</strong>：Enhancer</p>
<p><code>Enhancer</code>类使用<code>create</code>方法来创建一个代理对象，该方法的参数如下：</p>
<ul>
<li><code>Class</code>：字节码，用于指定被代理对象的字节码</li>
<li><code>Callback</code>：用于提供增强的代码，一般使用该接口的子接口实现类<code>MethodInterceptor</code>（方法拦截)</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>Client.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        Producer cglibProducer = (Producer) Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *      以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy 当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//提供增强的代码</span></span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float) args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money * <span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        cglibProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="使用动态代理来解决事务管理问题"><a href="#使用动态代理来解决事务管理问题" class="headerlink" title="使用动态代理来解决事务管理问题"></a>使用动态代理来解决事务管理问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取AccountService进行事务管理的动态代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accountService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AccountService <span class="title">getAccountService</span><span class="params">(<span class="keyword">final</span> AccountService accountService, <span class="keyword">final</span> TransactionManager txManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (AccountService) Proxy.newProxyInstance(</span><br><span class="line">            accountService.getClass().getClassLoader(),</span><br><span class="line">            accountService.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//开启事务</span></span><br><span class="line">                        txManager.beginTransaction();</span><br><span class="line">                        <span class="comment">//执行被代理的service对象中的方法</span></span><br><span class="line">                        Object returnValue = method.invoke(accountService, args);</span><br><span class="line">                        <span class="comment">//提交事务</span></span><br><span class="line">                        txManager.commitTransaction();</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">//回滚事务</span></span><br><span class="line">                        txManager.rollbackTransaction();</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">//释放连接</span></span><br><span class="line">                        txManager.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="AOP的概念"><a href="#AOP的概念" class="headerlink" title="AOP的概念"></a>AOP的概念</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>AOP：Aspect Oriented Programming，即<strong>面向切面编程</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200515201935223.png" align="left"/>



<h3 id="AOP的作用和优势"><a href="#AOP的作用和优势" class="headerlink" title="AOP的作用和优势"></a>AOP的作用和优势</h3><p><strong>作用</strong>：在程序运行期间，不修改源码的情况下对方法进行增强</p>
<p><strong>优势</strong>：</p>
<ul>
<li>减少重复代码</li>
<li>提高开发效率</li>
<li>方便维护</li>
</ul>
<h2 id="Spring中AOP的相关术语（掌握）"><a href="#Spring中AOP的相关术语（掌握）" class="headerlink" title="Spring中AOP的相关术语（掌握）"></a>Spring中AOP的相关术语（掌握）</h2><p><strong>JointPoint（连接点）</strong></p>
<p>&emsp;&emsp;所谓连接点是指哪些被拦截到的点。在Spring中，这些点指的是<strong>方法</strong>，因为Spring只支持方法类型的连接点。</p>
<blockquote>
<p>大白话：就是业务层接口中的方法，连接的是业务和增强方法的点</p>
</blockquote>
<p><strong>Pointcut（切入点）</strong></p>
<p>&emsp;&emsp;所谓切入点是指我们要对哪些JoinPoint进行拦截的定义。</p>
<blockquote>
<p>被增强的方法</p>
</blockquote>
<p><strong>Advice（通知/增强）</strong></p>
<p>&emsp;&emsp;所谓通知是指拦截到JoinPoint之后要做的事就是通知。</p>
<p>&emsp;&emsp;通知的类型有：前置通知、后置通知、异常通知、最终通知、环绕通知</p>
<blockquote>
<p>顾名思义：</p>
<p>前置通知：invoke执行之前</p>
<p>后置通知：invoke执行之后</p>
<p>异常通知：catch中执行的内容</p>
<p>最终通知：finally中执行的内容</p>
<p>环绕通知：有明确的切入点方法调用，是指整个的这部分，将前面的融合到了一起。（就是整个invoke方法） </p>
</blockquote>
<p><strong>Introduction（引介）</strong></p>
<p>&emsp;&emsp;引介是一种特殊的通知，在不修改类代码的前提下。Introduction可以在运行期间为类动态地添加一些方法或Field。</p>
<p><strong>Target（目标对象）</strong></p>
<p>&emsp;&emsp;被代理的对象。</p>
<p><strong>Weaving（织入）</strong></p>
<p>&emsp;&emsp;是指把增强应用到目标对象来创建新的代理对象的过程。</p>
<p>&emsp;&emsp;Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</p>
<p><strong>Proxy（代理）</strong>：</p>
<p>​    向目标对象应用通知之后创建的对象</p>
<p><strong>Aspect（切面）</strong></p>
<p>&emsp;&emsp;是切入点和通知的结合</p>
<h3 id="学习Spring要明确的事情"><a href="#学习Spring要明确的事情" class="headerlink" title="学习Spring要明确的事情"></a>学习Spring要明确的事情</h3><p><strong>开发阶段（我们做的）</strong></p>
<p>&emsp;&emsp;编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。</p>
<p>&emsp;&emsp;把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP编程人员来做（有能力的人来做）。</p>
<p>&emsp;&emsp;在配置文件中，声明切入点与通知之间的关系，即切面。：AOP编程人员来做（配置）。</p>
<p><strong>运行阶段（Spring框架完成的）</strong></p>
<p>&emsp;&emsp;Spring框架监控切入点方法的执行。一旦监控到切入点方法被执行，使用代理机制，动态创建目标对象的代理对象。根据通知的类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
<h2 id="Spring中基于XML和注解的AOP配置"><a href="#Spring中基于XML和注解的AOP配置" class="headerlink" title="Spring中基于XML和注解的AOP配置"></a>Spring中基于XML和注解的AOP配置</h2><h3 id="基于XML的AOP配置示例"><a href="#基于XML的AOP配置示例" class="headerlink" title="基于XML的AOP配置示例"></a>基于XML的AOP配置示例</h3><p>首先导入maven依赖，添加了AspectJ依赖，用于解析切入点表达式（用于匹配要进行拦截的方法）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Service层接口及实现类</strong></p>
<p>由于AOP主要是对Service层的方法进行增强，这里只需要Service层接口和实现类就可以测试AOP的使用</p>
<p><code>AccountService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟更新账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟删除账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了保存账户操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了更新账户操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了删除账户操作"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code>中的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.zxw.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知的类型，并建立通知方法和切入点方法的联系 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAOP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext对象</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取AccountService对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    as.saveAccount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logger类的printLog方法执行了!</span><br><span class="line">执行了保存账户操作</span><br></pre></td></tr></table></figure>



<h3 id="基于XML的AOP配置的步骤"><a href="#基于XML的AOP配置的步骤" class="headerlink" title="基于XML的AOP配置的步骤"></a>基于XML的AOP配置的步骤</h3><ol>
<li><p>将通知Bean交给Spring管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Logger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.zxw.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>aop:config</code>标签表明开始AOP的配置</p>
</li>
<li><p>使用<code>aop:aspect</code>标签表明开始配置切面</p>
<p><strong>属性</strong></p>
<ul>
<li><code>id</code>：给切面提供一个唯一标识</li>
<li><code>ref</code>：指定通知bean的id</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>aop:aspect</code>标签内部使用对应的标签来配置不同类型的通知</p>
<ul>
<li><p><code>aop:before</code>：前置通知</p>
</li>
<li><p><code>aop:after-returning</code>：配置后置通知</p>
</li>
<li><p><code>aop:after-throwing</code>：配置异常通知</p>
</li>
<li><p><code>aop:after</code>：配置最终通知</p>
</li>
<li><p><code>aop:around</code>：配置环绕通知</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>method</code>：指定通知Bean中的哪个方法用于该通知</li>
<li><code>pointcut</code>：用于指定切入点表达式，该表达式的含义是对符合要求的业务层方法进行该种通知类型的增强</li>
<li><code>pointcut-ref</code>：指定一个切入点表达式的唯一标识id</li>
</ul>
</li>
</ul>
</li>
<li><p>可以使用<code>aop:pointcut</code>标签来配置一个切入点表达式</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>id</code>：唯一标识一个切入点表达式</li>
<li><code>expression</code>：切入点表达式的内容</li>
</ul>
<p><strong>注意</strong>：此标签写在<code>aop:aspect</code>标签的内部则只能够在当前切面中使用，写在<code>aop:config</code>标签中则可以在所有切面中使用（注意，此时必须写在<code>aop:aspect</code>标签之前，这是XML的约束）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>==切入点表达式==</p>
<p><strong>关键字</strong>：<code>execution(表达式)</code></p>
<p><strong>表达式格式</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回值 包名.包名...类名.方法名(参数列表)</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void com.zxw.service.impl.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>

<p><strong>细节</strong></p>
<ol>
<li><p>访问修饰符可以省略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void com.zxw.service.impl.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值类型可以使用通配符表示任意返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* com.zxw.service.imlp.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>包名可以使用通配符表示任意包，但是有几个包就要写几个<code>*.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *.*.*.*.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>包名可以使用<code>..</code>表示当前包及其子包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>类名和方法名都可以使用<code>*</code>来实现通配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..*.saveAccount()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..*.*()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>参数列表</strong></p>
<ul>
<li>可以直接写数据类型<ul>
<li>基本类型直接写名称</li>
<li>引用类型写<code>包名.类名</code>，例如：<code>java.lang.String</code></li>
</ul>
</li>
<li>可以使用通配符<code>*</code>表示任意类型，但是这样写必须有参数</li>
<li>可以使用<code>..</code>表示有无参数均可，参数可以是任意类型</li>
</ul>
<p><strong>全通配写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..*.*(..)</span><br></pre></td></tr></table></figure>

<p><strong>实际开发中切入点表达式的通常写法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* com.xxx.service.impl.*.*(..)</span><br></pre></td></tr></table></figure>



<h3 id="AOP配置环绕通知"><a href="#AOP配置环绕通知" class="headerlink" title="AOP配置环绕通知"></a>AOP配置环绕通知</h3><p>环绕通知十分强大，它可以实现前置、后置、异常、最终通知的功能</p>
<p>可以通过下面这个事务管理的例子来理解</p>
<p><code>TransactionManager</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开启事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提交事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollbackTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"回滚事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"释放连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">serviceTransaction</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            beginTransaction();</span><br><span class="line">            <span class="comment">//执行service方法</span></span><br><span class="line">            <span class="comment">//获取执行的参数</span></span><br><span class="line">            Object[] args = pjp.getArgs();</span><br><span class="line">            returnValue = pjp.proceed(args);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"com.zxw.utils.TransactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用aop进行事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:before method="beginTransaction" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:after-returning method="commitTransaction" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:after-throwing method="rollbackTransaction" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:after method="release" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"serviceTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>==ProceedingJoinPoint==</p>
<p>这个类有两个比较重要的方法：</p>
<ul>
<li><code>getArgs()</code>：获取切入点方法的参数，返回的是一个Object类型的数组</li>
<li><code>proceed()</code>：执行切入点方法，这个方法可以传入一个上面获取的参数</li>
</ul>
<h3 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h3><ol>
<li>在<code>bean.xml</code>中配置要扫描的包并开启AOP注解支持</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring容器创建时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启Spring的AOP注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>使用注解将<code>AccountServiceImpl</code>和<code>TransactionManager</code>注入到Spring容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Aspect</code>来标记切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Pointcut</code>在标记切面的类中配置切入点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用注解来标记通知类中方法的种类</p>
<ul>
<li><p><code>@Before</code>：前置通知</p>
</li>
<li><p><code>@AfterReturning</code>：后置通知</p>
</li>
<li><p><code>@AfterThrowing</code>：异常通知</p>
</li>
<li><p><code>@After</code>：最终通知</p>
</li>
<li><p><code>@Around</code>：环绕通知</p>
<p><strong>属性</strong></p>
<ul>
<li><p><code>value</code>：指定一个切入点表达式或者给出切入点表达式的方法名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>注意</strong>：使用注解方式配置除了环绕通知的其他四种通知，执行顺序会出现问题，这是Spring的一个bug，实际开发中一般使用环绕通知</p>
</li>
</ol>
<h3 id="不使用XML配置文件开启Spring-AOP的注解"><a href="#不使用XML配置文件开启Spring-AOP的注解" class="headerlink" title="不使用XML配置文件开启Spring AOP的注解"></a>不使用XML配置文件开启Spring AOP的注解</h3><p>在<code>SpringConfiguration</code>中添加注解@EnableAspectJAutoProxy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：@Aspect后不需要给出值，不然会报错！！！！！！！！！！</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>面向切面编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（四）</title>
    <url>/2020/07/14/Spring%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（四）"><a href="#Spring（四）" class="headerlink" title="Spring（四）"></a>Spring（四）</h1><h2 id="Spring中的JdbcTemplate（会用）"><a href="#Spring中的JdbcTemplate（会用）" class="headerlink" title="Spring中的JdbcTemplate（会用）"></a>Spring中的JdbcTemplate（会用）</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200714104143319.png" align="left"/>



<h3 id="JdbcTemplate的作用"><a href="#JdbcTemplate的作用" class="headerlink" title="JdbcTemplate的作用"></a>JdbcTemplate的作用</h3><p>JdbcTemplate对JDBC进行了薄薄的封装，其作用和JDBC一样，用于和数据库进行交互，实现对表的CRUD操作</p>
<h3 id="如何创建JdbcTemplate"><a href="#如何创建JdbcTemplate" class="headerlink" title="如何创建JdbcTemplate"></a>如何创建JdbcTemplate</h3><p>可以通过<code>new JdbcTemplate(dataSource)</code>来创建一个JdbcTemplate然后使用，在Spring配置文件中有关JdbcTemplate的配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>$&#123;jdbc.driver&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>$&#123;jdbc.url&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="JdbcTemplate的常用方法（CRUD）"><a href="#JdbcTemplate的常用方法（CRUD）" class="headerlink" title="JdbcTemplate的常用方法（CRUD）"></a>JdbcTemplate的常用方法（CRUD）</h3><h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into account(name, money) values(?,?)"</span>;</span><br><span class="line">jt.update(sql, <span class="string">"eee"</span>, <span class="number">3333f</span>);</span><br></pre></td></tr></table></figure>

<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">jt.update(sql, <span class="string">"abc"</span>, <span class="number">1200f</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">jt.update(sql, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select id, name, money from account where money&gt;?"</span>;</span><br><span class="line">List&lt;Account&gt; accounts = jt.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), 1000<span class="title">f</span>)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="查询一个"><a href="#查询一个" class="headerlink" title="查询一个"></a>查询一个</h4><p>虽然JdbcTemplate中也提供了返回值为T的查询单个的方法，但是实际开发中一般还是使用下面这种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select id, name, money from account where id=?"</span>;</span><br><span class="line">List&lt;Account&gt; accounts = jt.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), 1)</span>;</span><br><span class="line">System.out.println(accounts.isEmpty()? <span class="string">"没有内容"</span> : accounts.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<h4 id="查询返回一行一列"><a href="#查询返回一行一列" class="headerlink" title="查询返回一行一列"></a>查询返回一行一列</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select count(*) from account where money&gt;?"</span>;</span><br><span class="line">Long count = jt.queryForObject(sql, Long<span class="class">.<span class="keyword">class</span>, 1000<span class="title">f</span>)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="Dao中使用JdbcTemplate"><a href="#Dao中使用JdbcTemplate" class="headerlink" title="Dao中使用JdbcTemplate"></a>Dao中使用JdbcTemplate</h3><p><code>bean.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbcConfig.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>$&#123;jdbc.driver&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>$&#123;jdbc.url&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>AccountDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据name查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountDaoImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, name, money from account"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, name, money from account where id=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>).<span class="title">get</span>(0)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, name, money from account where name=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>).<span class="title">get</span>(0)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into account(name,money) values(?,?)"</span>;</span><br><span class="line">        jdbcTemplate.update(sql, account.getName(), account.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext Spring核心容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取AccountDao对象</span></span><br><span class="line">    AccountDao accountDao = ac.getBean(<span class="string">"accountDao"</span>, AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Dao中使用JdbcDaoSupport的两种方式"><a href="#Dao中使用JdbcDaoSupport的两种方式" class="headerlink" title="Dao中使用JdbcDaoSupport的两种方式"></a>Dao中使用JdbcDaoSupport的两种方式</h3><h4 id="自定义JdbcDaoSupport"><a href="#自定义JdbcDaoSupport" class="headerlink" title="自定义JdbcDaoSupport"></a>自定义JdbcDaoSupport</h4><p>如果每一个Dao接口的实现类都需要注入JdbcTemplate，那么就会用很多重复的代码，所以可以提供一个父类JdbcDaoSupport，然后让所有的Dao接口的实现类继承这个类。</p>
<p><code>JdbcDaoSupport</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jdbcTemplate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在配置bean时，将dataSource或者jdbcTemplate注入到对应的dao接口实现类中即可</p>
<h4 id="继承Spring提供的JdbcDaoSupport"><a href="#继承Spring提供的JdbcDaoSupport" class="headerlink" title="继承Spring提供的JdbcDaoSupport"></a>继承Spring提供的JdbcDaoSupport</h4><p>Spring也提供了JdbcDaoSupport这个类，具体的实现和上面自定义的基本相同，但是使用Spring提供的JdbcDaoSupport不支持注解方式配置。</p>
<h2 id="Spring中的事务控制"><a href="#Spring中的事务控制" class="headerlink" title="Spring中的事务控制"></a>Spring中的事务控制</h2><p><strong>Spring事务需要明确</strong>：</p>
<ul>
<li>Java EE体系分层开发，事务的处理位于业务层，Spring提供了分层设计业务层的事务处理解决方案</li>
<li>Spring框架为我们提供了一组事务控制的接口</li>
<li>Spring的事务控制都是基于AOP的，它既可以使用编程的方式实现，也可以使用配置的方式实现。重点学习<strong>使用配置的方式实现</strong></li>
</ul>
<h3 id="Spring中事务控制的一组API"><a href="#Spring中事务控制的一组API" class="headerlink" title="Spring中事务控制的一组API"></a>Spring中事务控制的一组API</h3><h4 id="PlatFormTransactionManager接口"><a href="#PlatFormTransactionManager接口" class="headerlink" title="PlatFormTransactionManager接口"></a>PlatFormTransactionManager接口</h4><p>这个接口中定义了三个方法：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200517195853778.png" align="left"/>

<p>Spring给出的实现类是：<code>DataSourceTransactionManager</code></p>
<p>Hibernate中给出的实现类是：<code>HibernateTransactionManager</code></p>
<h4 id="TransactionDefinition接口"><a href="#TransactionDefinition接口" class="headerlink" title="TransactionDefinition接口"></a>TransactionDefinition接口</h4><p>这个接口主要有如下几个方法：</p>
<ul>
<li><code>String getName()</code>：获取事务对象的名称</li>
<li><code>int getIsolationLevel()</code>：获取事务隔离级别</li>
<li><code>int getPropagationBehavior()</code>：获取事务传播行为</li>
<li><code>int getTimeout</code>：获取事务超时时间</li>
<li><code>boolean isReadOnly()</code>：获取事务是否只读</li>
</ul>
<p>==事务的隔离级别==</p>
<ul>
<li><code>ISOLATION_DEFAULT</code>：默认级别</li>
<li><code>ISOLATION_READ_UNCOMMITTED</code>：读取未提交数据</li>
<li><code>ISOLATION_READ_COMMITTED</code>：读取已提交数据，解决了脏读问题（Oracle默认级别）</li>
<li><code>ISOLATION_REPEATABLE_READ</code>：可重复读，解决不可重复读问题</li>
<li><code>ISOLATION_SERIALIZABLE</code>：串行化，解决了脏读、不可重复读、幻读，效率最低</li>
</ul>
<p>==事务的传播行为==</p>
<p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。</p>
<p>Spring在TransactionDefinition中定义了7种事务传播行为：</p>
<table>
<thead>
<tr>
<th>事务行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>PROPAGATION_REQUIRED</td>
<td>支持当前事务，假设当前没有事务。就新建一个事务</td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td>支持当前事务，假设当前没有事务，就以非事务方式运行</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td>支持当前事务，假设当前没有事务，就抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td>新建事务，假设当前存在事务。把当前事务挂起</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式运行操作。假设当前存在事务，就把当前事务挂起</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td>以非事务方式运行，假设当前存在事务，则抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td>
</tr>
</tbody></table>
<p>如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200716081131387.png" align="left"/>

<p>事务的传播行为就是在方法A中开启了事务，当执行到方法B时应当如何处理的行为</p>
<p><strong>PROPAGATION_REQUIRED</strong></p>
<p>单独调用方法B时，因为上下文不存在事务，所以会开启一个新的事务</p>
<p>调用方法A时，因为上下文不存在事务，所以会开启一个新的事务。当执行到方法B时，方法B发现当前上下文有事务，就加入到当前事务中</p>
<p><strong>PROPAGATION_SUPPORTS</strong></p>
<p>如果存在一个事务，支持当前事务。如果没有事务，则以非事务方式执行。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    methodB();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单独调用methodB方法时，是以非事务方式执行的。但是当调用methodA方法时，methodB会加入methodA的事务中。</p>
<p><strong>PROPAGATION_MANDATORY</strong></p>
<p>如果已经存在一个事务，则加入当前事务。如果没有一个活动的事务，则抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    methodB();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.MANDATORY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单独调用methodB方法时，由于没有一个活动的事务，会抛出异常<code>IllegalTransactionStateException(“Transaction propagation ‘mandatory’ but no existing transaction found”)</code>；当调用methodA时，methodB会加入到methodA的事务中。</p>
<p>*<em>PROPAGATION_REQUIRES_NEW *</em></p>
<p>会开启一个新的事务，如果已经存在一个事务，则将这个事务挂起。这种方式需要使用<code>JtaTransactionManager</code>作为事务管理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    methodB();</span><br><span class="line">    doSomethingAfter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED_NEW)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用methodA相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransactionManager tm = <span class="keyword">null</span>;</span><br><span class="line">Transaction ts1 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//获得一个JTA事务管理器</span></span><br><span class="line">    tm = getTransactionManager();</span><br><span class="line">    <span class="comment">//开启一个新事务</span></span><br><span class="line">    tm.begin();</span><br><span class="line">    ts1 = tm.getTransaction();</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    <span class="comment">//挂起当前事务</span></span><br><span class="line">    tm.suspend();</span><br><span class="line">    Transaction ts2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//开启第二个事务</span></span><br><span class="line">        tm.begin();</span><br><span class="line">        ts2 = tm.getTransaction();</span><br><span class="line">        methodB();</span><br><span class="line">        <span class="comment">//提交第二个事务</span></span><br><span class="line">        ts2.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//回滚第二个事务</span></span><br><span class="line">        ts2.rollback();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//methodB执行完毕之后，恢复第一个事务</span></span><br><span class="line">    tm.resume(ts1);</span><br><span class="line">    doSomethingAfter();</span><br><span class="line">    <span class="comment">//提交第一个事务</span></span><br><span class="line">    ts1.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//回滚第一个事务</span></span><br><span class="line">    ts1.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这段代码可以发现，外层事务和内层事务是相互独立的，外层事务的失败不会影响到内层事务的提交！</p>
<p><strong>PROPAGATION_NOT_SUPPORTED</strong></p>
<p>总是非事务地执行，并挂起任何存在的事务。也需要使用<code>JtaTransactionManager</code></p>
<p>也就是调用methodA时开启了一个事务，在执行methodB前首先挂起这个事务，执行完毕之后恢复这个事务。在methodB中以非事务的方式执行</p>
<p><strong>PROPAGATION_NEVER</strong></p>
<p>总是以非事务的方式执行，如果存在一个活动的事务，则抛出异常！</p>
<p><strong>PROPAGATION_NESTED</strong></p>
<p>如果一个活动的事务存在，则运行在一个嵌套的事务中。 如果没有活动事务, 则按TransactionDefinition.PROPAGATION_REQUIRED 属性执行。</p>
<p>这是一个嵌套事务,使用JDBC 3.0驱动时,仅仅支持DataSourceTransactionManager作为事务管理器。<br>需要JDBC 驱动的java.sql.Savepoint类。使用PROPAGATION_NESTED，还需要把PlatformTransactionManager的nestedTransactionAllowed属性设为true(属性值默认为false)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    methodB();</span><br><span class="line">    doSomethingAfter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果单独调用methodB方法，则按照REQUIRED属性执行。如果调用methodA方法，相当于如下的效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">SavePoint sp = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    conn = getConnnection();</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    sp = conn.getSavePoint();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        methodB();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        conn.rollback(sp);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    conn.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内层事务发生异常时会回滚到设置好的回滚点（即methodB执行之前的状态），外层事务发生异常则会回滚整个事务（包括内层事务的内容）。和REQUIRES_NEW的区别在于，外层的事务可以影响到内层事务，内层事务无法影响外层事务。</p>
<h3 id="Spring声明式事务—XML方式"><a href="#Spring声明式事务—XML方式" class="headerlink" title="Spring声明式事务—XML方式"></a>Spring声明式事务—XML方式</h3><p><strong>步骤</strong></p>
<ol>
<li><p>配置事务管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置事务的通知</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>id</code>：通知的唯一标识</li>
<li><code>transaction-manager</code>：指定事务管理器bean的id</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置AOP中的通用切入点表达式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通用切入点表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建立事务通知和切入点表达式之间的关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--建立事务通知和切入点表达式之间的关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>tx:advice</code>标签内部配置事务的属性</p>
<ul>
<li><code>isolation</code>：用于指定事务的隔离级别，默认值是DEFAULT，表示使用数据库默认的隔离级别</li>
<li><code>propagation</code>：用于指定事务的传播行为，默认值为REQUIRED，表示一定会有事务，查询操作可以选择SUPPORTS</li>
<li><code>read-only</code>：用于指定是否只读，只有查询方法才能设置为true，默认值为false</li>
<li><code>timeout</code>：用于指定事务的超时时间，默认值是-1，表示永不超时，以秒为单位</li>
<li><code>rollback-for</code>：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不会回滚。没有默认值，表示任何异常都回滚</li>
<li><code>no-rollback-for</code>：用于指定一个异常，当产生该异常时，事务不回滚；产生其他异常时，事务回滚。没有默认值，表示任何异常都回滚</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="Spring声明式事务—注解方式"><a href="#Spring声明式事务—注解方式" class="headerlink" title="Spring声明式事务—注解方式"></a>Spring声明式事务—注解方式</h3><ol>
<li><p>配置事务管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>开启Spring对注解事务的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启Spring对注解事务的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>在需要使用事务支持的地方使用@Transactional注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.addAccount(account);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Spring的事务处理是在捕获到异常后进行回滚，然后抛出捕获到的异常！</p>
<h3 id="Spring声明式事务—-纯注解方式"><a href="#Spring声明式事务—-纯注解方式" class="headerlink" title="Spring声明式事务— 纯注解方式"></a>Spring声明式事务— 纯注解方式</h3><p>纯注解方式就是使用配置类来替代<code>bean.xml</code>，可以为事务单独创建一个用于事务的事务配置类<code>TransactionConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和事务相关的配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-17 21:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建事务管理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JdbcTemplate</tag>
        <tag>Spring事务</tag>
        <tag>声明式事务</tag>
        <tag>事务传播行为</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（二）</title>
    <url>/2020/07/24/Spring-MVC%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring-MVC（二）"><a href="#Spring-MVC（二）" class="headerlink" title="Spring MVC（二）"></a>Spring MVC（二）</h1><h2 id="响应数据和结果视图"><a href="#响应数据和结果视图" class="headerlink" title="响应数据和结果视图"></a>响应数据和结果视图</h2><h3 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h3><ul>
<li>返回String</li>
<li>返回void（使用Servlet API）</li>
<li>返回ModelAndView</li>
</ul>
<p><strong>示例代码</strong></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/testReturnString"&gt;测试返回值类型为String&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/testReturnVoid"&gt;测试返回值类型为void&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/testReturnModelAndView"&gt;测试返回值类型为ModelAndView&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testReturnString"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testReturnString</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"返回值为字符串类型"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testReturnVoid"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//向request域中保存数据</span></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>, <span class="string">"返回值为void类型"</span>);</span><br><span class="line">        <span class="comment">//使用Servlet API转发到指定的页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/success.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testReturnModelAndView"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testReturnModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//向ModelAndView中保存数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"返回值类型为ModelAndView"</span>);</span><br><span class="line">        <span class="comment">//设置视图名</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h3><h4 id="forward转发"><a href="#forward转发" class="headerlink" title="forward转发"></a>forward转发</h4><p>Controller方法提供了String类型的返回值后，默认就是请求转发。和如下的写法作用相同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testForward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"转发成功"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个的作用就相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/success.jsp"</span>).forward(request, response);</span><br></pre></td></tr></table></figure>

<p>使用了<code>forward:</code>，则路径必须写成物理视图，而不能是逻辑视图；使用请求转发既可以转发到jsp页面，也可以转发到其他的控制器方法中。</p>
<h4 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h4><p>在String类型的返回值中可以使用<code>redirect:</code>表示重定向，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRedirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:testReturnString"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRedirectToBaidu"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirectToBaidu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:http://www.baidu.com"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(url);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：请求转发不能转发到WEB-INF目录中，客户端是无法直接访问WEB-INF目录中的内容的</p>
<h2 id="请求参数绑定"><a href="#请求参数绑定" class="headerlink" title="请求参数绑定"></a>请求参数绑定</h2><h3 id="什么是请求参数绑定"><a href="#什么是请求参数绑定" class="headerlink" title="什么是请求参数绑定"></a>什么是请求参数绑定</h3><p>&emsp;&emsp;请求参数都是以key=value的格式存在了，键和值都是以字符串的形式存在的</p>
<p><strong>什么是参数绑定？</strong></p>
<p>&emsp;&emsp;参数绑定就是将请求参数中的参数的值赋予控制器方法对应形参的过程。</p>
<p><strong>示例</strong></p>
<p>控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBind"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBind</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    System.out.println(id):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问地址：<code>http://localhost:8080/工程名/testBind?id=10</code></p>
<p>访问这个地址会在服务器的控制台输出id的值10</p>
<p><strong>请求参数要绑定的目标类型</strong></p>
<p>控制器类中方法的参数可以是如下类型：</p>
<ul>
<li><strong>默认支持的参数类型（Servlet API支持的）</strong></li>
<li><strong>简单类型和String</strong></li>
<li><strong>POJO类型</strong></li>
<li><strong>集合类型</strong></li>
</ul>
<h3 id="默认支持的参数类型（Servlet-API）"><a href="#默认支持的参数类型（Servlet-API）" class="headerlink" title="默认支持的参数类型（Servlet API）"></a>默认支持的参数类型（Servlet API）</h3><p>Controller方法形参中有以下类型的参数，处理器适配器（HandlerAdapter）会自动识别并进行赋值</p>
<ul>
<li><p>==HttpServletRequest==：通过request获取请求信息</p>
</li>
<li><p>==HttpServletResponse==：通过response处理响应信息</p>
</li>
<li><p>==HttpSession==：获取session（会话）相关的信息</p>
</li>
<li><p>InputStream、OutputStream</p>
</li>
<li><p>Reader、Writer</p>
</li>
<li><p>Model、ModelMap</p>
<p>ModelMap继承自LinkedHashMap，Model是一个接口，它们底层都实现了<code>BindingAwareModelMap</code>类，作用就是向页面传递数据，<strong>相当于request的作用</strong></p>
</li>
</ul>
<h3 id="简单类型和String的绑定"><a href="#简单类型和String的绑定" class="headerlink" title="简单类型和String的绑定"></a>简单类型和String的绑定</h3><p>&emsp;&emsp;在Spring MVC中，绑定简单类型参数的方式有两种</p>
<ol>
<li>直接绑定</li>
<li>注解绑定</li>
</ol>
<h4 id="直接绑定"><a href="#直接绑定" class="headerlink" title="直接绑定"></a>直接绑定</h4><p><strong>要求</strong>：请求参数的key要和Controller中方法的形参名称<strong>相同</strong></p>
<p><strong>示例</strong>：</p>
<p>请求的url：<code>http://localhost:8080/spring_mvc/testBindSimple?id=10</code></p>
<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindSimple"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindSimple</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"id="</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注解绑定"><a href="#注解绑定" class="headerlink" title="注解绑定"></a>注解绑定</h4><p><strong>要求</strong>：请求参数的key的值要和对应形参上@RequestParam注解的value属性相同才能绑定成功</p>
<p><strong>示例</strong>：</p>
<p>请求的url：<code>http://localhost:8080/spring_mvc/testBindSImple?accountId=10</code></p>
<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindSimple"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindSimple</span><span class="params">(@RequestParam(<span class="string">"accountId"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"id="</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@RequestParam注解简介</strong></p>
<ul>
<li><p><code>value</code>：参数的名字，要和对应的请求参数的key的值相同</p>
</li>
<li><p><code>required</code>：是否必须，默认值为true，表示请求中一定要有该参数，否则会产生</p>
<p><font color="red"><strong>http Status 400 - Required Integer parameter ‘xxx’ is not present</strong></font></p>
</li>
<li><p><code>defaultValue</code>：默认值，如果请求参数中没有指定给出的默认值</p>
</li>
</ul>
<h3 id="POJO类型的绑定"><a href="#POJO类型的绑定" class="headerlink" title="POJO类型的绑定"></a>POJO类型的绑定</h3><p><strong>要求</strong>：Controller方法中的参数类型是POJO类；请求参数的<strong>key</strong>要和POJO类型的<strong>属性名称</strong>一致</p>
<p><strong>使用示例</strong></p>
<p>POJO类：</p>
<p><code>Account</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求的url：<code>http://localhost:8080/spring_mvc/testBindAccount?id=10&amp;name=Jerry&amp;money=2000</code></p>
<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="POJO类含有POJO成员对象"><a href="#POJO类含有POJO成员对象" class="headerlink" title="POJO类含有POJO成员对象"></a>POJO类含有POJO成员对象</h3><p><code>User</code>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", account="</span> + account +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">getAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用的表单：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/testBindUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"account.name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户金额:&lt;input type=<span class="string">"number"</span> name=<span class="string">"account.money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h3 id="集合类型绑定"><a href="#集合类型绑定" class="headerlink" title="集合类型绑定"></a>集合类型绑定</h3><p>集合类型有两种方式处理：</p>
<p><strong>第一种</strong>：</p>
<p>&emsp;&emsp;要求集合类型的请求参数是POJO类中的一个属性。在表单 中请求参数的名称要和POJO中集合的属性名称相同</p>
<ul>
<li><p>对于List集合中的元素赋值，要使用下标，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list[<span class="number">0</span>].name=zhangsan</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于Map集合中的元素赋值，要使用键值对，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map[<span class="string">'one'</span>].name=zhangsan</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>第二种</strong></p>
<p>&emsp;&emsp;接收的请求参数是json格式的数据，需要借助一个注解实现</p>
<p><strong>示例</strong>：</p>
<p>修改<code>User</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accountList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Account&gt; accountMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", accountList="</span> + accountList +</span><br><span class="line">                <span class="string">", accountMap="</span> + accountMap +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccountList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountList</span><span class="params">(List&lt;Account&gt; accountList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountList = accountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Account&gt; <span class="title">getAccountMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountMap</span><span class="params">(Map&lt;String, Account&gt; accountMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountMap = accountMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用的表单：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/testBindUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    用户密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">1</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[0].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">1</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[0].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">2</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[1].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">2</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[1].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">3</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">3</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">4</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">4</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h3 id="自定义参数绑定"><a href="#自定义参数绑定" class="headerlink" title="自定义参数绑定"></a>自定义参数绑定</h3><p><strong>使用场景</strong></p>
<p>将一个从表单中获取的日期字符串转换为java.util.Date类型，如果不使用自定义的类型转换器，则会报错</p>
<p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testDate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>解决步骤</strong></p>
<p>问题出现的原因是，Spring MVC无法将这个日期字符串和Date类型的控制器方法参数进行绑定。所以需要提供一个转换器，将String类型的日期字符串转换为Date类型的日期对象</p>
<p>Spring提供了一个这样的接口：<code>Converter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>S代表Source，T代表Target，convert方法就是将S类型的数据转换为T类型的数据</p>
<ol>
<li><p>编写<code>StringToDateConverter</code>实现<code>Converter</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        Date result = <span class="keyword">null</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Spring MVC的配置文件中<code>spring-mvc.xml</code>中配置类型转换器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置类型转换器工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给工厂注入一个新的类型转换器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置自定义的类型转换器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zxw.converter.StringToDateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在annotation-driven标签中引用配置的类型转换服务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>





</li>
</ol>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="文件上传回顾"><a href="#文件上传回顾" class="headerlink" title="文件上传回顾"></a>文件上传回顾</h3><p><strong>前提</strong></p>
<ol>
<li><p>form表单的<code>enctype</code>属性的值必须为：<code>multipart/form-data</code>（默认值为：<code>application/x-www-form-urlencoded</code>）</p>
<p><code>enctype</code>是表单请求正文的类型</p>
</li>
<li><p><code>method</code>属性的取值必须是<code>post</code></p>
</li>
<li><p>提供一个文件选择域<code>&lt;input type=&quot;file&quot;/&gt;</code></p>
</li>
</ol>
<p><strong>借助第三方组件实现文件上传</strong></p>
<p>&emsp;&emsp;使用<code>commons-fileupload</code>组件实现文件上传，需要导入对应的maven依赖：<code>commons-fileupload</code>和<code>commons-io</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC传统方式的文件上传"><a href="#Spring-MVC传统方式的文件上传" class="headerlink" title="Spring MVC传统方式的文件上传"></a>Spring MVC传统方式的文件上传</h3><p>&emsp;&emsp;在Java Web中，我们使用appache fileupload组件来帮助我们完成文件的上传，而Spring MVC则对其进行了进一步的封装，使用上更为简单。Spring MVC中由<code>MultipartFile</code>接口来实现文件上传</p>
<p>==MultipartFile接口==</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>String getName()</code></td>
<td align="center">获取MultipartFile的名称</td>
</tr>
<tr>
<td align="center"><code>String getOriginalFilename()</code></td>
<td align="center">获取上传文件在客户端文件系统中的名称（初始上传文件的名称）</td>
</tr>
<tr>
<td align="center"><code>String getContentType()</code></td>
<td align="center">获取上传文件的内容类型</td>
</tr>
<tr>
<td align="center"><code>boolean isEmpty()</code></td>
<td align="center">判断上传的文件是否为空</td>
</tr>
<tr>
<td align="center"><code>long getSize()</code></td>
<td align="center">获取上传文件的大小（字节）</td>
</tr>
<tr>
<td align="center"><code>byte[] getBytes()</code></td>
<td align="center">获取上传文件的字节数组</td>
</tr>
<tr>
<td align="center"><code>InputStream getInputStream()</code></td>
<td align="center">获取上传文件的输入流对象</td>
</tr>
<tr>
<td align="center"><code>void transferTo(File dest)</code></td>
<td align="center">将文件上传到dest指定的位置</td>
</tr>
</tbody></table>
<p><strong>第一步：添加maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步：编写<code>upload.jsp</code></strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/uploadFile"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"fileName"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>第三步：编写控制器代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadFile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(String fileName, MultipartFile uploadFile, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//定义文件名称</span></span><br><span class="line">    String destName = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//获取原始文件名</span></span><br><span class="line">    String originalName = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//获取文件的后缀名</span></span><br><span class="line">    String suffix = originalName.substring(originalName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加UUID防止文件名重复</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase();</span><br><span class="line">    <span class="comment">//得到要保存的文件名</span></span><br><span class="line">    <span class="keyword">if</span> (fileName == <span class="keyword">null</span> || fileName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果没有给出文件名，则使用原始的文件名</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + originalName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则使用表单中输入的文件名称</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + fileName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取要上传文件的路径</span></span><br><span class="line">    String basePath = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">    <span class="comment">//解决同一个文件夹中存放过多文件的问题</span></span><br><span class="line">    String path = basePath + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//判断路径是否存在，不存在则创建</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用MultipartFile接口中的方法，将文件上传到指定的位置</span></span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> File(path, destName));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步：配置文件解析器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置上传文件的最大大小为5MB--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>==注意：文件解析器的id是固定的，不能使用别的名称，否则无法实现请求参数的绑定（不光是文件，其他的参数也无法绑定）==</p>
<h3 id="Spring-MVC跨服务器方式的文件上传"><a href="#Spring-MVC跨服务器方式的文件上传" class="headerlink" title="Spring MVC跨服务器方式的文件上传"></a>Spring MVC跨服务器方式的文件上传</h3><h4 id="分服务器的目的"><a href="#分服务器的目的" class="headerlink" title="分服务器的目的"></a>分服务器的目的</h4><p>在实际开发中，会有很多功能不同的服务器。例如：</p>
<ul>
<li>应用服务器：负责部署应用</li>
<li>数据库服务器：运行数据库</li>
<li>缓存和消息服务器：负责处理高并发访问的缓存和消息</li>
<li>文件服务器：负责存储用户上传文件的服务器</li>
</ul>
<p>（<strong>此处说的不是服务器集群</strong>）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200728075609833.png" align="left"/>



<p><strong>步骤</strong>：</p>
<p>跨服务器上传文件，就是在应用服务器获得上传的文件然后将其上传至文件服务器，所以需要两个Tomcat服务器来模拟这个场景！</p>
<p><strong>步骤一：添加jersey的maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jersey-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jersey-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：编写控制器代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadFile2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadFile2</span><span class="params">(String fileName, MultipartFile uploadFile, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//定义文件名称</span></span><br><span class="line">    String destName = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//获取原始文件名</span></span><br><span class="line">    String originalName = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//获取文件的后缀名</span></span><br><span class="line">    String suffix = originalName.substring(originalName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加UUID防止文件名重复</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase();</span><br><span class="line">    <span class="comment">//得到要保存的文件名</span></span><br><span class="line">    <span class="keyword">if</span> (fileName == <span class="keyword">null</span> || fileName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果没有给出文件名，则使用原始的文件名</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + originalName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则使用表单中输入的文件名称</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + fileName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件服务器的对应路径</span></span><br><span class="line">    String path = <span class="string">"http://localhost:8081/upload_server/uploads/"</span>;</span><br><span class="line">    <span class="comment">//实现跨服务器上传</span></span><br><span class="line">    <span class="comment">//创建客户端对象</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">//和文件服务器进行连接</span></span><br><span class="line">    WebResource webResource = client.resource(path + destName);</span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    webResource.put(uploadFile.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>可能出现的问题</strong></p>
<ol>
<li><p>如果出现了405响应码，则说明使用的tomcat服务器默认禁止读写，此时需要修改tomcat的<code>web.xml</code>文件以支持写入操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果出现了409响应码，说明没有在文件服务器创建<code>uploads</code>目录</p>
</li>
</ol>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常处理的思路"><a href="#异常处理的思路" class="headerlink" title="异常处理的思路"></a>异常处理的思路</h3><p>&emsp;&emsp;系统中异常包括两类：受查异常（CheckedException）和运行时异常（RuntimeException），前者通过捕获异常从而获得异常信息，后者主要通过规范</p>
<p>&emsp;&emsp;dao、service、controller中出现的异常都通过<code>throws</code>向上抛出，最后由Spring MVC前端控制器交由异常处理器进行异常处理，如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200728134540502.png" align="left"/>

<p>编写一个异常处理器并在Spring中注册，如果产生了该类型的异常，由于dao、service、controller层都会将异常抛出，最后交给前端处理器，前端控制器如果在自定义的异常处理器中找到了对应的异常类型就可以转发到响应的异常页面。</p>
<h3 id="Spring-MVC处理异常的三种方式"><a href="#Spring-MVC处理异常的三种方式" class="headerlink" title="Spring MVC处理异常的三种方式"></a>Spring MVC处理异常的三种方式</h3><ol>
<li>使用<code>@ExceptionHandler</code>注解</li>
<li>实现<code>HandlerExceptionResolver</code>接口</li>
<li>使用<code>@ControllerAdvice</code>注解</li>
</ol>
<h4 id="使用-ExceptionHandler注解"><a href="#使用-ExceptionHandler注解" class="headerlink" title="使用@ExceptionHandler注解"></a>使用<code>@ExceptionHandler</code>注解</h4><p><strong>说明</strong>：针对可能产生异常的Controller，使用<code>@ExceptionHandler</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/exception/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">doWithRuntimeException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"处理RuntimeException"</span>);</span><br><span class="line">    System.out.println(System.getProperty(<span class="string">"file.encoding"</span>));</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">    mv.getModel().put(<span class="string">"errMsg"</span>, <span class="string">"发生了运行时异常:"</span> + e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br></pre></td></tr></table></figure>

<p>缺点：只对当前的Controller有效，不能全局生效，每个Controller类中都要写一遍</p>
<h4 id="实现HandlerExceptionResolver接口"><a href="#实现HandlerExceptionResolver接口" class="headerlink" title="实现HandlerExceptionResolver接口"></a>实现<code>HandlerExceptionResolver</code>接口</h4><p><strong>自定义异常处理器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"myExceptionResolver"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在这个方法中可以处理各种异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//这里可以使用instanceof来判断ex的异常类型然后进行处理</span></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            RuntimeException re = (RuntimeException) ex;</span><br><span class="line">            mv.addObject(<span class="string">"errMsg"</span>, re.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mv.addObject(<span class="string">"errMsg"</span>, <span class="string">"系统还未提供对这种类型异常处理的支持"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置逻辑视图</span></span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用<code>@Component</code>注解将自定义的异常处理器交给了Spring IoC容器管理</p>
<p>这种方式适合全局处理异常，但是如果有使用<code>@ExceptionHandler</code>注解配置的异常处理，则使用<code>@ExceptionHandler</code>注解配置的方式</p>
<h4 id="使用-ControllerAdvice-ExceptionHandler注解"><a href="#使用-ControllerAdvice-ExceptionHandler注解" class="headerlink" title="使用@ControllerAdvice+@ExceptionHandler注解"></a>使用<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>注解</h4><p>下面介绍另外一种全局的异常处理方式，也是Spring MVC推荐的异常处理方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ArithmeticException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">arithmeticExceptionHandler</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"errMsg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error1"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NullPointerException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">nullPointerExceptionHandler</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"errMsg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error2"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种异常处理方式相较于实现<code>HandlerExceptionResolver</code>接口的方式来说更加清晰，该类中一个方法对应一种异常类的处理方式，而不像<code>HandlerExceptionResolver</code>中将所有的异常都放在一个方法中进行处理。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>在控制器中使用<code>@ExceptionHandler</code>是Controller级别的异常处理，只对该Controller有效，优先级高于全局的异常处理</li>
<li>全局异常处理有两种方式：<ul>
<li>实现<code>HandlerExceptionResolver</code>接口（不推荐）</li>
<li>使用<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>（推荐）</li>
</ul>
</li>
</ul>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器的作用"><a href="#拦截器的作用" class="headerlink" title="拦截器的作用"></a>拦截器的作用</h3><p>&emsp;&emsp;Spring MVC中的拦截器（Interceptor）类似于Java Web中的过滤器（Filter），用于对Controller的预处理和后处理。可以通过自定义拦截器来实现一些特定的功能。</p>
<p><strong>拦截器链</strong></p>
<p>&emsp;&emsp;和过滤器中的过滤器链类似，拦截器中也存在拦截器链（Interceptor Chain）。拦截器链就是将拦截器按照一定顺序连接形成一条链。在访问被拦截方法或字段时，拦截器链就会按照其定义的顺序被调用。</p>
<p><strong>Spring MVC拦截器和之前学习的过滤器有什么不同？</strong></p>
<p>==使用的范围不同==</p>
<ul>
<li>过滤器是Servlet规范的一部分，任何的Java Web工程都可以使用</li>
<li>拦截器是Spring MVC框架中的内容，只有使用Spring MVC框架的工程才能够使用</li>
</ul>
<p>==拦截的范围不同==</p>
<ul>
<li>过滤器在url-pattern中配置了<code>/*</code>之后，会拦截所有的资源</li>
<li>拦截器只会拦截Controller中的方法，不会对jsp、html、css、image、js等进行拦截，拦截器也是AOP思想的具体应用</li>
</ul>
<h3 id="自定义拦截器的步骤"><a href="#自定义拦截器的步骤" class="headerlink" title="自定义拦截器的步骤"></a>自定义拦截器的步骤</h3><p><strong>控制器代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserController中的hello方法执行了!"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"UserController#hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤一：编写一个类实现HandlerInterceptor接口</strong></p>
<p>==HandlerInterceptor接口介绍==</p>
<p><code>HandlerInterceptor</code>接口中有三个默认方法：</p>
<ul>
<li><code>preHandle</code>：在Controller方法处理请求之前被调用。预处理。返回true表示继续流程（下一个拦截器或者Controller），false表示流程中断</li>
<li><code>postHandle</code>：在Controller方法处理请求之后，生成视图之前执行。后处理（页面还未渲染之前调用），如果没有经过Controller则不会执行</li>
<li><code>afterCompletion</code>：在DispatcherServlet完全处理完请求后被调用（已经渲染了页面）。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"预处理"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后处理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"渲染后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤二：配置拦截器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zxw.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="拦截器细节"><a href="#拦截器细节" class="headerlink" title="拦截器细节"></a>拦截器细节</h3><h4 id="拦截器放行"><a href="#拦截器放行" class="headerlink" title="拦截器放行"></a>拦截器放行</h4><p>&emsp;&emsp;拦截器的放行是指，如果有下一个拦截器则执行下一个拦截器，如果该拦截器处于拦截器链的末尾，则执行控制器中的方法。<code>preHandle</code>方法返回false表明被拦截，不会继续执行；返回true表示放行。</p>
<h4 id="拦截器中方法的具体说明"><a href="#拦截器中方法的具体说明" class="headerlink" title="拦截器中方法的具体说明"></a>拦截器中方法的具体说明</h4><ul>
<li><code>preHandle</code><ul>
<li><strong>调用顺序</strong>：按照拦截器定义的顺序调用</li>
<li><strong>何时调用</strong>：匹配了拦截器配置中的有效路径且前置拦截器放行就会执行</li>
</ul>
</li>
<li><code>postHandle</code><ul>
<li><strong>调用顺序</strong>：按照拦截器的定义<strong>逆序</strong>调用</li>
<li><strong>何时调用</strong>：拦截器链中前面的所有拦截器的<code>preHandle</code>方法返回true才会执行</li>
</ul>
</li>
<li><code>afterCompletion</code><ul>
<li><strong>调用顺序</strong>：按照拦截器的定义<strong>逆序</strong>调用</li>
<li><strong>何时调用</strong>：只要本拦截器的<code>preHandle</code>方法返回true就会调用</li>
</ul>
</li>
</ul>
<h4 id="拦截器的作用路径"><a href="#拦截器的作用路径" class="headerlink" title="拦截器的作用路径"></a>拦截器的作用路径</h4><p>&emsp;&emsp;拦截路径：当请求Controller方法的路径，例如：<code>/user/hello</code>满足拦截器中定义的拦截路径，则会被该拦截器拦截。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于指定拦截的url--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除指定的url--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zxw.interceptor.MyInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="拦截器简单案例：验证用户是否登录"><a href="#拦截器简单案例：验证用户是否登录" class="headerlink" title="拦截器简单案例：验证用户是否登录"></a>拦截器简单案例：验证用户是否登录</h3><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ol>
<li>有一个登录页面，需要写一个controller访问页面</li>
<li>登录页面有一个提交表单的动作。需要在controller中处理<ol>
<li>判断用户名密码是否正确</li>
<li>如果正确，向session中写入用于信息</li>
<li>返回登录成功</li>
</ol>
</li>
<li>拦截用户请求，判断用户是否已经登录<ol>
<li>如果用户已经登录，放行</li>
<li>如果用户未登录，跳转到登录页面</li>
</ol>
</li>
</ol>
<h4 id="控制器代码"><a href="#控制器代码" class="headerlink" title="控制器代码"></a>控制器代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, User user, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证用户名密码是否正确</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123456"</span>.equals(user.getPassword())) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="comment">//重定向到首页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则转发到登录页面并存入错误信息</span></span><br><span class="line">        request.setAttribute(<span class="string">"errorMsg"</span>, <span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="登录页面代码："><a href="#登录页面代码：" class="headerlink" title="登录页面代码："></a>登录页面代码：</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;$&#123;requestScope.errorMsg&#125;&lt;/span&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="拦截器代码"><a href="#拦截器代码" class="headerlink" title="拦截器代码"></a>拦截器代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//从session中获取user</span></span><br><span class="line">        User user = (User) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//存在用户信息则放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//转发到登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/login.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/WEB-INF/pages/index.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"index.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zxw.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>响应数据</tag>
        <tag>参数绑定</tag>
        <tag>文件上传</tag>
        <tag>异常处理</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（一）</title>
    <url>/2020/07/16/Spring-MVC%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring-MVC（一）"><a href="#Spring-MVC（一）" class="headerlink" title="Spring MVC（一）"></a>Spring MVC（一）</h1><h2 id="回顾MVC"><a href="#回顾MVC" class="headerlink" title="回顾MVC"></a>回顾MVC</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul>
<li><p><strong>表现层</strong>：也就是web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求web层，web层接收http请求，完成http响应</p>
<p>表现层包括：<strong>展示层</strong>和<strong>控制层</strong>，控制层负责接收处理请求，展示层负责结果的展示</p>
<p>表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理的结果响应给客户端。</p>
<p>表现层的设计一般都是用<strong>MVC模型</strong>（MVC模型是表现层模型）</p>
</li>
<li><p><strong>业务层</strong>：也就是service层，它负责业务逻辑的处理，和开发项目的需求息息相关。web层依赖于业务层，但是业务层不依赖web层</p>
<p>业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性</p>
</li>
<li><p><strong>持久层</strong>：也就是dao（Data Access Object）层。负责数据持久化，包括数据层即数据库和数据库访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层持将数据持久化到数据库中。通俗的说，持久层负责和数据库交互，对数据表进行增删改查。</p>
</li>
</ul>
<h3 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h3><ul>
<li>MVC是模型（Model）、视图（View）、控制器（Controller）的简称，是一种软件设计规范</li>
<li>MVC将业务逻辑、数据、显示分离来组织代码</li>
<li>MVC的主要作用是<strong>降低了视图与业务逻辑的双向耦合</strong></li>
<li>MVC不只是一种设计模式，它还是<strong>一种架构模式</strong></li>
</ul>
<p>&emsp;&emsp;<strong>Model（模型）</strong>：数据模型，提供要展示的数据，包含数据的行为，可以认为是域模型或JavaBean组件（包含数据与行为），不过现在一般都分离开来：Value Object（数据Dao）和服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p>&emsp;&emsp;<strong>View（视图）</strong>：负责模型的展示，就是用户能够看到的内容</p>
<p>&emsp;&emsp;<strong>Controller（控制器）</strong>：接收用户的请求，然后委托给模型进行处理，处理完之后将返回的模型数据返回给视图，然后由视图向用户展示模型数据。Controller在这个过程中起到了调度的作用。</p>
<p>&emsp;&emsp;最典型的MVC就是：<strong>JSP + Servlet + JavaBean</strong>的模式</p>
<h3 id="Model1时代"><a href="#Model1时代" class="headerlink" title="Model1时代"></a>Model1时代</h3><ul>
<li>在早期的web开发中，通常采用的都是Model1</li>
<li>Model1主要使用了两个技术：JSP + JavaBean</li>
</ul>
<p>下图虚线表示Web容器（例如Tomcat）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200720102938938.png" align="left"/>

<p>在Model1时代，JSP需要接收请求做出响应，调用JavaBean处理业务逻辑，还要展示数据，负担太大。</p>
<p><strong>优点</strong>：架构简单，适合小型项目的开发</p>
<p><strong>缺点</strong>：JSP的任务太重，需要同时完成View和Controller的功能，不利于项目的维护。</p>
<h3 id="Model2时代"><a href="#Model2时代" class="headerlink" title="Model2时代"></a>Model2时代</h3><p>Model2将一个项目分为三部分：视图（JSP）、控制（Servlet）、模型（JavaBean）</p>
<ul>
<li>JSP负责显示页面</li>
<li>Servlet作为前端控制器，负责接收客户端的请求，获取表单参数、调用业务逻辑、页面跳转（转发或者重定向）等</li>
<li>JavaBean负责处理业务逻辑、与数据库进行交互</li>
</ul>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200720105140611.png" align="left"/>

<h2 id="Spring-MVC基本概念"><a href="#Spring-MVC基本概念" class="headerlink" title="Spring MVC基本概念"></a>Spring MVC基本概念</h2><h3 id="Spring-MVC是什么"><a href="#Spring-MVC是什么" class="headerlink" title="Spring MVC是什么"></a>Spring MVC是什么</h3><p>&emsp;&emsp;Spring MVC是一种基于Java实现的<strong>MVC设计模型</strong>的请求驱动类型的<strong>轻量级Web框架</strong>，属于Spring FrameWork的后续产品，已经融合在Spring Web Flow里面。Spring框架提供了构建Web应用程序的全功能MVC模块。使用Spring可插入的MVC架构，从而在使用Spring时进行Web开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。</p>
<p>&emsp;&emsp;Spring MVC已经成为<strong>目前最主流的MVC框架</strong>之一，并且随着Spring 3.0的发布，<strong>全面超越了Struts2</strong>，成为了<strong>最优秀的MVC框架</strong>。</p>
<p>&emsp;&emsp;它通过一套注解，让一个简单的Java类称为处理请求的控制器，而无序实现任何接口。同时它还支持RESTful编程风格的请求。</p>
<p><strong>官方文档</strong>：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
<h3 id="Spring-MVC的特点"><a href="#Spring-MVC的特点" class="headerlink" title="Spring MVC的特点"></a>Spring MVC的特点</h3><ol>
<li>轻量级，简单易学</li>
<li>高效，基于请求和响应的MVC框架</li>
<li>是Spring Framework的一部分，与Spring框架无缝对接</li>
<li>约定大于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<h3 id="为什么要使用Spring-MVC"><a href="#为什么要使用Spring-MVC" class="headerlink" title="为什么要使用Spring MVC"></a>为什么要使用Spring MVC</h3><p>除了前面说到的优点，Spring MVC是目前<strong>最主流的MVC框架</strong>，也就是说很多公司都在用，这是主要的原因。</p>
<h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>&emsp;&emsp;Spring web框架围绕<strong>DispatcherServlet</strong>设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 1.5或者以上版本的用户可以使用基于注解的Controller</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/mvc-context-hierarchy.png" align="left"/>

<p>&emsp;&emsp;Spring MVC，和其他的web框架一样，围绕着前端控制器这种模式进行设计，核心Servlet：DispatcherServlet，提供了一个用于请求处理的共享算法，而实际工作中是通过一些可配置的委托组件执行的。这种模型非常灵活，并且支持多种工作流程。（Dispatcher Servlet相当于是一个调度器）</p>
<p>&emsp;&emsp;DispatcherServlet实际上还是继承了HttpServlet，如下图所示，所以DispatcherServlet也需要在<code>web.xml</code>中进行配置；和原生的Servlet API不同，配置了DispatcherServlet就不需要再去配置其他Servlet，这极大地简化了开发流程</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200718095252290.png" align="left"/>



<p>&emsp;&emsp;Spring MVC处理请求的工作流程如下图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200718101501328.png" align="left"/>

<h3 id="Spring-MVC执行原理"><a href="#Spring-MVC执行原理" class="headerlink" title="Spring MVC执行原理"></a>Spring MVC执行原理</h3><p>下图是Spring MVC的实际执行流程。实线部分是框架内部的流程，而虚线部分则需要开发人员实现</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200722223238009.png" align="left"/>

<p><strong>执行流程</strong></p>
<ol>
<li>DispatcherServlet是前端控制器，是Spring MVC的核心，用户发出请求，DispatcherServlet接收请求</li>
<li>HandlerMapping是处理器映射，负责根据请求的url找到对应的Handler，由DispatcherServlet调用</li>
<li>HandlerExecution是具体的Handler，负责根据url查找控制器</li>
<li>HandlerExecution将解析后的信息返回给DispatcherServlet</li>
<li>HandlerAdapter表示处理器适配器，按照特定的规则执行Handler</li>
<li>Handler让具体的Controller执行</li>
<li>Controller将具体的执行结果返回给HandlerAdapter，例如返回一个ModelAndView对象</li>
<li>HandlerAdapter将处理结果返回给DispatcherServlet</li>
<li>DispatcherServlet调用ViewResolver（视图解析器）解析逻辑视图，得到对应的物理视图</li>
<li>DispatcherServlet调用对应的物理视图，将数据渲染到物理视图中</li>
</ol>
<h3 id="Spring-MVC和Struts2的优劣分析"><a href="#Spring-MVC和Struts2的优劣分析" class="headerlink" title="Spring MVC和Struts2的优劣分析"></a>Spring MVC和Struts2的优劣分析</h3><p><strong>相同点</strong>：</p>
<ul>
<li>都是表现层框架，都是基于MVC模型编写的</li>
<li>它们的底层都离不开原始Servlet API</li>
<li>它们处理请求的机制都是一个核心控制器</li>
</ul>
<p><strong>不同点</strong></p>
<ul>
<li>Spring MVC的入口时Servlet，而Struts2是Filter</li>
<li>Spring MVC是基于方法设计的，而Struts2是基于类，Struts2每次执行都会创建一个动作类。所以Spring MVC会比Struts2稍快一些</li>
<li>Spring MVC的使用更加简洁，同时还支持JSR303（是一套JavaBean参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加到自己编写的JavaBean属性上，这样就可以在需要的时候完成校验了），处理ajax的请求更方便。</li>
<li>Struts2的OGNL表达式使得页面的开发效率相比Spring MVC更高一些，但是执行效率并没有比JSTL提升，尤其是Struts2的表单标签，远没有html的执行效率高</li>
</ul>
<h2 id="HelloSpringMVC"><a href="#HelloSpringMVC" class="headerlink" title="HelloSpringMVC"></a>HelloSpringMVC</h2><h3 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h3><ol>
<li><p>新建一个module，可以使用maven模板创建一个web项目</p>
</li>
<li><p>添加Spring MVC的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring webmvc--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring web--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring core--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>web.xml</code>中注册DispatcherServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Spring MVC的核心控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置初始参数，用于指定Spring MVC配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置servlet在应用加载时就创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        / 匹配所有的请求（不包括.jsp）</span></span><br><span class="line"><span class="comment">        /* 匹配所有的请求（包括.jsp）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建SpringMVC的配置文件（名称要和<code>web.xml</code>中配置的文件名相同）</p>
<p><code>SpringMVC.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加处理映射器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加处理器适配器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器Controller，有两种方式：</p>
<ul>
<li>实现Controller接口</li>
<li>使用<code>@Controller</code>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向ModelAndView中添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，跳转到/WEB-INF/pages/success.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将自定义的Controller类交给Spring IoC容器管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.zxw.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写<code>index.jsp</code>和<code>success.jsp</code></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/hello"&gt;Spring MVC入门案例&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务器，访问主页，点击超链接即可测试。如果在跳转到<code>success.jsp</code>后显示了保存的<code>msg</code>中的信息，则测试成功！</p>
</li>
</ol>
<h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><ol>
<li><p>创建一个module，添加maven依赖（和配置版的相同）</p>
</li>
<li><p>maven可能存在资源过滤的问题，可以在<code>pom.xml</code>中添加如下配置解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Spring MVC配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置在web容器启动时加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Spring MVC的配置文件：<code>spring-mvc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自动扫描的包，让指定的包下的注解生效，交给Spring IoC容器统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--防止Spring MVC处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启mvc注解驱动</span></span><br><span class="line"><span class="comment">        一般使用@RequestMapping注解来完成映射关系，在使用这个注解之前，需要使用</span></span><br><span class="line"><span class="comment">        annotation-driven注入DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">        的实例.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        前缀:将视图放在WEB-INF目录下，保证客户端无法直接访问！</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器类：<code>HelloController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/HelloController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加数据，可以在jsp页面中获取</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//返回视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Controller将当前类作为一个控制器实例注入到Spring IoC容器中</li>
<li>@RequestMapping用于映射请求路径，可以写在类或者方法上，示例中的访问路径是：<code>/HelloController/hello</code></li>
<li>hello方法有一个Model类型的参数，这个参数的作用是将数据传递到视图（View）中</li>
<li>hello方法返回的是一个逻辑视图，经过Spring MVC配置文件中配置的视图解析器解析之后就变成了：<code>/WEB-INF/pages/success.jsp</code></li>
</ul>
</li>
<li><p>创建主页<code>index.jsp</code>和对应的视图<code>success.jsp</code></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/HelloController/hello"&gt;Spring MVC HelloWorld 注解版&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问主页，点击对应的超链接，得到如下结果则说明测试成功！</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200723152904255.png" align="left"/>

</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><strong>Spring MVC的使用步骤</strong></p>
<ol>
<li>新建一个web项目</li>
<li>添加对应的maven依赖</li>
<li>编写<code>web.xml</code>，配置前端控制器<code>DispatcherServlet</code></li>
<li>编写Spring MVC的配置文件</li>
<li>编写控制器类Controller</li>
<li>编写对应的视图</li>
<li>测试</li>
</ol>
<p><strong>Spring MVC中必须配置的三大组件</strong></p>
<ol>
<li>处理器映射器</li>
<li>处理器适配器</li>
<li>视图解析器</li>
</ol>
<p>一般开发中会开启<strong>注解驱动</strong>，从而自动完成处理器映射器和处理器适配器的注入；我们只需要手动配置视图解析器即可！</p>
<h2 id="Controller和RESTful风格"><a href="#Controller和RESTful风格" class="headerlink" title="Controller和RESTful风格"></a>Controller和RESTful风格</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><h4 id="什么是Controller"><a href="#什么是Controller" class="headerlink" title="什么是Controller"></a>什么是Controller</h4><ul>
<li>控制器负责提供访问应用程序的行为，通常可以通过实现Controller接口或者使用@Controller注解两种方式实现</li>
<li>控制器负责解析用户的请求并将其转换为一个模型</li>
<li>在Spring MVC中一个控制器可以包含多个方法，控制器的配置方式也有很多种（一般使用注解方式）</li>
</ul>
<h4 id="Controller的实现方式一：实现Controller接口"><a href="#Controller的实现方式一：实现Controller接口" class="headerlink" title="Controller的实现方式一：实现Controller接口"></a>Controller的实现方式一：实现Controller接口</h4><p><code>Controller</code>是<code>org.springframework.web.servlet.mvc</code>包下的一个接口，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求并返回一个视图和模型对象</span></span><br><span class="line">    <span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向ModelAndView中添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，跳转到/WEB-INF/pages/success.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写完毕之后，需要在Spring配置文件中注册请求的bean，name属性对应请求的路径，class属性对应处理器类的全类名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.zxw.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>缺点：</strong></p>
<ul>
<li>实现Controller接口的方式实现控制器是比较老的方式</li>
<li>一个控制器中只能有一个方法，还是很不方便</li>
</ul>
<h4 id="Controller的实现方式二：使用-Controller注解"><a href="#Controller的实现方式二：使用-Controller注解" class="headerlink" title="Controller的实现方式二：使用@Controller注解"></a>Controller的实现方式二：使用@Controller注解</h4><ul>
<li><p>使用@Controller注解修饰的类会被Spring IoC容器作为一个控制器实例注入（和@Service、@Repository、@Component的作用相同)</p>
</li>
<li><p>需要保证@Controller修饰的类可以被Spring扫描到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/HelloController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加数据，可以在jsp页面中获取</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//返回视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>优点</strong>：使用@Controller注解实现控制器的方式，可以在一个控制器中编写多个方法处理不同的请求，简化了开发。</p>
<h4 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h4><p>@RequestMapping用于将url映射到特定控制器的特定方法，可以用在<strong>类</strong>或<strong>方法</strong>上。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"url1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"url2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则这个控制器中的test方法对应的访问路径为：<code>http://localhost:8080/项目名/url1/url2</code></p>
<h3 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h3><p>传统的URL风格：<code>localhost:8080/helloworld/abc?username=aaa&amp;password=bbb</code></p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>RESTful风格就是一个资源定位及资源操作的风格。它不是标准也不是协议，只是一种风格。</p>
<p><strong>优点</strong>：</p>
<p>基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制</p>
<h4 id="RESTful可以做什么？"><a href="#RESTful可以做什么？" class="headerlink" title="RESTful可以做什么？"></a>RESTful可以做什么？</h4><p><strong>资源</strong>：互联网上能够访问到的所有事务都可以被抽象为资源</p>
<p><strong>资源操作</strong>：</p>
<ul>
<li><p>POST：添加操作</p>
<ul>
<li>传统方式示例：<code>http://localhost:8080/item/addItem</code></li>
<li>RESTful：<code>http://localhost:8080/item</code>，POST请求</li>
</ul>
</li>
<li><p>DELETE：删除操作</p>
<ul>
<li>传统方式：<code>http://localhost:8080/item/deleteItem?id=1</code></li>
<li>RESTful：<code>http://localhost:8080/item/1</code>，DELETE请求</li>
</ul>
</li>
<li><p>PUT：更新操作</p>
<ul>
<li>传统方式：<code>http://localhost:8080/item/updateItem</code></li>
<li>RESTful：<code>http://localhost:8080/item</code>，PUT请求</li>
</ul>
</li>
<li><p>GET：查询操作</p>
<ul>
<li>传统方式示例：<code>http://localhost:8080/item/queryItem?id=1</code></li>
<li>RESTful：<code>http://localhost:8080/item/1</code>，GET请求</li>
</ul>
</li>
</ul>
<p><strong>RESTful示例</strong></p>
<p><strong>最简单示例</strong></p>
<p>控制器：</p>
<p>使用@PathVariable注解来匹配url中的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add/&#123;a&#125;/&#123;b&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@PathVariable <span class="keyword">int</span> a, @PathVariable String b, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果为"</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时访问<code>http://localhost:8080/工程名/add/1/2</code>就可以在<code>success.jsp</code>中得到结果为3</p>
<p>前面说过，RESTful风格支持多种请求方法，这里以DELETE为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/add/&#123;a&#125;/&#123;b&#125;"</span>, method= RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@PathVariable <span class="keyword">int</span> a, @PathVariable String b, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果为"</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样只有发送一个DELETE请求才能够调用这个方法进行处理</p>
<p><strong>注意</strong>：所有在浏览器地址栏的请求默认都是GET请求！</p>
<p>还可以使用下面几种组合注解来替代上面这种方式：</p>
<ul>
<li>@GetMapping</li>
<li>@PostMapping</li>
<li>@DeleteMapping</li>
<li>@PutMapping</li>
<li>@PatchMapping</li>
</ul>
<p>以@DeleteMapping为例，上面使用@RequestMapping的方式相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/add/&#123;a&#125;/&#123;d&#125;"</span>)</span><br></pre></td></tr></table></figure>



<h3 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h3><p>小黄鸭调试法，就是在桌子上放一个小黄鸭（橡皮鸭），然后对着这个小黄鸭解释代码的含义，在这个过程中就很容易找到程序的问题。</p>
<p>当然，并不一定非要是小黄鸭，只要是你可以向它解释代码的含义即可</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>Spring MVC入门</tag>
        <tag>Controller</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（三）</title>
    <url>/2020/07/29/Spring-MVC%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring-MVC（三）"><a href="#Spring-MVC（三）" class="headerlink" title="Spring MVC（三）"></a>Spring MVC（三）</h1><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><p><strong>整合说明</strong>：</p>
<p>&emsp;&emsp;Spring MVC + Spring + MyBatis（SSM）整合可以使用多种方式，这里选择使用XML+注解的方式进行整合</p>
<p><strong>整合的思路</strong>：</p>
<ol>
<li>搭建整合环境</li>
<li>搭建Spring</li>
<li>Spring整合Spring MVC</li>
<li>搭建MyBatis环境</li>
<li>Spring整合MyBatis</li>
</ol>
<h3 id="搭建整合环境"><a href="#搭建整合环境" class="headerlink" title="搭建整合环境"></a>搭建整合环境</h3><ol>
<li><p>创建数据库和表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> ssm;</span><br><span class="line"><span class="keyword">USE</span> ssm;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>), </span><br><span class="line">	money <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用maven创建web工程，添加maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--版本控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aspectj.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--long end--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>创建实体类</p>
<p><code>Account.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Integer id, String name, Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Dao层接口</p>
<p><code>AccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写service层接口及其实现类</p>
<p><code>AccountService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="Spring框架代码的编写"><a href="#Spring框架代码的编写" class="headerlink" title="Spring框架代码的编写"></a>Spring框架代码的编写</h3><p><strong>步骤一：创建spring的配置文件<code>spring-config.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除Controller注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：编写测试类进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ApplicationContext对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-config.xml"</span>);</span><br><span class="line">        <span class="comment">//获取AccountService对象</span></span><br><span class="line">        AccountService accountService = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(accountService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring整合Spring-MVC框架"><a href="#Spring整合Spring-MVC框架" class="headerlink" title="Spring整合Spring MVC框架"></a>Spring整合Spring MVC框架</h3><h4 id="搭建和测试Spring-MVC开发环境"><a href="#搭建和测试Spring-MVC开发环境" class="headerlink" title="搭建和测试Spring MVC开发环境"></a>搭建和测试Spring MVC开发环境</h4><p><strong>步骤一：在<code>web.xml</code>中配置前端控制器和编码过滤器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤二：创建Spring MVC的配置文件<code>spring-mvc.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包含Controller注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启Spring MVC注解支持，自动注入HandlerMapping和HandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤三：编写jsp页面和Controller测试SpringMVC是否搭建成功</strong></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/account/findAll"&gt;查询所有&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>控制器<code>AccountController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果页面<code>list.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;查询结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Spring整合Spring-MVC框架-1"><a href="#Spring整合Spring-MVC框架-1" class="headerlink" title="Spring整合Spring MVC框架"></a>Spring整合Spring MVC框架</h4><p><strong>目的</strong>：在Controller中能够成功调用service对象中的方法</p>
<p><strong>步骤一：修改<code>web.xml</code>，配置ContextLoaderListener监听器在应用启动时加载Spring的配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置加载类路径的配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：修改Controller中的代码，在Controller中注入Service对象并调用其方法进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"findAll"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Controller#findAll"</span>);</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring整合MyBatis框架"><a href="#Spring整合MyBatis框架" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h3><h4 id="搭建和测试MyBatis环境"><a href="#搭建和测试MyBatis环境" class="headerlink" title="搭建和测试MyBatis环境"></a>搭建和测试MyBatis环境</h4><p><strong>步骤一：创建MyBatis的配置文件<code>SqlMapConfig.xml</code>，编写核心配置文件</strong></p>
<p><code>log4j.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p><code>SqlMapConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入db.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤二：编写映射配置文件<code>AccountDao.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.AccountDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--findAll--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"Account"</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM account;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--saveAccount--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveAccount"</span> <span class="attr">parameterType</span>=<span class="string">"Account"</span>&gt;</span></span><br><span class="line">        INSERT INTO account(name, money)</span><br><span class="line">        VALUES (#&#123;name&#125;, #&#123;money&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤三：编写测试方法进行测试</strong></p>
<p><code>MyBatisTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取配置文件的输入流对象</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//获取SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//获取AccountDao的代理类对象</span></span><br><span class="line">        AccountDao accountDao = sqlSession.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用AccountDao中的方法</span></span><br><span class="line">        accountDao.saveAccount(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"zhangsan"</span>, <span class="number">1000.0</span>));</span><br><span class="line">        accountDao.saveAccount(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"lisi"</span>, <span class="number">2000.0</span>));</span><br><span class="line">        accountDao.findAll().forEach(System.out::println);</span><br><span class="line">        <span class="comment">//提交试图</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Spring整合MyBatis框架-1"><a href="#Spring整合MyBatis框架-1" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h4><p><strong>步骤一：将<code>SqlMapConfig.xml</code>中配置的内容配置到Spring的配置文件当中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入db.properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置druid数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.zxw.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.zxw.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：修改Dao接口，添加@Repository注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤三：修改Serice接口实现类，注入Dao对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Service#findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤四：添加Spring声明式事务</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入点表达式配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--建立事务通知和切入点表达式之间的联系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤五：修改Controller和<code>list.jsp</code>进行测试</strong></p>
<p><code>AccountController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Controller#findAll"</span>);</span><br><span class="line">        List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"accounts"</span>, accounts);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>list.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;查询结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;money&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;accounts&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;account.id&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;account.name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;account.money&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h3><p>&emsp;&emsp;JSON（JavaScript Object Notation，JavaScript对象标记），是一种<strong>轻量级</strong>的数据交换格式（非常常用！）</p>
<p><strong>特点</strong></p>
<ul>
<li>完全独立于编程语言的<strong>文本格式</strong>（也就是字符串）来存储和表示数据</li>
<li>简洁且层次清晰，所以是轻量级的</li>
<li>易于人的阅读和编写，也易于机器的解析和生成，大大提高了数据在网络中传输的效率</li>
</ul>
<p><strong>语法格式</strong>：</p>
<ul>
<li>对象使用键值对表示，键值对之间使用逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
<li>字符串和布尔类型的属性值可以不用引号</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>, <span class="string">"age"</span>,<span class="string">"20"</span>, <span class="string">"friends"</span>,[<span class="string">"李四"</span>,<span class="string">"李白"</span>]&#125;</span><br></pre></td></tr></table></figure>



<p><strong>JSON和JavaScript的关系</strong></p>
<p>&emsp;&emsp;JSON可以理解为表示JavaScript对象的<strong>字符串</strong>，使用文本的形式来表示JS对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;;<span class="comment">//这是一个JS对象</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"name":"张三", "age":"20"&#125;'</span>;<span class="comment">//这是一个JSON字符串</span></span><br></pre></td></tr></table></figure>



<p><strong>JSON和JavaScript对象的相互转换</strong></p>
<ul>
<li><p>JSON转换为JavaScript对象，使用<code>JSON.parse()</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"张三", "age":"20"&#125;'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript对象转换为JSON字符串，使用<code>JSON.stringify()</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>:<span class="string">"张三"</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h3><p>&emsp;&emsp;Jackson是一个较为好用的json解析工具，还有别的解析工具，例如阿里巴巴的fastjson等</p>
<p>要使用Jackson首先需要导入对应的maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写<code>web.xml</code>和SpringMVC的配置文件<code>spring-mvc-servlet.xml</code></p>
<p><code>web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>spring-mvc-servlet.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持，注册HandlerMapping和HandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写一个实体类<code>User</code></p>
<p>这里使用了lombok来帮助构建JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写控制器<code>UserController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json1"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//将这个user对象解析为json字符串</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//使用了@ResponseBody注解，会将str转换为json格式返回</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/json/json1，结果如下图所示：" target="_blank" rel="noopener">http://localhost:8080/json/json1，结果如下图所示：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730161444194.png" align="left"/>

<p>出现了乱码，可以使用@RequestMapping的produces属性来解决：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/json1"</span>, produces = <span class="string">"application/json;charset=utf-8"</span>)</span><br></pre></td></tr></table></figure>

<p>再次访问的结果如下图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730161644541.png" align="left"/>



<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><h4 id="乱码问题的统一处理"><a href="#乱码问题的统一处理" class="headerlink" title="乱码问题的统一处理"></a>乱码问题的统一处理</h4><p>&emsp;&emsp;上面的那种处理乱码的方式在每个@RequestMapping中都要添加，可以通过Spring配置来统一指定。可以在SpringMVC的配置文件上添加一段<code>StringHttpMessageConverter</code>转换配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="控制器中统一返回JSON字符串"><a href="#控制器中统一返回JSON字符串" class="headerlink" title="控制器中统一返回JSON字符串"></a>控制器中统一返回JSON字符串</h4><p>在类上直接使用<strong>@RestController</strong>，这样Controller中里面的所有的方法都会返回JSON字符串，而不需要在每一个方法上都添加@ResponseBody注解。这在前后端分离的开发中十分便捷</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//将这个user对象解析为json字符串</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//使用了@ResponseBody注解，会将str转换为json格式返回</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试集合输出"><a href="#测试集合输出" class="headerlink" title="测试集合输出"></a>测试集合输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个元素为User的List</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="number">22</span>, <span class="string">"女"</span>));</span><br><span class="line">    <span class="comment">//将集合对象转换为json字符串</span></span><br><span class="line">    String str = mapper.writeValueAsString(users);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/json/json2" target="_blank" rel="noopener">http://localhost:8080/json/json2</a></p>
<p>得到的结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730170259449.png" align="left"/>



<h3 id="输出时间对象"><a href="#输出时间对象" class="headerlink" title="输出时间对象"></a>输出时间对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个Date类型的对象</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">//将Date对象转换为json字符串并返回</span></span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080/json/json3，结果如下：" target="_blank" rel="noopener">http://localhost:8080/json/json3，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730195620378.png" align="left"/>

<p>很明显，这是返回了这个日期对象举例1970年1月1日的毫秒数，那么如何返回一个指定格式的日期字符串？</p>
<p>Jackson默认会将时间转换为timestamp（时间戳）的形式</p>
<p><strong>解决方案</strong>：自定义时间格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个Date类型的对象</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">//自定义格式</span></span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="comment">//设置指定的格式</span></span><br><span class="line">    mapper.setDateFormat(sdf);</span><br><span class="line">    <span class="comment">//将Date对象转换为json字符串并返回</span></span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时返回的结果为：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730200151544.png" align="left"/>



<h3 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h3><p>可以将返回json字符串的过程抽取为一个工具类中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个对象转换为JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 要转换的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(obj, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个对象转换为JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 要转换的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateFormat Date类型转换的格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object obj, String dateFormat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建jackson的对象映射器</span></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="comment">//判断obj是否为Date类型的对象</span></span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">                mapper.setDateFormat(sdf);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用了工具类的代码变得十分简洁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="keyword">return</span> JsonUtils.getJson(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h3><p>&emsp;&emsp;fastjson是阿里巴巴开发的专门用于将Java对象转换为JSON字符串的库，当然它也可以将JSON字符串转换为Java对象。</p>
<p>要使用fastjson首先需要添加maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>fastjson三个主要的类</strong><br>==JSONObject==</p>
<ul>
<li><p>JSONObject代表了json对象</p>
</li>
<li><p>JSONObject实现了Map接口</p>
</li>
<li><p>JSONObject代表json对象，可以通过<code>getXXX()</code>方法获取json对象中的数据，也可以用<code>size()</code>、<code>isEmpty()</code>等方法获取键值对的个数。本质上和操作Map相同</p>
</li>
</ul>
<p>==JSONArray==</p>
<ul>
<li>JSONArray代表json对象数组</li>
<li>JSONArray内部使用List实现</li>
</ul>
<p>==JSON==</p>
<ul>
<li>JSON用于JSONObject、JSONArray的转换</li>
<li>主要实现了json对象、json对象数组、JavaBean对象、json字符串之间的相互转换</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastjsonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建4个User对象</span></span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="number">21</span>, <span class="string">"女"</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"王二"</span>, <span class="number">22</span>, <span class="string">"男"</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"黎明"</span>, <span class="number">23</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//将这四个User对象放入一个List容器中</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(u1);</span><br><span class="line">        users.add(u2);</span><br><span class="line">        users.add(u3);</span><br><span class="line">        users.add(u4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java对象转换为JSON字符串</span></span><br><span class="line">        System.out.println(<span class="string">"Java对象==&gt;JSON字符串"</span>);</span><br><span class="line">        String str1 = JSON.toJSONString(users);</span><br><span class="line">        System.out.println(<span class="string">"users:"</span> + str1);</span><br><span class="line">        String str2 = JSON.toJSONString(u1);</span><br><span class="line">        System.out.println(<span class="string">"u1:"</span> + str2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON字符串转换为Java对象</span></span><br><span class="line">        System.out.println(<span class="string">"JSON字符串==&gt;Java对象"</span>);</span><br><span class="line">        User jsonToUser = JSON.parseObject(str2, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java对象转换为JSON对象</span></span><br><span class="line">        System.out.println(<span class="string">"Java对象==&gt;JSON对象"</span>);</span><br><span class="line">        JSONObject jsonObj = (JSONObject) JSON.toJSON(u1);</span><br><span class="line">        System.out.println(jsonObj.get(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON对象转换为Java对象</span></span><br><span class="line">        User jsonObjectToUser = JSON.toJavaObject(jsonObj, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(jsonObjectToUser);</span><br><span class="line">        System.out.println(jsonObjectToUser.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java对象转换为JSON对象数组</span></span><br><span class="line">        JSONArray usersJSONArray = (JSONArray) JSON.toJSON(users);</span><br><span class="line">        JSONObject first = (JSONObject) usersJSONArray.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(first.get(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON对象数组转换为Java对象</span></span><br><span class="line">        List&lt;User&gt; jsonArrayToUsers = JSON.parseArray(usersJSONArray.toJSONString(), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(jsonArrayToUsers.get(<span class="number">0</span>).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>类似于这种第三方的工具类只需要记住是用来干什么的，然后在需要的时候查找并使用即可！</p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h3><ul>
<li><strong>Ajax</strong>就是<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML（异步的JavaScript和XML）</li>
<li>Ajax能够在不重新加载网页的条件下局部更新网页中的内容</li>
<li>Ajax是一种为了更好更快以及交互性更强的Web应用程序的技术</li>
</ul>
<p>&emsp;&emsp;最常见的Ajax示例就是百度的搜索框：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200731174837446.png" align="left"/>





<h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><h3 id="注册提示效果"><a href="#注册提示效果" class="headerlink" title="注册提示效果"></a>注册提示效果</h3>]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>SSM整合</tag>
        <tag>JSON</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
</search>
