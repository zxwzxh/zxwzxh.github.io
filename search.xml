<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cookie和Session</title>
    <url>/2020/06/28/Cookie%E5%92%8CSession/</url>
    <content><![CDATA[<h1 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p><strong>会话</strong>：从打开浏览器到关闭浏览器，这个过程就称之为会话。</p>
<p><strong>有状态会话</strong>：举一个常见的例子，我们登录了淘宝之后，关闭浏览器然后再打开淘宝就已经处于登录状态。这就是有状态会话。</p>
<h2 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h2><p>网站是如何知道你曾经访问过？</p>
<ol>
<li>服务器会给客户端一个信物，下次客户端访问服务器时带上这个信物即可（cookie）</li>
<li>客户端访问服务端，服务器会哪一个记录簿记录下来，下次客户端访问时可以进行匹配（session）</li>
</ol>
<p>由此可知：</p>
<ul>
<li>Cookie是客户端的技术</li>
<li>Session是服务端的技术</li>
</ul>
<p>这两个技术共同实现了会话的保存，常见的应用就是登录状态的保存（比如登录之后保持一周的登录状态）</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h3><ul>
<li>Cookie是服务器通知客户端保存键值对的一种技术</li>
<li>客户端有了Cookie之后，会将对应有效路径的Cookie发送给服务器</li>
<li>每个Cookie的大小不能超过4kb</li>
</ul>
<h3 id="如何创建Cookie"><a href="#如何创建Cookie" class="headerlink" title="如何创建Cookie"></a>如何创建Cookie</h3><p>流程图如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200628225106869.png" align="left"/>

<h3 id="服务器如何获取Cookie"><a href="#服务器如何获取Cookie" class="headerlink" title="服务器如何获取Cookie"></a>服务器如何获取Cookie</h3><p>可以通过Request对象获得到所有的Cookie，返回的结果是一个Cookie数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></table></figure>

<p>要查找特定key的Cookie，可以编写一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据指定的name查找对应的Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cookies</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">getCookie</span><span class="params">(String name, Cookie[] cookies)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span> || cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> cookie;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Cookie值的修改"><a href="#Cookie值的修改" class="headerlink" title="Cookie值的修改"></a>Cookie值的修改</h3><p>想要修改一个Cookie，只需要在服务器中新创建一个name和原来的Cookie相同的Cookie，然后设置不同的值，将新创建的Cookie返回给浏览器。浏览器接收到之后会进行判断，如果对应name的Cookie已经存在，则使用新的value来更新这个Cookie；如果该Cookie不存在，则新建对应的Cookie。</p>
<h3 id="浏览器查看Cookie"><a href="#浏览器查看Cookie" class="headerlink" title="浏览器查看Cookie"></a>浏览器查看Cookie</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200629140022416.png" align="left"/>

<h3 id="Cookie生命控制"><a href="#Cookie生命控制" class="headerlink" title="Cookie生命控制"></a>Cookie生命控制</h3><p>Cookie也是存在生命周期的，默认情况下Cookie会在浏览器关闭后就消失。但这和我们平时使用网站的体验是不同的，网站上的记住用户名和密码功能通常可以存在一周的时间</p>
<p>为了控制Cookie的存在时间</p>
<p><code>setMaxAge()</code>：</p>
<ul>
<li>正数：表示在指定秒数过后过期</li>
<li>负数：表示浏览器以关闭，Cookie就会被删除（默认值是-1）</li>
<li>零：表示马上删除Cookie</li>
</ul>
<p><strong>浏览器关闭之后Cookie消失</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置Cookie在浏览器关闭之后消失</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = WebUtils.findCookie(<span class="string">"key1"</span>, req.getCookies());</span><br><span class="line">    cookie.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"Cookie会在浏览器关闭之后小时！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>一小时之后删除Cookie</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一小时后删除Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">live3600</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = WebUtils.findCookie(<span class="string">"key1"</span>, req.getCookies());</span><br><span class="line">    cookie.setMaxAge(<span class="number">3600</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"Cookie会在3600秒之后消失"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>立即删除Cookie</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除Cookie</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deleteNow</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = WebUtils.findCookie(<span class="string">"key1"</span>, req.getCookies());</span><br><span class="line">    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"Cookie删除成功！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Cookie的有效路径设置"><a href="#Cookie的有效路径设置" class="headerlink" title="Cookie的有效路径设置"></a>Cookie的有效路径设置</h3><p>如果发送给客户端的Cookie没有限制，那么就会导致一个浏览器在访问服务器时会将其所有的Cookie都发送给服务器。这很明显是不合理的。我们可以为Cookie设置有效路径。</p>
<p>Cookie的path属性可以有效的过滤哪些Cookie可以发送给服务器，哪些不发。path属性是通过请求地址来进行有效的过滤。</p>
<p><strong>示例</strong>：</p>
<p>CookieA                path=/工程路径</p>
<p>CookieB                path=/工程路径/abc</p>
<p>请求地址如下：</p>
<p><a href="http://localhost/工程路径/a.html" target="_blank" rel="noopener">http://localhost/工程路径/a.html</a></p>
<ul>
<li>CookieA发送</li>
<li>CookieB不发送</li>
</ul>
<p><a href="http://localhost/工程路径/abc/a.html" target="_blank" rel="noopener">http://localhost/工程路径/abc/a.html</a></p>
<ul>
<li>CookieA发送</li>
<li>CookieB发送</li>
</ul>
<p>Servlet程序代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试Cookie的path</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">testPath</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"path1"</span>, <span class="string">"path1"</span>);</span><br><span class="line"><span class="comment">//        cookie.setPath(req.getContextPath());</span></span><br><span class="line">    cookie.setPath( req.getContextPath() + <span class="string">"/abc"</span> );</span><br><span class="line"><span class="comment">//        cookie.setMaxAge(0);</span></span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line">    resp.getWriter().write(<span class="string">"创建了一个带有Path路径的Cookie"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Cookie练习—记住用户名密码"><a href="#Cookie练习—记住用户名密码" class="headerlink" title="Cookie练习—记住用户名密码"></a>Cookie练习—记住用户名密码</h3><p><code>login.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src="js/jquery-3.5.1.js" type="text/javascript"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"请输入用户名"</span> value=<span class="string">"$&#123;cookie.username.value&#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"请输入密码"</span> value=<span class="string">"$&#123;cookie.password.value&#125;&#125;"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"remember"</span> value=<span class="string">"remember"</span>/&gt;记住我&amp;emsp;&lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>LoginServlet.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决POST请求的中文乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//创建Cookie</span></span><br><span class="line">        Cookie usernameCookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>, username);</span><br><span class="line">        Cookie passwordCookie = <span class="keyword">new</span> Cookie(<span class="string">"password"</span>, password);</span><br><span class="line">        <span class="keyword">if</span> (req.getParameter(<span class="string">"remember"</span>).length() == <span class="number">0</span>) &#123;</span><br><span class="line">            usernameCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">            passwordCookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//设置保存七天</span></span><br><span class="line">            <span class="keyword">int</span> expiry = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>;</span><br><span class="line">            usernameCookie.setMaxAge(expiry);</span><br><span class="line">            passwordCookie.setMaxAge(expiry);</span><br><span class="line">        &#125;</span><br><span class="line">        resp.addCookie(usernameCookie);</span><br><span class="line">        resp.addCookie(passwordCookie);</span><br><span class="line">        <span class="comment">//重定向到首页</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Session（重点）"><a href="#Session（重点）" class="headerlink" title="Session（重点）"></a>Session（重点）</h2><h3 id="什么是会话Session"><a href="#什么是会话Session" class="headerlink" title="什么是会话Session"></a>什么是会话Session</h3><ol>
<li>Session就是一个接口（HttpSession）</li>
<li>Session就是浏览器与服务器之间的会话，每个浏览器都有一个属于自己的Session</li>
<li>Session是一个域对象，我们可以在其中存储会话所需要的数据</li>
</ol>
<h3 id="如何创建Session"><a href="#如何创建Session" class="headerlink" title="如何创建Session"></a>如何创建Session</h3><p>HttpServletRequest中有一个方法：</p>
<p><code>HttpSession getSession()</code>可以用来创建或者获取Session对象。客户端发送所有的请求时都会带有一个name为JSESSIONID的Cookie，这个JSESSIONID唯一标识了这个浏览器，使用<code>getSession()</code>方法时会判断JSESSIONID是否存在于服务器的Session列表的id中，如果没有则新创建一个id为JESSIONID对应value的Session；如果存在，则直接获取这个Session对象。</p>
<p>下面是HttpSession类中的方法：</p>
<p><code>boolean isNew()</code>方法可以判断Session对象是否是新创建的</p>
<p><code>getId()</code>方法可以获取Session的ID（相当于人的身份证号码)，这个值和浏览器中的JSESSIONID的值相同</p>
<p><strong>示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSession</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取或者创建一个Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//输出session的id</span></span><br><span class="line">        System.out.println(session.getId());</span><br><span class="line">        <span class="comment">//输出JSESSIONID的值</span></span><br><span class="line">        System.out.println(WebUtils.getCookie(<span class="string">"JSESSIONID"</span>, req.getCookies()).getValue());</span><br><span class="line">        <span class="comment">//判断session是否为新创建的</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew()) &#123;</span><br><span class="line">            resp.getWriter().println(<span class="string">"新建了一个Session"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().println(<span class="string">"Session已存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Session域数据的存取"><a href="#Session域数据的存取" class="headerlink" title="Session域数据的存取"></a>Session域数据的存取</h3><p>session是四大域对象之一（page、request、session、application）</p>
<p>session域的范围是当前的会话</p>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取或者创建一个Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//向session域中保存数据</span></span><br><span class="line">    session.setAttribute(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">"已经向session域中保存了数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取或者创建一个Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//从session域中获取数据</span></span><br><span class="line">    String value = (String) session.getAttribute(<span class="string">"key1"</span>);</span><br><span class="line">    resp.getWriter().println(<span class="string">"从session域中获取到的数据为:"</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Session生命周期控制"><a href="#Session生命周期控制" class="headerlink" title="Session生命周期控制"></a>Session生命周期控制</h3><ul>
<li><code>public void setMaxInactiveInterval(int interval)</code>：设置Session的超时时间（以秒为单位），超过指定时长，Session就会被销毁。<ul>
<li>值为正数的时候，设定Session的超时时长</li>
<li>负数表示永不超时（极少使用）</li>
</ul>
</li>
<li><code>public int getMaxInactiveInterval()</code>：获取Session的超时时间</li>
<li><code>public void invalidate()</code>：让当前Session会话马上超时无效</li>
</ul>
<p>Session的默认超时时长是多少？</p>
<p>Session的默认的超时时长为30分钟。</p>
<p>因为在Tomcat服务器的配置文件<code>web.xml</code>中默认有以下的配置，它就表示了当前Tomcat服务器下所有的Session的默认超时时间：30分钟</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>可以在当前工程的<code>web.xml</code>文件中设置类似如上的配置，可以覆盖Session的默认超时时间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>20<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果只想修改个别Session的超时时长，就可以使用上面的API：<code>setMaxInactiveInterval(int interval)</code>来进行单独的设置。</p>
<p>Tips：session的超时是指客户端两次请求之间的时间超过了session的超时时长</p>
<h3 id="Session的钝化与活化"><a href="#Session的钝化与活化" class="headerlink" title="Session的钝化与活化"></a>Session的钝化与活化</h3><p><strong>钝化</strong>：当服务器正常关闭时,还存活着的session(在设置时间内没有销毁) 会随着服务器的关闭被以文件(“SESSIONS.ser”)的形式存储在tomcat 的work 目录下,这个过程叫做Session 的钝化。</p>
<p><strong>活化</strong>：当服务器再次正常开启时,服务器会找到之前的“SESSIONS.ser” 文件，从中恢复之前保存起来的Session 对象，这个过程叫做Session的活化。</p>
<p><strong>注意事项</strong>：</p>
<ul>
<li>想要随着Session而钝化的类必须实现Serializable接口</li>
<li>只有在服务器正常关闭的情况下Session才会被钝化为文件</li>
<li>被钝化的Session不会因为超过Session的超时时间而过期，这个文件会一直存在，等到服务器开启时才消失</li>
<li>多个Session钝化时，会被保存在一个文件中</li>
</ul>
<h3 id="为什么浏览器以关闭Session就消失了"><a href="#为什么浏览器以关闭Session就消失了" class="headerlink" title="为什么浏览器以关闭Session就消失了"></a>为什么浏览器以关闭Session就消失了</h3><p>因为浏览器关闭后，JSESSIONID这个Cookie就被销毁了（默认值是关闭浏览器时销毁），所以就找不到之前创建的Session了</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h3><p><strong>需求</strong>：实现用户登录成功后显示用户名，注销后重定向到首页并销毁session中的数据</p>
<p><code>login.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/hello?action=login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/hello?action=login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>Servlet中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取用户名密码</span></span><br><span class="line">    String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    <span class="comment">//保存到Session中</span></span><br><span class="line">    req.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="comment">//转发到登录成功页面</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">"/success.jsp"</span>).forward(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//获取user</span></span><br><span class="line">    User user = (User) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">//移除user</span></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">        session.removeAttribute(<span class="string">"user"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重定向到登录页面</span></span><br><span class="line">    resp.sendRedirect(req.getContextPath() + <span class="string">"/login.jsp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="表单重复提交—验证码"><a href="#表单重复提交—验证码" class="headerlink" title="表单重复提交—验证码"></a>表单重复提交—验证码</h3><p>表单重复提交有三种常见的情况：</p>
<ol>
<li>提交完表单。服务器使用请求转发来进行页面跳转。这个时候，用户按下功能键F5刷新，就会发起最后一个的请求，从而造成表单重复提交的问题。<font color="red">解决方法：使用重定向来解决</font></li>
<li>用户正常提交服务器，但是由于网络延迟等原因，迟迟未收到服务器的响应，这个时候，用户以为提交失败，就会着急，然后多点了几次提交操作，也会造成表单的重复提交</li>
<li>用户正常提交服务器，服务器也没有网络延迟，但是提交完成后，用户回退浏览器，重新提交，也会造成表单的重复提交</li>
</ol>
<h3 id="谷歌kaptcha图片验证码的使用"><a href="#谷歌kaptcha图片验证码的使用" class="headerlink" title="谷歌kaptcha图片验证码的使用"></a>谷歌kaptcha图片验证码的使用</h3><p>谷歌验证码kaptcha使用步骤如下：</p>
<ol>
<li><p>添加kaptcha的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--kaptcha验证码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>在<code>web.xml</code>中配置用于生成验证码的Servlet程序</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KaptchaServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/kaptcha.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在表单中使用img标签去显示验证码图片并使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8080/tmp/registServlet"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	验证码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width: 80px;"</span> <span class="attr">name</span>=<span class="string">"code"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/tmp/kaptcha.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 100px; 	height: 28px;"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务器获取谷歌生成的验证码和客户端发送过来的验证码比较使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取Session中的验证码</span></span><br><span class="line">    String token = (String) req.getSession().getAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line">    <span class="comment">//马上删除</span></span><br><span class="line">    req.getSession().removeAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line">    <span class="comment">//获取表单项的验证码</span></span><br><span class="line">    String code = req.getParameter(<span class="string">"code"</span>);</span><br><span class="line">    <span class="keyword">if</span> (token != <span class="keyword">null</span> &amp;&amp; token.equalsIgnoreCase(code)) &#123;</span><br><span class="line">        <span class="comment">//获取用户名参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="comment">//保存到数据库</span></span><br><span class="line">        System.out.println(<span class="string">"保存"</span> + username + <span class="string">"到数据库"</span>);</span><br><span class="line">        <span class="comment">//重定向到ok.jsp</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/ok.jsp"</span>).forward(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"请不要重复提交表单"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>验证码点击刷新功能的实现：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给验证码的图片，绑定单击事件</span></span><br><span class="line">$(<span class="string">"#code_img"</span>).click(function () &#123;</span><br><span class="line">	<span class="comment">// 在事件响应的function 函数中有一个this 对象。这个this 对象，是当前正在响应事件的dom 对象</span></span><br><span class="line">	<span class="comment">// src 属性表示验证码img 标签的图片路径。它可读，可写</span></span><br><span class="line">	<span class="comment">// alert(this.src);</span></span><br><span class="line">	<span class="comment">//?d=new Date()是为了兼容火狐浏览器，防止浏览器缓存</span></span><br><span class="line">	<span class="keyword">this</span>.src = <span class="string">"$&#123;basePath&#125;kaptcha.jpg?d="</span> + <span class="keyword">new</span> Date();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>DCL语言学习</title>
    <url>/2020/06/25/DCL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DCL语言学习"><a href="#DCL语言学习" class="headerlink" title="DCL语言学习"></a>DCL语言学习</h2><p>DCL：Data Control Language，数据控制语言，用于数据库权限管理</p>
<p>MySQL的账户信息保存在<code>mysql</code>这个数据库中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>



<h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><p>新创建的账户没有任何权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名@host <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br></pre></td></tr></table></figure>



<h3 id="修改账户名"><a href="#修改账户名" class="headerlink" title="修改账户名"></a>修改账户名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> 旧账户名@host <span class="keyword">TO</span> 新账户名;</span><br></pre></td></tr></table></figure>



<h3 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 账户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 账户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.* <span class="keyword">TO</span> 用户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">REMOVE 权限列表 ON 数据库.* FROM 用户名@host;</span><br></pre></td></tr></table></figure>



<h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><p>必须使用<code>password()</code>函数进行加密</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> 用户名@host = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>);</span><br></pre></td></tr></table></figure>



<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li><code>用户名@host</code>也可以写成<code>用户名</code>，此时相当于<code>用户名@%</code>使用的是默认主机名</li>
<li>GRANT和REVOKE可在几个层次上控制访问权限<ul>
<li>整个服务器，使用 <code>GRANT ALL</code> 和<code>REVOKE ALL</code>；</li>
<li>整个数据库，使用 <code>ON database.*</code>；</li>
<li>特定的表，使用 <code>ON database.table</code>；</li>
<li>特定的列；</li>
<li>特定的存储过程。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DCL</tag>
      </tags>
  </entry>
  <entry>
    <title>DDL语言的学习</title>
    <url>/2020/06/24/DDL%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DDL语言的学习"><a href="#DDL语言的学习" class="headerlink" title="DDL语言的学习"></a>DDL语言的学习</h2><h3 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h3><h4 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h4><p><strong>创建库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名;</span><br></pre></td></tr></table></figure>

<p><strong>修改库</strong>（不推荐修改库）</p>
<p>修改库的字符集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集名称;</span><br></pre></td></tr></table></figure>

<p><strong>删除数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 数据库名;</span><br></pre></td></tr></table></figure>



<h4 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h4><p><strong>创建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 表名(</span><br><span class="line">    列名 列的类型[(长度) 约束]</span><br><span class="line">    ......</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建book表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>,<span class="comment">#书籍编号</span></span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>),<span class="comment">#书籍名称</span></span><br><span class="line">  price <span class="keyword">DOUBLE</span>,<span class="comment">#书籍价格</span></span><br><span class="line">  author_id <span class="built_in">INT</span>,<span class="comment">#作者编号</span></span><br><span class="line">  publish_date DATETIME<span class="comment">#书籍出版日期</span></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建author表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> author (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>,<span class="comment">#作者编号</span></span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span> (<span class="number">20</span>),<span class="comment">#作者姓名</span></span><br><span class="line">  nation <span class="built_in">VARCHAR</span> (<span class="number">20</span>) <span class="comment">#作者国籍</span></span><br><span class="line">) ;</span><br></pre></td></tr></table></figure>



<p><strong>表的修改</strong></p>
<ul>
<li><p>修改列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> [<span class="keyword">column</span>] 旧列名 新列名 列类型;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改列类型或约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 类型和约束;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加新列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 新列名 类型和约束 [<span class="keyword">first</span>|<span class="keyword">after</span> 列名];</span><br></pre></td></tr></table></figure>

<p>可以将新列添加到第一列或者指定列的后面</p>
</li>
<li><p>删除列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 <span class="keyword">rename</span> [<span class="keyword">to</span>] 新表名;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><strong>表的删除</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 表名;</span><br></pre></td></tr></table></figure>



<p><strong>表的复制</strong></p>
<ol>
<li><p>复制表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">like</span> 要复制的表;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制表的结构外加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 </span><br><span class="line"><span class="keyword">select</span> 要复制的列 <span class="keyword">from</span> 要复制的表 </span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="常见数据类型介绍"><a href="#常见数据类型介绍" class="headerlink" title="常见数据类型介绍"></a>常见数据类型介绍</h3><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><p><font color="red">1、整型</font></p>
<ul>
<li><code>tinyint</code>：1字节</li>
<li><code>smallint</code>：2字节</li>
<li><code>mediumint</code>：3字节</li>
<li><code>int</code>或<code>integer</code>：4字节</li>
<li><code>bigint</code>：8字节</li>
</ul>
<p><strong>特点</strong>：</p>
<ol>
<li><p>如果不设置无符号还是有符号，默认是有符号，如果想要设置无符号，需要添加<code>unsigned</code>关键字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_int(</span><br><span class="line">	t1 <span class="built_in">int</span>, </span><br><span class="line">    t2 <span class="built_in">int</span> <span class="keyword">unsigned</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果插入的值超过了整型的临界值，则会给出一个警告，并插入整型的临界值</p>
</li>
<li><p>如果不设置长度，会有默认的长度</p>
<p>长度代表了<strong>显示</strong>的最大宽度，如果不够会用零在左边填充，但必须搭配<code>zerofill</code>填充，并且变为无符号整型</p>
</li>
</ol>
<p><font color="red">2、小数</font></p>
<ul>
<li>定点数<ul>
<li><code>dec(M, D)</code>或者<code>decimal(M, D)</code>：<code>M+2</code>个字节</li>
</ul>
</li>
<li>浮点数<ul>
<li><code>float(M, D)</code>：4字节</li>
<li><code>double(M, D)</code>：8字节</li>
</ul>
</li>
</ul>
<p><strong>特点</strong></p>
<ol>
<li><code>M</code>代表的是整数位数+小数位数，<code>D</code>代表小数位数</li>
<li><code>M</code>和<code>D</code>可以省略，如果是<code>decimal</code>则<code>M</code>默认为10，<code>D</code>默认为0，<code>float</code>和<code>double</code>会根据插入的值的精度来决定精度</li>
<li>定点型的精度比较高，如果要求插入的精度比较高则选择<code>decimal</code>，如银行货币等</li>
</ol>
<p><strong>原则</strong>：所选择的类型越简单越好，能保存的数值的类型越小越好</p>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><ul>
<li><p><strong>较短文本</strong></p>
<ul>
<li><p><code>char(M)</code>：最多M个字符（不是字节数），固定长度的字符，相对效率较高，M可以省略，默认为1</p>
</li>
<li><p><code>varchar(M)</code>：最多M个字符（不是字节数），可变长度的字符，相对效率较低，M不可以省略</p>
</li>
<li><p><code>binary</code>和<code>varbinary</code>：用于保存二进制字符串</p>
</li>
<li><p><code>Enum</code>类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> tab_char;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_char(</span><br><span class="line">	c1 ENUM(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">);</span><br><span class="line">DESC tab_char;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'d'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">'A'</span>);<span class="comment">#不区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab_char;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Set</code>类型：里面可以保存0~64个元素，类型可以不同</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_set(</span><br><span class="line">    s1 <span class="keyword">SET</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">'c'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>较长的文本</strong></p>
<p><code>text</code>：长文本</p>
<p><code>blob</code>：长二进制文本（一般实际开发中不会把二进制的文件，例如图像、视频、音频等存入数据库中，存储的往往是它们的文件存储路径）</p>
</li>
</ul>
<h4 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h4><table>
<thead>
<tr>
<th align="center">日期和时间类型</th>
<th align="center">字节</th>
<th align="center">最小值</th>
<th align="center">最大值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>date</code></td>
<td align="center">4</td>
<td align="center">1000-01-01</td>
<td align="center">9999-12-31</td>
</tr>
<tr>
<td align="center"><code>datetime</code></td>
<td align="center">8</td>
<td align="center">1000-01-01 00:00:00</td>
<td align="center">9999-12-31 23:59:59</td>
</tr>
<tr>
<td align="center"><code>timestamp</code></td>
<td align="center">4</td>
<td align="center">19700101080001</td>
<td align="center">2038年的某个时刻</td>
</tr>
<tr>
<td align="center"><code>time</code></td>
<td align="center">3</td>
<td align="center">-838:59:59</td>
<td align="center">838:59:59</td>
</tr>
<tr>
<td align="center"><code>year</code></td>
<td align="center">1</td>
<td align="center">1901</td>
<td align="center">2155</td>
</tr>
</tbody></table>
<p><strong>区别</strong></p>
<ol>
<li>timestamp的取值范围较小，datetime的取值范围较大</li>
<li>timestamp和实际的时区有关，更能够反应实际的日期，而datetime则只能反映出插入时的当地时区</li>
<li>timestamp的属性受到<strong>MySQL版本</strong>和<strong>SQL Mode</strong>的影响很大</li>
</ol>
<h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><h4 id="约束的概念和分类"><a href="#约束的概念和分类" class="headerlink" title="约束的概念和分类"></a>约束的概念和分类</h4><p><strong>什么是约束？</strong></p>
<ul>
<li>为了保证<strong>数据的一致性和完整性</strong>，SQL规范以约束的方式对表数据进行<strong>额外的条件限制</strong></li>
<li>约束是表级的强制规定</li>
<li>可以在创建表时规定约束，也可以在修改表的时候修改或增加删除约束</li>
</ul>
<p><strong>约束的分类</strong></p>
<ul>
<li>非空约束：<code>not null</code>，规定某个字段不能为空</li>
<li>唯一约束：<code>unique</code>，规定某个字段在整个表中唯一</li>
<li>主键约束：<code>primary key</code>，主键（唯一且非空）</li>
<li>外键约束：<code>foreign key</code>，外键</li>
<li>检查约束：<code>check</code>，判断是否符合条件</li>
<li>默认约束：<code>default</code>，默认值</li>
</ul>
<p>MySQL不支持检查约束，虽然语法上不会报错，但是没有任何效果，具体细节可以参考W3Cschool手册</p>
<h4 id="列级约束和表级约束"><a href="#列级约束和表级约束" class="headerlink" title="列级约束和表级约束"></a>列级约束和表级约束</h4><ul>
<li>列级约束：每个约束只能作用在一个列上，跟在列的定义后面，六种约束都可以，但是外键约束没有效果</li>
<li>表级约束：可以作用在多个列上，单独定义，除了非空和默认都支持</li>
</ul>
<p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[constraint 约束名] 约束类型(字段) [references 表名(字段)]</span><br></pre></td></tr></table></figure>

<p><strong>通用写法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> major(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">1</span>), </span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>, </span><br><span class="line">seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>, </span><br><span class="line">majorid <span class="built_in">INT</span>, </span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(majorid) <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>列级约束和表级约束对比</strong></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">位置</th>
<th align="center">支持的约束类型</th>
<th align="center">是否可以起约束名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">列级约束</td>
<td align="center">列的后面</td>
<td align="center">语法都支持，但是外键没有效果</td>
<td align="center">不可以</td>
</tr>
<tr>
<td align="center">表级约束</td>
<td align="center">所有列的下面</td>
<td align="center">默认和非空不支持，其它都支持</td>
<td align="center">可以，但是主键没有效果</td>
</tr>
</tbody></table>
<p><strong>主键和唯一对比</strong></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">保证唯一性</th>
<th align="center">是否允许为空</th>
<th align="center">一个表中可以有多少个</th>
<th align="center">是否允许组合</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主键约束</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">至多一个</td>
<td align="center">√，不推荐</td>
</tr>
<tr>
<td align="center">唯一约束</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">可以有多个</td>
<td align="center">√，不推荐</td>
</tr>
</tbody></table>
<h4 id="外键的特点"><a href="#外键的特点" class="headerlink" title="外键的特点"></a>外键的特点</h4><ol>
<li>要求在从表设置外键关系</li>
<li>从表的外键列的类型和主表（引用的表）的关联列的类型要一致或兼容，名称没有要求</li>
<li>要求主表中的关联列必须是个key（一般是主键或者唯一键）</li>
<li>要求插入数据时，主表先插入数据，从表再插入数据；删除数据时，从表先删除数据，主表再删除数据</li>
</ol>
<h4 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h4><p><strong>列级约束的写法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 列类型 约束;</span><br></pre></td></tr></table></figure>

<p><strong>表级约束的写法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">add</span> [<span class="keyword">constraint</span> 约束名] 约束(字段) [<span class="keyword">references</span> 表名(字段)];</span><br></pre></td></tr></table></figure>



<h4 id="修改表时删除约束"><a href="#修改表时删除约束" class="headerlink" title="修改表时删除约束"></a>修改表时删除约束</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 列类型;</span><br></pre></td></tr></table></figure>

<p><strong>删除主键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>

<p><strong>删除唯一约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">index</span> 约束名;</span><br></pre></td></tr></table></figure>

<p>可以通过<code>show index from 表名</code>来查询约束名</p>
<p><strong>删除外键约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> 外键名;</span><br></pre></td></tr></table></figure>



<h4 id="标识列（自增长列）"><a href="#标识列（自增长列）" class="headerlink" title="标识列（自增长列）"></a>标识列（自增长列）</h4><p><strong>标识列</strong>：可以不用手动插入值，系统提供默认的序列值（从1开始）</p>
<p>使用示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> stu;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> stu(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment, </span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'李四'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure>

<p>MySQL中不支持设置标识列的起始值，但是可以通过如下方式设置增量值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> auto_increment_increment=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>但是一般不推荐修改</p>
<h4 id="级联操作（了解）"><a href="#级联操作（了解）" class="headerlink" title="级联操作（了解）"></a>级联操作（了解）</h4><p>在添加外键约束的最后加上，即可实现级联删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">on <span class="keyword">delete</span> <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure>

<p><strong>级联置空</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">on <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DDL</tag>
      </tags>
  </entry>
  <entry>
    <title>EL和JSTL</title>
    <url>/2020/06/30/EL%E5%92%8CJSTL/</url>
    <content><![CDATA[<h1 id="EL和JSTL"><a href="#EL和JSTL" class="headerlink" title="EL和JSTL"></a>EL和JSTL</h1><h2 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h2><h3 id="EL是什么，有什么作用"><a href="#EL是什么，有什么作用" class="headerlink" title="EL是什么，有什么作用"></a>EL是什么，有什么作用</h3><p>EL：Expression Language，表达式语言。</p>
<p><strong>作用</strong>：EL表达式是为了替代JSP页面中的表达式脚本在JSP页面中输出数据</p>
<p>相较于JSP表达式脚本，EL表达式就显得十分简洁</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        request.setAttribute(<span class="string">"key"</span>, <span class="string">"值"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    表达式脚本输出key的值是:&lt;%=request.getAttribute(<span class="string">"key1"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:request.getAttribute(<span class="string">"key1"</span>)%&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    EL表达式输出key的值是:$&#123;key1&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>EL表达式的格式</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;表达式&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：EL表达式对于null值的显式十分友好，如果表达式的值为null，则会显式为空串，而不是像表达式脚本一样显示为null字符串</p>
<h3 id="EL表达式搜索域数据的顺序"><a href="#EL表达式搜索域数据的顺序" class="headerlink" title="EL表达式搜索域数据的顺序"></a>EL表达式搜索域数据的顺序</h3><p>pageContext&rightarrow;request&rightarrow;session&rightarrow;application</p>
<h3 id="EL表达式输出Bean的各种属性"><a href="#EL表达式输出Bean的各种属性" class="headerlink" title="EL表达式输出Bean的各种属性"></a>EL表达式输出Bean的各种属性</h3><p><code>Person.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] phones;<span class="comment">//数组属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; cities;<span class="comment">//List属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;<span class="comment">//Map属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phones="</span> + Arrays.toString(phones) +</span><br><span class="line">                <span class="string">", cities="</span> + cities +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getPhones() &#123;</span><br><span class="line">        <span class="keyword">return</span> phones;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhones</span><span class="params">(String[] phones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phones = phones;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getCities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCities</span><span class="params">(List&lt;String&gt; cities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cities = cities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String[] phones, List&lt;String&gt; cities, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.phones = phones;</span><br><span class="line">        <span class="keyword">this</span>.cities = cities;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>普通属性、数组属性、List属性、集合属性的输出</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.zxw.pojo.Person"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Map"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.HashMap"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.setName(<span class="string">"张三丰"</span>);</span><br><span class="line">    person.setPhones(<span class="keyword">new</span> String[]&#123;<span class="string">"18688888888"</span>, <span class="string">"18695892461"</span>, <span class="string">"18269547896"</span>&#125;);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; cities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    cities.add(<span class="string">"北京"</span>);</span><br><span class="line">    cities.add(<span class="string">"上海"</span>);</span><br><span class="line">    cities.add(<span class="string">"广州"</span>);</span><br><span class="line">    person.setCities(cities);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">    map.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">    person.setMap(map);</span><br><span class="line"></span><br><span class="line">    pageContext.setAttribute(<span class="string">"p"</span>, person);</span><br><span class="line">%&gt;</span><br><span class="line">输出Person：$&#123; p &#125;&lt;br/&gt;</span><br><span class="line">输出Person的name属性：$&#123; p.name &#125;&lt;br/&gt;</span><br><span class="line">输出Person的phones数组属性值：$&#123; p.phones[<span class="number">0</span>] &#125;&lt;br/&gt;</span><br><span class="line">输出Person的cities集合中的元素值：$&#123; p.cities &#125;&lt;br/&gt;</span><br><span class="line">输出Person的cities集合中指定的元素值：$&#123; p.cities[<span class="number">0</span>] &#125;&lt;br/&gt;</span><br><span class="line">输出Person的Map属性：$&#123; p.map &#125;&lt;br/&gt;</span><br><span class="line">输出Person的Map集合中某个key的值：$&#123; p.map.key1 &#125;&lt;br/&gt;</span><br><span class="line">输出Person的age属性：$&#123; p.age &#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ol>
<li>EL表达式是通过域对象的name属性来访问的</li>
<li>EL表达式的属性由Bean对象的get方法决定而非属性名</li>
</ol>
<h3 id="EL表达式的运算"><a href="#EL表达式的运算" class="headerlink" title="EL表达式的运算"></a>EL表达式的运算</h3><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123; 运算符表达式 &#125;</span><br></pre></td></tr></table></figure>

<p>EL表达式支持如下运算符</p>
<h4 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h4><table>
<thead>
<tr>
<th align="center">关系运算符</th>
<th align="center">说明</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>==</code>或<code>eq</code></td>
<td align="center">等于</td>
<td align="center"><code>${ 5 == 5 }</code>或<code>${ 5 eq 5 }</code></td>
<td align="center">true</td>
</tr>
<tr>
<td align="center"><code>!=</code>或<code>ne</code></td>
<td align="center">不等于</td>
<td align="center"><code>${ 5 != 5 }</code>或<code>${ 5 ne 5 }</code></td>
<td align="center">false</td>
</tr>
<tr>
<td align="center"><code>&lt;</code>或<code>lt</code></td>
<td align="center">小于</td>
<td align="center"><code>${ 3 &lt; 5 }</code>或<code>${ 3 lt 5 }</code></td>
<td align="center">true</td>
</tr>
<tr>
<td align="center"><code>&gt;</code>或<code>gt</code></td>
<td align="center">大于</td>
<td align="center"><code>${ 2 &gt; 10 }</code>或<code>${ 2 gt 10 }</code></td>
<td align="center">false</td>
</tr>
<tr>
<td align="center"><code>&lt;=</code>或<code>le</code></td>
<td align="center">小于等于</td>
<td align="center"><code>${ 5 &lt;= 12 }</code>或<code>${ 5 le 12 }</code></td>
<td align="center">true</td>
</tr>
<tr>
<td align="center"><code>&gt;=</code>或<code>ge</code></td>
<td align="center">大于等于</td>
<td align="center"><code>${ 3 &gt;= 5 }</code>或<code>${ 3 ge 5 }</code></td>
<td align="center">false</td>
</tr>
</tbody></table>
<h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><table>
<thead>
<tr>
<th align="center">逻辑运算符</th>
<th align="center">说明</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&amp;&amp;</code>或<code>and</code></td>
<td align="center">与运算</td>
<td align="center"><code>${ 12 == 12 &amp;&amp; 12 &lt; 11 }</code>或<code>${ 12 == 12 and 12 &lt; 11 }</code></td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">`</td>
<td align="center"></td>
<td align="center"><code>或</code>or`</td>
<td align="center">或运算</td>
</tr>
<tr>
<td align="center"><code>!</code>或<code>not</code></td>
<td align="center">取反运算</td>
<td align="center"><code>${ !true }</code>或<code>${ not true }</code></td>
<td align="center">false</td>
</tr>
</tbody></table>
<h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><table>
<thead>
<tr>
<th align="center">算术运算符</th>
<th align="center">说明</th>
<th align="center">范例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>+</code></td>
<td align="center">加法</td>
<td align="center"><code>${12 + 18 }</code></td>
<td align="center">30</td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td align="center">减法</td>
<td align="center"><code>${ 18 - 12 }</code></td>
<td align="center">6</td>
</tr>
<tr>
<td align="center"><code>*</code></td>
<td align="center">乘法</td>
<td align="center"><code>${ 2 * 3 }</code></td>
<td align="center">6</td>
</tr>
<tr>
<td align="center"><code>/</code>或<code>div</code></td>
<td align="center">除法</td>
<td align="center"><code>${ 6 / 3 }</code>或<code>${ 6 div 3}</code></td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"><code>%</code>或<code>mod</code></td>
<td align="center">取模</td>
<td align="center"><code>${ 7 % 3 }</code>或<code>${ 7 mod 3 }</code></td>
<td align="center">1</td>
</tr>
</tbody></table>
<h4 id="empty运算"><a href="#empty运算" class="headerlink" title="empty运算"></a>empty运算</h4><p>empty运算可以判断一个数据是否为空，如果为空，则输出true，不为空输出false。</p>
<p>以下几种情况为空：</p>
<ol>
<li>值为null的时候，为空</li>
<li>值为空串的时候，为空</li>
<li>值是Object类型数组，长度为零的时候</li>
<li>list集合，元素个数为零</li>
<li>map集合，元素个数为零</li>
</ol>
<h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表达式1 ? 表达式2 : 表达式3</span><br></pre></td></tr></table></figure>

<p>如果表达式1的值为真，返回表达式2的值，否则返回表达式3的值</p>
<h4 id="点运算和-中括号运算符"><a href="#点运算和-中括号运算符" class="headerlink" title=".点运算和[]中括号运算符"></a><code>.</code>点运算和<code>[]</code>中括号运算符</h4><p><code>.</code>点运算，可以输出Bean对象中某个属性的值</p>
<p><code>[]</code>中括号运算，可以输出有序集合中某个元素的值。</p>
<p>并且<code>[]</code>中括号运算，还可以输出map集合中key里含有特殊字符的key的值</p>
<p><strong>代码示例</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"a.a.a"</span>, <span class="string">"aaaValue"</span>);</span><br><span class="line">    map.put(<span class="string">"b+b+b"</span>, <span class="string">"bbbValue"</span>);</span><br><span class="line">    map.put(<span class="string">"c-c-c"</span>, <span class="string">"cccValue"</span>);</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; map[<span class="string">'a.a.a'</span>] &#125;&lt;br/&gt;</span><br><span class="line">$&#123; map[<span class="string">'b+b+b'</span>] &#125;&lt;br/&gt;</span><br><span class="line">$&#123; map[<span class="string">'c-c-c'</span>] &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h3 id="EL表达式的11个隐含对象"><a href="#EL表达式的11个隐含对象" class="headerlink" title="EL表达式的11个隐含对象"></a>EL表达式的11个隐含对象</h3><p>EL表达式中11个隐含对象，是EL表达式中自己定义的，可以直接使用</p>
<p><strong>pageContext</strong></p>
<ul>
<li>pageContext：PageContextImpl类型对象，可以获取JSP中的九大内置对象</li>
</ul>
<p><strong>四大域对象相关</strong></p>
<ul>
<li>pageScope：Map&lt;String, Object&gt;类型对象，可以获取pageContext域中的数据</li>
<li>requestScope：Map&lt;String, Object&gt;类型对象，可以获取request域中的数据</li>
<li>sessionScope：Map&lt;String, Object&gt;类型对象，可以获取session域中的数据</li>
<li>applicationScope：Map&lt;String, Object&gt;类型对象，可以获取application域中的数据</li>
</ul>
<p><strong>请求参数相关</strong></p>
<ul>
<li>param：Map&lt;String, String&gt;类型对象，可以获取请求参数的值</li>
<li>paramValues：Map&lt;String, String[]&gt;，可以获取多个值的请求参数</li>
</ul>
<p><strong>请求头相关</strong></p>
<ul>
<li>header：Map&lt;String, String&gt;类型对象，可以获取请求头的值</li>
<li>headerValues：Map&lt;String, String[]&gt;类型对象，可以获取具有多个值的请求头</li>
</ul>
<p><strong>cookiie</strong></p>
<ul>
<li>cookie：Map&lt;String, Cookie&gt;类型，获取当前请求中的cookie信息</li>
</ul>
<p><strong>initParam</strong>：</p>
<ul>
<li>initParam：Map&lt;String, String&gt;类型，它可以获取<code>web.xml</code>中配置的<code>&lt;context-param&gt;</code>中的参数</li>
</ul>
<p><strong>pageContext对象的使用</strong></p>
<ol>
<li>获取协议</li>
<li>服务器IP</li>
<li>服务器端口号</li>
<li><font color="red">获取工程路径</font></li>
<li>获取请求方法</li>
<li>获取客户端IP</li>
<li>获取会话的id编号</li>
</ol>
<p><strong>使用示例</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--</span><br><span class="line"><span class="number">1</span>. 协议：reqeust.getScheme()</span><br><span class="line"><span class="number">2</span>. 服务器IP或域名:request.getServerName()</span><br><span class="line"><span class="number">3</span>. 服务器端口:request.getServerPort()</span><br><span class="line"><span class="number">4</span>. 获取工程路径:request.getContextPath()</span><br><span class="line"><span class="number">5</span>. 获取请求方法:request.getMethod();</span><br><span class="line"><span class="number">6</span>. 获取客户端ip地址:request.getRemoteHost()</span><br><span class="line"><span class="number">7</span>. 获取会话的id编号:session.getId()</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"req"</span>, request);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=request.getScheme()%&gt;&lt;br/&gt;</span><br><span class="line"><span class="number">1</span>. 协议:$&#123; req.scheme &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">2</span>. 服务器IP:$&#123; pageContext.request.serverName &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">3</span>. 服务器端口:$&#123; pageContext.request.serverPort &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">4</span>. 获取工程路径:$&#123; pageContext.request.contextPath &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">5</span>. 获取请求方法:$&#123; pageContext.request.method &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">6</span>. 获取客户端ip地址:$&#123; pageContext.request.remoteHost &#125;&lt;br/&gt;</span><br><span class="line"><span class="number">7</span>. 获取会话的id编号:$&#123; pageContext.session.id &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h2 id="JSTL（重点）"><a href="#JSTL（重点）" class="headerlink" title="JSTL（重点）"></a>JSTL（重点）</h2><p><strong>JSTL</strong>：JSP Standard Tag Library，即JSP标准标签库。这是一个不断完善的开源JSP标签库</p>
<p><strong>作用</strong>：替换JSP中的代码脚本，使得整个JSP页面变得更加简洁</p>
<p>JSTL由五个不同功能的标签库组成：</p>
<table>
<thead>
<tr>
<th align="center">功能范围</th>
<th align="center">URI</th>
<th align="center">前缀</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="red">核心标签库</font>（重点）</td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a></td>
<td align="center"><font color="red">c</font></td>
</tr>
<tr>
<td align="center">格式化</td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/fmt" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/fmt</a></td>
<td align="center">fmt</td>
</tr>
<tr>
<td align="center">函数</td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/functions</a></td>
<td align="center">fn</td>
</tr>
<tr>
<td align="center">数据库<font color="red">(不使用)</font></td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/sql" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/sql</a></td>
<td align="center">sql</td>
</tr>
<tr>
<td align="center">XML<font color="red">(不使用)</font></td>
<td align="center"><a href="http://java.sun.com/jsp/jstl/xml" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/xml</a></td>
<td align="center">x</td>
</tr>
</tbody></table>
<p>在JSP中标签库需要使用<code>taglib</code>指令引入</p>
<p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"前缀名"</span> uri=<span class="string">"标签库的uri"</span> %&gt;</span><br></pre></td></tr></table></figure>



<h3 id="JSTL的使用步骤"><a href="#JSTL的使用步骤" class="headerlink" title="JSTL的使用步骤"></a>JSTL的使用步骤</h3><ol>
<li><p>引入JSTL的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用taglib指令引入对应的标签库（以核心标签库为例）</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="core核心库使用"><a href="#core核心库使用" class="headerlink" title="core核心库使用"></a>core核心库使用</h3><h4 id="c-set（很少使用）"><a href="#c-set（很少使用）" class="headerlink" title="c:set（很少使用）"></a><code>c:set</code>（很少使用）</h4><p><strong>作用</strong>：往域对象中保存数据</p>
<p><strong>属性</strong>：</p>
<ul>
<li>scope：保存的域<ul>
<li><code>page</code>：pageContext域</li>
<li><code>request</code>：request域</li>
<li><code>session</code>：session域</li>
<li><code>application</code>：ServletContext域</li>
</ul>
</li>
<li>var：属性的key</li>
<li>value：属性的值</li>
</ul>
<p><strong>代码示例</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">保存之前:$&#123; sessionScope.abc &#125;&lt;br/&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">"session"</span> <span class="keyword">var</span>=<span class="string">"abc"</span> value=<span class="string">"abcValue"</span>/&gt;</span><br><span class="line">保存之后:$&#123; sessionScope.abc &#125;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h4 id="c-if"><a href="#c-if" class="headerlink" title="c:if"></a><code>c:if</code></h4><p><strong>作用</strong>：if判断</p>
<p><strong>属性</strong>：</p>
<ul>
<li>test：表示判断的条件（用EL表达式）</li>
</ul>
<p><strong>示例代码</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; 12 == 12 &#125;"</span>&gt;</span><br><span class="line">    &lt;h1&gt;12等于12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; 12 != 12 &#125;"</span>&gt;</span><br><span class="line">    &lt;h1&gt;12不等于12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h4 id="c-choose、c-when、c-otherwise"><a href="#c-choose、c-when、c-otherwise" class="headerlink" title="c:choose、c:when、c:otherwise"></a><code>c:choose</code>、<code>c:when</code>、<code>c:otherwise</code></h4><p><strong>作用</strong>：多路判断，类似于if..else if…else</p>
<p><strong>注意</strong>：</p>
<ol>
<li>标签里不能使用HTML注释，要使用JSP注释</li>
<li>when标签的父标签一定要是choose标签</li>
</ol>
<p><strong>示例代码</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">"grade"</span>, <span class="number">59</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test="$&#123; grade &gt;= 90 &#125;"&gt;优&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="$&#123; grade &gt;= 80 &#125;"&gt;良&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="$&#123; grade &gt;= 60 &#125;"&gt;及格&lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;不及格&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h4 id="c-forEach"><a href="#c-forEach" class="headerlink" title="c:forEach"></a><code>c:forEach</code></h4><p><strong>作用</strong>：遍历输出使用</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>begin</code>：开始索引</li>
<li><code>end</code>：结束索引</li>
<li><code>var</code>：表示循环的变量，也是当前正在遍历到的数据</li>
<li><code>step</code>：表示每次增长的量</li>
<li><code>items</code>：表示当前遍历的数据源</li>
<li><code>varStatus</code>：表示当前遍历到的数据的状态，有如下属性<ul>
<li>step：步长（每次的增长量）</li>
<li>begin：开始索引</li>
<li>end：结束索引</li>
<li>count：当前是正在遍历的第几个元素</li>
<li>current：当前遍历的对象</li>
<li>first：对应<code>isFirst()</code>，是否为第一个元素</li>
<li>last：对应<code>isLast()</code>，是否为最后一个元素</li>
<li>index：索引</li>
</ul>
</li>
</ul>
<h5 id="遍历1到10，输出"><a href="#遍历1到10，输出" class="headerlink" title="遍历1到10，输出"></a>遍历1到10，输出</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line"><span class="number">1</span>.遍历<span class="number">1</span> 到<span class="number">10</span>，输出</span><br><span class="line">begin 属性设置开始的索引</span><br><span class="line">end 属性设置结束的索引</span><br><span class="line"><span class="keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> <span class="keyword">var</span>=<span class="string">"i"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;i&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>



<h5 id="遍历Object数组"><a href="#遍历Object数组" class="headerlink" title="遍历Object数组"></a>遍历Object数组</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">遍历对象数组</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">"arr"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"123456"</span>, <span class="string">"654321"</span>, <span class="string">"abcdefg"</span>&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123; requestScope.arr &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span>&gt;</span><br><span class="line">    &lt;h1&gt;$&#123; item &#125;&lt;/h1&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>



<h5 id="遍历Map集合"><a href="#遍历Map集合" class="headerlink" title="遍历Map集合"></a>遍历Map集合</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">遍历Map</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="string">"北京"</span>);</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="string">"上海"</span>);</span><br><span class="line">    map.put(<span class="number">3</span>, <span class="string">"广州"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123; requestScope.map &#125;"</span> <span class="keyword">var</span>=<span class="string">"entry"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123; entry.key &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; entry.value &#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>



<h5 id="遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息"><a href="#遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息" class="headerlink" title="遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息"></a>遍历List集合——List中存放有Student类，有属性：编号、用户名、密码、年龄、电话信息</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">遍历List&lt;Student&gt;，其中student有id、username、password、age、phone属性</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = i + <span class="number">1</span>;</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(t, <span class="string">"student"</span> + t, <span class="string">"abcdef"</span> + t, <span class="number">18</span> + t, <span class="string">"1899876041"</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(<span class="string">"students"</span>, students);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;电话&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123; requestScope.students &#125;"</span> <span class="keyword">var</span>=<span class="string">"student"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.id &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.username &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.password &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.age &#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123; student.phone &#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>EL</tag>
        <tag>JSTL</tag>
      </tags>
  </entry>
  <entry>
    <title>DML语言学习</title>
    <url>/2020/06/22/DML%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DML语言学习"><a href="#DML语言学习" class="headerlink" title="DML语言学习"></a>DML语言学习</h2><p>DML：Data Manipulation Language，数据操纵语言，用于数据的<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code></p>
<h3 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h3><p><strong>语法</strong>：</p>
<blockquote>
<p>方式一：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名,...) <span class="keyword">values</span>(值<span class="number">1</span>,...);</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>,...);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式二：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">set</span> 列名=值,...,列名=值;</span><br></pre></td></tr></table></figure>

<p><strong>两种方式的比较</strong>：</p>
<ol>
<li><p>方式一支持插入多条数据，而方式二不支持</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(<span class="keyword">id</span>, <span class="keyword">name</span>, age)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1001</span>, <span class="string">'张三'</span>, <span class="number">20</span>), (<span class="number">1002</span>, <span class="string">'李四'</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式一还支持子查询，方式二不支持</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu(<span class="keyword">id</span>, <span class="keyword">name</span>, age) </span><br><span class="line"><span class="keyword">select</span> <span class="number">1001</span>, <span class="string">'张三'</span>, <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>要求</strong>：</p>
<ol>
<li>插入的值的类型要与列的类型一致或兼容</li>
<li>不可以为null的列必须插入值，可以为null的列如果不想插入值有两种方式<ul>
<li>插入null</li>
<li>在给出的列中去掉这个可以为null的列</li>
</ul>
</li>
<li>列的顺序可以颠倒，只要和插入的值一一对应即可</li>
<li>列和值的个数必须保持一致</li>
<li>可以省略列名，默认为所有列名，而且列的顺序和表中列的顺序一致</li>
</ol>
<h3 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h3><h4 id="修改单表的记录"><a href="#修改单表的记录" class="headerlink" title="修改单表的记录"></a>修改单表的记录</h4><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 							//<span class="number">1</span></span><br><span class="line"><span class="keyword">set</span> 列=新值,...列=新值 				 //<span class="number">3</span></span><br><span class="line"><span class="keyword">where</span> 筛选条件;						  //2</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> stu </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'王五'</span>, age=<span class="number">30</span> </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1001</span>;</span><br></pre></td></tr></table></figure>



<h4 id="修改多表的记录（级联更新）"><a href="#修改多表的记录（级联更新）" class="headerlink" title="修改多表的记录（级联更新）"></a>修改多表的记录（级联更新）</h4><p><strong>SQL92语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名<span class="number">1</span>, 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">set</span> 列=值,...,列=值 </span><br><span class="line"><span class="keyword">where</span> 连接条件 </span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<p><strong>SQL99语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">on</span> 连接条件 </span><br><span class="line"><span class="keyword">set</span> 列=值,...,列=值 </span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>



<h3 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h3><p><strong>语法</strong></p>
<p>单表删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<p>多表删除：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SQL92</span></span><br><span class="line"><span class="keyword">delete</span> 别名<span class="number">1</span>, 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span>, 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">where</span> 连接条件 </span><br><span class="line"><span class="keyword">and</span> 筛选条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">#SQL99</span></span><br><span class="line"><span class="keyword">delete</span> 别名<span class="number">1</span>, 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span> <span class="keyword">inner</span>|<span class="keyword">left</span>|<span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line"><span class="keyword">on</span> 连接条件 </span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure>

<p><strong>清空表</strong></p>
<p>清空数据，实际上是删除这个表，然后再创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>



<p><strong>delete和truncate的区别</strong>：</p>
<ol>
<li>delete可以加where条件语句，truncate不可以</li>
<li>truncate删除的效率高一点</li>
<li>如果存在自增长列，delete后插入会继续增加，而truncate后再插入则会从1开始</li>
<li>truncate删除没有返回值，delete删除会返回受影响的记录数</li>
<li>truncate不能回滚，delete可以回滚</li>
</ol>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>运行以下SQL语句，创建my_employees和users表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_employees (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> (<span class="number">10</span>),</span><br><span class="line">  frist_name <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  last_name <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  user_id <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  salary <span class="keyword">DOUBLE</span> (<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">  user_id <span class="built_in">VARCHAR</span> (<span class="number">10</span>),</span><br><span class="line">  department_id <span class="built_in">INT</span></span><br><span class="line">) ;</span><br></pre></td></tr></table></figure>

<p>1、显示my_employees的表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DESC my_employees;</span><br></pre></td></tr></table></figure>

<p>2、向my_employees表中插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_employees </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">'patel'</span>, <span class="string">'Ralph'</span>, <span class="string">'Rpatel'</span>, <span class="number">895</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">'Dancs'</span>, <span class="string">'Betty'</span>, <span class="string">'Bdancs'</span>, <span class="number">860</span>), </span><br><span class="line">(<span class="number">3</span>, <span class="string">'Biri'</span>, <span class="string">'Ben'</span>, <span class="string">'Bbiri'</span>, <span class="number">1100</span>), </span><br><span class="line">(<span class="number">4</span>, <span class="string">'Newman'</span>, <span class="string">'Chad'</span>, <span class="string">'Cnewman'</span>, <span class="number">750</span>), </span><br><span class="line">(<span class="number">5</span>, <span class="string">'Ropeburn'</span>, <span class="string">'Audrey'</span>, <span class="string">'Aropebur'</span>, <span class="number">1550</span>);</span><br></pre></td></tr></table></figure>

<p>3、向user表中插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">'Rpatel'</span>, <span class="number">10</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">'Bdancs'</span>, <span class="number">10</span>), </span><br><span class="line">(<span class="number">3</span>, <span class="string">'Bbiri'</span>, <span class="number">20</span>), </span><br><span class="line">(<span class="number">4</span>, <span class="string">'Cnewman'</span>, <span class="number">30</span>), </span><br><span class="line">(<span class="number">5</span>, <span class="string">'Aropebur'</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure>

<p>4、将3号员工的last_name修改为“drelxer”</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> </span><br><span class="line">  my_employees </span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  last_name = <span class="string">'drelxer'</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">3</span> ;</span><br></pre></td></tr></table></figure>

<p>5、将所有工资少于900的员工的工资修改为1000</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> </span><br><span class="line">  my_employees </span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">  salary = <span class="number">1000</span> </span><br><span class="line"><span class="keyword">WHERE</span> salary &lt; <span class="number">900</span> ;</span><br></pre></td></tr></table></figure>

<p>6、将userid 为Bbiri的user表和my_employees表的记录全部删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line">  u,</span><br><span class="line">  e </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">users</span> u </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> my_employees e </span><br><span class="line">    <span class="keyword">ON</span> u.user_id = e.user_id </span><br><span class="line"><span class="keyword">WHERE</span> u.user_id = <span class="string">'Bbiri'</span> ;</span><br></pre></td></tr></table></figure>

<p>7、删除所有表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_employees;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure>

<p>8、清空表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> my_employees;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2020/06/27/HTTP/</url>
    <content><![CDATA[<p>HTTP相关内容转至<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP</title>
    <url>/2020/06/30/JSP/</url>
    <content><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="JSP是什么，有什么作用"><a href="#JSP是什么，有什么作用" class="headerlink" title="JSP是什么，有什么作用"></a>JSP是什么，有什么作用</h2><p>JSP：Java Server Page，Java服务器页面。</p>
<p><strong>作用</strong>：JSP的主要作用就是替代Servlet程序回传HTML页面的数据</p>
<p>使用Servlet来回传HTML页面，就是在Java程序中写HTML，这既不合适，也不方便。</p>
<h2 id="JSP的本质"><a href="#JSP的本质" class="headerlink" title="JSP的本质"></a>JSP的本质</h2><p>JSP本质上还是一个Servlet程序！！！</p>
<p>当<strong>第一次访问</strong>JSP页面时，Tomcat服务器会帮我们把jsp页面翻译成一个Java源文件，并将它编译成为<code>.class</code>字节码文件</p>
<h2 id="JSP的三种语法"><a href="#JSP的三种语法" class="headerlink" title="JSP的三种语法"></a>JSP的三种语法</h2><h3 id="JSP头部的page指令"><a href="#JSP头部的page指令" class="headerlink" title="JSP头部的page指令"></a>JSP头部的page指令</h3><p>jsp的page指令可以修改jsp页面中一些重要的属性，或行为。</p>
<ul>
<li><code>language</code>属性：表示jsp翻译后是什么语言文件，暂时只支持Java</li>
<li><code>contentType</code>属性：表示jsp返回的数据类型是什么。也是源码中<code>response.setContentType()</code>的参数值</li>
<li><code>pageEncoding</code>属性：表示当前jsp页面文件本身的字符集</li>
<li><code>import</code>属性：跟Java源代码中一样，用于导包，导类</li>
</ul>
<p>下面两个属性是给输出流使用的：</p>
<ul>
<li><code>autoFlush</code>属性：设置out输出流缓冲区满了之后，是否自动刷新缓冲区，默认值为true</li>
<li><code>buffer</code>属性：设置out缓冲区的大小，默认为<strong>8kb</strong></li>
<li><code>errorPage</code>属性：设置当前jsp页面运行时出错，自动跳转去的错误页面路径</li>
</ul>
<blockquote>
<p>errorPage表示错误后自动跳转去的路径</p>
<p>这个路径一般都是斜杠打头，它表示请求地址为：<a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a></p>
</blockquote>
<ul>
<li><code>isErrorPage</code>属性：设置当前jsp页面是否是错误页面信息，默认值是false。如果为true，则可以获取异常信息</li>
<li><code>session</code>属性：设置访问当前jsp页面，是否会创建HttpSession对象，默认为true</li>
<li><code>extends</code>属性：设置jsp翻译出来的Java类默认继承谁</li>
</ul>
<h3 id="JSP中的常用脚本"><a href="#JSP中的常用脚本" class="headerlink" title="JSP中的常用脚本"></a>JSP中的常用脚本</h3><h4 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h4><p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%! 声明java代码 %&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：可以给jsp翻译出来的Java类定义<strong>属性</strong>和<strong>方法</strong>甚至是静态代码块、内部类等。</p>
<h4 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h4><p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%=表达式%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：在jsp页面上输出数据</p>
<p><strong>特点</strong>：</p>
<ol>
<li>所有表达式脚本都会被翻译到<code>_jspService()</code>方法中</li>
<li>表达式脚本都会被翻译成为<code>out.println()</code>输出到页面上</li>
<li>由于表达式脚本翻译的内容都在<code>_jspService()</code>方法中，所以<code>_jspService()</code>方法中的对象都可以直接使用</li>
<li>表达式脚本中的表达式<strong>不能</strong>以分号结尾</li>
</ol>
<p>后面会介绍EL表达式，其作用就是为了替代表达式脚本</p>
<h4 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h4><p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	Java代码</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：可以在代码脚本中编写Java语句</p>
<p><strong>特点</strong>：</p>
<ol>
<li>代码脚本翻译之后都在<code>_jspService()</code>方法中</li>
<li>代码脚本中可以使用<code>_jspService()</code>中定义的所有对象</li>
<li>可以由多个代码脚本组合使用</li>
<li>代码脚本可以和表达式脚本组合使用，用于在jsp页面上输出数据</li>
</ol>
<h3 id="JSP的三种注释"><a href="#JSP的三种注释" class="headerlink" title="JSP的三种注释"></a>JSP的三种注释</h3><h4 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是HTML注释 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML注释会被翻译到Java源代码中。在<code>_jspService</code>方法里，以<code>out.write</code>输出到客户端</p>
<h4 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行Java注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行Java注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档Java注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>Java注释会被翻译到Java源代码中</p>
<h4 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- 这是jsp注释 --&gt;</span><br></pre></td></tr></table></figure>

<p>jsp注释可以注释掉，jsp页面中的所有代码（只在jsp中有效，不会被翻译到Java源代码中）</p>
<h2 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h2><p>&emsp;jsp中的内置对象，是指Tomcat在翻译jsp成为Servlet源码后，内部提供的九大对象，叫内置对象（一般只有8个，对于errorPage=“true”的页面多一个），如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200430155111671.png" align="left"/>

<p><strong>JSP的九大内置对象如下表所示</strong></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PageContext pageContext</td>
<td align="center">jsp的上下文对象</td>
</tr>
<tr>
<td align="center">Object page = this</td>
<td align="center">指向当前jsp对象</td>
</tr>
<tr>
<td align="center">HttpServletRequest request</td>
<td align="center">请求对象</td>
</tr>
<tr>
<td align="center">HttpServletResponse response</td>
<td align="center">响应对象</td>
</tr>
<tr>
<td align="center">JspWriter out</td>
<td align="center">jsp输出流对象</td>
</tr>
<tr>
<td align="center">HttpSession session</td>
<td align="center">会话对象</td>
</tr>
<tr>
<td align="center">ServletContext application</td>
<td align="center">Servlet上下文对象</td>
</tr>
<tr>
<td align="center">ServletConfig config</td>
<td align="center">Servlet配置对象</td>
</tr>
<tr>
<td align="center">Throwable exception</td>
<td align="center">异常对象</td>
</tr>
</tbody></table>
<h2 id="JSP四大域对象"><a href="#JSP四大域对象" class="headerlink" title="JSP四大域对象"></a>JSP四大域对象</h2><ul>
<li><code>pageContext</code>：PageContext类，当前JSP页面范围有效</li>
<li><code>request</code>：HttpServletRequest类，当前请求有效</li>
<li><code>session</code>：HttpSession类，当前会话有效</li>
<li><code>application</code>：ServletContext类，整个Web工程中有效</li>
</ul>
<p>四大域对象根据范围从小到达的顺序是：</p>
<p>pageContext&rightarrow;request&rightarrow;session&rightarrow;application</p>
<p>如果不显式指明，则查询的顺序也是从小到大的</p>
<h2 id="JSP中out输出和response-getWriter-输出的区别"><a href="#JSP中out输出和response-getWriter-输出的区别" class="headerlink" title="JSP中out输出和response.getWriter()输出的区别"></a>JSP中<code>out</code>输出和<code>response.getWriter()</code>输出的区别</h2><p>reponse中表示响应，我们经常用于设置返回给客户端的内容（输出）</p>
<p>out也是给用户输出使用的</p>
<p><code>output.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: zxw</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">30</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">01</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;output&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.write(<span class="string">"out输出1"</span>);</span><br><span class="line">    out.write(<span class="string">"out输出2"</span>);</span><br><span class="line">    response.getWriter().write(<span class="string">"response输出1"</span>);</span><br><span class="line">    response.getWriter().write(<span class="string">"response输出2"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>结果发现：即使使用out先输出，显示在页面上时也会在使用response.getWriter()的后面</p>
<p><strong>那么为什么会出现这种情况？</strong></p>
<p>![image-20200430171141403](C:/Users/zxw/Desktop/Java Web/08-jsp/jsp.assets/image-20200430171141403.png)</p>
<p>因为当JSP页面中所有代码执行完成后会做以下两个操作：</p>
<ol>
<li>执行<code>out.flush()</code>操作，会把out缓冲区的数据<strong>追加写入到response缓冲区末尾</strong></li>
<li>会执行<code>response.getWrtier()</code>的刷新操作，把全部数据写给客户端</li>
</ol>
<p>所以会出现，out输出的内容在response输出内容后面的情况</p>
<p>由于jsp翻译之后，底层源代码都是使用out来进行输出，所以一般情况下。我们在jsp页面中统一使用out来进行输出。避免打乱页面输出内容的顺序。</p>
<p><code>out.write()</code>输出字符串没有问题</p>
<p><code>out.print()</code>输出任意数据都没有问题（都转换成字符串后调用的write输出）</p>
<p><font color="red">结论：在jsp页面中，可以同一使用<code>out.print()</code>来进行输出</font></p>
<h2 id="JSP的常用标签"><a href="#JSP的常用标签" class="headerlink" title="JSP的常用标签"></a>JSP的常用标签</h2><h3 id="JSP静态包含"><a href="#JSP静态包含" class="headerlink" title="JSP静态包含"></a>JSP静态包含</h3><p>可以实现一个jsp页面的多次复用</p>
<p><strong>格式</strong>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">""</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>file属性指定你要包含的jsp页面的路径</p>
<p>地址中的第一个斜杠<code>/</code>表示为<a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a> 映射到代码的web目录</p>
<p><strong>静态包含的特点</strong>：</p>
<ol>
<li>静态包含不会翻译被包含的jsp页面</li>
<li>静态包含其实就是把被包含的jsp页面代码拷贝到包含的位置执行输出（使用<code>out.write()</code>）</li>
</ol>
<p>示例说明：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"/include/footer.jsp"</span> %&gt;</span><br></pre></td></tr></table></figure>



<h3 id="JSP动态包含"><a href="#JSP动态包含" class="headerlink" title="JSP动态包含"></a>JSP动态包含</h3><p><strong>格式</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=""&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>

<p>page属性指定你要包含的jsp页面路径</p>
<p>动态包含也可以像静态包含一样，把被包含的内容执行输出到包含位置</p>
<p><strong>动态包含的特点</strong>：</p>
<ol>
<li><p>动态包含会把包含的jsp页面也翻译成Java代码</p>
</li>
<li><p>动态包含底层代码使用如下代码去调用被包含jsp页面执行输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JspRuntimeLibrary.include(request, response, <span class="string">"/include/footer.jsp"</span>, out, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态包含还可以传递参数</p>
</li>
</ol>
<p><strong>使用示例</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"/include/footer.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"username"</span> value=<span class="string">"张三"</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>

<p>获取参数：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">username:&lt;%=request.getParameter(<span class="string">"username"</span>)%&gt;&lt;br/&gt;</span><br><span class="line">password:&lt;%=request.getParameter(<span class="string">"password"</span>)%&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="JSP转发"><a href="#JSP转发" class="headerlink" title="JSP转发"></a>JSP转发</h3><p><strong>格式</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page="页面路径"&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>



<h2 id="JSP练习题"><a href="#JSP练习题" class="headerlink" title="JSP练习题"></a>JSP练习题</h2><h3 id="练习一：在JSP页面输出九九乘法表"><a href="#练习一：在JSP页面输出九九乘法表" class="headerlink" title="练习一：在JSP页面输出九九乘法表"></a>练习一：在JSP页面输出九九乘法表</h3><p><code>九九乘法表.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;使用JSP和HTML表格输出九九乘法表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=<span class="string">"1px"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">    &lt;thead&gt;九九乘法表&lt;/thead&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        %&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=j + "*" + i + "=" + (j * i)%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="练习二：jsp输出一个表格，里面有10个学生信息"><a href="#练习二：jsp输出一个表格，里面有10个学生信息" class="headerlink" title="练习二：jsp输出一个表格，里面有10个学生信息"></a>练习二：jsp输出一个表格，里面有10个学生信息</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.zxw.pojo.Student"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: zxw</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">30</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">54</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;使用表格输出学生信息&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        students.add(<span class="keyword">new</span> Student(i + <span class="number">1</span>, <span class="string">"name"</span> + (i + <span class="number">1</span>), <span class="number">18</span> + i, <span class="string">"phone"</span> + (i + <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">    &lt;thead&gt;学生信息表&lt;/thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;联系电话&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;%student.getId()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getName()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getAge()%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=student.getPhone()%&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2020/06/27/Tomcat/</url>
    <content><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h3 id="什么是JavaWeb"><a href="#什么是JavaWeb" class="headerlink" title="什么是JavaWeb"></a>什么是JavaWeb</h3><p><strong>JavaWeb</strong>：就是Java语言编写的可以通过浏览器访问的程序，叫做JavaWeb。</p>
<p>JavaWeb是基于<strong>请求</strong>和<strong>响应</strong>来开发的</p>
<h3 id="什么是请求"><a href="#什么是请求" class="headerlink" title="什么是请求"></a>什么是请求</h3><p><strong>请求</strong>：客户端向服务器发送数据，叫做请求</p>
<h3 id="什么是响应"><a href="#什么是响应" class="headerlink" title="什么是响应"></a>什么是响应</h3><p><strong>响应</strong>：服务器向客户端回传数据，叫做响应</p>
<h3 id="请求和响应的关系"><a href="#请求和响应的关系" class="headerlink" title="请求和响应的关系"></a>请求和响应的关系</h3><p>请求和响应往往是成对出现的，它们的关系如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627152700650.png"/>

<h2 id="Web资源的分类"><a href="#Web资源的分类" class="headerlink" title="Web资源的分类"></a>Web资源的分类</h2><p>Web资源根据使用的技术和呈现的效果不同，分为两类：</p>
<ul>
<li><strong>静态资源</strong>：html、css、js、txt、mp4等</li>
<li><strong>动态资源</strong>：jsp、servlet</li>
</ul>
<h2 id="常用的Web服务器"><a href="#常用的Web服务器" class="headerlink" title="常用的Web服务器"></a>常用的Web服务器</h2><p>下面介绍常见的三种Web服务器</p>
<ul>
<li><strong>Tomcat</strong>：由<strong>Apache</strong>组织提供的一种Web服务器，提供对<strong>jsp</strong>和<strong>servlet</strong>的支持。它是一种<strong>轻量级的JavaWeb容器</strong>（服务器），也是当前应用对广泛的JavaWeb服务器（<strong>免费</strong>）</li>
<li><strong>JBoss</strong>：是一个遵循JavaEE规范的、开放源代码的、纯Java的EJB服务器，它<strong>支持所有的JavaEE规范（免费)</strong></li>
<li><strong>WebLogic</strong>：是Oracle公司的产品，是目前应用最广泛的Web服务器，支持JavaEE规范，而且不断地完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）</li>
</ul>
<h2 id="Tomcat服务器和Servlet、JSP、JDK之间的对应关系"><a href="#Tomcat服务器和Servlet、JSP、JDK之间的对应关系" class="headerlink" title="Tomcat服务器和Servlet、JSP、JDK之间的对应关系"></a>Tomcat服务器和Servlet、JSP、JDK之间的对应关系</h2><table>
<thead>
<tr>
<th align="center">Tomcat版本</th>
<th align="center">Servlet版本</th>
<th align="center">JSP版本</th>
<th align="center">JDK版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">7.0</td>
<td align="center">3.0</td>
<td align="center">2.2</td>
<td align="center">6.0</td>
</tr>
<tr>
<td align="center">8.0</td>
<td align="center">3.1</td>
<td align="center">2.3</td>
<td align="center">7.0</td>
</tr>
<tr>
<td align="center">9.0</td>
<td align="center">4.0</td>
<td align="center">2.4</td>
<td align="center">8.0</td>
</tr>
</tbody></table>
<p>Servlet3.0开始，支持了注解开发</p>
<h2 id="Tomcat的使用"><a href="#Tomcat的使用" class="headerlink" title="Tomcat的使用"></a>Tomcat的使用</h2><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><p>Tomcat官网：<a href="http://tomcat.apache.org" target="_blank" rel="noopener">http://tomcat.apache.org</a></p>
<p>找到所需要的Tomcat版本下载压缩包，并解压到安装目录即可</p>
<h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin			专门用来存放Tomcat服务器的可执行程序</span><br><span class="line">conf		专门用来存放Tomcat服务器的配置文件</span><br><span class="line">lib			专门用来存放Tomcat服务器的jar包</span><br><span class="line">logs		专门用来存放Tomcat服务器运行时输出的日志信息</span><br><span class="line">temp		专门用来存放Tomcat运行时产生的临时数据</span><br><span class="line">webapps		专门用来存放部署的Web工程</span><br><span class="line">work		是Tomcat工作时的目录，用来存放Tomcat运行时jsp翻译为Servlet的源码，和Session钝化的目录</span><br></pre></td></tr></table></figure>



<h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><p><strong>方式一</strong></p>
<p>找到Tomcat的bin目录下的startup.bat文件，双击启动Tomcat服务器</p>
<p><strong>方式二</strong>：</p>
<p>使用cmd进入到bin目录，运行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catalina run</span><br></pre></td></tr></table></figure>



<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>找到conf目录下的<code>server.xml</code>文件，可以进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>Tomcat的默认端口号为8080，可以修改port属性的值来指定Tomcat的端口号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以通过修改Host标签的name属性来指定访问的主机名</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p><strong>方式一</strong><br>将对应的web工程拷贝到webapps目录下</p>
<p><strong>方式二</strong><br>在Tomcat的conf目录下的<code>\Catalina\localhost\</code>下创建如下配置文件</p>
<p><code>abc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/abc"</span> <span class="attr">docBase</span>=<span class="string">"D:\book"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>推荐使用方式一进行部署</p>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><strong>请你谈谈浏览器是如何访问的？</strong></p>
<p>首先会在电脑中的hosts文件中查找有没有对应的域名，如果有则使用这个IP地址访问；如果没有就去DNS服务器中查找，找到就是用找到的IP地址访问，否则就找不到</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>TCL语言学习</title>
    <url>/2020/06/24/TCL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="TCL语言学习"><a href="#TCL语言学习" class="headerlink" title="TCL语言学习"></a>TCL语言学习</h2><p>TCL：Transaction Control Language，事务控制语言。</p>
<p><strong>事务</strong>：事务由单独单元的一个或多个SQL语句组成，在这个单元中，每个SQL语句都是相互依赖的。而整个单独单元作为一个<strong>不可分割</strong>的整体，如果单元中某条SQL语句的执行发生了错误，整个单元就会回滚。所有受到影响的数据将回滚到事务发生之前的状态；只有当单元中的<strong>所有</strong>SQL语句都顺利执行，事务才能顺利执行！</p>
<p><strong>MySQL的存储引擎（了解）</strong></p>
<p>1、概念：在MySQL中的数据用各种不同的技术存储在文件（或内存）中</p>
<p>2、通过<code>show engines;</code>来查看MySQL支持的存储引擎</p>
<p>3、在MySQL中用的最多的存储引擎有：<code>innodb</code>、<code>myisam</code>、<code>memory</code>等。其中<code>innodb</code>支持事务，而<code>myisam</code>和<code>memory</code>不支持事务</p>
<h3 id="事务的特点"><a href="#事务的特点" class="headerlink" title="事务的特点"></a>事务的特点</h3><p>事务的特点（ACID）</p>
<ol>
<li><p>原子性（Atomicity）</p>
<p>原子性是指事务是一个不可分割的工作单位，事务的操作要么都发生，要么都不发生</p>
</li>
<li><p>一致性（Consistency）</p>
<p>事务必须使得数据库从一个一致性状态转换到另一个一致性状态</p>
</li>
<li><p>隔离性（Isolation）</p>
<p>事务的隔离性是指一个事务的执行不能被其它事务干扰，即一个一个事务内部的操作及使用的数据对并发的其它事务是隔离的，并发执行的各个事务之间不能相互干扰</p>
</li>
<li><p>持久性（Durability）</p>
<p>持久性是指一个事务一旦被提交，它对数据库中的数据的改变就是永久性的，接下来的其它操作和数据库故障不应该对其由任何影响。</p>
</li>
</ol>
<h3 id="事务的创建"><a href="#事务的创建" class="headerlink" title="事务的创建"></a>事务的创建</h3><p><strong>隐式事务</strong>：事务没有明显的开启和结束标记。比如：<code>insert</code>、<code>update</code>、<code>delete</code>语句</p>
<p>可以通过<code>show variables like ‘autocommit;</code>来查看是否开启了事务的自动提交，如果开启了，那么每个SQL语句都会作为一个事务自动提交（commit）</p>
<p><strong>显式事务</strong>：事务具有明显的开启和结束标记。</p>
<p>要使用显式事务，首先需要手动禁用自动提交功能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>注意，该命令仅仅对本次会话有效。</p>
<p><strong>事务的创建步骤</strong></p>
<ol>
<li><p>开启事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span> <span class="keyword">transaction</span>; <span class="comment">#可以省略</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写事务中的SQL语句</p>
</li>
<li><p>结束事务</p>
<ul>
<li>提交事务：<code>commit;</code></li>
<li>回滚事务：<code>rollback;</code></li>
</ul>
</li>
</ol>
<h3 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h3><p><strong>事务的并发会引发的问题</strong></p>
<p>对于同时运行的多个事务，当这些事务访问数据库中<strong>相同</strong>的数据时，如果没有采取必要的隔离机制，就会导致各种问题：</p>
<ul>
<li><strong>脏读</strong>：对于两个事务T1、T2，T1读取了已经被T2更新但是还没有修改的字段之后，若T2回滚，T1读取的内容就是临时且无效的</li>
<li><strong>不可重复读</strong>：对于两个事务T1、T2，T1读取了一个字段，然后T2更新了该字段之后，T1再次读取同一个字段，值就不相同了</li>
<li><strong>幻读</strong>：对于两个事务T1、T2，T1从表中读取了一个字段，然后T2在表中插入了一些新的数据后，如果T1再次读取同一个表，就会多出几行记录</li>
</ul>
<p><strong>数据的隔离界别</strong></p>
<ul>
<li><code>READ UNCOMMITTED</code>：读取未提交的数据，最低的隔离级别，解决不了任何事务并发问题</li>
<li><code>READ COMMITTED</code>：读取已提交的数据，可以避免脏读的问题，不能解决不可重复读和幻读的问题</li>
<li><code>REPEATABLE READ</code>：可以重复读，可以解决脏读、不可重复读的问题，但是会出现幻读</li>
<li><code>SERIALIZABLE</code>：串行化，效率最低，隔离级别最高，解决了所有的事务并发问题</li>
</ul>
<p>Oracle支持<code>READ COMMITTED</code>和<code>SERIALIZABLE</code>，默认为<code>READ COMMITTED</code></p>
<p>MySQL支持四种隔离界别，默认为<code>REPEATABLE READ</code></p>
<p><strong>查询数据库的隔离级别</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br></pre></td></tr></table></figure>

<p><strong>设置数据库的隔离界别</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别;</span><br></pre></td></tr></table></figure>



<p>Tips：</p>
<ul>
<li><p>每启动一个MySQL程序，就会获得一个单独的数据库连接，每个数据库连接都有一个全局变量<code>@@tx_isolation</code>，表示当前的事务隔离级别</p>
</li>
<li><p>设置数据库的全局隔离级别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="回滚点的使用"><a href="#回滚点的使用" class="headerlink" title="回滚点的使用"></a>回滚点的使用</h3><p><strong>设置保存点</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">savepoint</span> 保存点名;</span><br></pre></td></tr></table></figure>

<p><strong>回滚到指定的保存点</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> 保存点名;</span><br></pre></td></tr></table></figure>



<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#回滚点的使用</span></span><br><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span>(<span class="string">'张三'</span>, <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">SAVEPOINT</span> p1;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span>(<span class="string">'李四'</span>, <span class="number">20000</span>);</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> p1;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>TCL</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2020/06/27/Maven/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h2><p>Maven项目对象模型（POM），可以通过一小段描述信息来管理项目的构建，报告文档的项目管理工具软件。</p>
<h2 id="为什么要学习Maven"><a href="#为什么要学习Maven" class="headerlink" title="为什么要学习Maven"></a>为什么要学习Maven</h2><p>在JavaWeb开发中往往需要导入大量的jar包，这个过程很容易出错。</p>
<p>Maven正是为了解决这个问题而诞生的！</p>
<h2 id="Maven的下载与安装"><a href="#Maven的下载与安装" class="headerlink" title="Maven的下载与安装"></a>Maven的下载与安装</h2><p>Maven官网：<a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></p>
<p>下载zip压缩包，并解压到你的开发环境中</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在系统环境变量中，进行如下配置：</p>
<ul>
<li>M2_HOME：maven的bin目录的路径</li>
<li>MAVEN_HOME：maven的目录</li>
<li>系统的path中：添加<code>%MAVEN_HOME%\bin</code></li>
</ul>
<p><strong>测试Maven是否安装成功</strong>：打开cmd，执行<code>mvn -version</code>，出现如下结果，则说明安装成功!</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627193217830.png"/>



<h2 id="阿里云镜像"><a href="#阿里云镜像" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h2><p>在国内访问Maven的中央仓库的速度是在太慢，甚至无法连接，此时就需要配置一个镜像。</p>
<p>国内可以使用阿里云的镜像，打开conf目录下的settings.xml文件，进行如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p>同样是在settings.xml文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\environment\maven\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="IDEA中Maven的配置"><a href="#IDEA中Maven的配置" class="headerlink" title="IDEA中Maven的配置"></a>IDEA中Maven的配置</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627200856012.png"/>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627201220554.png"/>



<h3 id="IDEA中Maven的常见操作"><a href="#IDEA中Maven的常见操作" class="headerlink" title="IDEA中Maven的常见操作"></a>IDEA中Maven的常见操作</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200627205338475.png" align="left"/>

<h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><p><strong>资源导出问题</strong></p>
<p>在<code>pom.xml</code>中添加下述内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    .......</span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>maven依赖如何查找？</strong></p>
<p>可以去<a href="https://mvnrepository.com/查找想要的依赖" target="_blank" rel="noopener">https://mvnrepository.com/查找想要的依赖</a></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet详解</title>
    <url>/2020/06/27/Servlet%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Servlet详解"><a href="#Servlet详解" class="headerlink" title="Servlet详解"></a>Servlet详解</h1><h3 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h3><ul>
<li>Servlet是Java EE规范之一</li>
<li>Servlet是JavaWeb的三大组件之一</li>
<li>Servlet是运行在服务器上的Java程序，可以接受客户端发送过来的请求，并响应数据给客户端</li>
</ul>
<h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><p>1、构建一个普通Maven项目，删除src目录，之后就在这个工程下新建Module，而这个工程就是Maven主工程</p>
<p>2、使用模板创建一个Module，继承这个主工程。关于Maven父子工程的关系</p>
<p>父项目中会有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;Servlet&lt;&#x2F;module&gt;</span><br><span class="line">&lt;&#x2F;modules&gt;</span><br></pre></td></tr></table></figure>

<p>子项目中会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaWeb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的jar包，子项目都可以使用（可以理解为继承）</p>
<p>3、Maven环境优化</p>
<ol>
<li>修改web.xml和Tomcat的版本一致（可以在webapps的examples中找到对应的web.xml）</li>
<li>将maven的结构搭建完整</li>
</ol>
<p>4、编写一个Servlet程序</p>
<ol>
<li>编写一个HelloServlet类</li>
<li>实现Servlet接口，直接继承HttpServlet类</li>
</ol>
<p><code>HelloServlet.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloServlet被访问了!"</span>);</span><br><span class="line">        <span class="comment">//解决中文乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf8"</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">"HelloServlet被访问了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、在<code>web.xml</code>中编写Servlet的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zxw.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、配置Tomcat</p>
<p>7、启动测试，在浏览器输入<a href="http://localhost:8080/servlet/hello" target="_blank" rel="noopener">http://localhost:8080/servlet/hello</a></p>
<h3 id="Servlet的继承体系"><a href="#Servlet的继承体系" class="headerlink" title="Servlet的继承体系"></a>Servlet的继承体系</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200628091939027.png" align="left"/>

<h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>Servlet是由Web服务器调用，Web服务器在收到浏览器请求之后</p>
<p>1、浏览器访问Web容器，Web容器根据<code>web.xml</code>中的映射找到对应的Servlet类</p>
<p>2、如果该Servlet类是第一次被访问</p>
<ul>
<li>如果<code>web.xml</code>中配置了load-on-startup，则会在服务器启动时就加载Servlet类，否则会在第一次访问时加载</li>
</ul>
<p>3、每次访问该Servlet都会调用其service方法</p>
<p>4、当Web容器关闭时，会调用Servlet的destroy方法</p>
<h2 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h2><h3 id="ServletConfig是什么"><a href="#ServletConfig是什么" class="headerlink" title="ServletConfig是什么"></a>ServletConfig是什么</h3><ul>
<li>ServletConfig就是Servlet的配置信息的类</li>
<li>Servlet和ServletConfig类的对象都是由Web容器负责创建，供开发人员使用</li>
<li>ServletConfig会在Servlet创建时创建</li>
</ul>
<h3 id="ServletConfig的作用"><a href="#ServletConfig的作用" class="headerlink" title="ServletConfig的作用"></a>ServletConfig的作用</h3><ol>
<li>获取Servlet的别名，即<code>web.xml</code>文件中配置的<code>servlet-name</code>标签中的内容</li>
<li>获取servlet配置中的<code>init-param</code>标签的内容</li>
<li>获取ServletContext对象</li>
</ol>
<p><code>web.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet-name标签给Servlet程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet-class标签是Servlet程序的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zxw.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 参数值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>HelloServlet.java</code>中演示ServletConfig的三种用途</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取servlet程序的别名servlet-name的值</span></span><br><span class="line">    System.out.println(servletConfig.getServletName());</span><br><span class="line">    <span class="comment">//2.获取init-param</span></span><br><span class="line">    String username = servletConfig.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="comment">//3.获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = servletConfig.getServletContext();</span><br><span class="line">    System.out.println(servletContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><font color="red">注意点：</font></p>
<p>在使用继承HttpServlet的方式时，需要调用父类的<code>init(ServletConfig)</code>方法</p>
<h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><h3 id="ServletContext是什么"><a href="#ServletContext是什么" class="headerlink" title="ServletContext是什么"></a>ServletContext是什么</h3><ul>
<li>ServletContext是一个接口，它表示Servlet上下文对象</li>
<li>一个Web工程只有一个ServletContext对象</li>
<li>ServletContext是一个域对象，作用域是整个Web工程</li>
<li>ServletContext在Web工程启动时创建，在Web工程停止时销毁</li>
</ul>
<p><strong>什么是域对象？</strong></p>
<p>域对象和Java中的Map有些类似</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">存数据</th>
<th align="center">取数据</th>
<th align="center">删除数据</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Map</td>
<td align="center">put()</td>
<td align="center">get()</td>
<td align="center">remove()</td>
</tr>
<tr>
<td align="center">域对象</td>
<td align="center">setAttribute()</td>
<td align="center">getAttribute()</td>
<td align="center">removeAttribute()</td>
</tr>
</tbody></table>
<h3 id="ServletContext的作用"><a href="#ServletContext的作用" class="headerlink" title="ServletContext的作用"></a>ServletContext的作用</h3><ol>
<li>获取<code>web.xml</code>中配置的上下文参数<code>context-param</code></li>
<li>获取当前的工程路径，格式<code>/工程路径</code></li>
<li>获取工程部署后在服务器硬盘上的绝对路径</li>
<li>作为域对象存取数据</li>
</ol>
<p>ServletContext代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line">    <span class="comment">//1. 获取web.xml中配置的上下文参数context-param</span></span><br><span class="line">    String password = servletContext.getInitParameter(<span class="string">"password"</span>);</span><br><span class="line">    <span class="comment">//2. 获取当前的工程路径，格式：/工程路径</span></span><br><span class="line">    System.out.println(<span class="string">"当前工程路径："</span> + servletContext.getContextPath());</span><br><span class="line">    <span class="comment">//3. 获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">    System.out.println(<span class="string">"工程部署的路径为："</span> + servletContext.getRealPath(<span class="string">"/"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 像Map一样存取数据</span></span><br><span class="line">    servletContext.setAttribute(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    String name = (String) servletContext.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    servletContext.removeAttribute(<span class="string">"name"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h2><p>不难理解，HttpServletRequest和HttpServletResponse是对HTTP中请求和响应的封装。web服务器在接收客户端的HTTP请求之后，会创建一个代表请求的HttpServletRequest对象和一个代表响应的HttpServletResponse对象。</p>
<h3 id="常用属性和方法"><a href="#常用属性和方法" class="headerlink" title="常用属性和方法"></a>常用属性和方法</h3><h4 id="向浏览器发送数据的方法"><a href="#向浏览器发送数据的方法" class="headerlink" title="向浏览器发送数据的方法"></a>向浏览器发送数据的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这个两个流不能同时使用，否则会报错！</p>
<h4 id="向浏览器发送响应头的方法"><a href="#向浏览器发送响应头的方法" class="headerlink" title="向浏览器发送响应头的方法"></a>向浏览器发送响应头的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置响应编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String charset)</span></span>;</span><br><span class="line"><span class="comment">//设置响应体的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> len)</span></span>;</span><br><span class="line"><span class="comment">//设置响应内容的类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String type)</span></span>;</span><br><span class="line"><span class="comment">//set表示设置（无论是否存在），add在存在时保持原有值不变，没有则添加</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String name, <span class="keyword">long</span> date)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String name, <span class="keyword">long</span> date)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String name, String value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String name, String value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String name, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String name, <span class="keyword">int</span> value)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="响应的状态码"><a href="#响应的状态码" class="headerlink" title="响应的状态码"></a>响应的状态码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

<p>响应状态码的含义详见<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md#三http-状态码" target="_blank" rel="noopener">HTTP</a>相关内容</p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p><strong>步骤</strong>：</p>
<ol>
<li>获取要下载文件的路径</li>
<li>获取下载的文件名</li>
<li>让浏览器能够支持我们想要下载的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端</li>
</ol>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取要下载文件的路径</span></span><br><span class="line">        String realPath = <span class="string">"D:\\Java EE workspace\\JavaWeb\\response\\target\\classes\\张三.png"</span>;</span><br><span class="line">        System.out.println(<span class="string">"下载文件的路径:"</span> + realPath);</span><br><span class="line">        <span class="comment">//2. 获取下载的文件名</span></span><br><span class="line">        String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"文件名为:"</span> + fileName);</span><br><span class="line">        <span class="comment">//3. 让浏览器能够支持我们想要下载的东西(Content-disposition)，让中文文件名URL编码</span></span><br><span class="line">        resp.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">//4. 获取下载文件的输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//5. 创建缓冲区</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//6. 获取OutputStream对象</span></span><br><span class="line">        ServletOutputStream os = resp.getOutputStream();</span><br><span class="line">        <span class="comment">//7. 将FileOutputStream流写到buffer缓冲区</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//8. 使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class="line">            os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流对象</span></span><br><span class="line">        os.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><p><strong>方式一</strong>(不推荐)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置响应状态码为302，表示重定向</span></span><br><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">//设置响应头，说明告诉客户端新地址</span></span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>（推荐）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="响应的乱码解决"><a href="#响应的乱码解决" class="headerlink" title="响应的乱码解决"></a>响应的乱码解决</h3><p>上面的代码如果回传的是包含中文的字符串就会出现乱码，下面是解决的方式：</p>
<p><strong>方式一（不推荐）</strong></p>
<ol>
<li>设置response的字符集为UTF-8</li>
<li>通过响应头设置浏览器使用UTF-8</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//解决响应中文乱码问题</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="comment">//通过响应头设置浏览器也是用UTF-8字符集</span></span><br><span class="line">    response.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">//获取字节输出流</span></span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//回传字符串</span></span><br><span class="line">    out.write(<span class="string">"response响应内容"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>（推荐）</p>
<p>使用Response对象的<code>setContentType()</code>方法设置字符集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        //解决响应中文乱码问题</span></span><br><span class="line"><span class="comment">//        response.setCharacterEncoding("UTF-8");</span></span><br><span class="line"><span class="comment">//        //通过响应头设置浏览器也是用UTF-8字符集</span></span><br><span class="line"><span class="comment">//        response.setHeader("Content-Type", "text/html;charset=utf-8");</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html; charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">//获取字节输出流</span></span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//回传字符串</span></span><br><span class="line">    out.write(<span class="string">"response响应内容"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="HttpServletResquest类"><a href="#HttpServletResquest类" class="headerlink" title="HttpServletResquest类"></a>HttpServletResquest类</h2><h3 id="HttpServletRequest类是什么"><a href="#HttpServletRequest类是什么" class="headerlink" title="HttpServletRequest类是什么"></a>HttpServletRequest类是什么</h3><p>HttpServletRequest将浏览器发送过来的请求信息进行了封装，然后传递到service方法中供Servlet使用</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul>
<li><code>getRequestURI()</code>：获取请求的资源路径</li>
<li><code>getRequestURL()</code>：获取请求的统一资源定位符（绝对路径）</li>
<li><code>getRemoteHost()</code>：获取客户端的ip地址</li>
<li><code>getHeader()</code>：获取请求头</li>
<li><code>getParameter()</code>：获取请求的参数</li>
<li><code>getParamterValues()</code>：获取请求的参数（多个值的时候使用）</li>
<li><code>getMethod()</code>：获取请求的方式GET或POST</li>
<li><code>setAttribute(key, value)</code>：设置域数据</li>
<li><code>getAttribute(key)</code>：得到域数据</li>
<li><code>getRequestDispatcher()</code>：获取请求转发对象</li>
</ul>
<p><strong>常用API示例代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//处理POST请求的中文乱码问题</span></span><br><span class="line">    request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="comment">//HttpServletRequest的常用方法</span></span><br><span class="line">    <span class="comment">//getRequestURI：获取请求的同一资源路径</span></span><br><span class="line">    System.out.println(request.getRequestURI());</span><br><span class="line">    <span class="comment">//getRequestURL()：获取请求的统一资源定位符</span></span><br><span class="line">    System.out.println(request.getRequestURL());</span><br><span class="line">    <span class="comment">//getRemoteHost()：获取IP地址</span></span><br><span class="line">    System.out.println(request.getRemoteHost());</span><br><span class="line">    <span class="comment">//获取请求头</span></span><br><span class="line">    System.out.println(request.getHeader(<span class="string">"User-Agent"</span>));</span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(Arrays.toString(request.getParameterValues(<span class="string">"hobby"</span>)));</span><br><span class="line">    <span class="comment">//获取请求方式</span></span><br><span class="line">    System.out.println(request.getMethod());</span><br><span class="line">    <span class="comment">//设置域数据</span></span><br><span class="line">    request.setAttribute(<span class="string">"studentName"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    <span class="comment">//得到域数据</span></span><br><span class="line">    System.out.println(request.getAttribute(<span class="string">"studentName"</span>));</span><br><span class="line">    <span class="comment">//得到请求转发对象</span></span><br><span class="line">    RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">"hello"</span>);</span><br><span class="line">    dispatcher.forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="POST请求的中文乱码问题处理"><a href="#POST请求的中文乱码问题处理" class="headerlink" title="POST请求的中文乱码问题处理"></a>POST请求的中文乱码问题处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理POST请求的中文乱码问题</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>



<h3 id="GET请求的中文乱码问题处理"><a href="#GET请求的中文乱码问题处理" class="headerlink" title="GET请求的中文乱码问题处理"></a>GET请求的中文乱码问题处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get请求的中文乱码问题处理</span></span><br><span class="line">Map&lt;String, String[]&gt; parameters = request.getParameterMap();</span><br><span class="line">parameters.forEach(<span class="keyword">new</span> BiConsumer&lt;String, String[]&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s, String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对strings进行处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                strings[i] = <span class="keyword">new</span> String(strings[i].getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Tomcat 8.0及以上版本中GET请求已经不会出现中文乱码的问题</p>
<h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求转发，转发发生在服务器内部，所以只有一次请求</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br></pre></td></tr></table></figure>

<p><strong>请求转发的特点</strong></p>
<ol>
<li>浏览器的地址栏不会发生变化</li>
<li>由于转发是发生在服务器的内部，所以只需要一次请求</li>
<li>可以共享request域中的数据</li>
<li>可以转发到WEB-INF目录下的资源</li>
<li>不能转发到工程外的内容</li>
</ol>
<h3 id="base标签的作用"><a href="#base标签的作用" class="headerlink" title="base标签的作用"></a>base标签的作用</h3><p>base标签可以设置当前页面中的所有相对路径是相对哪一个路径进行跳转的</p>
<h3 id="web中-的不同含义"><a href="#web中-的不同含义" class="headerlink" title="web中/的不同含义"></a>web中<code>/</code>的不同含义</h3><ul>
<li><p><code>/</code>被浏览器解析，得到的地址是<code>http://ip:port/</code></p>
</li>
<li><p><code>/</code>被服务器解析，得到的地址是<code>http://ip:port/工程路径/</code></p>
</li>
</ul>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><strong>请求转发和请求重定向的区别</strong></p>
<p><strong>相同点</strong>：都可以实现页面的跳转</p>
<p><strong>不同点</strong>：</p>
<ol>
<li>请求转发，浏览器地址栏不会发生改变；请求重定向，浏览器地址栏会发生改变</li>
<li>请求转发只有一次请求，请求重定向则有两次请求</li>
<li>请求转发可以转发到WEB-INF目录下的资源，但是不能转发到工程外的资源；请求重定向不能转发到WEB-INF目录下的资源，但是可以转发到工程外部的资源</li>
</ol>
<h2 id="抽取BaseServlet"><a href="#抽取BaseServlet" class="headerlink" title="抽取BaseServlet"></a>抽取BaseServlet</h2><p>通过继承原生的HttpServlet每个Servlet只能实现一个功能，如果功能比较多就会出现很多Servlet，所以需要对HttpServlet进一步处理，使得我们可以在一个Servlet中处理多个业务</p>
<p><code>BaseServlet</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GET = <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POST = <span class="string">"POST"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理POST请求的中文乱码问题</span></span><br><span class="line">        <span class="keyword">if</span> (POST.equals(req.getMethod())) &#123;</span><br><span class="line">            req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解决响应乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf8"</span>);</span><br><span class="line">        <span class="comment">//获取传入的action参数</span></span><br><span class="line">        String action = req.getParameter(<span class="string">"action"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据传入的参数获取对应的Method对象</span></span><br><span class="line">            Method method = <span class="keyword">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest<span class="class">.<span class="keyword">class</span>, <span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            <span class="comment">//调用业务方法</span></span><br><span class="line">            method.invoke(<span class="keyword">this</span>, req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很显然这里的BaseServlet还不是很完善，如果有其它想要添加的Servlet的通用功能，可以通过修改BaseServlet来实现。</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>DQL语言学习</title>
    <url>/2020/06/20/DQL%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="DQL语言学习"><a href="#DQL语言学习" class="headerlink" title="DQL语言学习"></a>DQL语言学习</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>导入SQL脚本，创建用于练习的数据库<code>myemployees</code></p>
<p><code>myemployees.sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQLyog Ultimate v10.00 Beta1</span></span><br><span class="line"><span class="comment">MySQL - 5.5.15 : Database - myemployees</span></span><br><span class="line"><span class="comment">*********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=''*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`myemployees`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET gb2312 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`myemployees`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `departments` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`departments`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`departments`</span> (</span><br><span class="line">  <span class="string">`department_id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`department_name`</span> <span class="built_in">varchar</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`manager_id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`location_id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`department_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`loc_id_fk`</span> (<span class="string">`location_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`loc_id_fk`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`location_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`locations`</span> (<span class="string">`location_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">271</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `departments` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`departments`</span>(<span class="string">`department_id`</span>,<span class="string">`department_name`</span>,<span class="string">`manager_id`</span>,<span class="string">`location_id`</span>) <span class="keyword">values</span> (<span class="number">10</span>,<span class="string">'Adm'</span>,<span class="number">200</span>,<span class="number">1700</span>),(<span class="number">20</span>,<span class="string">'Mar'</span>,<span class="number">201</span>,<span class="number">1800</span>),(<span class="number">30</span>,<span class="string">'Pur'</span>,<span class="number">114</span>,<span class="number">1700</span>),(<span class="number">40</span>,<span class="string">'Hum'</span>,<span class="number">203</span>,<span class="number">2400</span>),(<span class="number">50</span>,<span class="string">'Shi'</span>,<span class="number">121</span>,<span class="number">1500</span>),(<span class="number">60</span>,<span class="string">'IT'</span>,<span class="number">103</span>,<span class="number">1400</span>),(<span class="number">70</span>,<span class="string">'Pub'</span>,<span class="number">204</span>,<span class="number">2700</span>),(<span class="number">80</span>,<span class="string">'Sal'</span>,<span class="number">145</span>,<span class="number">2500</span>),(<span class="number">90</span>,<span class="string">'Exe'</span>,<span class="number">100</span>,<span class="number">1700</span>),(<span class="number">100</span>,<span class="string">'Fin'</span>,<span class="number">108</span>,<span class="number">1700</span>),(<span class="number">110</span>,<span class="string">'Acc'</span>,<span class="number">205</span>,<span class="number">1700</span>),(<span class="number">120</span>,<span class="string">'Tre'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">130</span>,<span class="string">'Cor'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">140</span>,<span class="string">'Con'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">150</span>,<span class="string">'Sha'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">160</span>,<span class="string">'Ben'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">170</span>,<span class="string">'Man'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">180</span>,<span class="string">'Con'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">190</span>,<span class="string">'Con'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">200</span>,<span class="string">'Ope'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">210</span>,<span class="string">'IT '</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">220</span>,<span class="string">'NOC'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">230</span>,<span class="string">'IT '</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">240</span>,<span class="string">'Gov'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">250</span>,<span class="string">'Ret'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">260</span>,<span class="string">'Rec'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>),(<span class="number">270</span>,<span class="string">'Pay'</span>,<span class="literal">NULL</span>,<span class="number">1700</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `employees` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employees`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line">  <span class="string">`employee_id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone_number`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`job_id`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salary`</span> <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`commission_pct`</span> <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`manager_id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`department_id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`hiredate`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`employee_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`dept_id_fk`</span> (<span class="string">`department_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`job_id_fk`</span> (<span class="string">`job_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`dept_id_fk`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`department_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`departments`</span> (<span class="string">`department_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`job_id_fk`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`job_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`jobs`</span> (<span class="string">`job_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">207</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `employees` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`employees`</span>(<span class="string">`employee_id`</span>,<span class="string">`first_name`</span>,<span class="string">`last_name`</span>,<span class="string">`email`</span>,<span class="string">`phone_number`</span>,<span class="string">`job_id`</span>,<span class="string">`salary`</span>,<span class="string">`commission_pct`</span>,<span class="string">`manager_id`</span>,<span class="string">`department_id`</span>,<span class="string">`hiredate`</span>) <span class="keyword">values</span> (<span class="number">100</span>,<span class="string">'Steven'</span>,<span class="string">'K_ing'</span>,<span class="string">'SKING'</span>,<span class="string">'515.123.4567'</span>,<span class="string">'AD_PRES'</span>,<span class="number">24000.00</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">90</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">101</span>,<span class="string">'Neena'</span>,<span class="string">'Kochhar'</span>,<span class="string">'NKOCHHAR'</span>,<span class="string">'515.123.4568'</span>,<span class="string">'AD_VP'</span>,<span class="number">17000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">102</span>,<span class="string">'Lex'</span>,<span class="string">'De Haan'</span>,<span class="string">'LDEHAAN'</span>,<span class="string">'515.123.4569'</span>,<span class="string">'AD_VP'</span>,<span class="number">17000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">103</span>,<span class="string">'Alexander'</span>,<span class="string">'Hunold'</span>,<span class="string">'AHUNOLD'</span>,<span class="string">'590.423.4567'</span>,<span class="string">'IT_PROG'</span>,<span class="number">9000.00</span>,<span class="literal">NULL</span>,<span class="number">102</span>,<span class="number">60</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">104</span>,<span class="string">'Bruce'</span>,<span class="string">'Ernst'</span>,<span class="string">'BERNST'</span>,<span class="string">'590.423.4568'</span>,<span class="string">'IT_PROG'</span>,<span class="number">6000.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1992-04-03 00:00:00'</span>),(<span class="number">105</span>,<span class="string">'David'</span>,<span class="string">'Austin'</span>,<span class="string">'DAUSTIN'</span>,<span class="string">'590.423.4569'</span>,<span class="string">'IT_PROG'</span>,<span class="number">4800.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">106</span>,<span class="string">'Valli'</span>,<span class="string">'Pataballa'</span>,<span class="string">'VPATABAL'</span>,<span class="string">'590.423.4560'</span>,<span class="string">'IT_PROG'</span>,<span class="number">4800.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">107</span>,<span class="string">'Diana'</span>,<span class="string">'Lorentz'</span>,<span class="string">'DLORENTZ'</span>,<span class="string">'590.423.5567'</span>,<span class="string">'IT_PROG'</span>,<span class="number">4200.00</span>,<span class="literal">NULL</span>,<span class="number">103</span>,<span class="number">60</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">108</span>,<span class="string">'Nancy'</span>,<span class="string">'Greenberg'</span>,<span class="string">'NGREENBE'</span>,<span class="string">'515.124.4569'</span>,<span class="string">'FI_MGR'</span>,<span class="number">12000.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">109</span>,<span class="string">'Daniel'</span>,<span class="string">'Faviet'</span>,<span class="string">'DFAVIET'</span>,<span class="string">'515.124.4169'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">9000.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'1998-03-03 00:00:00'</span>),(<span class="number">110</span>,<span class="string">'John'</span>,<span class="string">'Chen'</span>,<span class="string">'JCHEN'</span>,<span class="string">'515.124.4269'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">8200.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">111</span>,<span class="string">'Ismael'</span>,<span class="string">'Sciarra'</span>,<span class="string">'ISCIARRA'</span>,<span class="string">'515.124.4369'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">7700.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">112</span>,<span class="string">'Jose Manuel'</span>,<span class="string">'Urman'</span>,<span class="string">'JMURMAN'</span>,<span class="string">'515.124.4469'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">7800.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">113</span>,<span class="string">'Luis'</span>,<span class="string">'Popp'</span>,<span class="string">'LPOPP'</span>,<span class="string">'515.124.4567'</span>,<span class="string">'FI_ACCOUNT'</span>,<span class="number">6900.00</span>,<span class="literal">NULL</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">114</span>,<span class="string">'Den'</span>,<span class="string">'Raphaely'</span>,<span class="string">'DRAPHEAL'</span>,<span class="string">'515.127.4561'</span>,<span class="string">'PU_MAN'</span>,<span class="number">11000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">115</span>,<span class="string">'Alexander'</span>,<span class="string">'Khoo'</span>,<span class="string">'AKHOO'</span>,<span class="string">'515.127.4562'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">116</span>,<span class="string">'Shelli'</span>,<span class="string">'Baida'</span>,<span class="string">'SBAIDA'</span>,<span class="string">'515.127.4563'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2900.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">117</span>,<span class="string">'Sigal'</span>,<span class="string">'Tobias'</span>,<span class="string">'STOBIAS'</span>,<span class="string">'515.127.4564'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">118</span>,<span class="string">'Guy'</span>,<span class="string">'Himuro'</span>,<span class="string">'GHIMURO'</span>,<span class="string">'515.127.4565'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">119</span>,<span class="string">'Karen'</span>,<span class="string">'Colmenares'</span>,<span class="string">'KCOLMENA'</span>,<span class="string">'515.127.4566'</span>,<span class="string">'PU_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">114</span>,<span class="number">30</span>,<span class="string">'2000-09-09 00:00:00'</span>),(<span class="number">120</span>,<span class="string">'Matthew'</span>,<span class="string">'Weiss'</span>,<span class="string">'MWEISS'</span>,<span class="string">'650.123.1234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">8000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">121</span>,<span class="string">'Adam'</span>,<span class="string">'Fripp'</span>,<span class="string">'AFRIPP'</span>,<span class="string">'650.123.2234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">8200.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">122</span>,<span class="string">'Payam'</span>,<span class="string">'Kaufling'</span>,<span class="string">'PKAUFLIN'</span>,<span class="string">'650.123.3234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">7900.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">123</span>,<span class="string">'Shanta'</span>,<span class="string">'Vollman'</span>,<span class="string">'SVOLLMAN'</span>,<span class="string">'650.123.4234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">6500.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">124</span>,<span class="string">'Kevin'</span>,<span class="string">'Mourgos'</span>,<span class="string">'KMOURGOS'</span>,<span class="string">'650.123.5234'</span>,<span class="string">'ST_MAN'</span>,<span class="number">5800.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">125</span>,<span class="string">'Julia'</span>,<span class="string">'Nayer'</span>,<span class="string">'JNAYER'</span>,<span class="string">'650.124.1214'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">126</span>,<span class="string">'Irene'</span>,<span class="string">'Mikkilineni'</span>,<span class="string">'IMIKKILI'</span>,<span class="string">'650.124.1224'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2700.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">127</span>,<span class="string">'James'</span>,<span class="string">'Landry'</span>,<span class="string">'JLANDRY'</span>,<span class="string">'650.124.1334'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2400.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">128</span>,<span class="string">'Steven'</span>,<span class="string">'Markle'</span>,<span class="string">'SMARKLE'</span>,<span class="string">'650.124.1434'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2200.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">129</span>,<span class="string">'Laura'</span>,<span class="string">'Bissot'</span>,<span class="string">'LBISSOT'</span>,<span class="string">'650.124.5234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3300.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">130</span>,<span class="string">'Mozhe'</span>,<span class="string">'Atkinson'</span>,<span class="string">'MATKINSO'</span>,<span class="string">'650.124.6234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">131</span>,<span class="string">'James'</span>,<span class="string">'Marlow'</span>,<span class="string">'JAMRLOW'</span>,<span class="string">'650.124.7234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">132</span>,<span class="string">'TJ'</span>,<span class="string">'Olson'</span>,<span class="string">'TJOLSON'</span>,<span class="string">'650.124.8234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2100.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">133</span>,<span class="string">'Jason'</span>,<span class="string">'Mallin'</span>,<span class="string">'JMALLIN'</span>,<span class="string">'650.127.1934'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3300.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2004-02-06 00:00:00'</span>),(<span class="number">134</span>,<span class="string">'Michael'</span>,<span class="string">'Rogers'</span>,<span class="string">'MROGERS'</span>,<span class="string">'650.127.1834'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2900.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">135</span>,<span class="string">'Ki'</span>,<span class="string">'Gee'</span>,<span class="string">'KGEE'</span>,<span class="string">'650.127.1734'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2400.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">136</span>,<span class="string">'Hazel'</span>,<span class="string">'Philtanker'</span>,<span class="string">'HPHILTAN'</span>,<span class="string">'650.127.1634'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2200.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">137</span>,<span class="string">'Renske'</span>,<span class="string">'Ladwig'</span>,<span class="string">'RLADWIG'</span>,<span class="string">'650.121.1234'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3600.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">138</span>,<span class="string">'Stephen'</span>,<span class="string">'Stiles'</span>,<span class="string">'SSTILES'</span>,<span class="string">'650.121.2034'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">139</span>,<span class="string">'John'</span>,<span class="string">'Seo'</span>,<span class="string">'JSEO'</span>,<span class="string">'650.121.2019'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2700.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">140</span>,<span class="string">'Joshua'</span>,<span class="string">'Patel'</span>,<span class="string">'JPATEL'</span>,<span class="string">'650.121.1834'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">141</span>,<span class="string">'Trenna'</span>,<span class="string">'Rajs'</span>,<span class="string">'TRAJS'</span>,<span class="string">'650.121.8009'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3500.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">142</span>,<span class="string">'Curtis'</span>,<span class="string">'Davies'</span>,<span class="string">'CDAVIES'</span>,<span class="string">'650.121.2994'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">143</span>,<span class="string">'Randall'</span>,<span class="string">'Matos'</span>,<span class="string">'RMATOS'</span>,<span class="string">'650.121.2874'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">144</span>,<span class="string">'Peter'</span>,<span class="string">'Vargas'</span>,<span class="string">'PVARGAS'</span>,<span class="string">'650.121.2004'</span>,<span class="string">'ST_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">145</span>,<span class="string">'John'</span>,<span class="string">'Russell'</span>,<span class="string">'JRUSSEL'</span>,<span class="string">'011.44.1344.429268'</span>,<span class="string">'SA_MAN'</span>,<span class="number">14000.00</span>,<span class="number">0.40</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">146</span>,<span class="string">'Karen'</span>,<span class="string">'Partners'</span>,<span class="string">'KPARTNER'</span>,<span class="string">'011.44.1344.467268'</span>,<span class="string">'SA_MAN'</span>,<span class="number">13500.00</span>,<span class="number">0.30</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">147</span>,<span class="string">'Alberto'</span>,<span class="string">'Errazuriz'</span>,<span class="string">'AERRAZUR'</span>,<span class="string">'011.44.1344.429278'</span>,<span class="string">'SA_MAN'</span>,<span class="number">12000.00</span>,<span class="number">0.30</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">148</span>,<span class="string">'Gerald'</span>,<span class="string">'Cambrault'</span>,<span class="string">'GCAMBRAU'</span>,<span class="string">'011.44.1344.619268'</span>,<span class="string">'SA_MAN'</span>,<span class="number">11000.00</span>,<span class="number">0.30</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">149</span>,<span class="string">'Eleni'</span>,<span class="string">'Zlotkey'</span>,<span class="string">'EZLOTKEY'</span>,<span class="string">'011.44.1344.429018'</span>,<span class="string">'SA_MAN'</span>,<span class="number">10500.00</span>,<span class="number">0.20</span>,<span class="number">100</span>,<span class="number">80</span>,<span class="string">'2002-12-23 00:00:00'</span>),(<span class="number">150</span>,<span class="string">'Peter'</span>,<span class="string">'Tucker'</span>,<span class="string">'PTUCKER'</span>,<span class="string">'011.44.1344.129268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10000.00</span>,<span class="number">0.30</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">151</span>,<span class="string">'David'</span>,<span class="string">'Bernstein'</span>,<span class="string">'DBERNSTE'</span>,<span class="string">'011.44.1344.345268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9500.00</span>,<span class="number">0.25</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">152</span>,<span class="string">'Peter'</span>,<span class="string">'Hall'</span>,<span class="string">'PHALL'</span>,<span class="string">'011.44.1344.478968'</span>,<span class="string">'SA_REP'</span>,<span class="number">9000.00</span>,<span class="number">0.25</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">153</span>,<span class="string">'Christopher'</span>,<span class="string">'Olsen'</span>,<span class="string">'COLSEN'</span>,<span class="string">'011.44.1344.498718'</span>,<span class="string">'SA_REP'</span>,<span class="number">8000.00</span>,<span class="number">0.20</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">154</span>,<span class="string">'Nanette'</span>,<span class="string">'Cambrault'</span>,<span class="string">'NCAMBRAU'</span>,<span class="string">'011.44.1344.987668'</span>,<span class="string">'SA_REP'</span>,<span class="number">7500.00</span>,<span class="number">0.20</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">155</span>,<span class="string">'Oliver'</span>,<span class="string">'Tuvault'</span>,<span class="string">'OTUVAULT'</span>,<span class="string">'011.44.1344.486508'</span>,<span class="string">'SA_REP'</span>,<span class="number">7000.00</span>,<span class="number">0.15</span>,<span class="number">145</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">156</span>,<span class="string">'Janette'</span>,<span class="string">'K_ing'</span>,<span class="string">'JKING'</span>,<span class="string">'011.44.1345.429268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10000.00</span>,<span class="number">0.35</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">157</span>,<span class="string">'Patrick'</span>,<span class="string">'Sully'</span>,<span class="string">'PSULLY'</span>,<span class="string">'011.44.1345.929268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9500.00</span>,<span class="number">0.35</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">158</span>,<span class="string">'Allan'</span>,<span class="string">'McEwen'</span>,<span class="string">'AMCEWEN'</span>,<span class="string">'011.44.1345.829268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9000.00</span>,<span class="number">0.35</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">159</span>,<span class="string">'Lindsey'</span>,<span class="string">'Smith'</span>,<span class="string">'LSMITH'</span>,<span class="string">'011.44.1345.729268'</span>,<span class="string">'SA_REP'</span>,<span class="number">8000.00</span>,<span class="number">0.30</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">160</span>,<span class="string">'Louise'</span>,<span class="string">'Doran'</span>,<span class="string">'LDORAN'</span>,<span class="string">'011.44.1345.629268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7500.00</span>,<span class="number">0.30</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">161</span>,<span class="string">'Sarath'</span>,<span class="string">'Sewall'</span>,<span class="string">'SSEWALL'</span>,<span class="string">'011.44.1345.529268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7000.00</span>,<span class="number">0.25</span>,<span class="number">146</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">162</span>,<span class="string">'Clara'</span>,<span class="string">'Vishney'</span>,<span class="string">'CVISHNEY'</span>,<span class="string">'011.44.1346.129268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10500.00</span>,<span class="number">0.25</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">163</span>,<span class="string">'Danielle'</span>,<span class="string">'Greene'</span>,<span class="string">'DGREENE'</span>,<span class="string">'011.44.1346.229268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9500.00</span>,<span class="number">0.15</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">164</span>,<span class="string">'Mattea'</span>,<span class="string">'Marvins'</span>,<span class="string">'MMARVINS'</span>,<span class="string">'011.44.1346.329268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7200.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">165</span>,<span class="string">'David'</span>,<span class="string">'Lee'</span>,<span class="string">'DLEE'</span>,<span class="string">'011.44.1346.529268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6800.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">166</span>,<span class="string">'Sundar'</span>,<span class="string">'Ande'</span>,<span class="string">'SANDE'</span>,<span class="string">'011.44.1346.629268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6400.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">167</span>,<span class="string">'Amit'</span>,<span class="string">'Banda'</span>,<span class="string">'ABANDA'</span>,<span class="string">'011.44.1346.729268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6200.00</span>,<span class="number">0.10</span>,<span class="number">147</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">168</span>,<span class="string">'Lisa'</span>,<span class="string">'Ozer'</span>,<span class="string">'LOZER'</span>,<span class="string">'011.44.1343.929268'</span>,<span class="string">'SA_REP'</span>,<span class="number">11500.00</span>,<span class="number">0.25</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">169</span>,<span class="string">'Harrison'</span>,<span class="string">'Bloom'</span>,<span class="string">'HBLOOM'</span>,<span class="string">'011.44.1343.829268'</span>,<span class="string">'SA_REP'</span>,<span class="number">10000.00</span>,<span class="number">0.20</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">170</span>,<span class="string">'Tayler'</span>,<span class="string">'Fox'</span>,<span class="string">'TFOX'</span>,<span class="string">'011.44.1343.729268'</span>,<span class="string">'SA_REP'</span>,<span class="number">9600.00</span>,<span class="number">0.20</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">171</span>,<span class="string">'William'</span>,<span class="string">'Smith'</span>,<span class="string">'WSMITH'</span>,<span class="string">'011.44.1343.629268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7400.00</span>,<span class="number">0.15</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">172</span>,<span class="string">'Elizabeth'</span>,<span class="string">'Bates'</span>,<span class="string">'EBATES'</span>,<span class="string">'011.44.1343.529268'</span>,<span class="string">'SA_REP'</span>,<span class="number">7300.00</span>,<span class="number">0.15</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">173</span>,<span class="string">'Sundita'</span>,<span class="string">'Kumar'</span>,<span class="string">'SKUMAR'</span>,<span class="string">'011.44.1343.329268'</span>,<span class="string">'SA_REP'</span>,<span class="number">6100.00</span>,<span class="number">0.10</span>,<span class="number">148</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">174</span>,<span class="string">'Ellen'</span>,<span class="string">'Abel'</span>,<span class="string">'EABEL'</span>,<span class="string">'011.44.1644.429267'</span>,<span class="string">'SA_REP'</span>,<span class="number">11000.00</span>,<span class="number">0.30</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">175</span>,<span class="string">'Alyssa'</span>,<span class="string">'Hutton'</span>,<span class="string">'AHUTTON'</span>,<span class="string">'011.44.1644.429266'</span>,<span class="string">'SA_REP'</span>,<span class="number">8800.00</span>,<span class="number">0.25</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">176</span>,<span class="string">'Jonathon'</span>,<span class="string">'Taylor'</span>,<span class="string">'JTAYLOR'</span>,<span class="string">'011.44.1644.429265'</span>,<span class="string">'SA_REP'</span>,<span class="number">8600.00</span>,<span class="number">0.20</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">177</span>,<span class="string">'Jack'</span>,<span class="string">'Livingston'</span>,<span class="string">'JLIVINGS'</span>,<span class="string">'011.44.1644.429264'</span>,<span class="string">'SA_REP'</span>,<span class="number">8400.00</span>,<span class="number">0.20</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">178</span>,<span class="string">'Kimberely'</span>,<span class="string">'Grant'</span>,<span class="string">'KGRANT'</span>,<span class="string">'011.44.1644.429263'</span>,<span class="string">'SA_REP'</span>,<span class="number">7000.00</span>,<span class="number">0.15</span>,<span class="number">149</span>,<span class="literal">NULL</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">179</span>,<span class="string">'Charles'</span>,<span class="string">'Johnson'</span>,<span class="string">'CJOHNSON'</span>,<span class="string">'011.44.1644.429262'</span>,<span class="string">'SA_REP'</span>,<span class="number">6200.00</span>,<span class="number">0.10</span>,<span class="number">149</span>,<span class="number">80</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">180</span>,<span class="string">'Winston'</span>,<span class="string">'Taylor'</span>,<span class="string">'WTAYLOR'</span>,<span class="string">'650.507.9876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">181</span>,<span class="string">'Jean'</span>,<span class="string">'Fleaur'</span>,<span class="string">'JFLEAUR'</span>,<span class="string">'650.507.9877'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">182</span>,<span class="string">'Martha'</span>,<span class="string">'Sullivan'</span>,<span class="string">'MSULLIVA'</span>,<span class="string">'650.507.9878'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">183</span>,<span class="string">'Girard'</span>,<span class="string">'Geoni'</span>,<span class="string">'GGEONI'</span>,<span class="string">'650.507.9879'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">120</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">184</span>,<span class="string">'Nandita'</span>,<span class="string">'Sarchand'</span>,<span class="string">'NSARCHAN'</span>,<span class="string">'650.509.1876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">4200.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">185</span>,<span class="string">'Alexis'</span>,<span class="string">'Bull'</span>,<span class="string">'ABULL'</span>,<span class="string">'650.509.2876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">4100.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">186</span>,<span class="string">'Julia'</span>,<span class="string">'Dellinger'</span>,<span class="string">'JDELLING'</span>,<span class="string">'650.509.3876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3400.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">187</span>,<span class="string">'Anthony'</span>,<span class="string">'Cabrio'</span>,<span class="string">'ACABRIO'</span>,<span class="string">'650.509.4876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3000.00</span>,<span class="literal">NULL</span>,<span class="number">121</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">188</span>,<span class="string">'Kelly'</span>,<span class="string">'Chung'</span>,<span class="string">'KCHUNG'</span>,<span class="string">'650.505.1876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3800.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">189</span>,<span class="string">'Jennifer'</span>,<span class="string">'Dilly'</span>,<span class="string">'JDILLY'</span>,<span class="string">'650.505.2876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3600.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">190</span>,<span class="string">'Timothy'</span>,<span class="string">'Gates'</span>,<span class="string">'TGATES'</span>,<span class="string">'650.505.3876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2900.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">191</span>,<span class="string">'Randall'</span>,<span class="string">'Perkins'</span>,<span class="string">'RPERKINS'</span>,<span class="string">'650.505.4876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2500.00</span>,<span class="literal">NULL</span>,<span class="number">122</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">192</span>,<span class="string">'Sarah'</span>,<span class="string">'Bell'</span>,<span class="string">'SBELL'</span>,<span class="string">'650.501.1876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">4000.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">193</span>,<span class="string">'Britney'</span>,<span class="string">'Everett'</span>,<span class="string">'BEVERETT'</span>,<span class="string">'650.501.2876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3900.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">194</span>,<span class="string">'Samuel'</span>,<span class="string">'McCain'</span>,<span class="string">'SMCCAIN'</span>,<span class="string">'650.501.3876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3200.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">195</span>,<span class="string">'Vance'</span>,<span class="string">'Jones'</span>,<span class="string">'VJONES'</span>,<span class="string">'650.501.4876'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2800.00</span>,<span class="literal">NULL</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">196</span>,<span class="string">'Alana'</span>,<span class="string">'Walsh'</span>,<span class="string">'AWALSH'</span>,<span class="string">'650.507.9811'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3100.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">197</span>,<span class="string">'Kevin'</span>,<span class="string">'Feeney'</span>,<span class="string">'KFEENEY'</span>,<span class="string">'650.507.9822'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">3000.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">198</span>,<span class="string">'Donald'</span>,<span class="string">'OConnell'</span>,<span class="string">'DOCONNEL'</span>,<span class="string">'650.507.9833'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">199</span>,<span class="string">'Douglas'</span>,<span class="string">'Grant'</span>,<span class="string">'DGRANT'</span>,<span class="string">'650.507.9844'</span>,<span class="string">'SH_CLERK'</span>,<span class="number">2600.00</span>,<span class="literal">NULL</span>,<span class="number">124</span>,<span class="number">50</span>,<span class="string">'2014-03-05 00:00:00'</span>),(<span class="number">200</span>,<span class="string">'Jennifer'</span>,<span class="string">'Whalen'</span>,<span class="string">'JWHALEN'</span>,<span class="string">'515.123.4444'</span>,<span class="string">'AD_ASST'</span>,<span class="number">4400.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">10</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">201</span>,<span class="string">'Michael'</span>,<span class="string">'Hartstein'</span>,<span class="string">'MHARTSTE'</span>,<span class="string">'515.123.5555'</span>,<span class="string">'MK_MAN'</span>,<span class="number">13000.00</span>,<span class="literal">NULL</span>,<span class="number">100</span>,<span class="number">20</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">202</span>,<span class="string">'Pat'</span>,<span class="string">'Fay'</span>,<span class="string">'PFAY'</span>,<span class="string">'603.123.6666'</span>,<span class="string">'MK_REP'</span>,<span class="number">6000.00</span>,<span class="literal">NULL</span>,<span class="number">201</span>,<span class="number">20</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">203</span>,<span class="string">'Susan'</span>,<span class="string">'Mavris'</span>,<span class="string">'SMAVRIS'</span>,<span class="string">'515.123.7777'</span>,<span class="string">'HR_REP'</span>,<span class="number">6500.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">40</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">204</span>,<span class="string">'Hermann'</span>,<span class="string">'Baer'</span>,<span class="string">'HBAER'</span>,<span class="string">'515.123.8888'</span>,<span class="string">'PR_REP'</span>,<span class="number">10000.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">70</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">205</span>,<span class="string">'Shelley'</span>,<span class="string">'Higgins'</span>,<span class="string">'SHIGGINS'</span>,<span class="string">'515.123.8080'</span>,<span class="string">'AC_MGR'</span>,<span class="number">12000.00</span>,<span class="literal">NULL</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="string">'2016-03-03 00:00:00'</span>),(<span class="number">206</span>,<span class="string">'William'</span>,<span class="string">'Gietz'</span>,<span class="string">'WGIETZ'</span>,<span class="string">'515.123.8181'</span>,<span class="string">'AC_ACCOUNT'</span>,<span class="number">8300.00</span>,<span class="literal">NULL</span>,<span class="number">205</span>,<span class="number">110</span>,<span class="string">'2016-03-03 00:00:00'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `jobs` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`jobs`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`jobs`</span> (</span><br><span class="line">  <span class="string">`job_id`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`job_title`</span> <span class="built_in">varchar</span>(<span class="number">35</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`min_salary`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`max_salary`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`job_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `jobs` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`jobs`</span>(<span class="string">`job_id`</span>,<span class="string">`job_title`</span>,<span class="string">`min_salary`</span>,<span class="string">`max_salary`</span>) <span class="keyword">values</span> (<span class="string">'AC_ACCOUNT'</span>,<span class="string">'Public Accountant'</span>,<span class="number">4200</span>,<span class="number">9000</span>),(<span class="string">'AC_MGR'</span>,<span class="string">'Accounting Manager'</span>,<span class="number">8200</span>,<span class="number">16000</span>),(<span class="string">'AD_ASST'</span>,<span class="string">'Administration Assistant'</span>,<span class="number">3000</span>,<span class="number">6000</span>),(<span class="string">'AD_PRES'</span>,<span class="string">'President'</span>,<span class="number">20000</span>,<span class="number">40000</span>),(<span class="string">'AD_VP'</span>,<span class="string">'Administration Vice President'</span>,<span class="number">15000</span>,<span class="number">30000</span>),(<span class="string">'FI_ACCOUNT'</span>,<span class="string">'Accountant'</span>,<span class="number">4200</span>,<span class="number">9000</span>),(<span class="string">'FI_MGR'</span>,<span class="string">'Finance Manager'</span>,<span class="number">8200</span>,<span class="number">16000</span>),(<span class="string">'HR_REP'</span>,<span class="string">'Human Resources Representative'</span>,<span class="number">4000</span>,<span class="number">9000</span>),(<span class="string">'IT_PROG'</span>,<span class="string">'Programmer'</span>,<span class="number">4000</span>,<span class="number">10000</span>),(<span class="string">'MK_MAN'</span>,<span class="string">'Marketing Manager'</span>,<span class="number">9000</span>,<span class="number">15000</span>),(<span class="string">'MK_REP'</span>,<span class="string">'Marketing Representative'</span>,<span class="number">4000</span>,<span class="number">9000</span>),(<span class="string">'PR_REP'</span>,<span class="string">'Public Relations Representative'</span>,<span class="number">4500</span>,<span class="number">10500</span>),(<span class="string">'PU_CLERK'</span>,<span class="string">'Purchasing Clerk'</span>,<span class="number">2500</span>,<span class="number">5500</span>),(<span class="string">'PU_MAN'</span>,<span class="string">'Purchasing Manager'</span>,<span class="number">8000</span>,<span class="number">15000</span>),(<span class="string">'SA_MAN'</span>,<span class="string">'Sales Manager'</span>,<span class="number">10000</span>,<span class="number">20000</span>),(<span class="string">'SA_REP'</span>,<span class="string">'Sales Representative'</span>,<span class="number">6000</span>,<span class="number">12000</span>),(<span class="string">'SH_CLERK'</span>,<span class="string">'Shipping Clerk'</span>,<span class="number">2500</span>,<span class="number">5500</span>),(<span class="string">'ST_CLERK'</span>,<span class="string">'Stock Clerk'</span>,<span class="number">2000</span>,<span class="number">5000</span>),(<span class="string">'ST_MAN'</span>,<span class="string">'Stock Manager'</span>,<span class="number">5500</span>,<span class="number">8500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `locations` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`locations`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`locations`</span> (</span><br><span class="line">  <span class="string">`location_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`street_address`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`postal_code`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`city`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`state_province`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`location_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3201</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gb2312;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `locations` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`locations`</span>(<span class="string">`location_id`</span>,<span class="string">`street_address`</span>,<span class="string">`postal_code`</span>,<span class="string">`city`</span>,<span class="string">`state_province`</span>,<span class="string">`country_id`</span>) <span class="keyword">values</span> (<span class="number">1000</span>,<span class="string">'1297 Via Cola di Rie'</span>,<span class="string">'00989'</span>,<span class="string">'Roma'</span>,<span class="literal">NULL</span>,<span class="string">'IT'</span>),(<span class="number">1100</span>,<span class="string">'93091 Calle della Testa'</span>,<span class="string">'10934'</span>,<span class="string">'Venice'</span>,<span class="literal">NULL</span>,<span class="string">'IT'</span>),(<span class="number">1200</span>,<span class="string">'2017 Shinjuku-ku'</span>,<span class="string">'1689'</span>,<span class="string">'Tokyo'</span>,<span class="string">'Tokyo Prefecture'</span>,<span class="string">'JP'</span>),(<span class="number">1300</span>,<span class="string">'9450 Kamiya-cho'</span>,<span class="string">'6823'</span>,<span class="string">'Hiroshima'</span>,<span class="literal">NULL</span>,<span class="string">'JP'</span>),(<span class="number">1400</span>,<span class="string">'2014 Jabberwocky Rd'</span>,<span class="string">'26192'</span>,<span class="string">'Southlake'</span>,<span class="string">'Texas'</span>,<span class="string">'US'</span>),(<span class="number">1500</span>,<span class="string">'2011 Interiors Blvd'</span>,<span class="string">'99236'</span>,<span class="string">'South San Francisco'</span>,<span class="string">'California'</span>,<span class="string">'US'</span>),(<span class="number">1600</span>,<span class="string">'2007 Zagora St'</span>,<span class="string">'50090'</span>,<span class="string">'South Brunswick'</span>,<span class="string">'New Jersey'</span>,<span class="string">'US'</span>),(<span class="number">1700</span>,<span class="string">'2004 Charade Rd'</span>,<span class="string">'98199'</span>,<span class="string">'Seattle'</span>,<span class="string">'Washington'</span>,<span class="string">'US'</span>),(<span class="number">1800</span>,<span class="string">'147 Spadina Ave'</span>,<span class="string">'M5V 2L7'</span>,<span class="string">'Toronto'</span>,<span class="string">'Ontario'</span>,<span class="string">'CA'</span>),(<span class="number">1900</span>,<span class="string">'6092 Boxwood St'</span>,<span class="string">'YSW 9T2'</span>,<span class="string">'Whitehorse'</span>,<span class="string">'Yukon'</span>,<span class="string">'CA'</span>),(<span class="number">2000</span>,<span class="string">'40-5-12 Laogianggen'</span>,<span class="string">'190518'</span>,<span class="string">'Beijing'</span>,<span class="literal">NULL</span>,<span class="string">'CN'</span>),(<span class="number">2100</span>,<span class="string">'1298 Vileparle (E)'</span>,<span class="string">'490231'</span>,<span class="string">'Bombay'</span>,<span class="string">'Maharashtra'</span>,<span class="string">'IN'</span>),(<span class="number">2200</span>,<span class="string">'12-98 Victoria Street'</span>,<span class="string">'2901'</span>,<span class="string">'Sydney'</span>,<span class="string">'New South Wales'</span>,<span class="string">'AU'</span>),(<span class="number">2300</span>,<span class="string">'198 Clementi North'</span>,<span class="string">'540198'</span>,<span class="string">'Singapore'</span>,<span class="literal">NULL</span>,<span class="string">'SG'</span>),(<span class="number">2400</span>,<span class="string">'8204 Arthur St'</span>,<span class="literal">NULL</span>,<span class="string">'London'</span>,<span class="literal">NULL</span>,<span class="string">'UK'</span>),(<span class="number">2500</span>,<span class="string">'Magdalen Centre, The Oxford Science Park'</span>,<span class="string">'OX9 9ZB'</span>,<span class="string">'Oxford'</span>,<span class="string">'Oxford'</span>,<span class="string">'UK'</span>),(<span class="number">2600</span>,<span class="string">'9702 Chester Road'</span>,<span class="string">'09629850293'</span>,<span class="string">'Stretford'</span>,<span class="string">'Manchester'</span>,<span class="string">'UK'</span>),(<span class="number">2700</span>,<span class="string">'Schwanthalerstr. 7031'</span>,<span class="string">'80925'</span>,<span class="string">'Munich'</span>,<span class="string">'Bavaria'</span>,<span class="string">'DE'</span>),(<span class="number">2800</span>,<span class="string">'Rua Frei Caneca 1360 '</span>,<span class="string">'01307-002'</span>,<span class="string">'Sao Paulo'</span>,<span class="string">'Sao Paulo'</span>,<span class="string">'BR'</span>),(<span class="number">2900</span>,<span class="string">'20 Rue des Corps-Saints'</span>,<span class="string">'1730'</span>,<span class="string">'Geneva'</span>,<span class="string">'Geneve'</span>,<span class="string">'CH'</span>),(<span class="number">3000</span>,<span class="string">'Murtenstrasse 921'</span>,<span class="string">'3095'</span>,<span class="string">'Bern'</span>,<span class="string">'BE'</span>,<span class="string">'CH'</span>),(<span class="number">3100</span>,<span class="string">'Pieter Breughelstraat 837'</span>,<span class="string">'3029SK'</span>,<span class="string">'Utrecht'</span>,<span class="string">'Utrecht'</span>,<span class="string">'NL'</span>),(<span class="number">3200</span>,<span class="string">'Mariano Escobedo 9991'</span>,<span class="string">'11932'</span>,<span class="string">'Mexico City'</span>,<span class="string">'Distrito Federal,'</span>,<span class="string">'MX'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure>

<p><strong>employees表的信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">employee_id</td>
<td align="center">员工编号</td>
</tr>
<tr>
<td align="center">first_name</td>
<td align="center">名</td>
</tr>
<tr>
<td align="center">last_name</td>
<td align="center">姓</td>
</tr>
<tr>
<td align="center">email</td>
<td align="center">邮箱</td>
</tr>
<tr>
<td align="center">phone_number</td>
<td align="center">手机号码</td>
</tr>
<tr>
<td align="center">job_id</td>
<td align="center">工种编号</td>
</tr>
<tr>
<td align="center">salary</td>
<td align="center">工资</td>
</tr>
<tr>
<td align="center">commission_pct</td>
<td align="center">奖金率</td>
</tr>
<tr>
<td align="center">manager_id</td>
<td align="center">上级领导的编号</td>
</tr>
<tr>
<td align="center">department_id</td>
<td align="center">部门编号</td>
</tr>
<tr>
<td align="center">hiredate</td>
<td align="center">入职日期</td>
</tr>
</tbody></table>
<p><strong>departments表信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">department_id</td>
<td align="center">部门编号</td>
</tr>
<tr>
<td align="center">department_name</td>
<td align="center">部门名称</td>
</tr>
<tr>
<td align="center">manager_id</td>
<td align="center">部门主管编号</td>
</tr>
<tr>
<td align="center">location_id</td>
<td align="center">位置编号</td>
</tr>
</tbody></table>
<p><strong>jobs表信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">job_id</td>
<td align="center">工种编号</td>
</tr>
<tr>
<td align="center">job_title</td>
<td align="center">工种名称</td>
</tr>
<tr>
<td align="center">min_salary</td>
<td align="center">最低工资</td>
</tr>
<tr>
<td align="center">max_salary</td>
<td align="center">最高工资</td>
</tr>
</tbody></table>
<p><strong>locations表信息如下</strong>：</p>
<table>
<thead>
<tr>
<th align="center">列名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">location_id</td>
<td align="center">位置编号</td>
</tr>
<tr>
<td align="center">street_address</td>
<td align="center">街道</td>
</tr>
<tr>
<td align="center">postal_code</td>
<td align="center">邮编</td>
</tr>
<tr>
<td align="center">city</td>
<td align="center">城市</td>
</tr>
<tr>
<td align="center">state_province</td>
<td align="center">州/省</td>
</tr>
<tr>
<td align="center">country_id</td>
<td align="center">国家编号</td>
</tr>
</tbody></table>
<h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表 </span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>

<ol>
<li>查询列表可以是表中的字段、常量值、表达式、函数</li>
<li>查询结果是一个虚拟的表格</li>
</ol>
<p><strong>使用示例</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基础查询</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">SELECT 查询列表 </span></span><br><span class="line"><span class="comment">FROM 表名;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">USE</span> myemployees ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.查询表中的单个字段</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查询表中的多个字段</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, email <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查询表中的所有字段</span></span><br><span class="line"><span class="comment">#方式一：</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="string">`employee_id`</span>,</span><br><span class="line">  <span class="string">`first_name`</span>,</span><br><span class="line">  <span class="string">`last_name`</span>,</span><br><span class="line">  <span class="string">`email`</span>,</span><br><span class="line">  <span class="string">`phone_number`</span>,</span><br><span class="line">  <span class="string">`job_id`</span>,</span><br><span class="line">  <span class="string">`salary`</span>,</span><br><span class="line">  <span class="string">`commission_pct`</span>,</span><br><span class="line">  <span class="string">`manager_id`</span>,</span><br><span class="line">  <span class="string">`department_id`</span>,</span><br><span class="line">  <span class="string">`hiredate`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br><span class="line">  </span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查询常量值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.查询表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.查询函数</span></span><br><span class="line"><span class="comment">#version()表示MySQL的版本</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.起别名</span></span><br><span class="line"><span class="comment">#方式一:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>+<span class="number">2</span> <span class="keyword">AS</span> 和;</span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> 姓, first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二:</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name 姓, first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#8.去重</span></span><br><span class="line"><span class="comment">#使用distinct关键字来去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span>;</span><br></pre></td></tr></table></figure>

<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1、下面的语句是否可以执行成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> last_name, job_id, salary <span class="keyword">as</span> sal <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>

<p>2、下面的语句是否可以执行成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>

<p>3、找出下面语句中的错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id, last_name， salary * <span class="number">12</span> “ANNUAL SALARY” <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure>

<p>4、显示表departments的结构，并查询其中的全部数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DESC departments;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> departments;</span><br></pre></td></tr></table></figure>

<p>5、显示表employees中的全部job_id（不能重复）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p>6、显示出表employees的全部列，各个列之间使用逗号连接，列头显示成OUT_PUT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里给出了如何处理null值</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>) <span class="keyword">AS</span> 奖金率,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>连接使用concat函数</p>
<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	查询列表</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	表名</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">	筛选条件;</span><br></pre></td></tr></table></figure>

<p><strong>执行顺序</strong>：</p>
<ol>
<li>先执行from，从数据库中查看该表是否存在</li>
<li>执行where，查询符合条件的记录</li>
<li>执行select，选出指定的列显示结果</li>
</ol>
<p><strong>筛选条件的种类</strong></p>
<p>1、条件表达式</p>
<p>条件运算符：<code>&gt;</code>、<code>&lt;</code>、<code>=</code>、<code>!=</code>、<code>&lt;&gt;</code></p>
<p>2、逻辑表达式</p>
<p>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>、<code>AND</code>、<code>OR</code>、<code>NOT</code></p>
<p>3、模糊查询：<code>like</code>、<code>between and</code>、<code>in</code>、<code>is null</code></p>
<p><strong>按条件表达式筛选</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工工资大于10000的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt; <span class="number">10000</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门编号不等于90的员工名和部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id &lt;&gt; <span class="number">90</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>按逻辑表达式筛选</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按逻辑表达式筛选</span></span><br><span class="line"><span class="comment">#查询工资在10000到20000之间的员工名、工资及奖金</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt;= <span class="number">10000</span> </span><br><span class="line">  <span class="keyword">AND</span> salary &lt;= <span class="number">20000</span> ;</span><br><span class="line">  </span><br><span class="line"><span class="comment">#查询部门编号不是90到110之间，或工资高于15000的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id &lt; <span class="number">90</span> </span><br><span class="line">  <span class="keyword">OR</span> department_id &gt; <span class="number">110</span> </span><br><span class="line">  <span class="keyword">OR</span> salary &gt; <span class="number">15000</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<p>通配符：</p>
<ul>
<li><code>%</code>：表示任意多个字符，包含0个字符</li>
<li><code>_</code>：表示单个字符</li>
</ul>
<p>转义字符可以使用<code>\</code>，也可以使用<code>ESCAPE</code>关键字来指定转义字符</p>
<p><code>LIKE</code>的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LIKE的使用</span></span><br><span class="line"><span class="comment">#查询员工名中包含字符a的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'%a%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工第三个字符为a的第五个字符为e的员工名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'__a_e%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询第二个字符为下划线的员工名</span></span><br><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'_\_%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'_$_%'</span> ESCAPE <span class="string">'$'</span> ;</span><br></pre></td></tr></table></figure>

<p><code>BETWEEN AND</code>的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#BETWEEN AND</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">between x and y相当于[x, y]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#查询员工编号在100到120之间的所有的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">BETWEEN</span> <span class="number">100</span> </span><br><span class="line">  <span class="keyword">AND</span> <span class="number">200</span> ;</span><br></pre></td></tr></table></figure>

<p><code>IN</code>关键字的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#IN</span></span><br><span class="line"><span class="comment">#查询员工的工种编号是AD_VP、AD_PRES、IT_PROG中的一个的员工名和工种编号</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  job_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">IN</span> (<span class="string">'AD_VP'</span>, <span class="string">'AD_PRES'</span>, <span class="string">'IT_PROG'</span>) ;</span><br></pre></td></tr></table></figure>

<p><code>IS NULL</code>的使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#IS NULL</span></span><br><span class="line"><span class="comment">#查询没有奖金的员工名和奖金率</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工和奖金率</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>安全等于</strong>：<code>&lt;=&gt;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资为12000的员工信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> salary &lt;=&gt; <span class="number">12000</span>;</span><br></pre></td></tr></table></figure>

<p><code>is null</code>：只能判断null值</p>
<p><code>&lt;=&gt;</code>：既可以判断null值，也能判断是否等于，但是可读性较差，不建议使用！</p>
<h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p>1、查询员工号为176的员工的员工名、部门号以及年薪</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_id,</span><br><span class="line">  salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) 年薪 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">176</span> ;</span><br></pre></td></tr></table></figure>

<p>2、查询没有奖金，且工资小于18000的员工的工资和员工名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span> </span><br><span class="line">  <span class="keyword">AND</span> salary &lt; <span class="number">18000</span> ;</span><br></pre></td></tr></table></figure>

<p>3、查询job_id不为<code>IT</code>或者工资为12000的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> job_id &lt;&gt; <span class="string">'IT'</span> </span><br><span class="line">  <span class="keyword">OR</span> salary = <span class="number">12000</span> ;</span><br></pre></td></tr></table></figure>

<p>4、查询departments表中涉及到了哪些位置编号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">  location_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments ;</span><br></pre></td></tr></table></figure>

<h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><p><strong>问题</strong>：<code>select * from employees;</code>和<code>select * from employees where commisson_pct like ‘%%’ and last_name like ‘%%’;</code>结果是否一样，说明原因</p>
<p>答：结果不一样，前者包含了null的记录，而后者不包含。</p>
<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  查询列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  表名 </span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列表 【<span class="keyword">ASC</span> | <span class="keyword">DESC</span>】 ;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong></p>
<ol>
<li><code>ASC</code>代表升序，是默认值，<code>DESC</code>代表降序</li>
<li><code>ORDER BY</code>可以支持单个字段、多个字段、表达式、函数、别名</li>
<li><code>ORDER BY</code>一般放在查询语句的最后，除了<code>LIMIT</code>子句</li>
</ol>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#排序查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照工资升序/降序查询员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门编号大于等于90的员工信息，按照入职时间先后进行排序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id &gt;= <span class="number">90</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hiredate <span class="keyword">ASC</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照表达式排序：按照年薪的高低显示员工的信息（降序）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *,</span><br><span class="line">  salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) 年薪 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 年薪 <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#按函数排序：按照姓名的长度显示员工的姓名和工资（升序）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  <span class="keyword">LENGTH</span>(last_name) 姓名长度 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 姓名长度 ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个字段排序：查询员工信息，先按照工资排序（升序），再按员工编号排序降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>,</span><br><span class="line">  employee_id <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<h4 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h4><p>1、查询员工的姓名和部门编号和年薪，按年薪降序，按姓名升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_id,</span><br><span class="line">  salary * <span class="number">12</span> * (<span class="number">1</span> + <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) 年薪 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>,</span><br><span class="line">  last_name <span class="keyword">ASC</span> ;</span><br></pre></td></tr></table></figure>

<p>2、选择工资不在8000到17000的员工的姓名和工资，按工资降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &lt; <span class="number">8000</span> </span><br><span class="line">  <span class="keyword">OR</span> salary &gt; <span class="number">17000</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<p>3、查询邮箱中包含e的员工信息，并按照邮箱的字节数降序，再按部门编号升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  *,</span><br><span class="line">  <span class="keyword">LENGTH</span>(email) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">'%e%'</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>(email) <span class="keyword">DESC</span>,</span><br><span class="line">  department_id <span class="keyword">ASC</span> ;</span><br></pre></td></tr></table></figure>



<h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><p><strong>分类</strong></p>
<ul>
<li>单行函数：例如，<code>length()</code>、<code>ifnull()</code>、<code>concat()</code>等</li>
<li>多行函数：又称聚合函数、组函数、统计函数</li>
</ul>
<h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><p>字符相关的函数：</p>
<ul>
<li><p><code>length()</code>：获取参数值的字节个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">'张三lala'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>concat()</code>：拼接字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CONCAT</span>(last_name, <span class="string">'_'</span>, first_name) 姓名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>upper()</code>、<code>lower()</code>：大写和小写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">'hello'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">'HELLO'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>substr()</code>、<code>substring()</code>：截取子串</p>
<p>注意：SQL中的索引是从1开始的，<code>[startIndex, endIndex]</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'hello'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'hello'</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>案例：姓名中的首字符大写，其它字符小写，然后用_拼接，显示出来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CONCAT</span>(</span><br><span class="line">    <span class="keyword">UPPER</span>(<span class="keyword">SUBSTR</span>(last_name, <span class="number">1</span>, <span class="number">1</span>)),</span><br><span class="line">    <span class="string">'_'</span>,</span><br><span class="line">    <span class="keyword">SUBSTR</span>(last_name, <span class="number">2</span>)</span><br><span class="line">  ) 员工名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>instr()</code>：返回子串第一次出现的索引，找不到则返回0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">'hello'</span>, <span class="string">'el'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>trim()</code>：去除字符串前后的空格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">'  hello  '</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>lpad()</code>：用指定的字符实现左填充指定长度</p>
</li>
<li><p><code>rpad()</code>：用指定的字符实现右填充指定长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">LPAD</span>(<span class="string">'张三'</span>, <span class="number">10</span>, <span class="string">'*'</span>) 左填充,</span><br><span class="line">  RPAD(<span class="string">'张三'</span>, <span class="number">10</span>, <span class="string">'*'</span>) 右填充 ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>replace()</code>：替换所有</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">REPLACE</span>(<span class="string">'hello'</span>, <span class="string">'e'</span>, <span class="string">'a'</span>) ;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ul>
<li><p><code>round()</code>：四舍五入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">1.28</span>);<span class="comment">#1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">-1.28</span>);<span class="comment">#-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">3.145</span>, <span class="number">2</span>);<span class="comment">#3.15</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ceil()</code>：向上取整</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">1.001</span>);<span class="comment">#2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>float()</code>：向下取整</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">1.999</span>);<span class="comment">#1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>truncate()</code>：截断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">3.1415926</span>, <span class="number">2</span>);<span class="comment">#3.14</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>mod()</code>：取余</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">10</span>, <span class="number">3</span>);<span class="comment">#1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">10</span>, <span class="number">-3</span>);<span class="comment">#1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">-10</span>, <span class="number">3</span>);<span class="comment">#-1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">-10</span>, <span class="number">-3</span>);<span class="comment">#-1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><table>
<thead>
<tr>
<th align="center">格式符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>%Y</code></td>
<td align="center">四位的年份</td>
</tr>
<tr>
<td align="center"><code>%y</code></td>
<td align="center">两位的年份</td>
</tr>
<tr>
<td align="center"><code>%m</code></td>
<td align="center">月份（01，02，…，12）</td>
</tr>
<tr>
<td align="center"><code>%c</code></td>
<td align="center">月份（1，2，…，12）</td>
</tr>
<tr>
<td align="center"><code>%d</code></td>
<td align="center">日（01，02，…）</td>
</tr>
<tr>
<td align="center"><code>%H</code></td>
<td align="center">小时（24小时制）</td>
</tr>
<tr>
<td align="center"><code>%h</code></td>
<td align="center">小时（12小时制）</td>
</tr>
<tr>
<td align="center"><code>%i</code></td>
<td align="center">分钟（00，…，59）</td>
</tr>
<tr>
<td align="center"><code>%s</code></td>
<td align="center">秒（00，…，59）</td>
</tr>
</tbody></table>
<ul>
<li><p><code>now()</code>：返回当前系统日期时间，格式为<code>YYYY-MM-dd HH:mm:ss</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>curdate()</code>：返回当前日期，不包含时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>curtime()</code>：返回当前时间，不包含日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURTIME</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>year()</code>、<code>month()</code>、<code>monthname()</code>、<code>day()</code>、<code>hour()</code>等</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">YEAR</span>(<span class="keyword">NOW</span>()) 年,</span><br><span class="line">  <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>()) 月,</span><br><span class="line">  MONTHNAME(<span class="keyword">NOW</span>()) 月份名称<span class="comment">#英文,</span></span><br><span class="line">  <span class="keyword">DAY</span>(<span class="keyword">NOW</span>()) 日,</span><br><span class="line">  <span class="keyword">HOUR</span>(<span class="keyword">CURTIME</span>()) 时,</span><br><span class="line">  <span class="keyword">MINUTE</span>(<span class="keyword">CURTIME</span>()) 分,</span><br><span class="line">  <span class="keyword">SECOND</span>(<span class="keyword">CURTIME</span>()) 秒,</span><br><span class="line">  <span class="keyword">WEEKDAY</span>(<span class="keyword">NOW</span>()) 星期<span class="comment">#0表示周一，6表示周日 ;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>str_to_date()</code>：将日期格式的字符串转换为指定格式的日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">STR_TO_DATE</span>(<span class="string">'2020-01-01 08-00-00'</span>, <span class="string">'%Y-%c-%d %H-%i-%s'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>date_format()</code>：将日期转换为指定格式的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(), <span class="string">'%Y-%c-%d %H-%i-%s'</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="其它函数【补充】"><a href="#其它函数【补充】" class="headerlink" title="其它函数【补充】"></a>其它函数【补充】</h4><ul>
<li><p><code>version()</code>：当前数据库的版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>database()</code>：当前正在使用的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>user()</code>：当前用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="流程控制函数【补充】"><a href="#流程控制函数【补充】" class="headerlink" title="流程控制函数【补充】"></a>流程控制函数【补充】</h4><ul>
<li><p><code>if()</code>：if else的效果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">10</span> &gt; <span class="number">5</span>, <span class="string">'大'</span>, <span class="string">'小'</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>case()</code></p>
<ul>
<li><p>用法一：类似于<strong>switch case</strong></p>
<p><strong>格式</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值或 语句1;</span><br><span class="line">when 常量2 then 要显示的值或 语句2;</span><br><span class="line">...</span><br><span class="line">else 常量n then 要显示的值或 语句n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例：查询员工的工资，要求</span></span><br><span class="line"><span class="comment">部门号=30，显示工资为原来的1.1倍</span></span><br><span class="line"><span class="comment">部门号=40，显示工资为原来的1.2倍</span></span><br><span class="line"><span class="comment">部门号=50，显示工资为原来的1.3倍</span></span><br><span class="line"><span class="comment">其它部门，显示原工资</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    (salary) </span><br><span class="line">    <span class="keyword">WHEN</span> department_id = <span class="number">30</span> </span><br><span class="line">    <span class="keyword">THEN</span> salary * <span class="number">1.1</span> </span><br><span class="line">    <span class="keyword">WHEN</span> department_id = <span class="number">40</span> </span><br><span class="line">    <span class="keyword">THEN</span> salary * <span class="number">1.2</span> </span><br><span class="line">    <span class="keyword">WHEN</span> department_id = <span class="number">50</span> </span><br><span class="line">    <span class="keyword">THEN</span> salary * <span class="number">1.3</span> </span><br><span class="line">    <span class="keyword">ELSE</span> salary </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> 新工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用法二：<strong>多重if</strong></p>
<p><strong>格式</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case</span><br><span class="line">when 条件1 then 要显示的值1或 语句1;</span><br><span class="line">when 条件2 then 要显示的值2或 语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或 语句n;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查询员工的工资情况</span></span><br><span class="line"><span class="comment">工资&gt;20000，显示A</span></span><br><span class="line"><span class="comment">工资&gt;15000, 显示B</span></span><br><span class="line"><span class="comment">工资&gt;10000, 显示C</span></span><br><span class="line"><span class="comment">其它显示D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  salary, </span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> salary &gt; <span class="number">20000</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'A'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> salary &gt; <span class="number">15000</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'B'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> salary &gt; <span class="number">10000</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'C'</span> </span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">'D'</span> </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> 工资级别 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="常见函数总结"><a href="#常见函数总结" class="headerlink" title="常见函数总结"></a>常见函数总结</h4><p>字符函数：length、concat、substr/substring、instr、trim、upper、lower、lpad、rpad、replace</p>
<p>数学函数：round、ceil、floor、truncate、mod</p>
<p>日期函数：now、curdate、curtime、year、month、monthname、day、hour、minute、second、weekday、str_to_date、date_format</p>
<p>其它函数：version、database、user</p>
<p>控制函数：if、case</p>
<h4 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h4><p>1、显示系统时间日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>() <span class="keyword">AS</span> 系统时间日期;</span><br></pre></td></tr></table></figure>

<p>2、查询员工号、姓名、工资以及工资提高百分之二十之后的结果（new salary）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  salary * <span class="number">1.2</span> <span class="string">'new salary'</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>3、将员工的姓名按照首字母排序，并写出姓名的长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  <span class="keyword">LENGTH</span>(last_name) 姓名长度 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SUBSTR</span>(last_name, <span class="number">1</span>, <span class="number">1</span>) ;</span><br></pre></td></tr></table></figure>

<p>4、编写一个查询，产生下面的结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt; Dream Salary</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CONCAT</span>(</span><br><span class="line">    last_name,</span><br><span class="line">    <span class="string">' earns '</span>,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="string">' monthly but wants '</span>,</span><br><span class="line">    salary * <span class="number">3</span>,</span><br><span class="line">    <span class="string">' Dream Salary'</span></span><br><span class="line">  ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>5、使用case函数，按照下面条件编写SQL语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">job				grade</span><br><span class="line">AD_PRES			A</span><br><span class="line">ST_MAN			B</span><br><span class="line">IT_PROG			C</span><br><span class="line">others			D</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    (job_id) </span><br><span class="line">    <span class="keyword">WHEN</span> job_id = <span class="string">'AD_PRES'</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'A'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> job_id = <span class="string">'ST_MAN'</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'B'</span> </span><br><span class="line">    <span class="keyword">WHEN</span> job_id = <span class="string">'IT_PROG'</span> </span><br><span class="line">    <span class="keyword">THEN</span> <span class="string">'C'</span> </span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">'D'</span> </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> grade </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>



<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p><strong>分组函数（多行/聚合/组函数）</strong></p>
<ul>
<li><code>sum</code>：求和</li>
<li><code>avg</code>：平均值</li>
<li><code>min</code>：最小值</li>
<li><code>max</code>：最大值</li>
<li><code>count</code>：统计非空个数</li>
</ul>
<p>注意事项：</p>
<ol>
<li><p>sum和avg一般只用于处理数值类型，而max、min、count则可以处理任何类型</p>
</li>
<li><p>sum、avg、max、min、count都忽略null值</p>
</li>
<li><p>可以和distinct搭配使用，起到去重的作用</p>
</li>
<li><p>count函数详细介绍</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#count详细介绍</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#count只要一行记录不全是null就可以计数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">#count(1)相当于在表中加了一列1然后进行统计</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">MYISAM存储引擎下，count(*)的效率最高</span></span><br><span class="line"><span class="comment">INNODB存储引擎下，count(*)和count(1)的效率差不多，比count(字段)的效率高</span></span><br><span class="line"><span class="comment">综上所属，一般使用count(*)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>和分组函数一起查询的字段要求是<code>group by</code>后面的字段</p>
</li>
</ol>
<p><strong>小练习</strong></p>
<p>1、查询公司员工工资的最大值、最小值、平均值，总和</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary),</span><br><span class="line">  <span class="keyword">MIN</span>(salary),</span><br><span class="line">  <span class="keyword">AVG</span>(salary),</span><br><span class="line">  <span class="keyword">SUM</span>(salary) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>2、查询员工表中最大入职日期和最小入职日期相差的天数</p>
<p>这里需要用到<code>datediff</code>函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">DATEDIFF</span>(<span class="keyword">MAX</span>(hiredate), <span class="keyword">MIN</span>(hiredate)) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>3、查询部门编号为90的员工个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">COUNT</span>(*) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id = <span class="number">90</span> ;</span><br></pre></td></tr></table></figure>

<h4 id="group-by子句"><a href="#group-by子句" class="headerlink" title="group by子句"></a>group by子句</h4><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  查询列表（一般包含分组函数） </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  表名 </span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组表达式 </span><br><span class="line"><span class="keyword">HAVING</span> 分组后的筛选条件 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段值 ;</span><br></pre></td></tr></table></figure>

<p>group by出现在where子句后</p>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个工种的最高工资（简单的分组查询）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最高工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个位置上的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">COUNT</span>(*),</span><br><span class="line">  location_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询邮箱中包含a字符的每个部门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">AVG</span>(salary) 平均工资,</span><br><span class="line">  department_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">'%a%'</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的每个领导手下员工的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最高工资,</span><br><span class="line">  manager_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询哪个部门的员工个数大于2</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_id,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line"><span class="keyword">HAVING</span> 员工个数 &gt; <span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个工种有奖金的员工的最高工资大于12000的工种编号和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最高工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id </span><br><span class="line"><span class="keyword">HAVING</span> 最高工资 &gt; <span class="number">12000</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询领导编号大于102的每个领导手下的最低工资&gt;5000的领导编号是哪个以及对应工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  manager_id,</span><br><span class="line">  salary,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id &gt; <span class="number">102</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id </span><br><span class="line"><span class="keyword">HAVING</span> 最低工资 &gt; <span class="number">5000</span> ;</span><br></pre></td></tr></table></figure>

<p>查询的筛选条件分为两种：</p>
<ul>
<li>分组前筛选条件，也就是where子句，放在group by之前</li>
<li>分组后筛选条件，也就是having子句，放在group by之后</li>
</ul>
<p>分组函数作为条件一定要放在having子句后，能用分组前筛选则有限考虑使用分组前筛选</p>
<p>tips：</p>
<ul>
<li>group by子句支持单个字段、多个字段（不分顺序）、表达式或者函数（使用得较少）</li>
<li>也可以添加排序，使用order by子句，放在查询语句的最后</li>
</ul>
<h4 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h4><p>1、查询各job_id的员工工资的最大值、最小值、平均值、总和，并按照job_id升序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">MAX</span>(salary) 最大工资,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最小工资,</span><br><span class="line">  <span class="keyword">AVG</span>(salary) 平均工资,</span><br><span class="line">  <span class="keyword">SUM</span>(salary) 工资总和 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> job_id ;</span><br></pre></td></tr></table></figure>

<p>2、查询员工最高工资和最低工资的差距</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">MAX</span>(salary) - <span class="keyword">MIN</span>(salary) 差距 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees ;</span><br></pre></td></tr></table></figure>

<p>3、查询各个管理者手下员工的最低工资，其中最低工资不能低于6000，没有管理者的员工不计算在内</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  manager_id,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id </span><br><span class="line"><span class="keyword">HAVING</span> 最低工资 &gt;= <span class="number">6000</span> ;</span><br></pre></td></tr></table></figure>

<p>4、查询所有部门的编号，员工数量和平均工资值，并按照平均工资降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_id,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工数量,</span><br><span class="line">  <span class="keyword">AVG</span>(salary) 平均工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 平均工资 <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<p>5、选择具有各个job_id的员工人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  job_id,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工人数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id ;</span><br></pre></td></tr></table></figure>



<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p><strong>连接查询</strong>：又称为多表查询或者多表连接，当查询的字段来自于多个表或涉及到多个表时则要使用连接查询。</p>
<p><strong>笛卡尔乘积</strong>：假设表1有$m$行记录，表2有$n$行记录那么它们的笛卡尔积有$m\times n$行记录。笛卡尔积出现的原因时没有有效的连接条件。</p>
<p><strong>分类</strong></p>
<p>按照年代可以分为：</p>
<ul>
<li>SQL92标准(MySQL中仅仅支持内连接（可以忽略）</li>
<li>SQL99标准：支持所有的内连接+外连接(MySQL中不支持全外连接)+交叉连接</li>
</ul>
<p>按照功能可以分为：</p>
<ul>
<li>内连接<ul>
<li>等值连接</li>
<li>非等值连接</li>
<li>自连接</li>
</ul>
</li>
<li>外连接<ul>
<li>左外连接</li>
<li>右外连接</li>
<li>全外连接</li>
</ul>
</li>
<li>交叉连接</li>
</ul>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><h5 id="SQL92标准"><a href="#SQL92标准" class="headerlink" title="SQL92标准"></a>SQL92标准</h5><p><font color="red">1、等值连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名和对应的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees,</span><br><span class="line">  departments </span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id = departments.department_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：查询员工名、工种号、工种名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  e.job_id,</span><br><span class="line">  job_title </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  jobs j </span><br><span class="line"><span class="keyword">WHERE</span> e.job_id = j.job_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工名和部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> e.department_id = d.department_id </span><br><span class="line">  <span class="keyword">AND</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询城市名中第二个字符为o的对应的部门名和城市名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name,</span><br><span class="line">  city </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d,</span><br><span class="line">  locations l </span><br><span class="line"><span class="keyword">WHERE</span> d.location_id = l.location_id </span><br><span class="line">  <span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">'_o%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个城市的部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  city,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 部门个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  locations l,</span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> l.location_id = d.location_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询出每个部门名和部门领导编号以及该部门的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  d.department_id, </span><br><span class="line">  department_name,</span><br><span class="line">  d.manager_id,</span><br><span class="line">  <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> e.department_id = d.department_id  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.department_id ;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果给表起了别名，就需要使用别名来访问有歧义的字段，原来的表名会失效。</p>
<p><font color="red">2、非等值连接</font></p>
<p>首先执行如下SQL语句，创建job_grade表并插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> job_grades (</span><br><span class="line">  grade_level <span class="built_in">VARCHAR</span> (<span class="number">3</span>),</span><br><span class="line">  lowest_sal <span class="built_in">INT</span>,</span><br><span class="line">  highest_sal <span class="built_in">INT</span></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'A'</span>, <span class="number">1000</span>, <span class="number">2999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'B'</span>, <span class="number">3000</span>, <span class="number">5999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'C'</span>, <span class="number">6000</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'D'</span>, <span class="number">10000</span>, <span class="number">14999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'E'</span>, <span class="number">15000</span>, <span class="number">24999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> job_grades</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'F'</span>, <span class="number">25000</span>, <span class="number">40000</span>);</span><br></pre></td></tr></table></figure>

<p>非等值连接使用示例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工资和工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  grade_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e,</span><br><span class="line">  job_grades </span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">  <span class="keyword">AND</span> highest_sal ;</span><br></pre></td></tr></table></figure>

<p><font color="red">3、自连接</font></p>
<p>自连接就是做连接的两张表是同一个表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名以及它上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  e1.last_name 员工名,</span><br><span class="line">  e2.last_name 上级名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e1,</span><br><span class="line">  employees e2 </span><br><span class="line"><span class="keyword">WHERE</span> e1.manager_id = e2.employee_id ;</span><br></pre></td></tr></table></figure>

<h5 id="SQL99标准"><a href="#SQL99标准" class="headerlink" title="SQL99标准"></a>SQL99标准</h5><p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  查询列表 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  表<span class="number">1</span> 别名<span class="number">1</span> [连接类型] </span><br><span class="line">  <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名<span class="number">2</span> </span><br><span class="line">    <span class="keyword">ON</span> 连接条件 </span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件 </span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">BY</span> 分组] </span><br><span class="line">[<span class="keyword">having</span> 分组后的筛选条件]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">BY</span> 排序列表] ;</span><br></pre></td></tr></table></figure>



<p><font color="red">1、等值连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名、部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询名字中包含e的员工名和工种名（添加筛选）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  job_title </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j </span><br><span class="line">    <span class="keyword">ON</span> e.job_id = j.job_id </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'%e%'</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询部门个数大于3的城市名和部门个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  city,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 部门个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  locations l </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> l.location_id = d.location_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city </span><br><span class="line"><span class="keyword">HAVING</span> 部门个数 &gt; <span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询哪个部门的员工数&gt;3的部门名和员工个数，并按个数降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 员工个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name </span><br><span class="line"><span class="keyword">HAVING</span> 员工个数 &gt; <span class="number">3</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 员工个数 <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询员工名、部门名、工种名，并按部门名降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  department_name,</span><br><span class="line">  job_title </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j </span><br><span class="line">    <span class="keyword">ON</span> e.job_id = j.job_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>



<p><font color="red">2、非等值连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工的工资级别</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary,</span><br><span class="line">  grade_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades </span><br><span class="line">    <span class="keyword">ON</span> salary <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">    <span class="keyword">AND</span> highest_sal ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询每个工资级别个数大于20的个数，并且按照工资级别降序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  grade_level,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) 个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades jg</span><br><span class="line">    <span class="keyword">ON</span> salary <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">    <span class="keyword">AND</span> highest_sal </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level </span><br><span class="line"><span class="keyword">HAVING</span> 个数 &gt; <span class="number">20</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<p><font color="red">3、自连接</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询员工名字包含k的员工的名字和它上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  e1.last_name 员工名,</span><br><span class="line">  e2.last_name 上级名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e1 </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees e2 </span><br><span class="line">    <span class="keyword">ON</span> e1.manager_id = e2.employee_id </span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="keyword">LIKE</span> <span class="string">'%k%'</span> ;</span><br></pre></td></tr></table></figure>



<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>一般用于查询一个表中有，另外一个表中没有的情况</p>
<p>外连接的查询结果=内连接结果+主表中有从表中没有的记录</p>
<p><strong>左外连接</strong></p>
<p><code>left [outer] join</code>，左边是主表</p>
<p><strong>右外连接</strong></p>
<p><code>right [outer] join</code>，右边是主表</p>
<p><strong>全外连接</strong></p>
<p><code>full [outer] join</code>，两边都是主表</p>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询哪个部门没有员工(左外连接实现)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name, </span><br><span class="line">  employee_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d </span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> employees e </span><br><span class="line">    <span class="keyword">ON</span> d.department_id = e.department_id </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IS</span> <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询你哪个部门没有员工(右外连接实现)</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name,</span><br><span class="line">  employee_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line">  <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">    <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IS</span> <span class="literal">NULL</span> ;</span><br></pre></td></tr></table></figure>

<p>MySQL不支持全外连接！</p>
<h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><p>交叉连接返回的就是两张表的笛卡尔积</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#departments和locations的笛卡尔积</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_id,</span><br><span class="line">  l.location_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d </span><br><span class="line">  <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> locations l ;</span><br></pre></td></tr></table></figure>



<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><strong>概念</strong>：出现在其它语句中的select语句，称为<strong>子查询</strong>或<strong>内查询</strong>。外部的查询称为<strong>主查询</strong></p>
<p><strong>特点</strong>：</p>
<ol>
<li>子查询放在小括号内</li>
<li>子查询一般放在条件的右侧</li>
<li>标量子查询一般搭配单行操作符使用</li>
<li>列子查询一般搭配多行操作符使用：<code>in</code>、<code>not in</code>、<code>any</code>、<code>some</code>、<code>all</code></li>
<li>子查询优先于主查询（因为主查询用到了子查询的结果）</li>
</ol>
<blockquote>
<p>分类</p>
</blockquote>
<p><strong>按照结果集的行列数</strong></p>
<ul>
<li>标量子查询：结果集为一行一列</li>
<li>列子查询：结果集为一列多行</li>
<li>行子查询：结果集为一行多列</li>
<li>表子查询：结果集为多行多列</li>
</ul>
<p><strong>按子查询出现的位置</strong></p>
<ul>
<li><p>select后：仅仅支持标量子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  d.*,</span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(*) </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e </span><br><span class="line">  <span class="keyword">WHERE</span> e.department_id = d.department_id) 员工个数 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d ;</span><br><span class="line">  </span><br><span class="line"><span class="comment">#查询员工号=102的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    department_name </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    departments d </span><br><span class="line">  <span class="keyword">WHERE</span> d.department_id = e.department_id) 部门名 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e </span><br><span class="line"><span class="keyword">WHERE</span> employee_id = <span class="number">102</span> ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>from后面：支持表子查询，将子查询的结果当作一张表，注意必须要为这个表起一个别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询每个部门的平均工资的工资等级</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  a.department_name,</span><br><span class="line">  a.平均工资,</span><br><span class="line">  jg.grade_level 工资等级 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    e.department_id,</span><br><span class="line">    department_name,</span><br><span class="line">    <span class="keyword">AVG</span>(salary) 平均工资 </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e </span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line">      <span class="keyword">ON</span> e.department_id = d.department_id </span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id) a </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades jg </span><br><span class="line">    <span class="keyword">ON</span> a.平均工资 <span class="keyword">BETWEEN</span> lowest_sal </span><br><span class="line">    <span class="keyword">AND</span> highest_sal ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>where或having后面：标量子查询、列子查询、行子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  <span class="comment">#标量子查询</span></span><br><span class="line">  <span class="comment">#谁的工资比Abel高</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> salary &gt; </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      salary </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> last_name = <span class="string">'Abel'</span>) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#返回job_id与141号员工相同，salary比143号员工多的员工姓名、job_id和工资</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    job_id,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> job_id = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      job_id </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> employee_id = <span class="number">141</span>) </span><br><span class="line">    <span class="keyword">AND</span> salary &gt; </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      salary </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> employee_id = <span class="number">143</span>) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#返回公司工资最少的员工的last_name,job_id和salary</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    job_id,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> salary = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) ;</span><br><span class="line">      </span><br><span class="line">  <span class="comment">#查询最低工资大于50号部门的最低工资的部门id和其最低工资</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    a.department_id,</span><br><span class="line">    a.最低工资 </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      department_id,</span><br><span class="line">      <span class="keyword">MIN</span>(salary) 最低工资 </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) a </span><br><span class="line">  <span class="keyword">WHERE</span> a.最低工资 &gt; </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> department_id = <span class="number">50</span>) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#列子查询</span></span><br><span class="line">  <span class="comment">#返回location_id是1400或1700的部门中所有员工的姓名</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    last_name </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">      department_id </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      departments </span><br><span class="line">    <span class="keyword">WHERE</span> location_id <span class="keyword">IN</span> (<span class="number">1400</span>, <span class="number">1700</span>)) ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#返回其它部门中比job_id为'IT_PROG'部门任一工资低的员工的：工号、姓名、job_id以及salary</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    employee_id,</span><br><span class="line">    last_name,</span><br><span class="line">    job_id,</span><br><span class="line">    salary </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> salary &lt; <span class="keyword">ANY</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      salary </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees </span><br><span class="line">    <span class="keyword">WHERE</span> job_id = <span class="string">'IT_PROG'</span>) </span><br><span class="line">    <span class="keyword">AND</span> job_id &lt;&gt; <span class="string">'IT_PROG'</span> ;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#行子查询</span></span><br><span class="line">  <span class="comment">#查询员工编号最小且工资最高的员工信息</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    * </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> employee_id = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(employee_id) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) </span><br><span class="line">    <span class="keyword">AND</span> salary = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MAX</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) ;</span><br><span class="line">      </span><br><span class="line">  <span class="comment">#使用行子查询实现</span></span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> (employee_id, salary) = </span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">      <span class="keyword">MIN</span>(employee_id),</span><br><span class="line">      <span class="keyword">MAX</span>(salary) </span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      employees) ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>exists后面（相关子查询）：表子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询有员工的部门名</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  department_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  departments d </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    * </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e </span><br><span class="line">  <span class="keyword">WHERE</span> e.department_id = d.department_id) ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h4><p>1、查询和Zlotkey相同部门的员工姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id = </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    department_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> last_name = <span class="string">'Zlotkey'</span>) ;</span><br></pre></td></tr></table></figure>

<p>2、查询工资比公司平均工资高的员工的员工号、姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询工资比公司平均工资高的员工的员工号、姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt; </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">AVG</span>(salary) </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees) ;</span><br></pre></td></tr></table></figure>

<p>3、查询各部门中工资比本部门平均工资高的员工的员工号、姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询各部门中工资比本部门平均工资高的员工的员工号、姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees e1 </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt; </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">AVG</span>(salary) </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees e2 </span><br><span class="line">  <span class="keyword">WHERE</span> e2.department_id = e1.department_id) ;</span><br></pre></td></tr></table></figure>

<p>4、查询姓名中包含字母u的员工在相同部门的员工的员工号和姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id,</span><br><span class="line">  last_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    department_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">'%u%'</span>) ;</span><br></pre></td></tr></table></figure>

<p>5、查询在部门的location_id为1700的部门工作的员工的员工号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">DISTINCT</span> department_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    departments </span><br><span class="line">  <span class="keyword">WHERE</span> location_id = <span class="number">1700</span>) ;</span><br></pre></td></tr></table></figure>

<p>6、查询管理者是King的员工姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  last_name,</span><br><span class="line">  salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> manager_id = </span><br><span class="line">  (<span class="keyword">SELECT</span> </span><br><span class="line">    employee_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line">  <span class="keyword">WHERE</span> last_name = <span class="string">'King'</span>) ;</span><br></pre></td></tr></table></figure>



<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line">[<span class="keyword">join</span> <span class="keyword">type</span>] <span class="keyword">join</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组后的筛选</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段</span><br><span class="line"><span class="keyword">limit</span> <span class="keyword">offset</span>, <span class="keyword">size</span>;</span><br></pre></td></tr></table></figure>

<p><code>offset</code>从0开始，表示开始显示的索引，<code>size</code>表示要显示的条目数，如果offset为0则可以省略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询前5条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">5</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询第11条到第25条员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>, <span class="number">15</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询有奖金的员工信息，工资较高的前10名显示出来</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  * </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  employees </span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">10</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>:</p>
<ol>
<li><p>limit语句放在最后（无论是执行顺序还是在语法中的位置）</p>
</li>
<li><p>分页公式：要显示的页数为<code>page</code>，每页的条目数为<code>size</code>，则分页的公式为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">LIMIT (page-1)*size, size;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h4><p>已知表stuinfo</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">学号</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">姓名</td>
</tr>
<tr>
<td align="center">email</td>
<td align="center">邮箱</td>
</tr>
<tr>
<td align="center">grade_id</td>
<td align="center">年级编号</td>
</tr>
<tr>
<td align="center">sex</td>
<td align="center">性别</td>
</tr>
<tr>
<td align="center">age</td>
<td align="center">年龄</td>
</tr>
</tbody></table>
<p>和表grade</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">年级编号</td>
</tr>
<tr>
<td align="center">grade_name</td>
<td align="center">年级名称</td>
</tr>
</tbody></table>
<p>1、查询所有学院的邮箱的用户名（注：邮箱@前面的字符）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(email, <span class="keyword">instr</span>(email, <span class="string">'@'</span>)<span class="number">-1</span>) 用户名 <span class="keyword">from</span> stuinfo</span><br></pre></td></tr></table></figure>

<p>2、查询男生和女生的个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) 个数 <span class="keyword">from</span> stuinfo <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure>

<p>3、查询所有年龄大于18岁的学生的姓名和年级名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, grade_name </span><br><span class="line"><span class="keyword">from</span> stuinfo s <span class="keyword">inner</span> <span class="keyword">join</span> grade g </span><br><span class="line"><span class="keyword">on</span> s.grade_id=g.id </span><br><span class="line"><span class="keyword">where</span> age&gt;<span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>4、查询哪个年级的学生最小年龄大于20岁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> grade_name, <span class="keyword">min</span>(age) 最小年龄 </span><br><span class="line"><span class="keyword">from</span> grade g <span class="keyword">inner</span> <span class="keyword">join</span> stuinfo s</span><br><span class="line"><span class="keyword">on</span> g.id=s.grade_id </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> grade_name </span><br><span class="line"><span class="keyword">having</span> 最小年龄&gt;<span class="number">20</span>;</span><br></pre></td></tr></table></figure>



<h3 id="union联合查询（了解"><a href="#union联合查询（了解" class="headerlink" title="union联合查询（了解)"></a>union联合查询（了解)</h3><p><code>union</code>：联合、合并，将多条查询语句的结果合并成一个结果</p>
<p><strong>应用场景</strong>：要查询的结果来自于多个表，且多个表没有直接的连接关系，但是查询的信息一致时</p>
<p><strong>特点</strong>:</p>
<ol>
<li>要求多条查询语句的查询列数是一致的！</li>
<li>要求多条查询语句查询的每一列的类型和顺序最好是一致的</li>
<li><code>union</code>关键字默认去除重复项，如果使用<code>union all</code>可以包含重复项</li>
</ol>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>DQL</tag>
      </tags>
  </entry>
  <entry>
    <title>初识MySQL</title>
    <url>/2020/06/19/%E5%88%9D%E8%AF%86MySQL/</url>
    <content><![CDATA[<h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><h3 id="为什么要学习数据库"><a href="#为什么要学习数据库" class="headerlink" title="为什么要学习数据库"></a>为什么要学习数据库</h3><ol>
<li>数据库是JavaEE开发的必备技能</li>
<li>数据库能够保证数据的安全存储</li>
<li>数据是软件开发中的核心部分</li>
<li>数据库可以实现数据的持久化存储</li>
</ol>
<h3 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h3><p>数据库（DataBase，简称DB），是长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p>
<p><strong>作用</strong>：安全地持久化并管理数据，减少数据的冗余</p>
<p><strong>数据库分类</strong></p>
<ul>
<li>关系型数据库<ul>
<li>常见的关系型数据库有：MySQL、SQL Server、Oracle等</li>
<li>关系型数据库通过外键来建立表与表之间的联系</li>
</ul>
</li>
<li>非关系型数据库<ul>
<li>常见的非关系型数据库：Redis、MongoDB等</li>
<li>非关系型数据库数据以对象的形式存在于数据库中，对象之间的关系通过对象的属性来实现</li>
</ul>
</li>
</ul>
<h3 id="什么是DBMS"><a href="#什么是DBMS" class="headerlink" title="什么是DBMS"></a>什么是DBMS</h3><p>DBMS：DataBase Management System，即数据库管理系统。是用于管理数据的计算机软件。</p>
<p><strong>作用</strong>：数据库管理系统使用户能方便地定义和操纵数据，维护数据的安全性和完整性，以及进行多用户下的并发控制和恢复数据库。</p>
<p>我们所学习的MySQL实际上是一个数据库管理系统！！！</p>
<h3 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h3><p>MySQL是一个<strong>开源</strong>、<strong>免费</strong>的<strong>关系型数据库</strong></p>
<p>MySQL由瑞典MySQL AB公司开发，现在属于Oracle旗下的产品。MySQL是现在<strong>最流行</strong>的关系型数据库管理系统之一！</p>
<p><strong>MySQL的官网</strong>：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><blockquote>
<p>这里介绍压缩版的MySQL的下载与安装</p>
</blockquote>
<p><font color="red">1、下载软件</font></p>
<p>我的电脑是win10 64位系统，所以下载的是MySQL 5.7 64位版本：<a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</a></p>
<p><font color="red">2、安装步骤</font></p>
<ol>
<li><p>下载得到zip格式的压缩包</p>
</li>
<li><p>解压到自己平时安装开发环境的目录，我的目录是：<code>D:\environment</code></p>
</li>
<li><p>添加环境变量：计算机&rightarrow;右键属性&rightarrow;高级系统设置&rightarrow;环境变量</p>
<p>设置在Path环境变量中添加，bin目录对应的路径</p>
</li>
<li><p>编辑<code>my.ini</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;D:\environment\mysql-5.7.19-winx64\</span><br><span class="line">datadir&#x3D;D:\environment\mysql-5.7.19-winx64\data\</span><br><span class="line">port&#x3D;3306</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
</li>
<li><p>以管理员权限启动cmd，并切换至MySQL的bin目录下，然后输入<code>mysqld -install</code>（安装mysql）</p>
</li>
<li><p>再输入<code>mysqld -initialize-insecure</code>初始化数据文件</p>
</li>
<li><p>然后启动使用<code>net start mysql</code>启动mysql服务，使用命令mysql -uroot -p进入mysql管理界面（密码可为空）</p>
</li>
<li><p>进入界面后更改root密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span></span><br><span class="line"><span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> Host = <span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改my.ini文件，删除<code>skip-grant-tables</code></p>
</li>
<li><p>重启mysql服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200620082752605.png" align="center"/>

</li>
</ol>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>由于之前已经设置了环境变量，所以可以在任意位置是使用mysql中bin目录下的命令</p>
<p><strong>登录数据库的命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql [-h服务器主机地址] -u用户名 -p用户密码</span><br></pre></td></tr></table></figure>

<p>服务器地址可以省略，默认值为本机<code>localhost</code>，连接远程数据库时需要写上。</p>
<p><strong>基本的数据库操作命令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span></span><br><span class="line"><span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> Host = <span class="string">'localhost'</span>; <span class="comment">--修改密码</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;<span class="comment">--刷新mysql系统权限相关表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;<span class="comment">--显示所有数据库</span></span><br><span class="line"><span class="keyword">use</span> 数据库名称;<span class="comment">--切换到指定名称的数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">--显示当前数据库中的所有表</span></span><br><span class="line">desc 表名;<span class="comment">--显示表结构</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;<span class="comment">--显示创建表的语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名;<span class="comment">--创建指定名称的数据库</span></span><br><span class="line"></span><br><span class="line">exit; <span class="comment">--退出MySQL</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>变量</title>
    <url>/2020/06/24/%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>分类</strong></p>
<ul>
<li>系统变量<ul>
<li>全局变量</li>
<li>会话变量</li>
</ul>
</li>
<li>自定义变量<ul>
<li>用户变量</li>
<li>局部变量</li>
</ul>
</li>
</ul>
<h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>变量由系统提供，不是用户自定义的，属于服务器层面</p>
<p><strong>使用的语法</strong></p>
<ol>
<li><p>查看所有的系统变量（全局使用<code>global</code>，会话使用<code>session</code>或者省略）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span>|[<span class="keyword">session</span>] <span class="keyword">variables</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看满足条件的部分系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span>|[<span class="keyword">session</span>] <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%char%'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看指定的某个系统变量</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @@<span class="keyword">global</span>|[<span class="keyword">session</span>].系统变量名;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为某个指定的系统变量赋值</p>
<p><strong>方式一</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span>|[<span class="keyword">session</span>] 系统变量名=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @@<span class="keyword">global</span>|[<span class="keyword">session</span>].系统变量名=值;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><strong>全局变量的作用域</strong>：服务器每次启动将为所有的全局变量赋初始值，针对于所有的会话都有效，但是不能跨重启（即重启后会失效）</p>
<p><strong>会话变量的作用域</strong>：针对当前的会话（连接）有效</p>
<h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>含义：变量是用户自定义的，不是由系统提供的</p>
<p><strong>使用步骤</strong></p>
<ul>
<li>声明</li>
<li>赋值</li>
<li>使用（查看、比较、运算）</li>
</ul>
<h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p><strong>作用域</strong>：针对当前会话（连接）有效，和会话变量的作用域相同</p>
<ol>
<li><p>声明并初始化</p>
<p><strong>方式一</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @用户变量名=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @用户变量名:=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式三</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @用户变量名:=值;</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值（更新用户变量值）</p>
<p><strong>方式一</strong>：通过set或者select（set可以省略<code>:</code>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>|<span class="keyword">select</span> @用户变量名:=值;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：通过<code>select into</code>的方式（要求结果为一个值）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> 变量名 </span><br><span class="line"><span class="keyword">from</span> 表;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @用户变量名;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p><strong>作用域</strong>：仅仅在定义它的<code>begin</code>、<code>end</code>中</p>
<ol>
<li><p>声明</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> 变量名 类型 [<span class="keyword">default</span> 值];</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>|<span class="keyword">select</span> 局部变量名:=值;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">into</span> 局部变量名 </span><br><span class="line"><span class="keyword">from</span> 表;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 局部变量名;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="用户变量和局部变量的对比"><a href="#用户变量和局部变量的对比" class="headerlink" title="用户变量和局部变量的对比"></a>用户变量和局部变量的对比</h4><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">作用域</th>
<th align="center">定义和使用的位置</th>
<th align="center">语法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">用户变量</td>
<td align="center">当前的会话</td>
<td align="center">会话中的任何位置</td>
<td align="center">必须加上@符号，不用限定类型</td>
</tr>
<tr>
<td align="center">局部变量</td>
<td align="center">begin end中</td>
<td align="center">只能在begin end中，且为第一句话</td>
<td align="center">一般不用加@符号，需要限定类型</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL变量</tag>
      </tags>
  </entry>
  <entry>
    <title>存储过程和函数</title>
    <url>/2020/06/24/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h2><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p><strong>概念</strong>：一组预先编译号的SQL语句的集合，理解成批处理语句</p>
<p><strong>好处</strong>：</p>
<ol>
<li>提高了代码的复用性</li>
<li>简化了操作</li>
<li>减少了编译次数和数据库的连接次数，提高了效率</li>
</ol>
<h4 id="存储过程的语法"><a href="#存储过程的语法" class="headerlink" title="存储过程的语法"></a>存储过程的语法</h4><p><strong>创建语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(参数列表) </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	存储过程体(一组合法的<span class="keyword">SQL</span>语句)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>Tips：</p>
<ol>
<li><p>参数列表包括三部分</p>
<ul>
<li>参数模式<ul>
<li><code>in</code>：该参数可以作为输入，也就是说该参数需要调用方传入值</li>
<li><code>out</code>：该参数可以作为输出，也就是该参数可以作为返回值</li>
<li><code>inout</code>：该参数既可以作为输入，也可以作为输出。既需要传入值，也可以返回值</li>
</ul>
</li>
<li>参数名</li>
<li>参数类型</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#参数示例</span></span><br><span class="line">in stuname varchar(20)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果存储过程只有一句SQL，那么<code>begin end</code>可以省略</p>
</li>
<li><p>存储过程体中的每条SQL语句的结尾都要求加上<code>;</code>，存储过程的结尾可以使用<code>delimiter</code>重新设置</p>
</li>
</ol>
<p><strong>调用语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> 存储过程名(实参列表);</span><br></pre></td></tr></table></figure>





<p><strong>空参存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向admin表中插入五条记录</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> myp1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">admin</span>(username, <span class="string">`password`</span>) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'张三'</span>,<span class="string">'10001'</span>), </span><br><span class="line">    (<span class="string">'李四'</span>,<span class="string">'10002'</span>), </span><br><span class="line">    (<span class="string">'王五'</span>,<span class="string">'10003'</span>), </span><br><span class="line">    (<span class="string">'王二'</span>,<span class="string">'10004'</span>), </span><br><span class="line">    (<span class="string">'李明'</span>,<span class="string">'10005'</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">CALL</span> myp1();</span><br></pre></td></tr></table></figure>



<p><strong>带in模式参数的存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建存储过程，判断是定用户名和密码是否能够登录成功</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> login (</span><br><span class="line">  <span class="keyword">IN</span> username <span class="built_in">VARCHAR</span> (<span class="number">20</span>),</span><br><span class="line">  <span class="keyword">IN</span> <span class="string">`password`</span> <span class="built_in">VARCHAR</span> (<span class="number">20</span>)</span><br><span class="line">) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="built_in">INT</span> ;</span><br><span class="line">  <span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">result</span> </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">admin</span> </span><br><span class="line">  <span class="keyword">WHERE</span> admin.username = username </span><br><span class="line">    <span class="keyword">AND</span> admin.<span class="string">`password`</span> = <span class="string">`password`</span> ;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="keyword">result</span>&gt;<span class="number">0</span>,<span class="string">'登录成功'</span>, <span class="string">'登录失败'</span>) <span class="keyword">AS</span> 登录结果;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">CALL</span> login(<span class="string">'张三'</span>,<span class="string">'10001'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>带out模式参数的存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询admin表中的记录数</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> total(<span class="keyword">OUT</span> <span class="keyword">num</span> <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">num</span> <span class="keyword">FROM</span> <span class="keyword">admin</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">num</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">CALL</span> total(@<span class="keyword">num</span>);</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">num</span>;</span><br></pre></td></tr></table></figure>

<p><strong>带inout模式参数的存储过程</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#传入两个值a、b，翻倍后返回</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> twice_as_much(INOUT a <span class="built_in">INT</span>, INOUT b <span class="built_in">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SET</span> a=a*<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">SET</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">SET</span> @a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">CALL</span> twice_as_much(@a,@b);</span><br><span class="line"><span class="keyword">SELECT</span> @a, @b;</span><br></pre></td></tr></table></figure>



<h4 id="存储过程的删除"><a href="#存储过程的删除" class="headerlink" title="存储过程的删除"></a>存储过程的删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> 存储过程名;</span><br></pre></td></tr></table></figure>



<h4 id="存储过程的查看"><a href="#存储过程的查看" class="headerlink" title="存储过程的查看"></a>存储过程的查看</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名;</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong>：存储过程不能修改，只能删除后重新创建</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>概念</strong>：一组预先编译好的SQL语句集合，可以理解成批处理语句。</p>
<p><strong>好处</strong>：</p>
<ol>
<li>提高了代码的复用性</li>
<li>简化了操作</li>
<li>减少了编译次数以及数据库服务器的连接次数，提高了效率</li>
</ol>
<h4 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(参数列表) <span class="keyword">returns</span> 返回类型</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  函数体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ol>
<li>参数列表包括两部分<ul>
<li>参数名</li>
<li>参数类型</li>
</ul>
</li>
<li>函数体：肯定有return语句，如果没有会报错</li>
<li>函数体中仅有一句SQL语句时，可以省略<code>begin end</code></li>
<li>使用<code>delimiter</code>设置结束标记</li>
</ol>
<h4 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数名(参数列表);</span><br></pre></td></tr></table></figure>

<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询用户名包含指定字符的admin表中的记录数</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_admin_count(<span class="keyword">str</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> c <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> c <span class="keyword">FROM</span> <span class="keyword">admin</span> <span class="keyword">WHERE</span> admin.username <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(<span class="string">'%'</span>,<span class="keyword">str</span>,<span class="string">'%'</span>);</span><br><span class="line">  RETURN c;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">SELECT</span> get_admin_count(<span class="string">'王'</span>);</span><br></pre></td></tr></table></figure>



<h4 id="函数的查看和删除"><a href="#函数的查看和删除" class="headerlink" title="函数的查看和删除"></a>函数的查看和删除</h4><p><strong>查看函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">function</span> 函数名;</span><br></pre></td></tr></table></figure>

<p><strong>删除函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> 函数名;</span><br></pre></td></tr></table></figure>



<h4 id="函数与存储过程的区别"><a href="#函数与存储过程的区别" class="headerlink" title="函数与存储过程的区别"></a>函数与存储过程的区别</h4><p><strong>存储过程</strong>：可以有0个或多个返回值，适合做批量插入、批量更新</p>
<p><strong>函数</strong>：有且仅有一个返回值，适合处理数据之后返回一个结果</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>存储过程</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制结构:</title>
    <url>/2020/06/24/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><p><strong>功能</strong>：实现简单的双分支</p>
<p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if(表达式1, 表达式2, 表达式3)</span><br></pre></td></tr></table></figure>

<p>如果表达式1返回true，则返回表达式2的值，否则返回表达式3的值</p>
<h4 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h4><p>如果是语句，则使用<code>end case</code>否则使用<code>end</code></p>
<p><strong>情况一</strong>：类似于Java中的switch语句，一般用于实现等值判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 变量|表达式|字段</span><br><span class="line">when 要判断的值 then 返回的值1|语句;</span><br><span class="line">when 要判断的值 then 返回的值2|语句;</span><br><span class="line">...</span><br><span class="line">else 要返回的值n|语句;</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】</span><br></pre></td></tr></table></figure>



<p><strong>情况二</strong>：类似于Java中的多重if语句，一般用于实现区间判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case</span><br><span class="line">when 要判断的条件1 then 返回值1|语句;</span><br><span class="line">when 要判断的条件2 then 返回值2|语句;</span><br><span class="line">...</span><br><span class="line">else 要返回值的值n|语句;</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>：</p>
<ul>
<li>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方</li>
<li>可以作为独立的语句去使用，此时只能放在<code>begin end</code>中</li>
<li>如果else省略且所有的条件都不满足，则返回null</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例</span></span><br><span class="line"><span class="comment">#创建存储过程，根据传入的成绩来显示等级</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> test_case;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_case(<span class="keyword">IN</span> score <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">CASE</span></span><br><span class="line">	<span class="keyword">WHEN</span> score &gt;= <span class="number">90</span> <span class="keyword">AND</span> score &lt;= <span class="number">100</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">'A'</span>;</span><br><span class="line">	WHEN score &gt;= 80 THEN SELECT 'B';</span><br><span class="line">	WHEN score &gt;= 60 THEN SELECT 'C';</span><br><span class="line">	ELSE <span class="keyword">SELECT</span> <span class="string">'D'</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">CALL</span> test_case(<span class="number">95</span>);</span><br></pre></td></tr></table></figure>



<h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><p><strong>功能</strong>：实现多重分支</p>
<p><strong>语法</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件1 then 语句1;</span><br><span class="line">elseif 条件2 then 语句2;</span><br><span class="line">...</span><br><span class="line">【else 语句n;】</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3.if结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> test_if;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> test_if(score <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">CHAR</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">IF</span> score&gt;=<span class="number">90</span> <span class="keyword">AND</span> score&lt;=<span class="number">100</span> <span class="keyword">THEN</span> <span class="keyword">RETURN</span> <span class="string">'A'</span>;</span><br><span class="line">	ELSEIF score&gt;=80 THEN RETURN 'B';</span><br><span class="line">	ELSEIF score&gt;=60 THEN RETURN 'C';</span><br><span class="line">	ELSE RETURN 'D';</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">SELECT</span> test_if(<span class="number">55</span>);</span><br></pre></td></tr></table></figure>



<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>分类：</p>
<ul>
<li><code>while</code></li>
<li><code>loop</code></li>
<li><code>repeat</code></li>
</ul>
<p><strong>循环控制</strong></p>
<p><code>iterate</code>类似于Java中的<code>continue</code></p>
<p><code>leave</code>类似于Java中的<code>break</code></p>
<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签:】 while 循环条件 <span class="keyword">do</span> </span><br><span class="line">	循环体</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span> 【标签】;</span><br></pre></td></tr></table></figure>

<h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签:】 loop</span><br><span class="line">	循环体</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">loop</span> 【标签】;</span><br></pre></td></tr></table></figure>

<p>如果没有循环控制的话就是死循环，可以用来模拟简单的死循环</p>
<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【标签:】 repeat</span><br><span class="line">	循环体</span><br><span class="line">until 结束循环的条件</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span> 【标签】;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>流程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/2020/06/25/%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>操作数据库</title>
    <url>/2020/06/20/%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="结构化从查询语句分类"><a href="#结构化从查询语句分类" class="headerlink" title="结构化从查询语句分类"></a>结构化从查询语句分类</h3><p><font color="red">1、DDL</font></p>
<p>DDL：Data Definition Language，数据定义语言，是用于描述数据库中要存储的现实世界实体的语言。</p>
<p><strong>作用</strong>：定义和管理数据对象，例如数据库、表等</p>
<p><strong>相关命令</strong>：CREATE、DROP、ALTER</p>
<p><font color="red">2、DML</font></p>
<p>DML：Data Manipulation Language，数据操纵语言，用户通过它可以实现对数据库的基本操作。</p>
<p><strong>作用</strong>：操作数据库对象所包含的数据</p>
<p><strong>相关命令</strong>：INSERT、UPDATE、DELETE</p>
<p><font color="red">3、DQL</font></p>
<p>DQL：Data Query Language，数据查询语言。</p>
<p><strong>作用</strong>：查询数据库中的数据</p>
<p><strong>相关命令</strong>：SELECT</p>
<p><font color="red">4、DCL</font></p>
<p>DCL：Data Control Language，数据控制语言。</p>
<p><strong>作用</strong>：用于管理数据库的语言，可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、存储程序、用户自定义函数等数据库对象的控制权。</p>
<p><strong>相关命令</strong>：GRANT、REVOKE、commit、rollback</p>
<h3 id="操作数据库-1"><a href="#操作数据库-1" class="headerlink" title="操作数据库"></a>操作数据库</h3><blockquote>
<p>命令行操作数据库</p>
</blockquote>
<p><strong>创建数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`数据库名`</span> [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> 字符集] [<span class="keyword">COLLATE</span> 数据库排序规则];</span><br></pre></td></tr></table></figure>

<p><strong>删除数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] <span class="string">`数据库名`</span>;</span><br></pre></td></tr></table></figure>

<p><strong>查看所有数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br></pre></td></tr></table></figure>

<p><strong>使用（切换到）数据库</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="string">`数据库名`</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>SQLyog学习数据库命令的方式</p>
</blockquote>
<p>下面将介绍如何通过SQLyog操作数据库，然后学习对应操作的数据库命令</p>
<p>以创建数据库一个名称为school的数据库为例：</p>
<ul>
<li><p>首先右键创建一个数据库</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200620103704632.png" alt="image-20200620103704632"></p>
</li>
<li><p>打开历史记录页面，查看创建数据库对应的语句</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200620103830427.png" alt="image-20200620103830427"></p>
</li>
</ul>
<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>创建数据表属于DDL的一种，语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名`</span> (</span><br><span class="line">    <span class="string">`字段名1`</span> 列类型 [属性][索引][注释], </span><br><span class="line">    <span class="string">`字段名2`</span> 列类型 [属性][索引][注释], </span><br><span class="line">    ...</span><br><span class="line">    <span class="string">`字段名n`</span> 列类型 [属性][索引][注释], </span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure>

<p>反引号用于区分MySQL保留字和普通字符，使用了反引号则表示是普通字符。</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>视图讲解</title>
    <url>/2020/06/24/%E8%A7%86%E5%9B%BE%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="视图讲解"><a href="#视图讲解" class="headerlink" title="视图讲解"></a>视图讲解</h1><p><strong>概念</strong>：MySQL从5.01版本开始提供视图功能。一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时<strong>动态生成的</strong>，只保存了SQL逻辑，不保存查询结果</p>
<p><strong>应用场景</strong></p>
<ul>
<li>多个地方用到同样的查询结果</li>
<li>该查询结果使用的SQL语句比较复杂</li>
</ul>
<p><strong>使用示例</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例：查询姓张的学生名和专业</span></span><br><span class="line"><span class="keyword">SELECT</span> stuname, majorname </span><br><span class="line"><span class="keyword">FROM</span> stuinfo s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m</span><br><span class="line"><span class="keyword">ON</span> s.majorid=m.id </span><br><span class="line"><span class="keyword">WHERE</span> s.stuname <span class="keyword">LIKE</span> <span class="string">'张%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1 <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> stuname, majorname </span><br><span class="line"><span class="keyword">FROM</span> stuinfo s </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m </span><br><span class="line"><span class="keyword">ON</span> s.majorid=m.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用视图查询</span></span><br><span class="line"><span class="keyword">SELECT</span> stuname, majorname </span><br><span class="line"><span class="keyword">FROM</span> v1 </span><br><span class="line"><span class="keyword">WHERE</span> stuname <span class="keyword">LIKE</span> <span class="string">'张%'</span>;</span><br></pre></td></tr></table></figure>



<p><strong>视图的好处</strong></p>
<ul>
<li>重用SQL语句</li>
<li>简化复杂的SQL操作，不必知道它的查询细节</li>
<li>保护数据，提高安全性</li>
</ul>
<h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>



<h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p><strong>方式一</strong></p>
<p>视图存在则修改，视图不在则创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> 视图名</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名 </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure>



<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名, 视图名,...;</span><br></pre></td></tr></table></figure>



<h3 id="查看视图结构"><a href="#查看视图结构" class="headerlink" title="查看视图结构"></a>查看视图结构</h3><p><strong>语法</strong></p>
<p>查询创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名;</span><br></pre></td></tr></table></figure>

<p>显示视图结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc 视图名;</span><br></pre></td></tr></table></figure>



<h3 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> myv1 </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> last_name, email </span><br><span class="line"><span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> myv1 <span class="keyword">values</span>(<span class="string">'张三'</span>, <span class="string">'zs@qq.com'</span>);</span><br><span class="line"><span class="comment">#更新</span></span><br><span class="line"><span class="keyword">update</span> myv1 <span class="keyword">set</span> last_name=<span class="string">'李四'</span> <span class="keyword">where</span> last_name=<span class="string">'张三'</span>;</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> myv1 <span class="keyword">where</span> last_name=<span class="string">'李四'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：对视图的更新会导致对原始表的更新，一般来说，视图不应该更新！（更新视图会导致数据不安全）</p>
<p><strong>什么情况下，视图是不可以更新的？</strong></p>
<ol>
<li><p>包含以下关键字的SQL语句：</p>
<p>分组函数：<code>distinct</code>、<code>group by</code>、<code>having</code>、<code>union</code>或者<code>union all</code></p>
</li>
<li><p>常量视图</p>
</li>
<li><p>select中包含子查询</p>
</li>
<li><p>join</p>
</li>
<li><p>from一个不能更新的视图</p>
</li>
<li><p>where子句的子查询引用了from子句中的表</p>
</li>
</ol>
<h3 id="视图和表的对比"><a href="#视图和表的对比" class="headerlink" title="视图和表的对比"></a>视图和表的对比</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">创建语法的关键字</th>
<th align="center">是否实际占用物理空间</th>
<th align="center">使用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">视图</td>
<td align="center"><code>create view</code></td>
<td align="center">只是保存了SQL逻辑</td>
<td align="center">增删改查，一般不使用增删改</td>
</tr>
<tr>
<td align="center">表</td>
<td align="center"><code>create table</code></td>
<td align="center">保存了数据</td>
<td align="center">增删改查</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>视图</tag>
      </tags>
  </entry>
  <entry>
    <title>三层架构和MVC</title>
    <url>/2020/07/02/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E5%92%8CMVC/</url>
    <content><![CDATA[<h1 id="三层架构和MVC"><a href="#三层架构和MVC" class="headerlink" title="三层架构和MVC"></a>三层架构和MVC</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>JavaWeb的三层架构是指：</p>
<ul>
<li>表现层：与用户直接接触，接收用户的请求进行处理，然后将响应的内容返回给用户</li>
<li>业务逻辑层：具体业务逻辑的实现</li>
<li>数据访问层：与数据库进行交互</li>
</ul>
<p>为了降低各层之间的耦合度，三层架构中使用了面向接口编程，上层调用下层是通过接口实现的。</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200702215919230.png" align="left"/>

<p>MVC：</p>
<ul>
<li>Model：模型，主要分为两类<ul>
<li>数据Bean：包含了实体类JavaBean，承载业务数据</li>
<li>业务Bean：包含了Service、Dao对象</li>
</ul>
</li>
<li>View：视图，为用户提供直接交互的界面</li>
<li>Controller：控制器，用于将用户的请求传递给相应的Model进行处理，并根据Model返回的结果做出响应，跳转到对应的视图</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>三层架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Listener和Filter</title>
    <url>/2020/07/02/Listener%E5%92%8CFilter/</url>
    <content><![CDATA[<h1 id="Listener和Filter"><a href="#Listener和Filter" class="headerlink" title="Listener和Filter"></a>Listener和Filter</h1><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><h3 id="监听器概述"><a href="#监听器概述" class="headerlink" title="监听器概述"></a>监听器概述</h3><p>Listener就是监听器，和Servlet、Filter组成了JavaWeb的三大组件。</p>
<p>Listener由三个部分组成</p>
<ul>
<li>事件源</li>
<li>事件</li>
<li>监听器</li>
</ul>
<p>可以这样理解，事件源相当于小偷，事件是小偷偷东西，监听器就是经常。当小偷（事件源）偷东西了（事件）经常（监听器）就会对小偷进行抓捕（监听器中的方法）</p>
<p><strong>监听器的分类</strong>：</p>
<ul>
<li>监听域对象创建与销毁的监听器</li>
<li>监听域对象操作域属性的监听器</li>
<li>监听HttpSession的监听器</li>
</ul>
<p><strong>监听器的配置</strong></p>
<p>监听器在<code>web.xml</code>中的配置十分简单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>监听器全类名路径<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="创建与销毁监听器"><a href="#创建与销毁监听器" class="headerlink" title="创建与销毁监听器"></a>创建与销毁监听器</h3><p><strong>ServletContext相关</strong></p>
<ul>
<li>ServletContextListener：<ul>
<li><code>void contextInitialized(ServletContextEvent event)</code>：Web服务器启动时调用</li>
<li><code>void contextDestroyed(ServletContextEvent event)</code>：Web服务器关闭时调用</li>
</ul>
</li>
</ul>
<p><strong>HttpSession相关</strong></p>
<ul>
<li>HttpSessionListener：<ul>
<li><code>void sessionCreated(HttpSessionEvent event)</code>：会话创建时调用</li>
<li><code>void sessionDestroyed(HttpSessionEvent event)</code>：会话销毁时调用</li>
</ul>
</li>
</ul>
<p><strong>ServletRequest相关</strong></p>
<ul>
<li>ServletRequestListener<ul>
<li><code>void requestInitialized(ServletRequestEvent event)</code>：请求开始时调用</li>
<li><code>void requestDestroyed(ServletRequestEvent event)</code>：请求结束时调用</li>
</ul>
</li>
</ul>
<p><strong>相关Event的介绍</strong></p>
<ul>
<li>ServletContextEvent：<code>ServletContext getServletContext()</code></li>
<li>HttpSessionEvent：<code>HttpSession getSession()</code></li>
<li>ServletRequestEvent：<ul>
<li><code>ServletRequest getServletRequest()</code></li>
<li><code>ServletContext getServletContext()</code></li>
</ul>
</li>
</ul>
<h3 id="操作属性域的监听器"><a href="#操作属性域的监听器" class="headerlink" title="操作属性域的监听器"></a>操作属性域的监听器</h3><p><strong>ServletContext相关</strong></p>
<ul>
<li>ServletContextAttributeListener<ul>
<li><code>void attributeAdded(ServletContextAttributeEvent event)</code>：向ServletContext域中添加属性时调用</li>
<li><code>void attributeReplaced(ServletContextAttributeEvent event)</code>：向ServletContext域中更新属性时调用</li>
<li><code>void attributeRemoved(ServletContextAttributeEvent event)</code>：向ServletContext域中移除属性时调用</li>
</ul>
</li>
</ul>
<p><strong>HttpSession相关</strong></p>
<ul>
<li>HttpSessionAttributeListener<ul>
<li><code>void attributeAdded(HttpSessionAttributeEvent event)</code>：向session域中添加属性时调用</li>
<li><code>void attributeReplaced(HttpSessionAttributeEvent event)</code>：向session域中更新属性时调用</li>
<li><code>void attributeRemoved(HttpSessionAttributeEvent event)</code>：向session域中移除属性时调用</li>
</ul>
</li>
</ul>
<p><strong>ServletRequest相关</strong></p>
<ul>
<li>ServletRequestAttributeListener<ul>
<li><code>void attributeAdded(ServletRequestAttributeEvent event)</code>：向request域中添加属性时调用</li>
<li><code>void attributeReplaced(ServletRequestAttributeEvent event)</code>：向request域中更新属性时调用</li>
<li><code>void attributeRemoved(ServletRequestAttributeEvent event)</code>：向request域中移除属性时调用</li>
</ul>
</li>
</ul>
<p><strong>向关Event介绍</strong></p>
<ul>
<li>ServletContextAttributeEvent<ul>
<li><code>String getName()</code>：获取当前操作的属性名</li>
<li><code>Object getValue()</code>：获取当前操作的属性值</li>
<li><code>ServletContext getServletContext()</code>：获取ServletContext对象</li>
</ul>
</li>
<li>HttpSessionAttributeEvent<ul>
<li><code>String getName()</code>：获取当前操作的属性名</li>
<li><code>Object getValue()</code>：获取当前操作的属性值</li>
<li><code>HttpSession getSession()</code>：获取当前的session对象</li>
</ul>
</li>
<li>ServletRequestAttributeEvent<ul>
<li><code>String getName()</code>：获取当前操作的属性名</li>
<li><code>Object getValue()</code>：获取当前操作的属性值</li>
<li><code>ServletRequest getServletRequest()</code>：获取request</li>
<li><code>ServletContext getServletContext()</code>：获取ServletContext对象</li>
</ul>
</li>
</ul>
<h3 id="HttpSession的监听器"><a href="#HttpSession的监听器" class="headerlink" title="HttpSession的监听器"></a>HttpSession的监听器</h3><p>还有两个与HttpSession相关的特殊的监听器，这两个监听器的特点如下：</p>
<ol>
<li>不用在<code>web.xml</code>中进行配置</li>
<li>这两个监听器不是监听Session的，而是监听Bean的。即让Bean类实现监听器接口，然后再把Bean对象添加到Session与中</li>
</ol>
<p>这两个监听器是：</p>
<ul>
<li>HttpSessionBindingListener：<ul>
<li><code>void valueBound(HttpSessionBindingEvent event)</code>：当监听器对象被添加到session中会调用这个方法</li>
<li><code>void valueUnbound(HttpSessionBindingEvent event)</code>：当监听器对象从session中移除时会调用这个方法</li>
</ul>
</li>
<li>HttpSessionActivationListener<ul>
<li><code>void sessionWillPassivate(HttpSessionEvent event)</code>：当对象感知被活化时调用本方法</li>
<li><code>void sessionDidActivate(HttpSessionEvent event)</code>：当对象感知被钝化时调用被方法</li>
</ul>
</li>
</ul>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="什么是Filter"><a href="#什么是Filter" class="headerlink" title="什么是Filter"></a>什么是Filter</h3><ol>
<li>Filter是JavaWeb的三大组件之一</li>
<li>Filter是Java EE规范</li>
<li>Filter的作用是：拦截请求，过滤响应</li>
</ol>
<p>拦截请求常见的应用场景：</p>
<ol>
<li>权限检查</li>
<li>日志操作</li>
<li>事务管理</li>
<li>…</li>
</ol>
<h3 id="Filter的使用步骤"><a href="#Filter的使用步骤" class="headerlink" title="Filter的使用步骤"></a>Filter的使用步骤</h3><ol>
<li>编写一个类实现Filter接口</li>
<li>实现<code>doFilter</code>方法</li>
<li>在<code>web.xml</code>中配置Filter（类似于Servlet的配置）</li>
</ol>
<p><strong>用户权限校验</strong></p>
<p>要求：在你的web工程下，有一个admin目录。这个admin目录下的所有资源（html页面、jpg图片、jsp文件等等）都必须是用户登录之后才允许访问的。</p>
<p>思考：根据之前我们学过的内容。我们知道，用户登录之后都会把用户信息保存到Session域中。所以要检查用户是否登录，可以判断session中是否包含有用户登录的信息即可！！！</p>
<p>在jsp页面中进行权限验证：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//检查是已经登录</span></span><br><span class="line">    Object user = session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//转发到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>很明显这种方式只适合于<code>.jsp</code>文件</p>
<p><code>Filter</code>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-09 9:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doFilter方法专门用户拦截请求，过滤响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//进行权限检查</span></span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        Object user = req.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//转发到登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>文件中的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- filter标签用于配置一个过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给filter起一个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zxw.web.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表示当前的拦截路径给哪个Filter使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置拦截路径</span></span><br><span class="line"><span class="comment">    /表示请求地址为：http://ip:port/工程路径/ 映射到idea的web目录</span></span><br><span class="line"><span class="comment">    /admin/*表示 web下的admin目录下的所有内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><p>Filter接口中有如下三个方法：</p>
<ul>
<li><code>void init(FilterConfig filterConfig)</code>：初始化方法，在web工程启动时执行</li>
<li><code>void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</code>：每次拦截到请求都会执行</li>
<li><code>void destroy()</code>：销毁方法，在web工程关闭时执行</li>
</ul>
<h3 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h3><p>FilterConfig类就是Filter的配置类。</p>
<p>Tomcat在创建Filter的同时也会创建一个FilterConfig类对象，其中包含了Filter配置文件的相关信息</p>
<p><strong>FilterConfig的作用</strong></p>
<ol>
<li>获取Filter的名称，即<code>filter-name</code>标签中的内容</li>
<li>获取Filter配置中<code>init-param</code>中的初始化参数</li>
<li>获取ServletContext对象</li>
</ol>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("filter的init（FilterConfig filterConfig)");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取Filter的名称，即`&lt;filter-name&gt;`标签中的内容</span></span><br><span class="line">    System.out.println(<span class="string">"filter-name的值是:"</span> + filterConfig.getFilterName());</span><br><span class="line">    <span class="comment">//2. 获取在Filter中配置的`init-param`初始化参数</span></span><br><span class="line">    System.out.println(<span class="string">"url:"</span> + filterConfig.getInitParameter(<span class="string">"url"</span>));</span><br><span class="line">    <span class="comment">//3. 获取ServletContext对象</span></span><br><span class="line">    System.out.println(filterConfig.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>web.xml</code>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- filter标签用于配置一个过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给filter起一个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zxw.web.filter.AdminFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表示当前的拦截路径给哪个Filter使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AdminFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置拦截路径</span></span><br><span class="line"><span class="comment">    /表示请求地址为：http://ip:port/工程路径/ 映射到idea的web目录</span></span><br><span class="line"><span class="comment">    /admin/*表示 web下的admin目录下的所有内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="FilterChain过滤器链"><a href="#FilterChain过滤器链" class="headerlink" title="FilterChain过滤器链"></a>FilterChain过滤器链</h3><p>FilterChain就是过滤链，因为Filter向链条一样一次执行，只有前面的过滤器执行了FilterChain对象的<code>doFilter</code>方法放行之后，后面的Filter或者Servlet等Web资源才能够执行！如果Filter没有放行，那么就会被拦截，后面的该过滤器的后置代码以及链后面的内容都不会执行！</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200702181800408.png" align="left"/>

<p><strong>FilterChain.doFilter()方法的作用</strong>：</p>
<ol>
<li>执行下一个Filter过滤器（如果有）</li>
<li>执行目标资源（没有Filter)</li>
</ol>
<p>在多个Filter过滤器执行的时候，它们执行的有限顺序是由它们在<code>web.xml</code>中从上到下配置的顺序决定的！！！</p>
<p><strong>多个Filter过滤器执行的特点</strong>：</p>
<ol>
<li>所有filter和目标资源<strong>默认</strong>都执行在同一个线程中!</li>
<li>多个Filter共同执行的时候，它们都是用同一个Request对象</li>
</ol>
<h3 id="Filter的拦截路径"><a href="#Filter的拦截路径" class="headerlink" title="Filter的拦截路径"></a>Filter的拦截路径</h3><h4 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h4><p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/target.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上配置的路径，表示请求地址必须为：<code>http://ip:port/工程路径/target.jsp</code>  才会被过滤器过滤</p>
<h4 id="目录匹配"><a href="#目录匹配" class="headerlink" title="目录匹配"></a>目录匹配</h4><p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表示请求地址为：<code>http://ip:port/工程路径/admin/*</code>才会被过滤器过滤</p>
<h4 id="后缀名匹配"><a href="#后缀名匹配" class="headerlink" title="后缀名匹配"></a>后缀名匹配</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>过滤所有.html结尾的路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>过滤所有.do结尾的路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上配置的路径，表示请求地址必须是以.action结尾才会被拦截</p>
<p><strong>注意：</strong><font color="red">Filter过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！</font></p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>监听器</tag>
        <tag>过滤器</tag>
        <tag>Listener</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2020/07/03/MyBatis/</url>
    <content><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><h3 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h3><ul>
<li>MyBatis是一个优秀的<strong>持久层框架</strong></li>
<li>它支持自定义SQL、存储过程以及高级映射</li>
<li>MyBatis免除了几乎所有的JDBC代码以及设置参数和获取结果集的工作。</li>
<li>MyBatis可以通过简单的<strong>XML</strong>或<strong>注解</strong>来配置和映射原始类型、接口和Java POJO为数据库中的记录（ORM）</li>
</ul>
<blockquote>
<p>MyBatis原名iBatis，是apache的一个开源项目，2010年迁移到了google code，并且改名为MyBatis，我们现在所说的MyBatis一般指的是MyBatis 3.0之后的版本</p>
</blockquote>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p><strong>什么是持久化？</strong></p>
<p>持久化就是把数据保存到可长期保存数据的存储设备中的技术，例如：JDBC以及文件的IO。</p>
<p><strong>为什么需要持久化？</strong></p>
<p>内存中的数据一旦掉电数据就会丢失而且内存的价格，所以将数据长期存储在内存中是不可靠的，此时就需要使用一种技术将内存中的数据长期存储在一种可掉电式存储设备中，这就是持久化技术诞生的原因。</p>
<h3 id="持久层（DAO）"><a href="#持久层（DAO）" class="headerlink" title="持久层（DAO）"></a>持久层（DAO）</h3><p>什么是持久层？</p>
<ul>
<li>持久层就是完成将数据在内存和可掉电式存储设备之间转化的代码模块（和业务逻辑层、表现层共同构成了JavaWeb三层架构）</li>
<li>持久层专注于数据的持久化功能并且应当尽量避免和其它层的耦合（有清晰的界限）</li>
</ul>
<h3 id="为什么要学习MyBatis？"><a href="#为什么要学习MyBatis？" class="headerlink" title="为什么要学习MyBatis？"></a>为什么要学习MyBatis？</h3><p>前面已经学习了使用JDBC来实现持久层，但是JDBC充其量也只能算是一个持久层的工具类，而持久层是有很多重复性的功能需要完成，如果全部都是用这些工具类来完成，对于开发人员来说成本太高。</p>
<p>框架之所以称之为框架，就是在其中封装了很多我们经常使用的功能，这些功能大大地提高了开发效率，减少了重复代码的编写</p>
<p>MyBatis是一个<strong>半自动</strong>的ORM（Object Relationship Mapping，对象关系映射）框架（半自动是因为仍然需要自己编写SQL语句，Hibernate是一个全自动的ORM框架）。</p>
<p><strong>框架的作用</strong>：很多东西不使用框架也可以实现，但是使用了框架会变得更简单！</p>
<h2 id="MyBatis快速入门"><a href="#MyBatis快速入门" class="headerlink" title="MyBatis快速入门"></a>MyBatis快速入门</h2><p><strong>1、创建数据库和表并插入数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mybatis;</span><br><span class="line"><span class="keyword">USE</span> mybatis;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_employee(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">    last_name <span class="built_in">VARCHAR</span>(<span class="number">255</span>), </span><br><span class="line">    gender <span class="built_in">CHAR</span>(<span class="number">1</span>), </span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_employee(last_name, gender, email) <span class="keyword">VALUES</span>(<span class="string">'tom'</span>, <span class="number">0</span>, <span class="string">'tom@qq.com'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>2、添加mybatis、mysql驱动、junit4以及log4j的依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、编写实体类和持久层接口</strong></p>
<p><code>Employee.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>EmployeeDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、编写主配置文件和映射配置文件</strong></p>
<p>主配置文件<code>SqlMapConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 连接数据库的相关参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/zxw/dao/EmployeeDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>EmployeeDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.EmployeeDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"employeeMap"</span> <span class="attr">type</span>=<span class="string">"com.zxw.domain.Employee"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"last_name"</span> <span class="attr">property</span>=<span class="string">"lastName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"employeeMap"</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM tb_employee</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>5、log4j的配置文件</strong></p>
<p><code>log4j.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6、编写测试类</strong></p>
<p><strong>`HelloMyBatis.java</strong>`</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMyBatis</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取主配置文件的输入流对象</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//获取SqlSession</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//通过SqlSession对象获取EmployeeDao的代理类对象</span></span><br><span class="line">        EmployeeDao employeeDao = sqlSession.getMapper(EmployeeDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用代理dao类对象中的方法</span></span><br><span class="line">        List&lt;Employee&gt; employees = employeeDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><ul>
<li>SqlSession的实例<font color="red">不是线程安全</font>的，因此是不能被共享的</li>
<li>SqlSession每次<font color="red">使用完成后需要正确关闭</font>，这个关闭操作是必须的</li>
<li>SqlSession可以直接调用方法的id（例如：com.zxw.dao.EmployeeDao.findAll）进行数据库操作，但是我们一般还是推荐使用SqlSession获取到Dao接口的代理类，执行对象的方法，这样可以以更安全地进行类型检查操作。</li>
</ul>
<h2 id="MyBatis全局配置文件"><a href="#MyBatis全局配置文件" class="headerlink" title="MyBatis全局配置文件"></a>MyBatis全局配置文件</h2><p>MyBatis的配置文件包含了影响MyBatis行为的设置（settings）和属性（properties）信息。文档的顶层结构如下：</p>
<ul>
<li>configuration 配置<ul>
<li>properties 属性</li>
<li>settings 设置</li>
<li>typeAliases 类名命名</li>
<li>typeHandlers 类型处理器</li>
<li>objectFactory 对象工厂</li>
<li>plugins 插件</li>
<li>environments 环境<ul>
<li>envrionment 环境变量<ul>
<li>transactionManager 事务管理器</li>
<li>dataSource 数据源</li>
</ul>
</li>
</ul>
</li>
<li>databaseIdProvider 数据库厂商标识</li>
<li>mappers 映射器</li>
</ul>
</li>
</ul>
<h3 id="properties属性"><a href="#properties属性" class="headerlink" title="properties属性"></a>properties属性</h3><p>properties标签可以引入properties文件的内容，或者在其内部使用property标签来添加键值对</p>
<p><strong>使用示例</strong></p>
<p><code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>在主配置文件中使用<code>properties</code>标签引入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入db.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改数据源的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>property标签的使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"key1"</span> <span class="attr">value</span>=<span class="string">"value1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>如果属性在不止一个地方进行了配置，那么MyBatis将按照下面的顺序来加载：</strong></p>
<ul>
<li>在properties标签内指定的属性首先被读取</li>
<li>然后根据properties元素中的resource属性读取类路径下属性文件或根据url属性指定的路径去读取属性文件，并覆盖已读取的同名属性</li>
<li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性</li>
</ul>
<h3 id="settings设置"><a href="#settings设置" class="headerlink" title="settings设置"></a>settings设置</h3><p>settings标签中配置的内容是MyBatis中极为重要的设置，它们会改变MyBatis的运行时行为。</p>
<p>详细内容请参考：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p>
<table>
<thead>
<tr>
<th align="left">设置名</th>
<th align="left">描述</th>
<th align="left">有效值</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cacheEnabled</td>
<td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">lazyLoadingEnabled</td>
<td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">aggressiveLazyLoading</td>
<td align="left">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td>
<td align="left">true | false</td>
<td align="left">false （在 3.4.1 及之前的版本中默认为 true）</td>
</tr>
<tr>
<td align="left">multipleResultSetsEnabled</td>
<td align="left">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">useColumnLabel</td>
<td align="left">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">useGeneratedKeys</td>
<td align="left">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">autoMappingBehavior</td>
<td align="left">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>
<td align="left">NONE, PARTIAL, FULL</td>
<td align="left">PARTIAL</td>
</tr>
<tr>
<td align="left">autoMappingUnknownColumnBehavior</td>
<td align="left">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td>
<td align="left">NONE, WARNING, FAILING</td>
<td align="left">NONE</td>
</tr>
<tr>
<td align="left">defaultExecutorType</td>
<td align="left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>
<td align="left">SIMPLE REUSE BATCH</td>
<td align="left">SIMPLE</td>
</tr>
<tr>
<td align="left">defaultStatementTimeout</td>
<td align="left">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>
<td align="left">任意正整数</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">defaultFetchSize</td>
<td align="left">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>
<td align="left">任意正整数</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">defaultResultSetType</td>
<td align="left">指定语句默认的滚动策略。（新增于 3.5.2）</td>
<td align="left">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td>
<td align="left">未设置 (null)</td>
</tr>
<tr>
<td align="left">safeRowBoundsEnabled</td>
<td align="left">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">safeResultHandlerEnabled</td>
<td align="left">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>
<td align="left">true | false</td>
<td align="left">True</td>
</tr>
<tr>
<td align="left">mapUnderscoreToCamelCase</td>
<td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>
<td align="left">true | false</td>
<td align="left">False</td>
</tr>
<tr>
<td align="left">localCacheScope</td>
<td align="left">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>
<td align="left">SESSION | STATEMENT</td>
<td align="left">SESSION</td>
</tr>
<tr>
<td align="left">jdbcTypeForNull</td>
<td align="left">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td>
<td align="left">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>
<td align="left">OTHER</td>
</tr>
<tr>
<td align="left">lazyLoadTriggerMethods</td>
<td align="left">指定对象的哪些方法触发一次延迟加载。</td>
<td align="left">用逗号分隔的方法列表。</td>
<td align="left">equals,clone,hashCode,toString</td>
</tr>
<tr>
<td align="left">defaultScriptingLanguage</td>
<td align="left">指定动态 SQL 生成使用的默认脚本语言。</td>
<td align="left">一个类型别名或全限定类名。</td>
<td align="left">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>
</tr>
<tr>
<td align="left">defaultEnumTypeHandler</td>
<td align="left">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td>
<td align="left">一个类型别名或全限定类名。</td>
<td align="left">org.apache.ibatis.type.EnumTypeHandler</td>
</tr>
<tr>
<td align="left">callSettersOnNulls</td>
<td align="left">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">returnInstanceForEmptyRow</td>
<td align="left">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>
<td align="left">true | false</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">logPrefix</td>
<td align="left">指定 MyBatis 增加到日志名称的前缀。</td>
<td align="left">任何字符串</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">logImpl</td>
<td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">proxyFactory</td>
<td align="left">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>
<td align="left">CGLIB | JAVASSIST</td>
<td align="left">JAVASSIST （MyBatis 3.3 以上）</td>
</tr>
<tr>
<td align="left">vfsImpl</td>
<td align="left">指定 VFS 的实现</td>
<td align="left">自定义 VFS 的实现的类全限定名，以逗号分隔。</td>
<td align="left">未设置</td>
</tr>
<tr>
<td align="left">useActualParamName</td>
<td align="left">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td>
<td align="left">true | false</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">configurationFactory</td>
<td align="left">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td>
<td align="left">一个类型别名或完全限定类名。</td>
<td align="left">未设置</td>
</tr>
</tbody></table>
<p>这里以mapUnderscoreToCamelCase为例，它表示是否将数据库中字段和实体类中的驼峰命名属性进行映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启数据库和驼峰命名属性的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启了之后，就可以将驼峰命名的属性和数据库中单词之间以下划线分隔的方式进行映射！</p>
<h3 id="typeAliases别名处理器"><a href="#typeAliases别名处理器" class="headerlink" title="typeAliases别名处理器"></a>typeAliases别名处理器</h3><ul>
<li><p>类型别名是为Java类型设置一个短的名字，可以方便我们引用某个类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.zxw.bean.Employee"</span> <span class="attr">alias</span>=<span class="string">"employee"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.zxw.bean.Department"</span> <span class="attr">alias</span>=<span class="string">"department"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类很多的情况下，可以批量设置别名这个包下的每一个类创建一个默认的别名，就是简单类名小写：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.bean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以使用@Alias注解为其指定一个别名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"emp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>值得注意的是，MyBatis已经为许多常见的Java类型内建了相应的类型别名。它们都是<font color="red">大小写不敏感</font>的，我们在起别名的时候千万不要占有已有的别名</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200523211851599.png" align="left"/>

<h3 id="typeHandlers类型处理器"><a href="#typeHandlers类型处理器" class="headerlink" title="typeHandlers类型处理器"></a>typeHandlers类型处理器</h3><p>MyBatis在预处理语句（PreparedStatement）中设置一个参数，或者是从结果集中取出一个值，都会使用到<font color="red">类型处理器</font>将获取的值以合适的方式进行转换。</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200523212051649.png" align="left"/>



<h4 id="日期类型的处理"><a href="#日期类型的处理" class="headerlink" title="日期类型的处理"></a>日期类型的处理</h4><ul>
<li><p><font color="red">日期和时间的处理</font>，JDK 1.8以前一直是一个头疼的问题。我们通常使用<font color="red">JSR310</font>规范领导者Stephen Colebourne创建的<font color="red">Joda-Time</font>来操作。1.8已经实现了全部的JSR310规范了。</p>
</li>
<li><p>日期时间处理上，我们可以使用MyBatis基于JSR310（Date and Time API）编写的各种<font color="red">日期时间处理器</font>。</p>
</li>
<li><p>MyBatis 3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的。</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200523212605564.png" align="left"/>



</li>
</ul>
<h4 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a>自定义类型处理器</h4><ul>
<li>我们可以重写类型处理器或创建自己的类型处理器来处理不支持或非标准的类型</li>
<li>步骤：<ol>
<li>实现<code>org.apache.ibatis.type.TypeHandler</code>接口或继承<code>org.apache.ibatis.type.BaseTypeHandler</code>类</li>
<li>指定其映射某个JDBC类型（可选操作）</li>
<li>在MyBatis全局配置文件中注册</li>
</ol>
</li>
</ul>
<p>在讲到<strong>MyBatis原理</strong>的章节时，会对自定义类型处理器进行仔细的研究！</p>
<h3 id="plugins插件"><a href="#plugins插件" class="headerlink" title="plugins插件"></a>plugins插件</h3><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过<font color="red">动态代理机制</font>，可以介入四大对象的任何一个方法的执行。在插件开发章节会进行详细介绍！</p>
<ul>
<li><font color="red">Executor</font>（update、query、flushStatements、commit、rollback、getTransaction、close、isClosed）</li>
<li><font color="red">ParameterHandler</font>（getParameterObject、setParameters）</li>
<li><font color="red">ResultSetHandler</font> (handleResultSets, handleOutputParameters)</li>
<li><font color="red">StatementHandler</font> (prepare, parameterize, batch, update, query)</li>
</ul>
<h3 id="environments环境"><a href="#environments环境" class="headerlink" title="environments环境"></a>environments环境</h3><ul>
<li>MyBatis可以配置多种环境，比如开发、测试和生产环境等</li>
<li>每种环境使用一个<code>environment</code>标签进行配置并指定唯一标识符</li>
<li>可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境</li>
</ul>
<h4 id="environment-指定具体环境"><a href="#environment-指定具体环境" class="headerlink" title="environment-指定具体环境"></a>environment-指定具体环境</h4><ul>
<li>id：指定当前环境的唯一标识</li>
<li>transactionManager和dataSource都必须有</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h5><ul>
<li><p>type：JDBC | MANAGED | 自定义</p>
<ul>
<li><p><code>JDBC</code>：使用了JDBC的提交和回滚设置,依赖于从数据源得到的连接来管理事务范围</p>
<p>JdbcTransactionManager</p>
</li>
<li><p><code>MANAGED</code>：不提交或回滚一个连接，让容器来管理事务的整个生命周期（比如Java EE应用服务器的上下文）。</p>
<p>ManagedTransactionFactory</p>
</li>
<li><p><code>自定义</code>：实现TransactionFactory接口，type=全类名/别名</p>
</li>
</ul>
</li>
</ul>
<h5 id="dataSource"><a href="#dataSource" class="headerlink" title="dataSource"></a>dataSource</h5><ul>
<li>type：UNPOOLED | POOLED | JNDI | 自定义<ul>
<li>UNPOOLED：不使用连接池，UnpooledDataSourceFactory</li>
<li>POOLED：使用连接池，PooledDataSourceFactory</li>
<li>JNDI：在EJB或应用服务器这类容器中查找指定的数据源</li>
<li>自定义：实现DataSourceFactory接口，定义数据源的获取方式</li>
</ul>
</li>
<li><font color="red">实际开发中，使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</font></li>
</ul>
<h3 id="databaseProvider数据库厂商标识"><a href="#databaseProvider数据库厂商标识" class="headerlink" title="databaseProvider数据库厂商标识"></a>databaseProvider数据库厂商标识</h3><ul>
<li><p>MyBatis可以根据不同的数据库厂商执行不同的语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库厂商标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Type：DB_VENDOR</p>
<ul>
<li>使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义。</li>
</ul>
</li>
<li><p>Property-name：数据库厂商标识</p>
</li>
<li><p>Property-value：为标识起一个别名，方便SQL语句使用databaseId属性引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"employee"</span> <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">	select * from tb_employee</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>DB_VENDOR</p>
<ul>
<li>会通过DatabaseMetaData#getDatabaseProductName()返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短</li>
</ul>
<p>MyBatis匹配规则如下：</p>
<ol>
<li>如果没有配置databaseIdProvider标签，那么<code>databaseId=null</code></li>
<li>如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置<code>databaseId=配置指定的值</code>，否则依旧为null</li>
<li>如果databaseId不为null，它只会找到配置databaseId的SQL语句</li>
<li>MyBatis会加载<font color="red">不带databaseId</font>属性和带有<font color="red">匹配当前数据库databaseId属性的所有语句</font>。如果同时找到带有databaseId和不带databaseId的相同语句，则后者会被舍弃。</li>
</ol>
<h3 id="mappers映射"><a href="#mappers映射" class="headerlink" title="mappers映射"></a>mappers映射</h3><ul>
<li><p>mapper逐个注册SQL映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/zxw/dao/Person.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///D:/UserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.zxw.dao.AccountDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或者使用批量注册：</p>
<p>这种方式要求SQL映射文件必须和接口名相同并且在同一目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="MyBatis映射配置文件"><a href="#MyBatis映射配置文件" class="headerlink" title="MyBatis映射配置文件"></a>MyBatis映射配置文件</h2><p>MyBatis真正强大之处在于它的语句映射，这是它的魔力所在。映射器的XML文件相对简单，如果你将它和具有相同功能的JDBC代码进行比较，就会发现它省掉了将近95%的代码。MyBatis致力于减少使用成本，让用户能够更专注于SQL代码。</p>
<p>QL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p>
<ul>
<li><code>cache</code>：该命名空间的缓存配置</li>
<li><code>cache-ref</code>：引用其它命名空间的缓存配置</li>
<li><code>resultMap</code>：描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素</li>
<li><s><code>parameterMap</code> – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。</s></li>
<li><code>sql</code>：可被其它语句引用的可重用语句块</li>
<li><code>insert</code>：映射插入语句</li>
<li><code>update</code>：映射更新语句</li>
<li><code>delete</code>：映射删除语句</li>
<li><code>select</code>：映射查询语句</li>
</ul>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>查询语句是MyBatis中最常用的元素之一，光能把数据存到数据库中价值并不大，还要能重新取出来才有用，多数应用也都是查询比修改频繁。MyBatis的基本原则之一是：<strong>在每个插入、更新或删除操作之间，通常会执行多个查询操作</strong>。因此，MyBatis在查询和结果映射做了相当多的改进。一个简单的select元素是非常简单的。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">	select * from person where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句名为selectPerson，接受一个int（或Integer）类型的参数，并返回一个HashMap类型的对象，其中键是列名，值便是结果行中的对应值。</p>
<p>注意参数符号：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>这就告诉MyBatis创建一个预处理语句（PreparedStatement）参数，在JDBC中，这样一个参数在SQL中会由一个<code>?</code>来标识，并被传递到一个新的预处理语句中，就像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//近似的JDBC代码，非MyBatis代码</span></span><br><span class="line">String selectPerson = <span class="string">"SELECT * FROM person WHERE id=?"</span>;</span><br><span class="line">ps.setInt(<span class="number">1</span>, id);</span><br></pre></td></tr></table></figure>

<p>当然，使用JDBC就意味着使用更多的代码，以便提取结果并将它们映射到对象实例中，而这就是MyBatis的拿手好戏。参数和结果映射细节会分别在后面单独的小节中说明。</p>
<p><strong>select元素的属性</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>id</code></td>
<td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td align="left"><code>parameterType</code></td>
<td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="left"><del>parameterMap</del></td>
<td align="left">用于引用外部 parameterMap 的属性，目前<strong>已被废弃</strong>。请使用行内参数映射和 parameterType 属性。</td>
</tr>
<tr>
<td align="left"><code>resultType</code></td>
<td align="left">期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td align="left"><code>resultMap</code></td>
<td align="left">对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td align="left"><code>flushCache</code></td>
<td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td>
</tr>
<tr>
<td align="left"><code>useCache</code></td>
<td align="left">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td>
</tr>
<tr>
<td align="left"><code>timeout</code></td>
<td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td align="left"><code>fetchSize</code></td>
<td align="left">这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="left"><code>resultSetType</code></td>
<td align="left">FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。</td>
</tr>
<tr>
<td align="left"><code>databaseId</code></td>
<td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
</tr>
<tr>
<td align="left"><code>resultOrdered</code></td>
<td align="left">这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：<code>false</code>。</td>
</tr>
<tr>
<td align="left"><code>resultSets</code></td>
<td align="left">这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。</td>
</tr>
</tbody></table>
<h3 id="insert、update和delete"><a href="#insert、update和delete" class="headerlink" title="insert、update和delete"></a>insert、update和delete</h3><p>数据变更语句insert、update和delete的实现非常接近：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"insertAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"updateAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"deleteAuthor"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushCache</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>insert、update、delete元素的属性</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>id</code></td>
<td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td align="left"><code>parameterType</code></td>
<td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td>
</tr>
<tr>
<td align="left"><code>parameterMap</code></td>
<td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td>
</tr>
<tr>
<td align="left"><code>flushCache</code></td>
<td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td>
</tr>
<tr>
<td align="left"><code>timeout</code></td>
<td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td align="left"><code>useGeneratedKeys</code></td>
<td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td>
</tr>
<tr>
<td align="left"><code>keyProperty</code></td>
<td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>keyColumn</code></td>
<td align="left">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>databaseId</code></td>
<td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td>
</tr>
</tbody></table>
<p>下面是insert、update、delete的语句的示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span>&gt;</span></span><br><span class="line">	insert into user(id, name, gender, email) </span><br><span class="line">    values(#&#123;id&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></span><br><span class="line">	update user </span><br><span class="line">    set name=#&#123;name&#125;, </span><br><span class="line">    	gender=#&#123;gender&#125;, </span><br><span class="line">    	email=#&#123;email&#125;</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delte</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span>&gt;</span></span><br><span class="line">	delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delte</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="插入语句的主键生成"><a href="#插入语句的主键生成" class="headerlink" title="插入语句的主键生成"></a>插入语句的主键生成</h4><p>如前所述，插入语句的配置规则更加丰富，在插入语句里面有一些额外的属性和子元素用来处理主键的生成，并且提供了多种生成方式。</p>
<p>首先，如果你的<strong>数据库支持自动生成主键的字段</strong>（比如MySQL和SQL Server），那么你可以设置<code>useGenerateKeys=“true”</code>，然后把<code>keyProperty</code>设置为目标属性就OK了。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">useGenerateKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">	insert into user(name, gender, email) </span><br><span class="line">    values(#&#123;name&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你的数据库还支持多行插入，你也可以传一个User数组或集合，并返回自动生成的主键</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUsers"</span> <span class="attr">useGenerateKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">	insert into user(name, gender, email) values </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">    	(#&#123;item.name&#125;, #&#123;item.gender&#125;, #&#123;item.email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于<strong>不支持自动生成主键列的数据库和可能不支持自动生成主键的JDBC驱动</strong>，MyBatis还有另外一种方式生成主键。</p>
<p>这里有一个简单（也很傻）的示例，它可以生成一个随机ID（不建议实际使用，这里只是为了展示MyBatis处理问题的灵活性和宽容度）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFOER"</span>&gt;</span></span><br><span class="line">    	select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user(id, name, gender, email) </span><br><span class="line">    values (#&#123;id&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面示例中，首先会运行<code>selectKey</code>元素中的语句，并设置user的id，然后才会调用插入语句。这样就实现了数据库自动生成主键类似的行为，同时保持了Java代码的简洁。</p>
<p><code>selectKey</code>元素描述如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">resultType</span>=<span class="string">"int"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">order</span>=<span class="string">"BEFORE"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>keyProperty</code></td>
<td align="left"><code>selectKey</code> 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>keyColumn</code></td>
<td align="left">返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td align="left"><code>resultType</code></td>
<td align="left">结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。</td>
</tr>
<tr>
<td align="left"><code>order</code></td>
<td align="left">可以设置为 <code>BEFORE</code> 或 <code>AFTER</code>。如果设置为 <code>BEFORE</code>，那么它首先会生成主键，设置 <code>keyProperty</code> 再执行插入语句。如果设置为 <code>AFTER</code>，那么先执行插入语句，然后是 <code>selectKey</code> 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。</td>
</tr>
<tr>
<td align="left"><code>statementType</code></td>
<td align="left">和前面一样，MyBatis 支持 <code>STATEMENT</code>，<code>PREPARED</code> 和 <code>CALLABLE</code> 类型的映射语句，分别代表 <code>Statement</code>, <code>PreparedStatement</code> 和 <code>CallableStatement</code> 类型。</td>
</tr>
</tbody></table>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>这个元素可以用来定义可重用的SQL代码片段，以便在其他语句中使用。参数可以静态地（在加载的时候）确定下来，并且可以在不同的<code>include</code>元素中定义不同的参数值。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id, $&#123;alias&#125;.username, $&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个SQL片段可以在其他语句中使用，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  from some_table t1</span><br><span class="line">    cross join some_table t2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以在<code>include</code>元素的<code>refid</code>属性或内部语句中使用属性值，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sometable"</span>&gt;</span></span><br><span class="line">  $&#123;prefix&#125;Table</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">  from</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"$&#123;include_target&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    field1, field2, field3</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"someinclude"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"Some"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include_target"</span> <span class="attr">value</span>=<span class="string">"sometable"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="单个参数的传递"><a href="#单个参数的传递" class="headerlink" title="单个参数的传递"></a>单个参数的传递</h4><p>之前见到的所有语句都使用了简单的参数形式。实际上，参数是MyBatis非常强大的元素。对于大多数简单的使用场景，你都不需要使用复杂的参数，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">	select id, username, password </span><br><span class="line">    from user </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这个示例说明了一个非常简单的命名参数映射。鉴于参数类型（parameterType）会被自动设置为<code>int</code>这个参数可以随意命名。原始类型或简单数据类型（比如Integer和String）因为没有其他属性，会用它们的值来作为参数。</p>
<h4 id="多个参数的传递"><a href="#多个参数的传递" class="headerlink" title="多个参数的传递"></a>多个参数的传递</h4><p><strong>方式一</strong>：顺序传递法</p>
<p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(String username, String password)</span></span>;</span><br></pre></td></tr></table></figure>

<p>对应映射配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;0&#125; and password=#&#123;1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#{}</code>里面的数字代表传入参数的顺序</p>
<p>不建议使用这种方式，不直观，参数如果调换了顺序容易出错</p>
<p><strong>方式二</strong>：@Param注解传入参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String usernmae, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种方式在参数不多的情况下可以使用</p>
<p><strong>方式三</strong>：Map传参法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#{}</code>里面的名称对应的是Map中的key</p>
<p><strong>方式四</strong>：Java Bean传参法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里使用了别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span>&gt;</span></span><br><span class="line">	select * from user </span><br><span class="line">    where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>#{}</code>中的名称就是对应User类对象的属性</p>
<p>这种方式很直观，但是需要创建一个实体类，不易于扩展，需要增加属性，可以看情况使用。</p>
<p>更多MyBatis参数有关的内容参考：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Parameters" target="_blank" rel="noopener">MyBatis参数</a></p>
<h5 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a><code>#{}</code>和<code>${}</code>的区别</h5><p><code>#{}</code>是预编译处理，<code>${}</code>是字符串替换。</p>
<p>Mybatis在处理<code>#{}</code>时，会将sql中的<code>#{}</code>替换为?号，调用PreparedStatement的set方法来赋值；</p>
<p>Mybatis在处理<code>${}</code>时，就是把<code>${}</code>替换成变量的值。</p>
<p>使用<code>#{}</code>可以有效的防止SQL注入，提高系统安全性。</p>
<h3 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h3><p><code>resultMap</code>元素是MyBatis中最重要最强大的元素。它用于结果映射，下面是一个简单的示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">	select id, username, password </span><br><span class="line">    from user </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个查询语句没有显式指明resultMap，而是给出了<code>resultType</code>的值为Map，所以会将所有的结果映射成一个HashMap中。在绝大多数情况下，只需要指定<code>resultType</code>的值即可，很多时候会指定<code>resultType</code>为一个JavaBean或者POJO。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.bean.User"</span>&gt;</span></span><br><span class="line">	select id, username, password </span><br><span class="line">    from user </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句会将结果封装到一个User对象的对应属性当中（注意，这种方式一般要求属性名和数据库中表对应的列名相同）</p>
<p>即使列名与JavaBean中的属性名不匹配也没有关系，有两种方式来处理这个问题：</p>
<p><strong>方式一</strong>：使用别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">	select </span><br><span class="line">    	user_id as id, </span><br><span class="line">    	user_name as username, </span><br><span class="line">    	user_password as password </span><br><span class="line">    from user </span><br><span class="line">    where user_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二</strong>：使用<code>resultMap</code>属性</p>
<p>首先需要定义一个resultMap</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"user_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"user_password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后再查询语句的<code>resultMap</code>属性引用这个id即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultMap</span>=<span class="string">"userResultMap"</span>&gt;</span></span><br><span class="line">	select user_id, user_name, user_password </span><br><span class="line">    from user </span><br><span class="line">    where user_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h4><p>MyBatis创建时的一个思想就是：数据库不可能永远是你想要的那个样子，我们希望所有的数据都具备良好的第三范式或者BCNF范式，可以现实并非如此，resultMap就是MyBatis对于这个问题的解决方法</p>
<p><strong>resultMap子标签</strong></p>
<ul>
<li><code>constructor</code>：用于在实例化类时，注入结果到构造方法中<ul>
<li><code>idArg</code>：ID参数；标记出作为 ID 的结果可以帮助提高整体性能</li>
<li><code>arg</code>：将被注入到构造方法的一个普通结果</li>
</ul>
</li>
<li><code>id</code>：一个ID结果；标记出作为 ID 的结果可以帮助提高整体性能</li>
<li><code>result</code>：注入到一个字段或JavaBean属性的普通结果</li>
<li><code>association</code>：关联一个复杂类型</li>
<li><code>collection</code>：关联一个复杂类型的集合</li>
<li><code>discriminator</code>：根据情况来决定使用哪个resultMap<ul>
<li>case：基于某些值的结果映射</li>
</ul>
</li>
</ul>
<p><strong>resultMap标签的属性</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>id</code></td>
<td align="center">当前命名空间中的一个唯一标识，用于标识一个结果映射。</td>
</tr>
<tr>
<td align="center"><code>type</code></td>
<td align="center">类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。</td>
</tr>
<tr>
<td align="center"><code>autoMapping</code></td>
<td align="center">如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。</td>
</tr>
</tbody></table>
<p><strong>Tips</strong>: 最好逐步建立结果映射。单元测试可以在这个过程中起到很大帮助。 如果你尝试一次性创建巨大的结果映射，不仅容易出错，难度也会直线上升。 所以，从最简单的形态开始，逐步迭代。而且别忘了单元测试！ 有时候，框架的行为像是一个黑盒子（无论是否开源）。因此，为了确保实现的行为与你的期望相一致，最好编写单元测试。 并且单元测试在提交 bug 时也能起到很大的作用。</p>
<p><strong>resultMap中的子标签和属性的细节请参考</strong>：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Result_Maps" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#Result_Maps</a></p>
<h3 id="MyBatis多表查询"><a href="#MyBatis多表查询" class="headerlink" title="MyBatis多表查询"></a>MyBatis多表查询</h3><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>以用户和账户之间的一对多关系为例。</p>
<p><strong>步骤</strong>：</p>
<ol>
<li>建立两张表：用户表、账户表<ul>
<li>让用户表和账户表之间具备一对多的关系：需要在账户表中添加外键</li>
</ul>
</li>
<li>建立两个实体类：用户实体类和账户实体类<ul>
<li>让用户实体类和账户实体类之间能够体现出一对多的关系</li>
</ul>
</li>
<li>建立两个配置文件<ul>
<li>用户配置文件</li>
<li>账户配置文件 </li>
</ul>
</li>
<li>实现配置<ul>
<li>当我们查询用户时可以同时得到用户下所包含的账户信息</li>
<li>当我们查询账户时可以同时得到账户的所属用户信息</li>
</ul>
</li>
</ol>
<h5 id="一对一查询（多对一）"><a href="#一对一查询（多对一）" class="headerlink" title="一对一查询（多对一）"></a>一对一查询（多对一）</h5><p>如果只从一个账户来看，那么多对一也就是一对一。</p>
<p><code>Account.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="comment">//从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有账户，同时还要获取当前账户的所属用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>AccountDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装account和user的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有账户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">    select u.*, a.id aid, a.uid, a.money</span><br><span class="line">    from account a, user u</span><br><span class="line">    where a.uid=u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h5><p><code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>UserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">    select u.*, a.id aid, a.uid, a.money</span><br><span class="line">    from user u left outer join account a</span><br><span class="line">    on u.id=a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>以用户和角色为例。</p>
<p><strong>步骤</strong>：</p>
<ol>
<li>建立两张表：用户表、角色表<ul>
<li>让用户表和角色表之间具备多对多的关系：需要使用中间表，中间表中包含各自的主键，在中间表中是外键</li>
</ul>
</li>
<li>建立两个实体类：用户实体类和角色实体类<ul>
<li>让用户实体类和角色实体类之间能够体现出多对多的关系</li>
<li>各自包含对方一个集合引用</li>
</ul>
</li>
<li>建立两个配置文件<ul>
<li>用户配置文件</li>
<li>角色配置文件 </li>
</ul>
</li>
<li>实现配置<ul>
<li>当我们查询用户时可以同时得到用户下所包含的角色信息</li>
<li>当我们查询角色时可以同时得到角色的所包含用户信息</li>
</ul>
</li>
</ol>
<h5 id="Role到User多对多"><a href="#Role到User多对多" class="headerlink" title="Role到User多对多"></a>Role到User多对多</h5><p>实体类<code>Role.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line">    <span class="comment">//多对多的关系映射</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Role&#123;"</span> +</span><br><span class="line">                <span class="string">"roleId="</span> + roleId +</span><br><span class="line">                <span class="string">", roleName='"</span> + roleName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", roleDesc='"</span> + roleDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getRoleId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleId = roleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDesc</span><span class="params">(String roleDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDesc = roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dao接口<code>RoleDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>RoleDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义role表的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleUserMap"</span> <span class="attr">type</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"roleId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_name"</span> <span class="attr">property</span>=<span class="string">"roleName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_desc"</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"roleUserMap"</span>&gt;</span></span><br><span class="line">    SELECT u.*, r.id rid, r.role_name, r.role_desc</span><br><span class="line">    FROM role r LEFT OUTER JOIN user_role ur</span><br><span class="line">    ON r.id=ur.rid</span><br><span class="line">    LEFT OUTER JOIN USER u</span><br><span class="line">    ON ur.uid=u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="User到Role的多对多"><a href="#User到Role的多对多" class="headerlink" title="User到Role的多对多"></a>User到Role的多对多</h5><p>实体类<code>User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//多对多关系映射</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dao接口<code>UserDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射配置文件<code>UserDao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的ResultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"rid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询所有用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">    SELECT u.*, r.id rid, r.role_name, r.role_desc FROM USER u LEFT OUTER JOIN user_role ur</span><br><span class="line">    ON u.id=ur.uid</span><br><span class="line">    LEFT OUTER JOIN role r</span><br><span class="line">    ON ur.rid=r.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="延迟加载策略"><a href="#延迟加载策略" class="headerlink" title="延迟加载策略"></a>延迟加载策略</h3><p>前面介绍了MyBatis的一对一、一对多、多对多实现，这些加载方式都是立即加载的，即查询一个对象的同时会将其关联对象的信息也查询出来。</p>
<p><strong>延迟加载</strong>：与立即加载相对应的就是延迟加载，延迟加载就是在需要使用的时候才对关联的对象进行查询，延迟记载也称为<strong>懒加载</strong></p>
<p><strong>优点</strong>：先从单表查询，需要时再从关联表去关联查询，大大提高了数据库的性能（单表查询的效率要高于多表查询）</p>
<p><strong>坏处</strong>：因为只有需要使用到的时候才会进行查询，查询的过程也会占用一定的时间，所以可能会造成用户的等待时间边长，从而影响用户的体验。</p>
<p><strong>要使用延迟记载需要在主配置文件中开启延迟加载</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打开延迟加载的开关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将积极加载修改为按需加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>lazyLoadingEnabled</code>的默认值为<code>false</code>，<code>aggressivLazyLoading</code>的默认值在3.4.1（包含）前为true，之后为false</p>
<h4 id="使用assocation实现懒加载"><a href="#使用assocation实现懒加载" class="headerlink" title="使用assocation实现懒加载"></a>使用<code>assocation</code>实现懒加载</h4><p><strong>需求</strong>：查询账户信息同时查询用户信息</p>
<p>修改<code>AccountDao.xml</code>的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.AccountDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义封装account和user的ResultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容</span></span><br><span class="line"><span class="comment">         select属性指定的内容是查询用户的唯一标志</span></span><br><span class="line"><span class="comment">         column指定用户根据id查询时参数的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">javaType</span>=<span class="string">"user"</span> <span class="attr">select</span>=<span class="string">"com.zxw.dao.UserDao.findById"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有账户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">        select * from account;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有账户信息同时包含用户名和地址信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccount"</span> <span class="attr">resultType</span>=<span class="string">"accountUser"</span>&gt;</span></span><br><span class="line">        select a.*, u.username, u.address from account a, user u where u.id=a.uid;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时就实现了使用<code>assocation</code>实现延迟加载，</p>
<p><code>fetchType</code>属性：<code>assocation</code>标签的属性，可以自定义是否懒加载</p>
<ul>
<li><code>eager</code>：立即加载</li>
<li><code>lazy</code>：延迟加载</li>
</ul>
<h4 id="使用collection实现懒加载"><a href="#使用collection实现懒加载" class="headerlink" title="使用collection实现懒加载"></a>使用<code>collection</code>实现懒加载</h4><p><strong>需求</strong>：实现查询用户延迟加载账户信息</p>
<p><strong>在<code>AccountDao</code>中添加根据uid查询账户信息的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据uid查询账户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>在<code>AccountDao.xml</code>中进行配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据uid查询账户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    select * from account where uid=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改<code>UserDao.xml</code>中的配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义User的ResultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置user对象中accounts集合的映射</span></span><br><span class="line"><span class="comment">        column指定使用user表中的id作为account的uid进行查询</span></span><br><span class="line"><span class="comment">        select指定查询账户信息的语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">"com.zxw.dao.AccountDao.findById"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>collection</code>标签中也有<code>fetchType</code>属性</p>
<ul>
<li><code>eager</code>：立即加载</li>
<li><code>lazy</code>：延迟加载</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>这部分主要介绍了<code>cache</code>标签的使用，可以结合<strong>缓存机制</strong>章节进行学习，<code>cache</code>标签的细节参考：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache</a></p>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态SQL是MyBatis的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p>
<p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p>
<p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserIf"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">	select * from user where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">    	and id=#&#123;id&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">    	and username=#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">    	and password=#&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="choose（when、otherwise）"><a href="#choose（when、otherwise）" class="headerlink" title="choose（when、otherwise）"></a>choose（when、otherwise）</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.zxw.bean.Employee"</span>&gt;</span></span><br><span class="line">	select * from tb_employee </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">            	id=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"lastName != null"</span>&gt;</span></span><br><span class="line">            	last_name=#&#123;lastName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            	1=1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><p>前面几个例子已经合宜地解决了一个臭名昭著的动态 SQL 问题。现在回到之前的 “if” 示例，这次我们将 “state = ‘ACTIVE’” 设置成动态条件，看看会发生什么。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br></pre></td></tr></table></figure>

<p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br><span class="line">AND title like ‘someTitle’</span><br></pre></td></tr></table></figure>

<p>这个查询也会失败。这个问题不能简单地用条件元素来解决。这个问题是如此的难以解决，以至于解决过的人不会再想碰到这种问题。</p>
<p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p>
<p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p>
<p>用于动态更新语句的类似解决方案叫做 <em>set<em>。</em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthorIfNecessary"</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bio != null"</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p>
<p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>collection</code>：是属性中的集合</li>
<li><code>item</code>：是遍历出来的每一个元素</li>
<li><code>open</code>：是循环前面添加的内容</li>
<li><code>close</code>：是循环后面添加的内容</li>
<li><code>separator</code>：是循环结果用什么分隔符进行分隔</li>
<li><code>index</code><ul>
<li>当迭代列表、集合等可迭代对象或者数组时<ul>
<li><font color="red">index</font>是当前<font color="red">迭代的次数</font>，<font color="red">item</font>的值是本次<font color="red">迭代获取的元素</font></li>
</ul>
</li>
<li>当使用字典（或者Map.Entry对象的集合时）<ul>
<li><font color="red">index</font>是键，<font color="red">item</font>是值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。比如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update</span>(&#123;<span class="string">"&lt;script&gt;"</span>,</span><br><span class="line">  <span class="string">"update Author"</span>,</span><br><span class="line">  <span class="string">"  &lt;set&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='username != null'&gt;username=#&#123;username&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='password != null'&gt;password=#&#123;password&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='email != null'&gt;email=#&#123;email&#125;,&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"    &lt;if test='bio != null'&gt;bio=#&#123;bio&#125;&lt;/if&gt;"</span>,</span><br><span class="line">  <span class="string">"  &lt;/set&gt;"</span>,</span><br><span class="line">  <span class="string">"where id=#&#123;id&#125;"</span>,</span><br><span class="line">  <span class="string">"&lt;/script&gt;"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAuthorValues</span><span class="params">(Author author)</span></span>;</span><br></pre></td></tr></table></figure>



<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="多数据库支持"><a href="#多数据库支持" class="headerlink" title="多数据库支持"></a>多数据库支持</h3><p>如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如下面的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多数据库支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId == 'oracle'"</span>&gt;</span></span><br><span class="line">      select seq_users.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId == 'db2'"</span>&gt;</span></span><br><span class="line">      select nextval for seq_users from sysibm.sysdummy1"</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p><strong>缓存</strong>：存储在内存中的临时数据</p>
<ul>
<li>MyBatis包含了一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存</li>
</ul>
<p><strong>一级缓存和二级缓存</strong></p>
<ol>
<li>默认情况下，只开启了一级缓存（SqlSession级别的缓存，也称为<strong>本地缓存</strong>）</li>
<li>二级缓存需要手动开启和配置，它是基于namespace级别的缓存</li>
<li>为了提高可扩展性，MyBatis提供了一个Cache接口，可以通过实现Cache接口来自定义二级缓存</li>
</ol>
<p>MyBatis中缓存的查询顺序如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526092059788.png" align="left"/>



<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul>
<li><p>一级缓存（<strong>local cache</strong>），即<strong>本地缓存</strong>，作用域默认为sqlSession。当Session flush或者close后，该Session中的所有cache都会被清空</p>
</li>
<li><p><font color="red">本地缓存不能被关闭</font>，但是可以调用<code>clearCache()</code>来清空本地缓存，或者改变缓存的作用域</p>
</li>
<li><p>在MyBatis 3.1之后，可以配置本地缓存的作用域（在settings标签中配置）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200525090549356.png" align="left"/>

</li>
</ul>
<p><strong>一级缓存原理</strong></p>
<ul>
<li>同一次会话期间，只要查询过的数据都会保存在当前sqlSession的一个Map中，这个Map的key是：hashCode+查询的SqlId+编写的sql查询语句+参数</li>
</ul>
<p><strong>一级缓存失效的四种情况</strong></p>
<ol>
<li>不同的SqlSession对应不同的一级缓存</li>
<li>同一个SqlSession但是<strong>查询条件不同</strong></li>
<li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li>
<li>同一个SqlSession两次查询期间清空了缓存</li>
</ol>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul>
<li>二级缓存（second level cache），全局作用域缓存</li>
<li>二级缓存默认不开启，需要手动配置</li>
<li>MyBatis提供了二级缓存的接口及实现，缓存要求POJO实现Serializable接口</li>
<li>二级缓存在<strong>SqlSession关闭或提交</strong>之后才会生效</li>
</ul>
<p><strong>使用步骤</strong></p>
<ol>
<li><p>全局配置文件中开启二级缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要使用二级缓存的映射文件处使用cache标签配置缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>cache标签的相关内容可以查看<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache</a></p>
</li>
<li><p>注意定义个POJO类需要实现Serializable接口</p>
</li>
<li><p>在对应的select标签中配置<code>useCache</code>属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>useCache的默认值为true，如果需要配置查询的SQL语句不使用二级缓存，则需要设置<code>useCache=false</code></p>
</li>
</ol>
<h4 id="缓存相关属性"><a href="#缓存相关属性" class="headerlink" title="缓存相关属性"></a>缓存相关属性</h4><p><strong>cache标签的相关属性：</strong></p>
<ul>
<li><code>eviction</code>：缓存回收策略<ul>
<li><code>LRU</code>—最近最少使用的：移除最长时间不被使用的对象，<strong>默认值</strong></li>
<li><code>FIFO</code>—先进先出：按对象进入缓存的顺序来移除它们</li>
<li><code>SOFT</code>—软引用：移除基于垃圾回收器状态和软引用规则的对象</li>
<li><code>WEAK</code>—弱引用：更积极地移除基于垃圾回收器状态和弱引用规则的对象</li>
</ul>
</li>
<li><code>flushInterval</code>：刷新间隔，单位为毫秒<ul>
<li>默认情况下不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li>
</ul>
</li>
<li><code>readOnly</code>：只读<ul>
<li><code>true</code>：只读缓存：会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势</li>
<li><code>false</code>：读写缓存：会返回对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li>
</ul>
</li>
</ul>
<h3 id="缓存有关配置"><a href="#缓存有关配置" class="headerlink" title="缓存有关配置"></a>缓存有关配置</h3><ol>
<li>全局setting的<font color="red">cacheEabled</font><ul>
<li>配置二级缓存的开关。一级缓存一直是打开的</li>
</ul>
</li>
<li>select标签的<font color="red">useCache</font>属性<ul>
<li>配置这个select是否使用二级缓存。一级缓存一直是使用的</li>
</ul>
</li>
<li>sql标签的<font color="red">flushCache属性</font>：<ul>
<li>增删改默认flushCache=true。sql执行以后会同时清空一级缓存和二级缓存。查询默认flushCache=false</li>
</ul>
</li>
<li>sqlSession.clearCache()：<ul>
<li>只是用来清空一级缓存</li>
</ul>
</li>
<li>当在某一个作用域（一级缓存Session/二级缓存Namespaces）进行C/U/D操作后，默认该作用域下<font color="red">所有的select中的缓存都被clear</font></li>
</ol>
<h3 id="第三方缓存整合"><a href="#第三方缓存整合" class="headerlink" title="第三方缓存整合"></a>第三方缓存整合</h3><ul>
<li>EhCache是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider</li>
<li>MyBatis定义了Cache接口方便我们进行自定义拓展</li>
</ul>
<p><strong>整合步骤</strong>：</p>
<ol>
<li><p>导入ehcache，MyBatis整合ehcache包、slf4j的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.sf.ehcache/ehcache --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写<code>ehcache.xml</code>配置文件</p>
</li>
<li><p>配置cache标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.chaches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><strong>参照缓存</strong>：若想在命名空间中共享相同的缓存配置和实例。可以使用<code>cache-ref</code>标签来引用另一个缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.UserDao"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Spring整合"><a href="#Spring整合" class="headerlink" title="Spring整合"></a>Spring整合</h2><ol>
<li><p>查看不同版本的MyBatis整合Spring时使用的适配包：<a href="http://mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/index.html</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200525095500301.png" align="left"/>
</li>
<li><p>下载整合适配包：<a href="https://github.com/mybatis/spring/releases" target="_blank" rel="noopener">https://github.com/mybatis/spring/releases</a></p>
</li>
<li><p>官方整合示例：<a href="https://github.com/mybatis/jpetstore-6" target="_blank" rel="noopener">jpetstore</a></p>
</li>
</ol>
<p>具体的整合步骤请参考SpringMVC中SSM整合的相关内容！</p>
<h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><ul>
<li>MyBatis Generator</li>
<li>简称MBG，是一个专门为<strong>MyBatis</strong>框架使用者定制的<strong>代码生成器</strong>，可以快速根据数据库中的表生成对应的映射文件、接口以及bean类。支持基本的增删改查，以及QBC风格的条件查询。但是表连接、存储过程等这些复杂的SQL的定义仍需手动编写</li>
</ul>
<p><strong>官方文档地址</strong>：<a href="http://mybatis.org/generator/" target="_blank" rel="noopener">http://mybatis.org/generator/</a></p>
<p><strong>官方工程地址</strong>：<a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases</a></p>
<h3 id="MBG的使用"><a href="#MBG的使用" class="headerlink" title="MBG的使用"></a>MBG的使用</h3><p><strong>使用步骤</strong>：</p>
<ol>
<li>编写MBG的配置文件（下面是几处重要的配置）<ul>
<li><code>jdbcConnection</code>：配置数据库连接信息</li>
<li><code>javaModelGenerator</code>：配置JavaBean的生成策略</li>
<li><code>sqlMapGenerator</code>：配置映射文件的生成策略</li>
<li><code>javaClientGenerator</code>：配置Mapper接口的生成策略</li>
<li><code>table</code>：要逆向解析的数据库表名<ul>
<li>tableName：表名</li>
<li>domainObjectName：对应Bean的类名</li>
</ul>
</li>
</ul>
</li>
<li>运行代码生成器生成代码</li>
</ol>
<p><strong>注意</strong>：</p>
<p>Context标签：</p>
<ul>
<li><code>targetRuntime=“MyBatis3”</code>：可以生成带条件的增删改查</li>
<li><code>targetRuntime=“MyBatis3Simple”</code>：可以生成基本的增上改查</li>
<li>如果再次生成，建议将之前生成的数据删除，避免xml向后追加内容出现问题</li>
</ul>
<ol>
<li><p>添加Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建<code>generatorConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"simple"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jdbcConnection：如何连接到目标数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaModelGenerator：指定JavaBean的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.zxw.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sqlMapGenerator：sql映射生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.zxw.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaClientGenerator 指定mapper接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.zxw.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定要逆向分析哪些表，根据表创建JavaBean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> <span class="attr">mapperName</span>=<span class="string">"UserDao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"account"</span> <span class="attr">domainObjectName</span>=<span class="string">"Account"</span> <span class="attr">mapperName</span>=<span class="string">"AccountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Java程序来启动MBG生成代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(in);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.selectAll().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将MyBatis3Simple改为MyBatis3可以生成类似于QBC风格的查询，即根据条件查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserExample userExample = <span class="keyword">new</span> UserExample();</span><br><span class="line">    UserExample.Criteria criteria = userExample.createCriteria();</span><br><span class="line">    criteria.andUsernameLike(<span class="string">"%王%"</span>);</span><br><span class="line">    criteria.andSexEqualTo(<span class="string">"男"</span>);</span><br><span class="line">    userDao.selectByExample(userExample).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><strong>MyBatis框架分层</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526092147300.png" align="left"/>

<h3 id="获取SqlSessionFactory对象"><a href="#获取SqlSessionFactory对象" class="headerlink" title="获取SqlSessionFactory对象"></a>获取SqlSessionFactory对象</h3><p>在MyBatis快速入门中，给出了获取SqlSessionFactory对象的流程，可以通过debug来查看框架具体是如何实现的。</p>
<ol>
<li>使用Resources类获取配置文件的输入流对象</li>
<li>使用<code>new SqlSessionFactoryBuilder().build(inputStream)</code>来获得SqlSessionFactory</li>
</ol>
<p>那么SqlSessionFactoryBuilder的<code>build</code>方法到底是如何生成一个SqlSessionFactory对象的？</p>
<ol>
<li>使用配置文件的输入流对象创建一个解析XML的解析器<code>parser</code></li>
<li>调用<code>parser.parse()</code>得到一个<code>Configuration</code>对象</li>
<li>调用SqlSessionFactoryBuilder对象的<code>build</code>方法传入这个Configuration对象得到SqlSessionFactory对象（实际上是调用<code>new DefaultSqlSessionFactory(config)</code>)</li>
</ol>
<p>通过分析源码我们可以得知，MyBatis将主配置文件封装成为一个Configuration类对象，通过这个Configuration对象就可以获得主配置文件中的所有内容！</p>
<h3 id="获取SqlSession对象"><a href="#获取SqlSession对象" class="headerlink" title="获取SqlSession对象"></a>获取SqlSession对象</h3><p><strong>步骤</strong></p>
<ol>
<li>调用SqlSessionFactory对象的<code>openSession</code></li>
<li><code>openSession</code>方法中调用<code>openSessionFromDataSource</code>方法来获取SqlSession对象</li>
</ol>
<p><strong>openSessionFromDataSource</strong>方法详解</p>
<p>有三个参数：</p>
<ul>
<li><code>ExecutorType execType</code>：执行器类型</li>
<li><code>TransactionIsolationLevel level</code>：事务隔离级别</li>
<li><code>boolean autoCommit</code>：自动提交</li>
</ul>
<p>在openSessionFromDataSource方法中：</p>
<ul>
<li><p>首先会通过配置文件得到数据源（dataSource），然后通过TransactionFactory工厂传入dataSource、level、autoCommit来得到一个Transaction对象</p>
</li>
<li><p>通过configuration对象的<code>newExecutor</code>方法传入这个事务对象tx、执行器类型execType来创建一个执行器Executor对象</p>
<p>根据传入的executorType以及是否开启了二级缓存（cacheEnabled）来创建executor</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200706223901368.png" align="left"/>
</li>
<li><p>最后通过<code>new DefaultSqlSession(configuration, executor, autoCommit)</code>来创建一个SqlSession接口的实现类对象</p>
</li>
</ul>
<h3 id="获得接口的代理类对象"><a href="#获得接口的代理类对象" class="headerlink" title="获得接口的代理类对象"></a>获得接口的代理类对象</h3><ol>
<li><code>sqlSession.getMapper(type)</code>这个方法中返回了<code>configuration.getMapper(type, sqlSession)</code></li>
<li><code>configuration.getMapper(type, sqlSession)</code>中返回了<code>mapperRegistry.getMapper(type, sqlSession)</code></li>
<li><code>mapperRegistry.getMapper(type, sqlSession)</code><ul>
<li>首先通过<code>knowMappers.get(type)</code>获取MapperProxyFactory对象</li>
<li>返回<code>mapperProxyFactory.newInstance(sqlSession)</code></li>
</ul>
</li>
<li><code>mapperProxyFactory.newInstance(sqlSession)</code><ul>
<li>首先通过<code>new MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache)</code>创建MapperProxy对象</li>
<li>返回<code>mapperProxyFactory(mapperProxy)</code><ul>
<li>MapperProxy实现了InvocationHandler，所以可以通过Proxy类来创建代理对象</li>
<li>返回<code>Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy)</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="查询流程"><a href="#查询流程" class="headerlink" title="查询流程"></a>查询流程</h3><p><code>sqlSession.getMapper(type)</code>方法最终会返回一个dao接口的代理对象，调用这个代理对象中的方法，实际上就是执行MapperProxy的<code>invoke</code>方法</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526172532038.png" align="left"/>

<p><strong>StatementHandler</strong>：处理SQL语句预编译，设置参数等相关工作</p>
<p><strong>ParameterHandler</strong>：设置预编译参数</p>
<p><strong>ResultSetHandler</strong>：处理结果集</p>
<p><strong>TypeHandler</strong>：javaBean类型和数据库的映射</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>根据配置文件（全局、sql映射），初始化出Configuration对象</p>
</li>
<li><p>创建一个DefaultSqlSession对象，它里面包含Configuration以及Executor（根据全局配置文件中的defaultExecutorType创建出对应的Executor）</p>
</li>
<li><p>DefaultSqlSession.getMapper()，拿到Mapper接口对应的MapProxy</p>
</li>
<li><p>MapProxy里面有DefaultSqlSession</p>
</li>
<li><p>执行增删改查方法：</p>
<ol>
<li>调用DefaultSqlSession的增删改查（Executor）</li>
<li>会创建一个StatementHandler对象（同时也会创建出ParameterHandler和ResultSetHandler）</li>
<li>调用StatementHandler的预编译参数以及设置参数值（使用ParameterHandler来给SQL设置参数）</li>
<li>调用StatementHandler的增删改查方法</li>
<li>ResultSetHandler封装结果</li>
</ol>
</li>
</ol>
<h2 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h2><ul>
<li>MyBatis<font color="blue">在四大对象的创建过程中，都会有插件进行介入</font>。插件可以利用动态代理机制一层一层的包装目标对象，而实现在目标对象执行目标方法之前进行拦截的效果。</li>
<li>MyBatis允许在已映射语句执行过程中的某一点进行拦截调用</li>
<li>默认情况下，MyBatis允许使用插件拦截的方法调用包括：<ul>
<li><font color="blue">Executor</font>（update、query、flushStatements、commit、rollback）</li>
<li><font color="blue">ParameterHandler</font>（getParameterObject、setParameters）</li>
<li><font color="blue">ResultSetHandler</font>（handleResultSets、handleOutputParameters）</li>
<li><font color="blue">StatementHandler</font>（prepare、parameterize、batch、update、query）</li>
</ul>
</li>
</ul>
<h3 id="插件开发-1"><a href="#插件开发-1" class="headerlink" title="插件开发"></a>插件开发</h3><ul>
<li><p><font color="blue">插件开发步骤</font>：</p>
<ol>
<li><p>编写插件实现<code>Interceptor</code>接口，并使用<code>@Interceptors</code>注解完成插件签名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-26 20:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成插件签名：告诉MyBatis用来拦截哪个对象的哪个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// type：要拦截类的（四大对象之一）</span></span><br><span class="line"><span class="comment">// method：要拦截的方法</span></span><br><span class="line"><span class="comment">// args：方法的参数</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;</span><br><span class="line">        <span class="meta">@Signature</span>(type=StatementHandler<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"parameterize"</span>, args=&#123;Statement<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyFirstPlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * intercept 拦截目标对象的目标方法执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFirstPlugin intercept..., method:"</span> + invocation.getMethod());</span><br><span class="line">        <span class="comment">//执行目标方法</span></span><br><span class="line">        Object proceed = invocation.proceed();</span><br><span class="line">        <span class="comment">//返回执行后的返回值</span></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * plugin：包装目标对象</span></span><br><span class="line"><span class="comment">     * 包装：为目标对象创建一个代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFirstPlugin plugin...,要包装的对象:"</span> + target);</span><br><span class="line">        <span class="comment">//我们可以借助Plugin的wrap方法使用当前的拦截器来包装目标对象</span></span><br><span class="line">        Object wrap = Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//返回当前target的动态代理对象</span></span><br><span class="line">        <span class="keyword">return</span> wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setProperties</span></span><br><span class="line"><span class="comment">     *  将插件在配置文件中配置的properties设置进来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFirstPlugin setProperties..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"插件配置的信息："</span> + properties.getProperty(<span class="string">"username"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ol start="2">
<li><p>在全局配置文件中注册插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插件配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.zxw.plugin.MyFirstPlugin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"tomcat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyFirstPlugin setProperties...</span><br><span class="line">插件配置的信息：zhangsan</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.executor.CachingExecutor@6b57696f</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.scripting.defaults.DefaultParameterHandler@64f6106c</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.executor.resultset.DefaultResultSetHandler@74a10858</span><br><span class="line">MyFirstPlugin plugin...,要包装的对象:org.apache.ibatis.executor.statement.RoutingStatementHandler@28ac3dc3</span><br><span class="line">DEBUG 05-26 21:00:14,451 &#x3D;&#x3D;&gt;  Preparing: SELECT * FROM user WHERE id &#x3D; ?;   (BaseJdbcLogger.java:143) </span><br><span class="line">MyFirstPlugin intercept..., method:public abstract void org.apache.ibatis.executor.statement.StatementHandler.parameterize(java.sql.Statement) throws java.sql.SQLException</span><br><span class="line">DEBUG 05-26 21:00:14,482 &#x3D;&#x3D;&gt; Parameters: 41(Integer)  (BaseJdbcLogger.java:143) </span><br><span class="line">DEBUG 05-26 21:00:14,496 &lt;&#x3D;&#x3D;      Total: 1  (BaseJdbcLogger.java:143) </span><br><span class="line">User&#123;id&#x3D;41, username&#x3D;&#39;老王&#39;, birthday&#x3D;Tue Feb 27 17:47:08 CST 2018, sex&#x3D;&#39;男&#39;, address&#x3D;&#39;北京&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>首先调用了拦截器的setProperties()方法为拦截器设置了属性</p>
<p>然后分别按照MyBatis的四大对象的调用顺序，执行interceptorChain.pluginAll()方法，调用所有插件的<code>plugin</code>方法，所以我们编写的<code>plugin</code>方法被执行了四次</p>
<p>最后，调用生成的Dao接口代理类对象的方法，当执行使用Statement的parameterize方法设置参数时会被插件的<code>intercept</code>方法拦截，我们编写的<code>intercept</code>方法首先打印了调用的方法信息，然后执行该方法并返回。</p>
<h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><ol>
<li><p>按照插件注解声明，按照插件配置顺序调用插件的plugin方法，生成被拦截对象的动态代理</p>
</li>
<li><p>多个插件依次生成目标对象的代理对象，层层包裹，先声明的先包裹，形成代理链</p>
</li>
<li><p>目标方法执行时依次从外到内执行插件的intercept方法（和配置的顺序相反）</p>
</li>
</ol>
<ol start="4">
<li><p>多个插件的情况下，我们往往需要在某个插件中分离出目标对象。可以借助MyBatis提供的SystemMeatObject类来进行获取最后一层的h以及target属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * intercept 拦截目标对象的目标方法执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> invocation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MyFirstPlugin intercept..., method:"</span> + invocation.getMethod());</span><br><span class="line">    <span class="comment">//动态改变SQL运行的参数，实际查询42号</span></span><br><span class="line">    Object target = invocation.getTarget();</span><br><span class="line">    System.out.println(<span class="string">"当前拦截到的对象:"</span> + target);</span><br><span class="line">    <span class="comment">//拿到StatementHandler里的ParameterHandler里的parameterObject的值</span></span><br><span class="line">    MetaObject metaObject = SystemMetaObject.forObject(target);</span><br><span class="line">    Object value = metaObject.getValue(<span class="string">"parameterHandler.parameterObject"</span>);</span><br><span class="line">    System.out.println(<span class="string">"SQL语句用的参数是"</span> + value);</span><br><span class="line">    <span class="comment">//修改参数的值</span></span><br><span class="line">    metaObject.setValue(<span class="string">"parameterHandler.parameterObject"</span>, <span class="number">42</span>);</span><br><span class="line">    <span class="comment">//执行目标方法</span></span><br><span class="line">    Object proceed = invocation.proceed();</span><br><span class="line">    <span class="comment">//返回执行后的返回值</span></span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="扩展：MyBatis实用场景"><a href="#扩展：MyBatis实用场景" class="headerlink" title="扩展：MyBatis实用场景"></a>扩展：MyBatis实用场景</h3><pre><code>1. PageHelper插件进行分页
2. 批量操作
3. 存储过程
4. typeHandler处理枚举</code></pre><h4 id="PageHelper插件进行分页"><a href="#PageHelper插件进行分页" class="headerlink" title="PageHelper插件进行分页"></a>PageHelper插件进行分页</h4><ul>
<li>PageHelper是MyBatis中非常方便的第三方分页插件</li>
<li><a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper</a></li>
<li><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a></li>
<li>我们可以对照官方文档的说明，快速的使用插件</li>
</ul>
<p>   <strong>使用步骤</strong></p>
<ol>
<li><p>添加maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在MyBatis全局配置文件中配置分页插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用PageHelper提供的方法进行分页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分页操作</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    userDao.findAll().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">"当前页码："</span> + page.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">"总记录数："</span> + page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"每页的记录数："</span> + page.getPageSize());</span><br><span class="line">    System.out.println(<span class="string">"总页码："</span> + page.getPages());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>可以使用更强大的PageInfo封装返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//分页操作</span></span><br><span class="line">    PageHelper.startPage(<span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="comment">//使用更为强大的PageInfo, 第二个参数为连续分页页数</span></span><br><span class="line">    PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(users, <span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">"当前页码："</span> + pageInfo.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">"总记录数："</span> + pageInfo.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"每页的记录数："</span> + pageInfo.getPageSize());</span><br><span class="line">    System.out.println(<span class="string">"总页码："</span> + pageInfo.getPages());</span><br><span class="line">    <span class="keyword">int</span>[] nums = pageInfo.getNavigatepageNums();</span><br><span class="line">    <span class="comment">//打印连续分页的页码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>可以说，这个分页插件实现了分页操作的所有逻辑！</p>
<h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>注意要修改url，开启批量处理：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/eesy_mybatis?allowMultiQueries=true</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>默认的<code>openSession()</code>方法没有参数，它会创建有如下特性的</p>
<ul>
<li>会开启一个事务（也就是<font color="red">不自动提交</font>）</li>
<li>连接对象会从环境配置的数据源实例得到</li>
<li>事务隔离级别将使用驱动或数据源的默认设置</li>
<li>预处理语句不会被复用，也不会批量处理更新</li>
</ul>
</li>
<li><p><code>openSession</code>方法的<code>ExecutorType</code>类型的参数，枚举类型：</p>
<ul>
<li><code>ExecutorType.SIMPLE</code>：这个执行器类型不做特殊的事情（这是默认装配的）。它<font color="blue">为每个语句的执行创建一个新的预处理语句</font></li>
<li><code>ExecutorType.REUSE</code>：这个执行其<font color="blue">会复用预处理语句</font></li>
<li><code>ExecutorType.BATCH</code>：这个执行器会<font color="blue">批量执行所有更新语句</font></li>
</ul>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200526221714709.png" align="left"/>
</li>
<li><p>批量操作我们是使用MyBatis提供的BatchExector进行的，它的底层就是通过jdbc攒SQL的方式进行的。我们也可以攒够一定数量后发给数据库一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试批量操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在调用openSession方法时传入执行器的类型</span></span><br><span class="line">    userDao = factory.openSession(ExecutorType.BATCH).getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//插入100万条数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"user"</span> + i);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        user.setSex(i % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">"男"</span> : <span class="string">"女"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"address"</span> + i);</span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"共耗时:"</span> + (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>最终结果：共耗时:87774毫秒</p>
<ul>
<li><p>与Spring整合中，我们推荐，额外的配置一个可以专门用来执行批量操作的sqlSession</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要用到批量操作的时候，我们可以注入配置的这个批量SqlSession。通过它获取到mapper映射器进行操作</p>
</li>
</ul>
<p><strong><font color="red">注意：</font></strong></p>
<ol>
<li>批量操作是在<font color="red"><code>sqlSession.commit()</code></font>以后才发送sql语句给数据库进行执行的</li>
<li>如果我们想让其提前执行，以方便后续可能的查询操作获取数据，我们可以使用<font color="red"><code>sqlSession.flushStatements()</code></font>方法，让其直接冲刷到数据库进行执行</li>
</ol>
<h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><ul>
<li><p>实际开发中，我们也会写一些存储过程，MyBatis也支持对存储过程的调用</p>
</li>
<li><p><font color="red">一个简单的存储过程</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> <span class="keyword">test</span>()</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">	<span class="keyword">select</span> <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><font color="red">存储过程的调用</font></p>
<ol>
<li><p>select标签中<code>statementType=“CALLABLE”</code></p>
</li>
<li><p>标签体中调用语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;call procedure_name(#&#123;param1_info&#125;, #&#123;param2_info&#125;)&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<h4 id="自定义TypeHandler"><a href="#自定义TypeHandler" class="headerlink" title="自定义TypeHandler"></a>自定义TypeHandler</h4><ul>
<li>我们可以通过自定义<code>TypeHandler</code>的形式来在设置参数或取出结果集的时候自定义封装策略</li>
</ul>
<p><strong>步骤</strong>：</p>
<ol>
<li><p>实现<code>TypeHandler</code>接口或者继承<code>BaseTypeHandler</code></p>
</li>
<li><p>使用<code>@MappedTypes</code>定义处理的Java类型</p>
<p>使用<code>@MappedJdbcTypes</code>定义jdbcType类型</p>
</li>
<li><p>在自定义结果集标签或者参数处理的时候声明使用自定义<code>TypeHandler</code>进行处理或者在全局配置<code>TypeHandler</code>要处理的JavaType</p>
</li>
</ol>
<p>创建一个UserStatus枚举类：</p>
<p><code>UserStatus</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserStatus &#123;</span><br><span class="line">    BUSY(<span class="number">100</span>, <span class="string">"繁忙"</span>),</span><br><span class="line">    FREE(<span class="number">200</span>, <span class="string">"空闲"</span>),</span><br><span class="line">    VOCATION(<span class="number">300</span>, <span class="string">"度假中"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UserStatus</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserStatus <span class="title">getUserStatusByCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">return</span> BUSY;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> FREE;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">300</span>:</span><br><span class="line">                <span class="keyword">return</span> VOCATION;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> FREE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实体类中添加该属性：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200527220119798.png" alt="image-20200527220119798" style="zoom:80%;"  align="left"/>

<p><strong>测试在没有自定义枚举类的TypeHandler插入一条记录</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnumTypeHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"testUser1"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"Beijing"</span>);</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setUserStatus(UserStatus.BUSY);</span><br><span class="line">    userDao.saveUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库中的结果：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200527220251012.png" align="left"/>

<p>可以看到如果不自定义枚举类，那么会默认将插入枚举的名字（name），枚举有索引和名字（索引默认从0开始）</p>
<p>默认使用EnumTypeHandler，会插入枚举类的名字</p>
<p>使用EnumOrdinalTypeHandler，会插入枚举类的索引</p>
<p><strong>自定义枚举类的TypeHandler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-27 22:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEnumTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">UserStatus</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义当前数据如何保存到数据库中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jdbcType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, UserStatus parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//传入状态码</span></span><br><span class="line">        ps.setString(i, parameter.getCode().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserStatus <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//根据从数据库中拿到的状态吗返回枚举对象</span></span><br><span class="line">        <span class="keyword">int</span> code = Integer.parseInt(rs.getString(columnName));</span><br><span class="line">        <span class="keyword">return</span> UserStatus.getUserStatusByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserStatus <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> code = Integer.parseInt(rs.getString(columnIndex));</span><br><span class="line">        <span class="keyword">return</span> UserStatus.getUserStatusByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserStatus <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> code = Integer.parseInt(cs.getString(columnIndex));</span><br><span class="line">        <span class="keyword">return</span> UserStatus.getUserStatusByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>全局配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.zxw.handler.MyEnumTypeHandler"</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">javaType</span>=<span class="string">"com.zxw.domain.UserStatus"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200527222748783.png" align="left"/>

<p>这样就实现了自定义一个枚举类型的TypeHandler</p>
<p><strong>参数位置设置自定义TypeHandler</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span>&gt;</span></span><br><span class="line">	insert into user(username, birthday, sex, address, user_status) </span><br><span class="line">    values(#&#123;username&#125;, #&#123;birthday&#125;, #&#123;sex&#125;, #&#123;address&#125;, </span><br><span class="line">    #&#123;userStatus,typeHandler=com.zxw.handler.MyEnumTypeHandler&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在ResultMap中指定TypeHandler</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_status"</span> <span class="attr">property</span>=<span class="string">"userStatus"</span> <span class="attr">typeHandler</span>=<span class="string">"com.zxw.handler.MyEnumTypeHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Web框架</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>ORM</tag>
        <tag>持久层</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（一）</title>
    <url>/2020/07/07/Spring%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（一）"><a href="#Spring（一）" class="headerlink" title="Spring（一）"></a>Spring（一）</h1><h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><h3 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h3><p>&emsp;&emsp;Spring是分层的Java SE/EE应用<font color="red">全栈</font>轻量级开源框架，以<font color="red">IoC（控制反转）</font>和<font color="red">AOP（面向切面编程）</font>为内核，提供了表现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能够整合开源世界众多著名的第三方框架和类库，现在已经成为了使用最多的Java EE企业应用开源框架。</p>
<h3 id="Spring的发展历程"><a href="#Spring的发展历程" class="headerlink" title="Spring的发展历程"></a>Spring的发展历程</h3><p>1997年IBM提出了EJB思想</p>
<p>1998年，SUN定制了开发标准规范EJB 1.0</p>
<p>1999年，EJB 1.1发布</p>
<p>2001年，EJB 2.0发布</p>
<p>2003年，EJB 2.1发布 </p>
<p>2006年，EJB 3.0发布</p>
<p><font color="red">Rod Johnson（Spring之父）</font></p>
<p>​    Expert One-to-One J2EE Design and Development(2002)</p>
<p>​    阐述了J2EE使用EJB开发设计的优点及解决方案</p>
<p>​    Expert One-to-One J2EE Development without EJB(2004)</p>
<p>​    阐述了J2EE开发不适用EJB的解决方案（Spring雏形）</p>
<p><font color="red">2017年9月发布了spring的最新版本spring5.0通用版（GA）</font></p>
<h3 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h3><p><strong>方便解耦，简化开发</strong></p>
<p>通过Spring提供了IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的程序过度耦合。用户也不必为单例模式类、属性文件解析等这些很底层的需求编写代码，可以专注于上层的应用</p>
<p><strong>AOP编程的支持</strong></p>
<p>通过Spring的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能都可以通过AOP轻松应付。</p>
<p><strong>声明式事务的支持</strong></p>
<p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式事务方式灵活地进行事务管理，提高开发效率和质量</p>
<p><strong>方便程序的测试</strong></p>
<p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试变得十分简单</p>
<p><strong>方便集成各种优秀的框架</strong></p>
<p>Spring可以降低各种框架的使用难度，提供了对各种优秀框架（Strusts、Hibernate、Hessian、MyBatis等）的直接支持</p>
<p><strong>降低Java EE API的使用难度</strong></p>
<p>Spring对Java EE API（如JDBC、JavaMail、远程调用）进行了简单的封装，使得这些API的使用难度大大降低</p>
<p><strong>Spring源码是经典学习范例</strong></p>
<p>Spring的源代码设计精妙、结构清晰，处处体现了对Java设计模式的灵活运行以及对Java技术的高深造诣，Spring的源码具有很高的学习价值。</p>
<h3 id="Spring的体系结构"><a href="#Spring的体系结构" class="headerlink" title="Spring的体系结构"></a>Spring的体系结构</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200511224649549.png" align="left"/>

<h2 id="IoC的概念和作用"><a href="#IoC的概念和作用" class="headerlink" title="IoC的概念和作用"></a>IoC的概念和作用</h2><h3 id="程序的耦合和解耦（了解）"><a href="#程序的耦合和解耦（了解）" class="headerlink" title="程序的耦合和解耦（了解）"></a>程序的耦合和解耦（了解）</h3><p><strong>耦合性</strong>（Coupling），也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表名其独立性越差。耦合性存在于各个领域，并非软件设计中独有的。</p>
<p>在软件工程中，耦合指的就是对象之间的依赖性。对象之间的耦合越高，维护成本就越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则：<font color="red">高内聚，低耦合</font></p>
<h3 id="解决程序耦合的思路"><a href="#解决程序耦合的思路" class="headerlink" title="解决程序耦合的思路"></a>解决程序耦合的思路</h3><h4 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h4><p><code>bean.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accountService</span>=<span class="string">com.zxw.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span>=<span class="string">com.zxw.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>

<p><code>BeanFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个创建Bean对象的工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Bean在计算机英语中，有可重用组件的含义</span></span><br><span class="line"><span class="comment"> * JavaBean</span></span><br><span class="line"><span class="comment"> *          JavaBean的范围远大于实体类！！！</span></span><br><span class="line"><span class="comment"> * JavaBean：用Java语言编写的可重用组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * BeanFactory就是用来创建Service和Dao对象的</span></span><br><span class="line"><span class="comment"> *      1.需要一个配置文件用来创建service和dao</span></span><br><span class="line"><span class="comment"> *          配置内容：唯一标识=全限定类名（key=value）</span></span><br><span class="line"><span class="comment"> *      2.通过读取配置文件通过反射创建对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 配置文件可以是XML，也可以是Properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个map用于存放创建的对象。我们称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取Properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration&lt;Object&gt; keys = props.keys();</span><br><span class="line">            <span class="comment">//遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span>(keys.hasMoreElements()) &#123;</span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key获取value</span></span><br><span class="line">                String basePath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(basePath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器中</span></span><br><span class="line">                beans.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 根据Bean的名称获取Bean对象</span></span><br><span class="line"><span class="comment">//     * @param beanName</span></span><br><span class="line"><span class="comment">//     * @return</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    public static Object getBean(String beanName) &#123;</span></span><br><span class="line"><span class="comment">//        Object bean = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            String beanPath =  props.getProperty(beanName);</span></span><br><span class="line"><span class="comment">//            bean = Class.forName(beanPath).newInstance();</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return bean;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Bean的名称获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="控制反转—Inversion-of-Control"><a href="#控制反转—Inversion-of-Control" class="headerlink" title="控制反转—Inversion of Control"></a>控制反转—Inversion of Control</h4><p><strong>控制反转</strong>：（Inversion of Control，缩写为IoC），是面向对象编程的一种设计原则，可以用来减低计算机代码之间的<strong>耦合度</strong>。其中最常见的方式叫做<strong>依赖注入</strong>（DI，Dependency Injection），还有一种方式叫做<strong>依赖查找</strong>（Dependency Lookup）。通过控制反转，对象在被创建时，由一个调空系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p>
<h2 id="使用Spring的IoC解决程序耦合"><a href="#使用Spring的IoC解决程序耦合" class="headerlink" title="使用Spring的IoC解决程序耦合"></a>使用Spring的IoC解决程序耦合</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ol>
<li><p>创建Maven工程，添加Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Dao、Service层接口和实现类</p>
<p><code>UserService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserService中的addUser方法执行了"</span>);</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserDaoImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserDao中的addUser方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Spring的配置文件<code>bean.xml</code>，文件名随意，但是不能是中文，在配置文件中配置相关bean的id和class属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将对象的创建交给Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.zxw.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试使用Spring IoC获取Bean对象</p>
<ol>
<li><p>获取核心容器对象ApplicationContext（有三种常用的实现类，这里只给出了一种，后续会有说明）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据id获取bean对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取方式一：强制类型转换</span></span><br><span class="line">UserService userService = (UserService) ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line"><span class="comment">//获取方式二：传入Class类型</span></span><br><span class="line">UserDao userDao = ac.getBean(<span class="string">"userDao"</span>, UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>





</li>
</ol>
</li>
</ol>
<h3 id="ApplicationContext的三个常用实现类"><a href="#ApplicationContext的三个常用实现类" class="headerlink" title="ApplicationContext的三个常用实现类"></a>ApplicationContext的三个常用实现类</h3><ol>
<li><p><code>ClassPathXmlApplicationContext</code>：它可以加载类路径下的配置文件，要求配置文件必须在类路径下！（推荐使用这个实现类）</p>
</li>
<li><p><code>FileSystemXmlApplicationContext</code>：可以加载磁盘任意路径下的配置文件（要求有访问权限）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"D:\\JavaCode\\day01_eesy_03spring\\src\\main\\resources\\bean.xml"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>AnnotationConfigApplicationContext</code>：它用于读取注解创建容器（即使用注解替代配置文件），会在Spring（二）中详细讲解</p>
</li>
</ol>
<h3 id="BeanFactory和ApplicationContext的区别和联系"><a href="#BeanFactory和ApplicationContext的区别和联系" class="headerlink" title="BeanFactory和ApplicationContext的区别和联系"></a>BeanFactory和ApplicationContext的区别和联系</h3><p><strong>ApplicationContext</strong>（实际开发中会使用该接口）</p>
<ul>
<li>它在构建核心容器时，创建对象采取的策略是立即加载。也就是说一旦读取完配置文件，bean对象就会被创建</li>
<li><strong>适用于单例对象</strong></li>
</ul>
<p><strong>BeanFactory</strong></p>
<ul>
<li><p>它在构建核心容器时，创建对象的策略是延迟加载的方式。即，什么时候通过id来获取bean对象，什么时候才会创建这个bean对象</p>
</li>
<li><p><strong>适用于多例对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"bean.xml"</span>);</span><br><span class="line">BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">AccountService accountService = factory.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="Spring基于XML的IoC细节（掌握"><a href="#Spring基于XML的IoC细节（掌握" class="headerlink" title="Spring基于XML的IoC细节（掌握)"></a>Spring基于XML的IoC细节（掌握)</h3><h4 id="IoC中bean标签和管理对象细节"><a href="#IoC中bean标签和管理对象细节" class="headerlink" title="IoC中bean标签和管理对象细节"></a>IoC中bean标签和管理对象细节</h4><h5 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h5><p><strong>作用</strong>：用于配置对象让Spring创建。<strong>默认情况下</strong>它调用的是类的<strong>无参构造函数</strong>。如果没有无参构造函数则不能创建成功</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>id</code>：对象的唯一标识，用于获取该bean对象</li>
<li><code>class</code>：指定类的全限定类名。用于通过反射来创建对象，默认情况下调用无参构造函数</li>
<li><code>scope</code>：指定对象的作用范围<ul>
<li><code>singleton</code>：单例，<strong>默认值</strong></li>
<li><code>prototype</code>：多例的</li>
<li><code>request</code>：Web项目中，Spring创建一个bean的对象，将对象存入request域中</li>
<li><code>session</code>：Web项目中，Spring创建一个bean对象，将对象存入session域中</li>
<li><code>global session</code>：Web项目中，<font color="blue">应用在Portlet环境</font>，如果没有<font color="blue">Portlet环境</font>那么global session相当于session</li>
</ul>
</li>
</ul>
<h5 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h5><ol>
<li><p><strong>默认构造函数创建</strong></p>
<p>在Spring配置文件中使用bean标签配以id和class属性，但没有其它属性的标签时，使用默认构造函数创建。如果没有默认构造函数，则对象无法创建！！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用某个类的方法创建对象并存入Spring容器中</strong></p>
<p><code>InstanceFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件的相关内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.zxw.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用某个类的静态方法创建对象并存入Spring容器中</strong></p>
<p><code>StaticFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件的相关内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"com.zxw.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="bean的作用范围和生命周期"><a href="#bean的作用范围和生命周期" class="headerlink" title="bean的作用范围和生命周期"></a>bean的作用范围和生命周期</h5><p><code>scope</code>属性用于指定bean的作用范围：</p>
<ul>
<li><p><code>singleton</code>：<strong>单例对象</strong></p>
<p>一个应用只有一个对象的实例，作用范围就是整个应用</p>
<p><strong>生命周期</strong>：（和Spring容器相同）</p>
<ul>
<li>对象出生：当应用加载，创建容器时，对象就创建了</li>
<li>对象存在：只要容器存在，对象就一直存在</li>
<li>对象死亡：当应用卸载时，销毁容器时，对象就被销毁了</li>
</ul>
</li>
<li><p><code>prototype</code>：<strong>多例对象</strong></p>
<p>每次访问对象时，都会重新创建新的对象实例</p>
<p><strong>生命周期</strong>：</p>
<ul>
<li>对象出生：当使用对象时就会创建对象实例</li>
<li>对象存在：只要对象还在使用中，对象就一直存在</li>
<li>对象死亡：当对象长时间不使用时，就会被Java垃圾回收器回收了</li>
</ul>
</li>
<li><p><code>request</code>：Web项目中，Spring创建一个Bean的对象，将对象存入到request域中</p>
</li>
<li><p><code>session</code>：Web项目中，Spring创建一个Bean对象，将对象存入到session域中</p>
</li>
<li><p><code>global session</code>：Web项目中，<font color="blue">应用在Portlet集群环境</font>，如果没有<font color="blue">Portlet集群环境</font>那么global session相当于session</p>
</li>
</ul>
<h4 id="Spring的依赖注入"><a href="#Spring的依赖注入" class="headerlink" title="Spring的依赖注入"></a>Spring的依赖注入</h4><p>依赖注入：DI，Dependency Injection</p>
<p>IoC的作用：降低程序间的耦合（依赖关系），依赖关系的管理以后都交给Spring来维护</p>
<p>在当前类中需要用到其他类的对象，由Spring为我们提供，我们只需要在配置文件中说明，就称之为<strong>依赖注入</strong></p>
<p><strong>能够注入的数据类型</strong>：</p>
<ul>
<li>基本类型和String</li>
<li>其它bean类型（在配置文件或者注解中配置过的bean）</li>
<li>复杂类型/集合类型</li>
</ul>
<p><strong>注入的方式</strong></p>
<ul>
<li>构造函数注入</li>
<li>set方法注入</li>
<li>注解注入（Spring（二）中的内容）</li>
</ul>
<h5 id="使用构造函数注入"><a href="#使用构造函数注入" class="headerlink" title="使用构造函数注入"></a>使用构造函数注入</h5><p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了！name="</span> + name +</span><br><span class="line">                <span class="string">", age="</span> + age + <span class="string">", birthday="</span> + birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.使用构造函数提供</span></span><br><span class="line"><span class="comment">    使用的标签：constructor-arg</span></span><br><span class="line"><span class="comment">    标签出现的位置：bean标签的内部</span></span><br><span class="line"><span class="comment">    标签中的属性：</span></span><br><span class="line"><span class="comment">        type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个活着某些参数的类型</span></span><br><span class="line"><span class="comment">        index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引从0开始</span></span><br><span class="line"><span class="comment">        name：用于指定给构造函数中指定名称的参数赋值</span></span><br><span class="line"><span class="comment">        =========以上三个用于指定给构造函数的哪个参数赋值，常用name=======</span></span><br><span class="line"><span class="comment">        value：用于提供基本类型和String类型的数据</span></span><br><span class="line"><span class="comment">        ref：用于指定其他的bean类型数据。它指的是在spring的IoC核心容器中出现过的bean对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    优势：</span></span><br><span class="line"><span class="comment">        在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功</span></span><br><span class="line"><span class="comment">    弊端：</span></span><br><span class="line"><span class="comment">        改变了bean对象的实例化方式，使我们在创建对象时，即使用不到这些数据也必须提供</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span>  <span class="attr">value</span>=<span class="string">"泰斯特"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="使用set方法注入"><a href="#使用set方法注入" class="headerlink" title="使用set方法注入"></a>使用set方法注入</h5><p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.使用set方法注入</span></span><br><span class="line"><span class="comment">    涉及的标签：property</span></span><br><span class="line"><span class="comment">    出现的位置：bean标签的内部</span></span><br><span class="line"><span class="comment">    标签的属性：</span></span><br><span class="line"><span class="comment">        name：用于指定给set方法中指定名称的参数赋值</span></span><br><span class="line"><span class="comment">        value：用于提供基本类型和String类型的数据</span></span><br><span class="line"><span class="comment">        ref：用于指定其他的bean类型数据。它指的是在spring的IoC核心容器中出现过的bean对象</span></span><br><span class="line"><span class="comment">    优势：</span></span><br><span class="line"><span class="comment">        创建对象时没有明确的限制，可以直接使用默认构造函数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    弊端：如果某个成员必须有值，则获取对象时有可能set方法没有执行（此处即使缺少对应的property标签也不会报错）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService2"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="复杂类型-集合类型的注入"><a href="#复杂类型-集合类型的注入" class="headerlink" title="复杂类型/集合类型的注入"></a>复杂类型/集合类型的注入</h5><p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zxw.service.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myStrs = myStrs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myList = myList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mySet = mySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myMap = myMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myProps = myProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(myStrs));</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">        System.out.println(mySet);</span><br><span class="line">        System.out.println(myMap);</span><br><span class="line">        System.out.println(myProps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--复杂类型/集合类型的注入</span></span><br><span class="line"><span class="comment">    用于给List结构集合注入的标签：</span></span><br><span class="line"><span class="comment">        list、array、set</span></span><br><span class="line"><span class="comment">    用于给Map结构集合注入的标签：</span></span><br><span class="line"><span class="comment">        map props</span></span><br><span class="line"><span class="comment">    总结：结构相同，标签可以互换</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService3"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testA"</span> <span class="attr">value</span>=<span class="string">"AAA"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testB"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myProps"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testC"</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"testD"</span>&gt;</span>DDD<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>DI</tag>
        <tag>控制反转</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（二）</title>
    <url>/2020/07/08/Spring%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（二）"><a href="#Spring（二）" class="headerlink" title="Spring（二）"></a>Spring（二）</h1><h2 id="Spring中IoC的常用注解"><a href="#Spring中IoC的常用注解" class="headerlink" title="Spring中IoC的常用注解"></a>Spring中IoC的常用注解</h2><blockquote>
<p>&emsp;&emsp;学习基于注解的IoC配置，首先得有一个认知：即注解配置和XML配置要实现的功能是一样的，都是要降低程序见的耦合，只是配置的形式不一样。</p>
</blockquote>
<h3 id="用于创建对象的注解"><a href="#用于创建对象的注解" class="headerlink" title="用于创建对象的注解"></a>用于创建对象的注解</h3><p>要使用注解，首先需要在<code>bean.xml</code>中引入context命名空间，然后配置要扫描的包：</p>
<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知Spring要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用了<code>component-scan</code>标签配置了要扫描了包之后，Spring就会扫描这些包中的有关注解（例如@Component、@Controller、@Service、@Repository等），使用这些标签进行配置和在XML配置文件中编写<code>bean</code>标签的作用相同！</p>
<h4 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h4><p><strong>作用</strong>：将当前类对象存入Spring IoC容器中</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定bean的id。默认值为当前类名且首字母小写</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取Spring的IoC容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//通过id获取对象的bean对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Controller、-Service、-Repository"><a href="#Controller、-Service、-Repository" class="headerlink" title="@Controller、@Service、@Repository"></a>@Controller、@Service、@Repository</h4><p>可以通过查看源代码来了解这三个注解，这三个注解其实都是@Component的别名，所以<strong>作用和@Component</strong>一样，从单词的含义可以知道：</p>
<p>@Controller：控制层bean</p>
<p>@Service：业务层bean</p>
<p>@Respository：持久层bean</p>
<h3 id="用于注入数据的注解"><a href="#用于注入数据的注解" class="headerlink" title="用于注入数据的注解"></a>用于注入数据的注解</h3><p><strong>作用</strong>：和在XML配置文件中的bean标签里写一个property标签的功能相同</p>
<h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p><strong>作用</strong>：自动按照类型注入。只要容器里有一个bean对象和要注入的变量类型匹配，就可以注入成功。此方式只能用于IoC容器中只存在一个该类型的bean对象的情况，如果存在多个则自动注入id和变量名相同的bean</p>
<p><strong>出现位置</strong>：成员变量或者方法上</p>
<p><strong>细节</strong>：在使用注解注入数据时，set方法不是必须的</p>
<p><strong>使用示例</strong></p>
<p>注意：虽然不提供set方法也能够直接使用属性注入，但是Spring不推荐这种方式，所以这里@Autowired写在set方法上</p>
<p><code>AccountDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutowired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//AccountDao</span></span><br><span class="line">    AccountDao accountDao = ac.getBean(<span class="string">"accountDao"</span>, AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(accountDao);</span><br><span class="line">    <span class="comment">//AccountService</span></span><br><span class="line">    AccountService accountService = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(accountService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><p><strong>作用</strong>：在@Autowired的基础上再按照名称注入。它在给类成员注入时不能单独使用，但是在给方法参数注入时可以（后面会讲解）</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定要注入bean的id</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(@Qualifier(<span class="string">"accountDao"</span>)</span> AccountDao accountDao) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p><strong>作用</strong>：直接按照bean的id来注入，它可以独立使用</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>name</code>：用于指定bean的id</li>
</ul>
<p><strong>使用示例</strong></p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p><strong>作用</strong>：用于注入基本类型和String类型的数据</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定数据的值，它可以使用Spring中的SpEL（也就是Spring中的EL表达式）</li>
</ul>
<p>SpEL写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;表达式&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：集合类型的注入只能通过XML来实现。</p>
<h3 id="用于改变作用范围的注解"><a href="#用于改变作用范围的注解" class="headerlink" title="用于改变作用范围的注解"></a>用于改变作用范围的注解</h3><p><strong>作用</strong>：和XML配置文件中bean标签的scope属性的作用相同</p>
<h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><p><strong>作用</strong>：指定bean的作用范围</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：常用取值：singleton、prototype、request、session、global session</li>
</ul>
<p><strong>示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScopeAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取bean</span></span><br><span class="line">    AccountService as1 = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    AccountService as2 = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(as1 == as2);<span class="comment">//false,scope为prototype</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="与bean的生命周期相关的注解（了解）"><a href="#与bean的生命周期相关的注解（了解）" class="headerlink" title="与bean的生命周期相关的注解（了解）"></a>与bean的生命周期相关的注解（了解）</h3><p><strong>作用</strong>：作用和XML配置文件中bean标签的<code>init-method</code>和<code>destroy-method</code>属性一样</p>
<h4 id="PostConstruct和-PreDestroy"><a href="#PostConstruct和-PreDestroy" class="headerlink" title="@PostConstruct和@PreDestroy"></a>@PostConstruct和@PreDestroy</h4><p>@PostConstruct用于指定初始化方法，即bean对象创建时调用的方法</p>
<p>@PreDestroy用于指定销毁方法，即bean对象销毁时调用的方法</p>
<p><strong>示例</strong>：</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销毁方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLifeCycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取bean</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//手动关闭核心容器</span></span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="案例：使用xml方式-注解方式实现表单的CRUD操作"><a href="#案例：使用xml方式-注解方式实现表单的CRUD操作" class="headerlink" title="案例：使用xml方式+注解方式实现表单的CRUD操作"></a>案例：使用xml方式+注解方式实现表单的CRUD操作</h2><h3 id="在pom-xml中引入依赖"><a href="#在pom-xml中引入依赖" class="headerlink" title="在pom.xml中引入依赖"></a>在<code>pom.xml</code>中引入依赖</h3><p>这里使用dbutils来实现持久层，使用德鲁伊数据库连接池</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbutils/commons-dbutils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="实体类Account"><a href="#实体类Account" class="headerlink" title="实体类Account"></a>实体类Account</h3><p><code>Account.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Dao层接口及其实现类"><a href="#Dao层接口及其实现类" class="headerlink" title="Dao层接口及其实现类"></a>Dao层接口及其实现类</h3><p><code>AccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定id的账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"qr"</span>)</span><br><span class="line">    <span class="keyword">private</span> QueryRunner qr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account where id=?"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"insert into account(name, money) values(?,?)"</span>;</span><br><span class="line">            qr.update(sql, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">            qr.update(sql, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">            qr.update(sql, id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Service层接口及其实现类"><a href="#Service层接口及其实现类" class="headerlink" title="Service层接口及其实现类"></a>Service层接口及其实现类</h3><p><code>AccountService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定id的账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="bean-xml中的配置"><a href="#bean-xml中的配置" class="headerlink" title="bean.xml中的配置"></a><code>bean.xml</code>中的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知Spring要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置QueryRunner --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"qr"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取service接口的代理类对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="改造基于注解的IoC案例，使用纯注解方式实现"><a href="#改造基于注解的IoC案例，使用纯注解方式实现" class="headerlink" title="改造基于注解的IoC案例，使用纯注解方式实现"></a>改造基于注解的IoC案例，使用纯注解方式实现</h2><p>纯注解的方式也可以实现Spring的配置，这里主要介绍如何使用注解来替代配置文件中的配置。实际开发中一般使用xml+注解的方式进行配置（使用xml方便的地方就用xml，用注解配置简单的地方就使用注解）</p>
<h3 id="删除bean-xml配置文件，使用配置类替代配置文件"><a href="#删除bean-xml配置文件，使用配置类替代配置文件" class="headerlink" title="删除bean.xml配置文件，使用配置类替代配置文件"></a>删除<code>bean.xml</code>配置文件，使用配置类替代配置文件</h3><p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>下面介绍几种用于替代XML配置的注解</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p><strong>作用</strong>：指定当前类是一个配置类</p>
<p><strong>细节</strong>：当配置类作为<code>AnnotationConfigApplicationContext</code>的构造函数的参数时，该注解可以不写</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p><strong>作用</strong>：用于通过注解指定Spring在创建容器时要扫描的包</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包</li>
<li><code>basePackages</code></li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p><strong>作用</strong>：用于把当前方法的返回值作为bean对象存入Spring的IoC容器中</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>name</code>：用于指定bean的id。默认值是当前的方法名</li>
</ul>
<p><strong>细节</strong>：当使用该注解配置方法时，如果方法有参数，Spring框架回去容器中查找有没有可用的bean对象，查找的方式和@Autowired相同</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个DataSource对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.setProperty(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"driverClassName"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:3306/spring"</span>);</span><br><span class="line">            <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"qr"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p><strong>作用</strong>：用于导入其他的配置类</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>value</code>：用于指定其他配置类的字节码（<code>.class</code>）（是一个数组类型）</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="meta">@Import</span>(JdbcConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JdbcConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个DataSource对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.setProperty(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"driverClassName"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            props.setProperty(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:3306/spring"</span>);</span><br><span class="line">            <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"qr"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><p><strong>作用</strong>：用于指定properties文件的位置</p>
<p><strong>属性</strong>：</p>
<ul>
<li><p><code>value</code>：指定文件的名称和路径</p>
<p><strong>关键字</strong>：<code>classpath</code>表示在类路径下</p>
</li>
</ul>
<p>在maven工程的resources目录下创建jdbcConfig.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring</span></span><br><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>



<p><code>SpringConfiguration.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.zxw"</span>)</span><br><span class="line"><span class="meta">@Import</span>(JdbcConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@PropertySource("classpath:jdbcConfig.properties")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>前面已经介绍过可以使用@Value注入基本类型和String类型，且@Value注解中可以使用SpEL</p>
<p><code>JdbcConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个DataSource对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.setProperty(<span class="string">"username"</span>, username);</span><br><span class="line">            props.setProperty(<span class="string">"password"</span>, password);</span><br><span class="line">            props.setProperty(<span class="string">"driverClassName"</span>, driverClassName);</span><br><span class="line">            props.setProperty(<span class="string">"url"</span>, url);</span><br><span class="line">            <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"qr"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">createQueryRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>使用纯注解方式，ApplicationContext的获取方式有所不同，可以使用<code>AnnotationConfigApplicationContext</code>。</p>
<p>测试方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//获取service接口的代理类对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="问题：XML和注解者两种方式哪一个更好？"><a href="#问题：XML和注解者两种方式哪一个更好？" class="headerlink" title="问题：XML和注解者两种方式哪一个更好？"></a>问题：XML和注解者两种方式哪一个更好？</h3><p>实际开发中，应该根据公司项目的要求使用对应的方式。两种方式各有利弊，对于我们自己编写的类，使用注解更为方便；但是对于外部提供的类来说使用注解反而更加复杂。所以应当根据实际情况而定。</p>
<h2 id="Spring和Junit的整合"><a href="#Spring和Junit的整合" class="headerlink" title="Spring和Junit的整合"></a>Spring和Junit的整合</h2><p>实际开发中，开发和测试是由不同的人来负责的，负责测试的人可能不知道如何使用Spring，所以在测试方法中通过ApplicationContext获取AccountService的方式是不合理的。</p>
<p>Spring整合Junit就是为了解决这个问题</p>
<p><strong>使用步骤</strong></p>
<ol>
<li><p>导入Spring整合Junit的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Junit提供的一个注解将原有的main方法替换了，替换成Spring提供的<code>@Runwith</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>告知Spring的运行器，Spring的IoC容器是基于XML的还是基于注解的，并且说明位置</p>
<p>@ContextConfiguration</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>locations</code>：指定XML文件的位置，加上classpath关键字表示在类路径上</li>
<li><code>classes</code>：指定注解类所在的位置</li>
</ul>
<p><strong>使用XML配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span></span>=<span class="string">"classpath:bean.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用注解配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span></span>=SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意</strong>：当我们使用Spring 5.0及以上的版本时，需要保证Junit的版本在4.12及以上</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>控制反转</tag>
        <tag>Spring Junit整合</tag>
        <tag>Spring配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（三）</title>
    <url>/2020/07/11/Spring%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（三）"><a href="#Spring（三）" class="headerlink" title="Spring（三）"></a>Spring（三）</h1><h2 id="添加事务管理"><a href="#添加事务管理" class="headerlink" title="添加事务管理"></a>添加事务管理</h2><h3 id="JDBC事务管理"><a href="#JDBC事务管理" class="headerlink" title="JDBC事务管理"></a>JDBC事务管理</h3><p>根据之前有关JDBC的知识，如果一个连接中没有设置开启事务，那么事务默认是自动提交的。在<code>AccountService</code>中添加一个<code>transfer</code>转账方法，用于从一个账户转账到另外一个账户（此处需要在<code>AccountDao</code>中添加一个<code>findAccountByName</code>方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Float money)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先根据name查询账户</span></span><br><span class="line">    Account fromAccount = accountDao.findAccountByName(from);</span><br><span class="line">    Account toAccount = accountDao.findAccountByName(to);</span><br><span class="line">    <span class="comment">//转出账户减少</span></span><br><span class="line">    fromAccount.setMoney(fromAccount.getMoney() - money);</span><br><span class="line">    <span class="comment">//转入账户增加</span></span><br><span class="line">    toAccount.setMoney(toAccount.getMoney() + money);</span><br><span class="line">    <span class="comment">//更新账户信息</span></span><br><span class="line">    accountDao.updateAccount(fromAccount);</span><br><span class="line">    <span class="comment">//模拟事务过程中发生了异常</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    accountDao.updateAccount(toAccount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于没有进行事务管理，会导致转账业务操作发生异常（即事务失去了一致性），在一次转账逻辑中建立了四次连接，这很明显不符合事务的要求，所有的事务都应当在业务层中完成，所以在事务的执行过程中获取的连接应当是同一个连接对象，可以将连接与当前线程绑定，此时可以使用ThreadLocal类创建一个用于获取连接的ConnectionUtils工具类：</p>
<p><code>ConnectionUtils.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个和当前线程绑定的Connection，如果没有则创建并绑定然后返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//先从ThreadLocal中获取</span></span><br><span class="line">            Connection conn = tl.get();</span><br><span class="line">            <span class="comment">//如果ThreadLocal中没有则创建并绑定</span></span><br><span class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn = dataSource.getConnection();</span><br><span class="line">                tl.set(conn);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 考虑到Tomcat中使用了线程池技术，一个线程可以被重复使用，所以提供一个将</span></span><br><span class="line"><span class="comment">     * Connection对象和当前线程解绑的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了连接的工具类，还需要一个用于事务管理的工具类：<code>TransactionManager</code></p>
<p><code>TransactionManager.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"connectionUtils"</span>)</span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollbackTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>AccountDaoImpl.java</code>使用ConnectionUtils来获取连接对象，确保获取的连接对象在同一个线程中是相同的</p>
<p><code>AccountDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"qr"</span>)</span><br><span class="line">    <span class="keyword">private</span> QueryRunner qr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"connectionUtils"</span>)</span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(connectionUtils.getConnection(), sql, <span class="keyword">new</span> BeanListHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account where id=?"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(connectionUtils.getConnection(), sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"insert into account(name, money) values(?,?)"</span>;</span><br><span class="line">            qr.update(connectionUtils.getConnection(), sql, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">            qr.update(connectionUtils.getConnection(), sql, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">            qr.update(connectionUtils.getConnection(), sql, id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">"select * from account where name=?"</span>;</span><br><span class="line">            <span class="keyword">return</span> qr.query(connectionUtils.getConnection(), sql, <span class="keyword">new</span> BeanHandler&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>AccountServiceImpl</code>，使用TransactionManager来管理事务</p>
<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"txManager"</span>)</span><br><span class="line">    <span class="keyword">private</span> TransactionManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            List&lt;Account&gt; accounts = accountDao.findAllAccount();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">            <span class="keyword">return</span> accounts;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            Account account = accountDao.findAccountById(id);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">            <span class="keyword">return</span> account;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            accountDao.saveAccount(account);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            accountDao.updateAccount(account);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            accountDao.deleteAccount(id);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">//业务逻辑</span></span><br><span class="line">            <span class="comment">//首先根据name查询账户</span></span><br><span class="line">            Account fromAccount = accountDao.findAccountByName(from);</span><br><span class="line">            Account toAccount = accountDao.findAccountByName(to);</span><br><span class="line">            <span class="comment">//转出账户减少</span></span><br><span class="line">            fromAccount.setMoney(fromAccount.getMoney() - money);</span><br><span class="line">            <span class="comment">//转入账户增加</span></span><br><span class="line">            toAccount.setMoney(toAccount.getMoney() + money);</span><br><span class="line">            <span class="comment">//更新账户信息</span></span><br><span class="line">            accountDao.updateAccount(fromAccount);</span><br><span class="line">            <span class="comment">//模拟事务过程中发生了异常</span></span><br><span class="line"><span class="comment">//            int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateAccount(toAccount);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commitTransaction();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            txManager.rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>bean.xml</code>中配置相关的bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知Spring要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql://localhost:3306/spring<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置QueryRunner --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"qr"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里不再需要传入dataSource了，因为在获取连接时已经用到了--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name="ds" ref="dataSource"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="分析案例中的问题"><a href="#分析案例中的问题" class="headerlink" title="分析案例中的问题"></a>分析案例中的问题</h3><p>在<code>AccountServiceImpl</code>中有很多重复的内容，这些内容和事务的管理有关，形式如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    txManager.beginTransaction();</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    txManager.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    txManager.rollback();</span><br><span class="line">    <span class="comment">//异常处理</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放并解绑连接</span></span><br><span class="line">    txManager.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然出现了这么多重复的内容是需要进行优化的，那么该如何进行优化？</p>
<p>这里就要回顾之前学过的动态代理了</p>
<h3 id="回顾动态代理"><a href="#回顾动态代理" class="headerlink" title="回顾动态代理"></a>回顾动态代理</h3><p>动态代理的作用就是在不修改源码的基础上对方法进行增强。下面将介绍两种动态代理的实现：</p>
<ul>
<li>JDK中提供的动态代理实现Proxy类</li>
<li>第三方类库实现动态代理cglib</li>
</ul>
<h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><p><strong>如何创建代理对象</strong>：使用<code>Proxy</code>类的<code>newProxyInstance</code>方法，这个方法有三个参数：</p>
<ul>
<li><code>ClassLoader</code>：类加载器，它是用于加载代理类对象的字节码的，和被代理类使用相同的类加载器（可以通过被代理类对象获得）</li>
<li><code>Class[] interfaces</code>：字节码数组，它是用于让代理类和被代理类拥有相同的方法</li>
<li><code>InvocationHandler</code>：用于提供增强代码，决定如何增强代码。一般提供该接口的匿名内部类，需要字节实现。</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>IProducer</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对生产厂家要求的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Producer</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱: "</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱:"</span> + money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Client</code>类，用于演示Proxy的基于接口的动态代理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(</span><br><span class="line">                producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义：</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy 代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method 表示当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args  当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>  和被代理对象的方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">//提供增强的代码</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float) args[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money * <span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="cglib"><a href="#cglib" class="headerlink" title="cglib"></a>cglib</h4><p>maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1_3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>涉及的类</strong>：Enhancer</p>
<p><code>Enhancer</code>类使用<code>create</code>方法来创建一个代理对象，该方法的参数如下：</p>
<ul>
<li><code>Class</code>：字节码，用于指定被代理对象的字节码</li>
<li><code>Callback</code>：用于提供增强的代码，一般使用该接口的子接口实现类<code>MethodInterceptor</code>（方法拦截)</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p><code>Client.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        Producer cglibProducer = (Producer) Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *      以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy 当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//提供增强的代码</span></span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float) args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money * <span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        cglibProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="使用动态代理来解决事务管理问题"><a href="#使用动态代理来解决事务管理问题" class="headerlink" title="使用动态代理来解决事务管理问题"></a>使用动态代理来解决事务管理问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取AccountService进行事务管理的动态代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accountService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AccountService <span class="title">getAccountService</span><span class="params">(<span class="keyword">final</span> AccountService accountService, <span class="keyword">final</span> TransactionManager txManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (AccountService) Proxy.newProxyInstance(</span><br><span class="line">            accountService.getClass().getClassLoader(),</span><br><span class="line">            accountService.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//开启事务</span></span><br><span class="line">                        txManager.beginTransaction();</span><br><span class="line">                        <span class="comment">//执行被代理的service对象中的方法</span></span><br><span class="line">                        Object returnValue = method.invoke(accountService, args);</span><br><span class="line">                        <span class="comment">//提交事务</span></span><br><span class="line">                        txManager.commitTransaction();</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">//回滚事务</span></span><br><span class="line">                        txManager.rollbackTransaction();</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">//释放连接</span></span><br><span class="line">                        txManager.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="AOP的概念"><a href="#AOP的概念" class="headerlink" title="AOP的概念"></a>AOP的概念</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>AOP：Aspect Oriented Programming，即<strong>面向切面编程</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200515201935223.png" align="left"/>



<h3 id="AOP的作用和优势"><a href="#AOP的作用和优势" class="headerlink" title="AOP的作用和优势"></a>AOP的作用和优势</h3><p><strong>作用</strong>：在程序运行期间，不修改源码的情况下对方法进行增强</p>
<p><strong>优势</strong>：</p>
<ul>
<li>减少重复代码</li>
<li>提高开发效率</li>
<li>方便维护</li>
</ul>
<h2 id="Spring中AOP的相关术语（掌握）"><a href="#Spring中AOP的相关术语（掌握）" class="headerlink" title="Spring中AOP的相关术语（掌握）"></a>Spring中AOP的相关术语（掌握）</h2><p><strong>JointPoint（连接点）</strong></p>
<p>&emsp;&emsp;所谓连接点是指哪些被拦截到的点。在Spring中，这些点指的是<strong>方法</strong>，因为Spring只支持方法类型的连接点。</p>
<blockquote>
<p>大白话：就是业务层接口中的方法，连接的是业务和增强方法的点</p>
</blockquote>
<p><strong>Pointcut（切入点）</strong></p>
<p>&emsp;&emsp;所谓切入点是指我们要对哪些JoinPoint进行拦截的定义。</p>
<blockquote>
<p>被增强的方法</p>
</blockquote>
<p><strong>Advice（通知/增强）</strong></p>
<p>&emsp;&emsp;所谓通知是指拦截到JoinPoint之后要做的事就是通知。</p>
<p>&emsp;&emsp;通知的类型有：前置通知、后置通知、异常通知、最终通知、环绕通知</p>
<blockquote>
<p>顾名思义：</p>
<p>前置通知：invoke执行之前</p>
<p>后置通知：invoke执行之后</p>
<p>异常通知：catch中执行的内容</p>
<p>最终通知：finally中执行的内容</p>
<p>环绕通知：有明确的切入点方法调用，是指整个的这部分，将前面的融合到了一起。（就是整个invoke方法） </p>
</blockquote>
<p><strong>Introduction（引介）</strong></p>
<p>&emsp;&emsp;引介是一种特殊的通知，在不修改类代码的前提下。Introduction可以在运行期间为类动态地添加一些方法或Field。</p>
<p><strong>Target（目标对象）</strong></p>
<p>&emsp;&emsp;被代理的对象。</p>
<p><strong>Weaving（织入）</strong></p>
<p>&emsp;&emsp;是指把增强应用到目标对象来创建新的代理对象的过程。</p>
<p>&emsp;&emsp;Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</p>
<p><strong>Proxy（代理）</strong>：</p>
<p>​    向目标对象应用通知之后创建的对象</p>
<p><strong>Aspect（切面）</strong></p>
<p>&emsp;&emsp;是切入点和通知的结合</p>
<h3 id="学习Spring要明确的事情"><a href="#学习Spring要明确的事情" class="headerlink" title="学习Spring要明确的事情"></a>学习Spring要明确的事情</h3><p><strong>开发阶段（我们做的）</strong></p>
<p>&emsp;&emsp;编写核心业务代码（开发主线）：大部分程序员来做，要求熟悉业务需求。</p>
<p>&emsp;&emsp;把公用代码抽取出来，制作成通知。（开发阶段最后再做）：AOP编程人员来做（有能力的人来做）。</p>
<p>&emsp;&emsp;在配置文件中，声明切入点与通知之间的关系，即切面。：AOP编程人员来做（配置）。</p>
<p><strong>运行阶段（Spring框架完成的）</strong></p>
<p>&emsp;&emsp;Spring框架监控切入点方法的执行。一旦监控到切入点方法被执行，使用代理机制，动态创建目标对象的代理对象。根据通知的类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
<h2 id="Spring中基于XML和注解的AOP配置"><a href="#Spring中基于XML和注解的AOP配置" class="headerlink" title="Spring中基于XML和注解的AOP配置"></a>Spring中基于XML和注解的AOP配置</h2><h3 id="基于XML的AOP配置示例"><a href="#基于XML的AOP配置示例" class="headerlink" title="基于XML的AOP配置示例"></a>基于XML的AOP配置示例</h3><p>首先导入maven依赖，添加了AspectJ依赖，用于解析切入点表达式（用于匹配要进行拦截的方法）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Service层接口及实现类</strong></p>
<p>由于AOP主要是对Service层的方法进行增强，这里只需要Service层接口和实现类就可以测试AOP的使用</p>
<p><code>AccountService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟保存账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟更新账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟删除账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了保存账户操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了更新账户操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了删除账户操作"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code>中的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.zxw.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知的类型，并建立通知方法和切入点方法的联系 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAOP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext对象</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取AccountService对象</span></span><br><span class="line">    AccountService as = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    as.saveAccount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logger类的printLog方法执行了!</span><br><span class="line">执行了保存账户操作</span><br></pre></td></tr></table></figure>



<h3 id="基于XML的AOP配置的步骤"><a href="#基于XML的AOP配置的步骤" class="headerlink" title="基于XML的AOP配置的步骤"></a>基于XML的AOP配置的步骤</h3><ol>
<li><p>将通知Bean交给Spring管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Logger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.zxw.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>aop:config</code>标签表明开始AOP的配置</p>
</li>
<li><p>使用<code>aop:aspect</code>标签表明开始配置切面</p>
<p><strong>属性</strong></p>
<ul>
<li><code>id</code>：给切面提供一个唯一标识</li>
<li><code>ref</code>：指定通知bean的id</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>aop:aspect</code>标签内部使用对应的标签来配置不同类型的通知</p>
<ul>
<li><p><code>aop:before</code>：前置通知</p>
</li>
<li><p><code>aop:after-returning</code>：配置后置通知</p>
</li>
<li><p><code>aop:after-throwing</code>：配置异常通知</p>
</li>
<li><p><code>aop:after</code>：配置最终通知</p>
</li>
<li><p><code>aop:around</code>：配置环绕通知</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>method</code>：指定通知Bean中的哪个方法用于该通知</li>
<li><code>pointcut</code>：用于指定切入点表达式，该表达式的含义是对符合要求的业务层方法进行该种通知类型的增强</li>
<li><code>pointcut-ref</code>：指定一个切入点表达式的唯一标识id</li>
</ul>
</li>
</ul>
</li>
<li><p>可以使用<code>aop:pointcut</code>标签来配置一个切入点表达式</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>id</code>：唯一标识一个切入点表达式</li>
<li><code>expression</code>：切入点表达式的内容</li>
</ul>
<p><strong>注意</strong>：此标签写在<code>aop:aspect</code>标签的内部则只能够在当前切面中使用，写在<code>aop:config</code>标签中则可以在所有切面中使用（注意，此时必须写在<code>aop:aspect</code>标签之前，这是XML的约束）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>==切入点表达式==</p>
<p><strong>关键字</strong>：<code>execution(表达式)</code></p>
<p><strong>表达式格式</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回值 包名.包名...类名.方法名(参数列表)</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void com.zxw.service.impl.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>

<p><strong>细节</strong></p>
<ol>
<li><p>访问修饰符可以省略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void com.zxw.service.impl.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值类型可以使用通配符表示任意返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* com.zxw.service.imlp.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>包名可以使用通配符表示任意包，但是有几个包就要写几个<code>*.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *.*.*.*.AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>包名可以使用<code>..</code>表示当前包及其子包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..AccountServiceImpl.saveAccount()</span><br></pre></td></tr></table></figure>
</li>
<li><p>类名和方法名都可以使用<code>*</code>来实现通配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..*.saveAccount()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..*.*()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>参数列表</strong></p>
<ul>
<li>可以直接写数据类型<ul>
<li>基本类型直接写名称</li>
<li>引用类型写<code>包名.类名</code>，例如：<code>java.lang.String</code></li>
</ul>
</li>
<li>可以使用通配符<code>*</code>表示任意类型，但是这样写必须有参数</li>
<li>可以使用<code>..</code>表示有无参数均可，参数可以是任意类型</li>
</ul>
<p><strong>全通配写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *..*.*(..)</span><br></pre></td></tr></table></figure>

<p><strong>实际开发中切入点表达式的通常写法</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* com.xxx.service.impl.*.*(..)</span><br></pre></td></tr></table></figure>



<h3 id="AOP配置环绕通知"><a href="#AOP配置环绕通知" class="headerlink" title="AOP配置环绕通知"></a>AOP配置环绕通知</h3><p>环绕通知十分强大，它可以实现前置、后置、异常、最终通知的功能</p>
<p>可以通过下面这个事务管理的例子来理解</p>
<p><code>TransactionManager</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开启事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提交事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollbackTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"回滚事务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"释放连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">serviceTransaction</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            beginTransaction();</span><br><span class="line">            <span class="comment">//执行service方法</span></span><br><span class="line">            <span class="comment">//获取执行的参数</span></span><br><span class="line">            Object[] args = pjp.getArgs();</span><br><span class="line">            returnValue = pjp.proceed(args);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            commitTransaction();</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            rollbackTransaction();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>bean.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"com.zxw.utils.TransactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用aop进行事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:before method="beginTransaction" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:after-returning method="commitTransaction" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:after-throwing method="rollbackTransaction" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:after method="release" pointcut-ref="pt1"/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"serviceTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>==ProceedingJoinPoint==</p>
<p>这个类有两个比较重要的方法：</p>
<ul>
<li><code>getArgs()</code>：获取切入点方法的参数，返回的是一个Object类型的数组</li>
<li><code>proceed()</code>：执行切入点方法，这个方法可以传入一个上面获取的参数</li>
</ul>
<h3 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h3><ol>
<li>在<code>bean.xml</code>中配置要扫描的包并开启AOP注解支持</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring容器创建时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启Spring的AOP注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>使用注解将<code>AccountServiceImpl</code>和<code>TransactionManager</code>注入到Spring容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Aspect</code>来标记切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Pointcut</code>在标记切面的类中配置切入点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用注解来标记通知类中方法的种类</p>
<ul>
<li><p><code>@Before</code>：前置通知</p>
</li>
<li><p><code>@AfterReturning</code>：后置通知</p>
</li>
<li><p><code>@AfterThrowing</code>：异常通知</p>
</li>
<li><p><code>@After</code>：最终通知</p>
</li>
<li><p><code>@Around</code>：环绕通知</p>
<p><strong>属性</strong></p>
<ul>
<li><p><code>value</code>：指定一个切入点表达式或者给出切入点表达式的方法名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>注意</strong>：使用注解方式配置除了环绕通知的其他四种通知，执行顺序会出现问题，这是Spring的一个bug，实际开发中一般使用环绕通知</p>
</li>
</ol>
<h3 id="不使用XML配置文件开启Spring-AOP的注解"><a href="#不使用XML配置文件开启Spring-AOP的注解" class="headerlink" title="不使用XML配置文件开启Spring AOP的注解"></a>不使用XML配置文件开启Spring AOP的注解</h3><p>在<code>SpringConfiguration</code>中添加注解@EnableAspectJAutoProxy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：@Aspect后不需要给出值，不然会报错！！！！！！！！！！</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AOP</tag>
        <tag>面向切面编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring（四）</title>
    <url>/2020/07/14/Spring%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring（四）"><a href="#Spring（四）" class="headerlink" title="Spring（四）"></a>Spring（四）</h1><h2 id="Spring中的JdbcTemplate（会用）"><a href="#Spring中的JdbcTemplate（会用）" class="headerlink" title="Spring中的JdbcTemplate（会用）"></a>Spring中的JdbcTemplate（会用）</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200714104143319.png" align="left"/>



<h3 id="JdbcTemplate的作用"><a href="#JdbcTemplate的作用" class="headerlink" title="JdbcTemplate的作用"></a>JdbcTemplate的作用</h3><p>JdbcTemplate对JDBC进行了薄薄的封装，其作用和JDBC一样，用于和数据库进行交互，实现对表的CRUD操作</p>
<h3 id="如何创建JdbcTemplate"><a href="#如何创建JdbcTemplate" class="headerlink" title="如何创建JdbcTemplate"></a>如何创建JdbcTemplate</h3><p>可以通过<code>new JdbcTemplate(dataSource)</code>来创建一个JdbcTemplate然后使用，在Spring配置文件中有关JdbcTemplate的配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>$&#123;jdbc.driver&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>$&#123;jdbc.url&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="JdbcTemplate的常用方法（CRUD）"><a href="#JdbcTemplate的常用方法（CRUD）" class="headerlink" title="JdbcTemplate的常用方法（CRUD）"></a>JdbcTemplate的常用方法（CRUD）</h3><h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into account(name, money) values(?,?)"</span>;</span><br><span class="line">jt.update(sql, <span class="string">"eee"</span>, <span class="number">3333f</span>);</span><br></pre></td></tr></table></figure>

<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">jt.update(sql, <span class="string">"abc"</span>, <span class="number">1200f</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">jt.update(sql, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select id, name, money from account where money&gt;?"</span>;</span><br><span class="line">List&lt;Account&gt; accounts = jt.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), 1000<span class="title">f</span>)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="查询一个"><a href="#查询一个" class="headerlink" title="查询一个"></a>查询一个</h4><p>虽然JdbcTemplate中也提供了返回值为T的查询单个的方法，但是实际开发中一般还是使用下面这种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select id, name, money from account where id=?"</span>;</span><br><span class="line">List&lt;Account&gt; accounts = jt.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), 1)</span>;</span><br><span class="line">System.out.println(accounts.isEmpty()? <span class="string">"没有内容"</span> : accounts.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<h4 id="查询返回一行一列"><a href="#查询返回一行一列" class="headerlink" title="查询返回一行一列"></a>查询返回一行一列</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select count(*) from account where money&gt;?"</span>;</span><br><span class="line">Long count = jt.queryForObject(sql, Long<span class="class">.<span class="keyword">class</span>, 1000<span class="title">f</span>)</span>;</span><br></pre></td></tr></table></figure>



<h3 id="Dao中使用JdbcTemplate"><a href="#Dao中使用JdbcTemplate" class="headerlink" title="Dao中使用JdbcTemplate"></a>Dao中使用JdbcTemplate</h3><p><code>bean.xml</code>中的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbcConfig.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClassName"</span>&gt;</span>$&#123;jdbc.driver&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>$&#123;jdbc.url&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>AccountDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据name查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountDaoImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"jdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, name, money from account"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, name, money from account where id=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>).<span class="title">get</span>(0)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, name, money from account where name=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>).<span class="title">get</span>(0)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into account(name,money) values(?,?)"</span>;</span><br><span class="line">        jdbcTemplate.update(sql, account.getName(), account.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from account where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update account set name=?, money=? where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext Spring核心容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">//获取AccountDao对象</span></span><br><span class="line">    AccountDao accountDao = ac.getBean(<span class="string">"accountDao"</span>, AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Dao中使用JdbcDaoSupport的两种方式"><a href="#Dao中使用JdbcDaoSupport的两种方式" class="headerlink" title="Dao中使用JdbcDaoSupport的两种方式"></a>Dao中使用JdbcDaoSupport的两种方式</h3><h4 id="自定义JdbcDaoSupport"><a href="#自定义JdbcDaoSupport" class="headerlink" title="自定义JdbcDaoSupport"></a>自定义JdbcDaoSupport</h4><p>如果每一个Dao接口的实现类都需要注入JdbcTemplate，那么就会用很多重复的代码，所以可以提供一个父类JdbcDaoSupport，然后让所有的Dao接口的实现类继承这个类。</p>
<p><code>JdbcDaoSupport</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jdbcTemplate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在配置bean时，将dataSource或者jdbcTemplate注入到对应的dao接口实现类中即可</p>
<h4 id="继承Spring提供的JdbcDaoSupport"><a href="#继承Spring提供的JdbcDaoSupport" class="headerlink" title="继承Spring提供的JdbcDaoSupport"></a>继承Spring提供的JdbcDaoSupport</h4><p>Spring也提供了JdbcDaoSupport这个类，具体的实现和上面自定义的基本相同，但是使用Spring提供的JdbcDaoSupport不支持注解方式配置。</p>
<h2 id="Spring中的事务控制"><a href="#Spring中的事务控制" class="headerlink" title="Spring中的事务控制"></a>Spring中的事务控制</h2><p><strong>Spring事务需要明确</strong>：</p>
<ul>
<li>Java EE体系分层开发，事务的处理位于业务层，Spring提供了分层设计业务层的事务处理解决方案</li>
<li>Spring框架为我们提供了一组事务控制的接口</li>
<li>Spring的事务控制都是基于AOP的，它既可以使用编程的方式实现，也可以使用配置的方式实现。重点学习<strong>使用配置的方式实现</strong></li>
</ul>
<h3 id="Spring中事务控制的一组API"><a href="#Spring中事务控制的一组API" class="headerlink" title="Spring中事务控制的一组API"></a>Spring中事务控制的一组API</h3><h4 id="PlatFormTransactionManager接口"><a href="#PlatFormTransactionManager接口" class="headerlink" title="PlatFormTransactionManager接口"></a>PlatFormTransactionManager接口</h4><p>这个接口中定义了三个方法：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200517195853778.png" align="left"/>

<p>Spring给出的实现类是：<code>DataSourceTransactionManager</code></p>
<p>Hibernate中给出的实现类是：<code>HibernateTransactionManager</code></p>
<h4 id="TransactionDefinition接口"><a href="#TransactionDefinition接口" class="headerlink" title="TransactionDefinition接口"></a>TransactionDefinition接口</h4><p>这个接口主要有如下几个方法：</p>
<ul>
<li><code>String getName()</code>：获取事务对象的名称</li>
<li><code>int getIsolationLevel()</code>：获取事务隔离级别</li>
<li><code>int getPropagationBehavior()</code>：获取事务传播行为</li>
<li><code>int getTimeout</code>：获取事务超时时间</li>
<li><code>boolean isReadOnly()</code>：获取事务是否只读</li>
</ul>
<p>==事务的隔离级别==</p>
<ul>
<li><code>ISOLATION_DEFAULT</code>：默认级别</li>
<li><code>ISOLATION_READ_UNCOMMITTED</code>：读取未提交数据</li>
<li><code>ISOLATION_READ_COMMITTED</code>：读取已提交数据，解决了脏读问题（Oracle默认级别）</li>
<li><code>ISOLATION_REPEATABLE_READ</code>：可重复读，解决不可重复读问题</li>
<li><code>ISOLATION_SERIALIZABLE</code>：串行化，解决了脏读、不可重复读、幻读，效率最低</li>
</ul>
<p>==事务的传播行为==</p>
<p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。</p>
<p>Spring在TransactionDefinition中定义了7种事务传播行为：</p>
<table>
<thead>
<tr>
<th>事务行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>PROPAGATION_REQUIRED</td>
<td>支持当前事务，假设当前没有事务。就新建一个事务</td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td>支持当前事务，假设当前没有事务，就以非事务方式运行</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td>支持当前事务，假设当前没有事务，就抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td>新建事务，假设当前存在事务。把当前事务挂起</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式运行操作。假设当前存在事务，就把当前事务挂起</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td>以非事务方式运行，假设当前存在事务，则抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td>
</tr>
</tbody></table>
<p>如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200716081131387.png" align="left"/>

<p>事务的传播行为就是在方法A中开启了事务，当执行到方法B时应当如何处理的行为</p>
<p><strong>PROPAGATION_REQUIRED</strong></p>
<p>单独调用方法B时，因为上下文不存在事务，所以会开启一个新的事务</p>
<p>调用方法A时，因为上下文不存在事务，所以会开启一个新的事务。当执行到方法B时，方法B发现当前上下文有事务，就加入到当前事务中</p>
<p><strong>PROPAGATION_SUPPORTS</strong></p>
<p>如果存在一个事务，支持当前事务。如果没有事务，则以非事务方式执行。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    methodB();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单独调用methodB方法时，是以非事务方式执行的。但是当调用methodA方法时，methodB会加入methodA的事务中。</p>
<p><strong>PROPAGATION_MANDATORY</strong></p>
<p>如果已经存在一个事务，则加入当前事务。如果没有一个活动的事务，则抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    methodB();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.MANDATORY)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单独调用methodB方法时，由于没有一个活动的事务，会抛出异常<code>IllegalTransactionStateException(“Transaction propagation ‘mandatory’ but no existing transaction found”)</code>；当调用methodA时，methodB会加入到methodA的事务中。</p>
<p>*<em>PROPAGATION_REQUIRES_NEW *</em></p>
<p>会开启一个新的事务，如果已经存在一个事务，则将这个事务挂起。这种方式需要使用<code>JtaTransactionManager</code>作为事务管理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    methodB();</span><br><span class="line">    doSomethingAfter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED_NEW)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时调用methodA相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransactionManager tm = <span class="keyword">null</span>;</span><br><span class="line">Transaction ts1 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//获得一个JTA事务管理器</span></span><br><span class="line">    tm = getTransactionManager();</span><br><span class="line">    <span class="comment">//开启一个新事务</span></span><br><span class="line">    tm.begin();</span><br><span class="line">    ts1 = tm.getTransaction();</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    <span class="comment">//挂起当前事务</span></span><br><span class="line">    tm.suspend();</span><br><span class="line">    Transaction ts2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//开启第二个事务</span></span><br><span class="line">        tm.begin();</span><br><span class="line">        ts2 = tm.getTransaction();</span><br><span class="line">        methodB();</span><br><span class="line">        <span class="comment">//提交第二个事务</span></span><br><span class="line">        ts2.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//回滚第二个事务</span></span><br><span class="line">        ts2.rollback();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//methodB执行完毕之后，恢复第一个事务</span></span><br><span class="line">    tm.resume(ts1);</span><br><span class="line">    doSomethingAfter();</span><br><span class="line">    <span class="comment">//提交第一个事务</span></span><br><span class="line">    ts1.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//回滚第一个事务</span></span><br><span class="line">    ts1.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这段代码可以发现，外层事务和内层事务是相互独立的，外层事务的失败不会影响到内层事务的提交！</p>
<p><strong>PROPAGATION_NOT_SUPPORTED</strong></p>
<p>总是非事务地执行，并挂起任何存在的事务。也需要使用<code>JtaTransactionManager</code></p>
<p>也就是调用methodA时开启了一个事务，在执行methodB前首先挂起这个事务，执行完毕之后恢复这个事务。在methodB中以非事务的方式执行</p>
<p><strong>PROPAGATION_NEVER</strong></p>
<p>总是以非事务的方式执行，如果存在一个活动的事务，则抛出异常！</p>
<p><strong>PROPAGATION_NESTED</strong></p>
<p>如果一个活动的事务存在，则运行在一个嵌套的事务中。 如果没有活动事务, 则按TransactionDefinition.PROPAGATION_REQUIRED 属性执行。</p>
<p>这是一个嵌套事务,使用JDBC 3.0驱动时,仅仅支持DataSourceTransactionManager作为事务管理器。<br>需要JDBC 驱动的java.sql.Savepoint类。使用PROPAGATION_NESTED，还需要把PlatformTransactionManager的nestedTransactionAllowed属性设为true(属性值默认为false)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    methodB();</span><br><span class="line">    doSomethingAfter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果单独调用methodB方法，则按照REQUIRED属性执行。如果调用methodA方法，相当于如下的效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">SavePoint sp = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    conn = getConnnection();</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    doSomethingBefore();</span><br><span class="line">    sp = conn.getSavePoint();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        methodB();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        conn.rollback(sp);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    conn.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内层事务发生异常时会回滚到设置好的回滚点（即methodB执行之前的状态），外层事务发生异常则会回滚整个事务（包括内层事务的内容）。和REQUIRES_NEW的区别在于，外层的事务可以影响到内层事务，内层事务无法影响外层事务。</p>
<h3 id="Spring声明式事务—XML方式"><a href="#Spring声明式事务—XML方式" class="headerlink" title="Spring声明式事务—XML方式"></a>Spring声明式事务—XML方式</h3><p><strong>步骤</strong></p>
<ol>
<li><p>配置事务管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置事务的通知</p>
<p><strong>属性</strong>：</p>
<ul>
<li><code>id</code>：通知的唯一标识</li>
<li><code>transaction-manager</code>：指定事务管理器bean的id</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置AOP中的通用切入点表达式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置通用切入点表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建立事务通知和切入点表达式之间的关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--建立事务通知和切入点表达式之间的关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>tx:advice</code>标签内部配置事务的属性</p>
<ul>
<li><code>isolation</code>：用于指定事务的隔离级别，默认值是DEFAULT，表示使用数据库默认的隔离级别</li>
<li><code>propagation</code>：用于指定事务的传播行为，默认值为REQUIRED，表示一定会有事务，查询操作可以选择SUPPORTS</li>
<li><code>read-only</code>：用于指定是否只读，只有查询方法才能设置为true，默认值为false</li>
<li><code>timeout</code>：用于指定事务的超时时间，默认值是-1，表示永不超时，以秒为单位</li>
<li><code>rollback-for</code>：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不会回滚。没有默认值，表示任何异常都回滚</li>
<li><code>no-rollback-for</code>：用于指定一个异常，当产生该异常时，事务不回滚；产生其他异常时，事务回滚。没有默认值，表示任何异常都回滚</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="Spring声明式事务—注解方式"><a href="#Spring声明式事务—注解方式" class="headerlink" title="Spring声明式事务—注解方式"></a>Spring声明式事务—注解方式</h3><ol>
<li><p>配置事务管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>开启Spring对注解事务的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启Spring对注解事务的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>在需要使用事务支持的地方使用@Transactional注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.addAccount(account);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Spring的事务处理是在捕获到异常后进行回滚，然后抛出捕获到的异常！</p>
<h3 id="Spring声明式事务—-纯注解方式"><a href="#Spring声明式事务—-纯注解方式" class="headerlink" title="Spring声明式事务— 纯注解方式"></a>Spring声明式事务— 纯注解方式</h3><p>纯注解方式就是使用配置类来替代<code>bean.xml</code>，可以为事务单独创建一个用于事务的事务配置类<code>TransactionConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和事务相关的配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zxw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-05-17 21:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建事务管理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JdbcTemplate</tag>
        <tag>Spring事务</tag>
        <tag>声明式事务</tag>
        <tag>事务传播行为</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（二）</title>
    <url>/2020/07/24/Spring-MVC%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring-MVC（二）"><a href="#Spring-MVC（二）" class="headerlink" title="Spring MVC（二）"></a>Spring MVC（二）</h1><h2 id="响应数据和结果视图"><a href="#响应数据和结果视图" class="headerlink" title="响应数据和结果视图"></a>响应数据和结果视图</h2><h3 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h3><ul>
<li>返回String</li>
<li>返回void（使用Servlet API）</li>
<li>返回ModelAndView</li>
</ul>
<p><strong>示例代码</strong></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/testReturnString"&gt;测试返回值类型为String&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/testReturnVoid"&gt;测试返回值类型为void&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/testReturnModelAndView"&gt;测试返回值类型为ModelAndView&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testReturnString"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testReturnString</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"返回值为字符串类型"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testReturnVoid"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//向request域中保存数据</span></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>, <span class="string">"返回值为void类型"</span>);</span><br><span class="line">        <span class="comment">//使用Servlet API转发到指定的页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/success.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testReturnModelAndView"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testReturnModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//向ModelAndView中保存数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"返回值类型为ModelAndView"</span>);</span><br><span class="line">        <span class="comment">//设置视图名</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h3><h4 id="forward转发"><a href="#forward转发" class="headerlink" title="forward转发"></a>forward转发</h4><p>Controller方法提供了String类型的返回值后，默认就是请求转发。和如下的写法作用相同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testForward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"转发成功"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个的作用就相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/success.jsp"</span>).forward(request, response);</span><br></pre></td></tr></table></figure>

<p>使用了<code>forward:</code>，则路径必须写成物理视图，而不能是逻辑视图；使用请求转发既可以转发到jsp页面，也可以转发到其他的控制器方法中。</p>
<h4 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h4><p>在String类型的返回值中可以使用<code>redirect:</code>表示重定向，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRedirect"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:testReturnString"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRedirectToBaidu"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirectToBaidu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:http://www.baidu.com"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(url);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：请求转发不能转发到WEB-INF目录中，客户端是无法直接访问WEB-INF目录中的内容的</p>
<h2 id="请求参数绑定"><a href="#请求参数绑定" class="headerlink" title="请求参数绑定"></a>请求参数绑定</h2><h3 id="什么是请求参数绑定"><a href="#什么是请求参数绑定" class="headerlink" title="什么是请求参数绑定"></a>什么是请求参数绑定</h3><p>&emsp;&emsp;请求参数都是以key=value的格式存在了，键和值都是以字符串的形式存在的</p>
<p><strong>什么是参数绑定？</strong></p>
<p>&emsp;&emsp;参数绑定就是将请求参数中的参数的值赋予控制器方法对应形参的过程。</p>
<p><strong>示例</strong></p>
<p>控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBind"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBind</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    System.out.println(id):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问地址：<code>http://localhost:8080/工程名/testBind?id=10</code></p>
<p>访问这个地址会在服务器的控制台输出id的值10</p>
<p><strong>请求参数要绑定的目标类型</strong></p>
<p>控制器类中方法的参数可以是如下类型：</p>
<ul>
<li><strong>默认支持的参数类型（Servlet API支持的）</strong></li>
<li><strong>简单类型和String</strong></li>
<li><strong>POJO类型</strong></li>
<li><strong>集合类型</strong></li>
</ul>
<h3 id="默认支持的参数类型（Servlet-API）"><a href="#默认支持的参数类型（Servlet-API）" class="headerlink" title="默认支持的参数类型（Servlet API）"></a>默认支持的参数类型（Servlet API）</h3><p>Controller方法形参中有以下类型的参数，处理器适配器（HandlerAdapter）会自动识别并进行赋值</p>
<ul>
<li><p>==HttpServletRequest==：通过request获取请求信息</p>
</li>
<li><p>==HttpServletResponse==：通过response处理响应信息</p>
</li>
<li><p>==HttpSession==：获取session（会话）相关的信息</p>
</li>
<li><p>InputStream、OutputStream</p>
</li>
<li><p>Reader、Writer</p>
</li>
<li><p>Model、ModelMap</p>
<p>ModelMap继承自LinkedHashMap，Model是一个接口，它们底层都实现了<code>BindingAwareModelMap</code>类，作用就是向页面传递数据，<strong>相当于request的作用</strong></p>
</li>
</ul>
<h3 id="简单类型和String的绑定"><a href="#简单类型和String的绑定" class="headerlink" title="简单类型和String的绑定"></a>简单类型和String的绑定</h3><p>&emsp;&emsp;在Spring MVC中，绑定简单类型参数的方式有两种</p>
<ol>
<li>直接绑定</li>
<li>注解绑定</li>
</ol>
<h4 id="直接绑定"><a href="#直接绑定" class="headerlink" title="直接绑定"></a>直接绑定</h4><p><strong>要求</strong>：请求参数的key要和Controller中方法的形参名称<strong>相同</strong></p>
<p><strong>示例</strong>：</p>
<p>请求的url：<code>http://localhost:8080/spring_mvc/testBindSimple?id=10</code></p>
<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindSimple"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindSimple</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"id="</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注解绑定"><a href="#注解绑定" class="headerlink" title="注解绑定"></a>注解绑定</h4><p><strong>要求</strong>：请求参数的key的值要和对应形参上@RequestParam注解的value属性相同才能绑定成功</p>
<p><strong>示例</strong>：</p>
<p>请求的url：<code>http://localhost:8080/spring_mvc/testBindSImple?accountId=10</code></p>
<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindSimple"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindSimple</span><span class="params">(@RequestParam(<span class="string">"accountId"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"id="</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@RequestParam注解简介</strong></p>
<ul>
<li><p><code>value</code>：参数的名字，要和对应的请求参数的key的值相同</p>
</li>
<li><p><code>required</code>：是否必须，默认值为true，表示请求中一定要有该参数，否则会产生</p>
<p><font color="red"><strong>http Status 400 - Required Integer parameter ‘xxx’ is not present</strong></font></p>
</li>
<li><p><code>defaultValue</code>：默认值，如果请求参数中没有指定给出的默认值</p>
</li>
</ul>
<h3 id="POJO类型的绑定"><a href="#POJO类型的绑定" class="headerlink" title="POJO类型的绑定"></a>POJO类型的绑定</h3><p><strong>要求</strong>：Controller方法中的参数类型是POJO类；请求参数的<strong>key</strong>要和POJO类型的<strong>属性名称</strong>一致</p>
<p><strong>使用示例</strong></p>
<p>POJO类：</p>
<p><code>Account</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求的url：<code>http://localhost:8080/spring_mvc/testBindAccount?id=10&amp;name=Jerry&amp;money=2000</code></p>
<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="POJO类含有POJO成员对象"><a href="#POJO类含有POJO成员对象" class="headerlink" title="POJO类含有POJO成员对象"></a>POJO类含有POJO成员对象</h3><p><code>User</code>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Account account;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", account="</span> + account +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">getAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用的表单：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/testBindUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"account.name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户金额:&lt;input type=<span class="string">"number"</span> name=<span class="string">"account.money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h3 id="集合类型绑定"><a href="#集合类型绑定" class="headerlink" title="集合类型绑定"></a>集合类型绑定</h3><p>集合类型有两种方式处理：</p>
<p><strong>第一种</strong>：</p>
<p>&emsp;&emsp;要求集合类型的请求参数是POJO类中的一个属性。在表单 中请求参数的名称要和POJO中集合的属性名称相同</p>
<ul>
<li><p>对于List集合中的元素赋值，要使用下标，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list[<span class="number">0</span>].name=zhangsan</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于Map集合中的元素赋值，要使用键值对，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map[<span class="string">'one'</span>].name=zhangsan</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>第二种</strong></p>
<p>&emsp;&emsp;接收的请求参数是json格式的数据，需要借助一个注解实现</p>
<p><strong>示例</strong>：</p>
<p>修改<code>User</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accountList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Account&gt; accountMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", accountList="</span> + accountList +</span><br><span class="line">                <span class="string">", accountMap="</span> + accountMap +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccountList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountList</span><span class="params">(List&lt;Account&gt; accountList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountList = accountList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Account&gt; <span class="title">getAccountMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountMap</span><span class="params">(Map&lt;String, Account&gt; accountMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountMap = accountMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testBindUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testBindUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用的表单：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/testBindUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    用户密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">1</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[0].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">1</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[0].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">2</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[1].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">2</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountList[1].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">3</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">3</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">4</span>名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    账户<span class="number">4</span>金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].money"</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h3 id="自定义参数绑定"><a href="#自定义参数绑定" class="headerlink" title="自定义参数绑定"></a>自定义参数绑定</h3><p><strong>使用场景</strong></p>
<p>将一个从表单中获取的日期字符串转换为java.util.Date类型，如果不使用自定义的类型转换器，则会报错</p>
<p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testDate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>解决步骤</strong></p>
<p>问题出现的原因是，Spring MVC无法将这个日期字符串和Date类型的控制器方法参数进行绑定。所以需要提供一个转换器，将String类型的日期字符串转换为Date类型的日期对象</p>
<p>Spring提供了一个这样的接口：<code>Converter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>S代表Source，T代表Target，convert方法就是将S类型的数据转换为T类型的数据</p>
<ol>
<li><p>编写<code>StringToDateConverter</code>实现<code>Converter</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        Date result = <span class="keyword">null</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Spring MVC的配置文件中<code>spring-mvc.xml</code>中配置类型转换器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置类型转换器工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给工厂注入一个新的类型转换器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置自定义的类型转换器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zxw.converter.StringToDateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在annotation-driven标签中引用配置的类型转换服务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br></pre></td></tr></table></figure>





</li>
</ol>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="文件上传回顾"><a href="#文件上传回顾" class="headerlink" title="文件上传回顾"></a>文件上传回顾</h3><p><strong>前提</strong></p>
<ol>
<li><p>form表单的<code>enctype</code>属性的值必须为：<code>multipart/form-data</code>（默认值为：<code>application/x-www-form-urlencoded</code>）</p>
<p><code>enctype</code>是表单请求正文的类型</p>
</li>
<li><p><code>method</code>属性的取值必须是<code>post</code></p>
</li>
<li><p>提供一个文件选择域<code>&lt;input type=&quot;file&quot;/&gt;</code></p>
</li>
</ol>
<p><strong>借助第三方组件实现文件上传</strong></p>
<p>&emsp;&emsp;使用<code>commons-fileupload</code>组件实现文件上传，需要导入对应的maven依赖：<code>commons-fileupload</code>和<code>commons-io</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Spring-MVC传统方式的文件上传"><a href="#Spring-MVC传统方式的文件上传" class="headerlink" title="Spring MVC传统方式的文件上传"></a>Spring MVC传统方式的文件上传</h3><p>&emsp;&emsp;在Java Web中，我们使用appache fileupload组件来帮助我们完成文件的上传，而Spring MVC则对其进行了进一步的封装，使用上更为简单。Spring MVC中由<code>MultipartFile</code>接口来实现文件上传</p>
<p>==MultipartFile接口==</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>String getName()</code></td>
<td align="center">获取MultipartFile的名称</td>
</tr>
<tr>
<td align="center"><code>String getOriginalFilename()</code></td>
<td align="center">获取上传文件在客户端文件系统中的名称（初始上传文件的名称）</td>
</tr>
<tr>
<td align="center"><code>String getContentType()</code></td>
<td align="center">获取上传文件的内容类型</td>
</tr>
<tr>
<td align="center"><code>boolean isEmpty()</code></td>
<td align="center">判断上传的文件是否为空</td>
</tr>
<tr>
<td align="center"><code>long getSize()</code></td>
<td align="center">获取上传文件的大小（字节）</td>
</tr>
<tr>
<td align="center"><code>byte[] getBytes()</code></td>
<td align="center">获取上传文件的字节数组</td>
</tr>
<tr>
<td align="center"><code>InputStream getInputStream()</code></td>
<td align="center">获取上传文件的输入流对象</td>
</tr>
<tr>
<td align="center"><code>void transferTo(File dest)</code></td>
<td align="center">将文件上传到dest指定的位置</td>
</tr>
</tbody></table>
<p><strong>第一步：添加maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步：编写<code>upload.jsp</code></strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/uploadFile"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    名称:&lt;input type=<span class="string">"text"</span> name=<span class="string">"fileName"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>第三步：编写控制器代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadFile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(String fileName, MultipartFile uploadFile, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//定义文件名称</span></span><br><span class="line">    String destName = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//获取原始文件名</span></span><br><span class="line">    String originalName = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//获取文件的后缀名</span></span><br><span class="line">    String suffix = originalName.substring(originalName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加UUID防止文件名重复</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase();</span><br><span class="line">    <span class="comment">//得到要保存的文件名</span></span><br><span class="line">    <span class="keyword">if</span> (fileName == <span class="keyword">null</span> || fileName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果没有给出文件名，则使用原始的文件名</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + originalName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则使用表单中输入的文件名称</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + fileName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取要上传文件的路径</span></span><br><span class="line">    String basePath = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">    <span class="comment">//解决同一个文件夹中存放过多文件的问题</span></span><br><span class="line">    String path = basePath + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//判断路径是否存在，不存在则创建</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用MultipartFile接口中的方法，将文件上传到指定的位置</span></span><br><span class="line">    uploadFile.transferTo(<span class="keyword">new</span> File(path, destName));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步：配置文件解析器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置上传文件的最大大小为5MB--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>==注意：文件解析器的id是固定的，不能使用别的名称，否则无法实现请求参数的绑定（不光是文件，其他的参数也无法绑定）==</p>
<h3 id="Spring-MVC跨服务器方式的文件上传"><a href="#Spring-MVC跨服务器方式的文件上传" class="headerlink" title="Spring MVC跨服务器方式的文件上传"></a>Spring MVC跨服务器方式的文件上传</h3><h4 id="分服务器的目的"><a href="#分服务器的目的" class="headerlink" title="分服务器的目的"></a>分服务器的目的</h4><p>在实际开发中，会有很多功能不同的服务器。例如：</p>
<ul>
<li>应用服务器：负责部署应用</li>
<li>数据库服务器：运行数据库</li>
<li>缓存和消息服务器：负责处理高并发访问的缓存和消息</li>
<li>文件服务器：负责存储用户上传文件的服务器</li>
</ul>
<p>（<strong>此处说的不是服务器集群</strong>）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200728075609833.png" align="left"/>



<p><strong>步骤</strong>：</p>
<p>跨服务器上传文件，就是在应用服务器获得上传的文件然后将其上传至文件服务器，所以需要两个Tomcat服务器来模拟这个场景！</p>
<p><strong>步骤一：添加jersey的maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jersey-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jersey-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：编写控制器代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadFile2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadFile2</span><span class="params">(String fileName, MultipartFile uploadFile, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//定义文件名称</span></span><br><span class="line">    String destName = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//获取原始文件名</span></span><br><span class="line">    String originalName = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//获取文件的后缀名</span></span><br><span class="line">    String suffix = originalName.substring(originalName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//添加UUID防止文件名重复</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase();</span><br><span class="line">    <span class="comment">//得到要保存的文件名</span></span><br><span class="line">    <span class="keyword">if</span> (fileName == <span class="keyword">null</span> || fileName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果没有给出文件名，则使用原始的文件名</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + originalName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则使用表单中输入的文件名称</span></span><br><span class="line">        destName = uuid + <span class="string">"_"</span> + fileName + <span class="string">"."</span> + suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件服务器的对应路径</span></span><br><span class="line">    String path = <span class="string">"http://localhost:8081/upload_server/uploads/"</span>;</span><br><span class="line">    <span class="comment">//实现跨服务器上传</span></span><br><span class="line">    <span class="comment">//创建客户端对象</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">//和文件服务器进行连接</span></span><br><span class="line">    WebResource webResource = client.resource(path + destName);</span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    webResource.put(uploadFile.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>可能出现的问题</strong></p>
<ol>
<li><p>如果出现了405响应码，则说明使用的tomcat服务器默认禁止读写，此时需要修改tomcat的<code>web.xml</code>文件以支持写入操作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果出现了409响应码，说明没有在文件服务器创建<code>uploads</code>目录</p>
</li>
</ol>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常处理的思路"><a href="#异常处理的思路" class="headerlink" title="异常处理的思路"></a>异常处理的思路</h3><p>&emsp;&emsp;系统中异常包括两类：受查异常（CheckedException）和运行时异常（RuntimeException），前者通过捕获异常从而获得异常信息，后者主要通过规范</p>
<p>&emsp;&emsp;dao、service、controller中出现的异常都通过<code>throws</code>向上抛出，最后由Spring MVC前端控制器交由异常处理器进行异常处理，如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200728134540502.png" align="left"/>

<p>编写一个异常处理器并在Spring中注册，如果产生了该类型的异常，由于dao、service、controller层都会将异常抛出，最后交给前端处理器，前端控制器如果在自定义的异常处理器中找到了对应的异常类型就可以转发到响应的异常页面。</p>
<h3 id="Spring-MVC处理异常的三种方式"><a href="#Spring-MVC处理异常的三种方式" class="headerlink" title="Spring MVC处理异常的三种方式"></a>Spring MVC处理异常的三种方式</h3><ol>
<li>使用<code>@ExceptionHandler</code>注解</li>
<li>实现<code>HandlerExceptionResolver</code>接口</li>
<li>使用<code>@ControllerAdvice</code>注解</li>
</ol>
<h4 id="使用-ExceptionHandler注解"><a href="#使用-ExceptionHandler注解" class="headerlink" title="使用@ExceptionHandler注解"></a>使用<code>@ExceptionHandler</code>注解</h4><p><strong>说明</strong>：针对可能产生异常的Controller，使用<code>@ExceptionHandler</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/exception/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">doWithRuntimeException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"处理RuntimeException"</span>);</span><br><span class="line">    System.out.println(System.getProperty(<span class="string">"file.encoding"</span>));</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">    mv.getModel().put(<span class="string">"errMsg"</span>, <span class="string">"发生了运行时异常:"</span> + e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br></pre></td></tr></table></figure>

<p>缺点：只对当前的Controller有效，不能全局生效，每个Controller类中都要写一遍</p>
<h4 id="实现HandlerExceptionResolver接口"><a href="#实现HandlerExceptionResolver接口" class="headerlink" title="实现HandlerExceptionResolver接口"></a>实现<code>HandlerExceptionResolver</code>接口</h4><p><strong>自定义异常处理器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"myExceptionResolver"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在这个方法中可以处理各种异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//这里可以使用instanceof来判断ex的异常类型然后进行处理</span></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            RuntimeException re = (RuntimeException) ex;</span><br><span class="line">            mv.addObject(<span class="string">"errMsg"</span>, re.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mv.addObject(<span class="string">"errMsg"</span>, <span class="string">"系统还未提供对这种类型异常处理的支持"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置逻辑视图</span></span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用<code>@Component</code>注解将自定义的异常处理器交给了Spring IoC容器管理</p>
<p>这种方式适合全局处理异常，但是如果有使用<code>@ExceptionHandler</code>注解配置的异常处理，则使用<code>@ExceptionHandler</code>注解配置的方式</p>
<h4 id="使用-ControllerAdvice-ExceptionHandler注解"><a href="#使用-ControllerAdvice-ExceptionHandler注解" class="headerlink" title="使用@ControllerAdvice+@ExceptionHandler注解"></a>使用<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>注解</h4><p>下面介绍另外一种全局的异常处理方式，也是Spring MVC推荐的异常处理方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ArithmeticException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">arithmeticExceptionHandler</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"errMsg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error1"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(NullPointerException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">nullPointerExceptionHandler</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"errMsg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error2"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种异常处理方式相较于实现<code>HandlerExceptionResolver</code>接口的方式来说更加清晰，该类中一个方法对应一种异常类的处理方式，而不像<code>HandlerExceptionResolver</code>中将所有的异常都放在一个方法中进行处理。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>在控制器中使用<code>@ExceptionHandler</code>是Controller级别的异常处理，只对该Controller有效，优先级高于全局的异常处理</li>
<li>全局异常处理有两种方式：<ul>
<li>实现<code>HandlerExceptionResolver</code>接口（不推荐）</li>
<li>使用<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>（推荐）</li>
</ul>
</li>
</ul>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="拦截器的作用"><a href="#拦截器的作用" class="headerlink" title="拦截器的作用"></a>拦截器的作用</h3><p>&emsp;&emsp;Spring MVC中的拦截器（Interceptor）类似于Java Web中的过滤器（Filter），用于对Controller的预处理和后处理。可以通过自定义拦截器来实现一些特定的功能。</p>
<p><strong>拦截器链</strong></p>
<p>&emsp;&emsp;和过滤器中的过滤器链类似，拦截器中也存在拦截器链（Interceptor Chain）。拦截器链就是将拦截器按照一定顺序连接形成一条链。在访问被拦截方法或字段时，拦截器链就会按照其定义的顺序被调用。</p>
<p><strong>Spring MVC拦截器和之前学习的过滤器有什么不同？</strong></p>
<p>==使用的范围不同==</p>
<ul>
<li>过滤器是Servlet规范的一部分，任何的Java Web工程都可以使用</li>
<li>拦截器是Spring MVC框架中的内容，只有使用Spring MVC框架的工程才能够使用</li>
</ul>
<p>==拦截的范围不同==</p>
<ul>
<li>过滤器在url-pattern中配置了<code>/*</code>之后，会拦截所有的资源</li>
<li>拦截器只会拦截Controller中的方法，不会对jsp、html、css、image、js等进行拦截，拦截器也是AOP思想的具体应用</li>
</ul>
<h3 id="自定义拦截器的步骤"><a href="#自定义拦截器的步骤" class="headerlink" title="自定义拦截器的步骤"></a>自定义拦截器的步骤</h3><p><strong>控制器代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserController中的hello方法执行了!"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"UserController#hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>步骤一：编写一个类实现HandlerInterceptor接口</strong></p>
<p>==HandlerInterceptor接口介绍==</p>
<p><code>HandlerInterceptor</code>接口中有三个默认方法：</p>
<ul>
<li><code>preHandle</code>：在Controller方法处理请求之前被调用。预处理。返回true表示继续流程（下一个拦截器或者Controller），false表示流程中断</li>
<li><code>postHandle</code>：在Controller方法处理请求之后，生成视图之前执行。后处理（页面还未渲染之前调用），如果没有经过Controller则不会执行</li>
<li><code>afterCompletion</code>：在DispatcherServlet完全处理完请求后被调用（已经渲染了页面）。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"预处理"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后处理"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"渲染后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤二：配置拦截器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zxw.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="拦截器细节"><a href="#拦截器细节" class="headerlink" title="拦截器细节"></a>拦截器细节</h3><h4 id="拦截器放行"><a href="#拦截器放行" class="headerlink" title="拦截器放行"></a>拦截器放行</h4><p>&emsp;&emsp;拦截器的放行是指，如果有下一个拦截器则执行下一个拦截器，如果该拦截器处于拦截器链的末尾，则执行控制器中的方法。<code>preHandle</code>方法返回false表明被拦截，不会继续执行；返回true表示放行。</p>
<h4 id="拦截器中方法的具体说明"><a href="#拦截器中方法的具体说明" class="headerlink" title="拦截器中方法的具体说明"></a>拦截器中方法的具体说明</h4><ul>
<li><code>preHandle</code><ul>
<li><strong>调用顺序</strong>：按照拦截器定义的顺序调用</li>
<li><strong>何时调用</strong>：匹配了拦截器配置中的有效路径且前置拦截器放行就会执行</li>
</ul>
</li>
<li><code>postHandle</code><ul>
<li><strong>调用顺序</strong>：按照拦截器的定义<strong>逆序</strong>调用</li>
<li><strong>何时调用</strong>：拦截器链中前面的所有拦截器的<code>preHandle</code>方法返回true才会执行</li>
</ul>
</li>
<li><code>afterCompletion</code><ul>
<li><strong>调用顺序</strong>：按照拦截器的定义<strong>逆序</strong>调用</li>
<li><strong>何时调用</strong>：只要本拦截器的<code>preHandle</code>方法返回true就会调用</li>
</ul>
</li>
</ul>
<h4 id="拦截器的作用路径"><a href="#拦截器的作用路径" class="headerlink" title="拦截器的作用路径"></a>拦截器的作用路径</h4><p>&emsp;&emsp;拦截路径：当请求Controller方法的路径，例如：<code>/user/hello</code>满足拦截器中定义的拦截路径，则会被该拦截器拦截。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于指定拦截的url--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除指定的url--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zxw.interceptor.MyInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="拦截器简单案例：验证用户是否登录"><a href="#拦截器简单案例：验证用户是否登录" class="headerlink" title="拦截器简单案例：验证用户是否登录"></a>拦截器简单案例：验证用户是否登录</h3><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ol>
<li>有一个登录页面，需要写一个controller访问页面</li>
<li>登录页面有一个提交表单的动作。需要在controller中处理<ol>
<li>判断用户名密码是否正确</li>
<li>如果正确，向session中写入用于信息</li>
<li>返回登录成功</li>
</ol>
</li>
<li>拦截用户请求，判断用户是否已经登录<ol>
<li>如果用户已经登录，放行</li>
<li>如果用户未登录，跳转到登录页面</li>
</ol>
</li>
</ol>
<h4 id="控制器代码"><a href="#控制器代码" class="headerlink" title="控制器代码"></a>控制器代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, User user, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//验证用户名密码是否正确</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123456"</span>.equals(user.getPassword())) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="comment">//重定向到首页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则转发到登录页面并存入错误信息</span></span><br><span class="line">        request.setAttribute(<span class="string">"errorMsg"</span>, <span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="登录页面代码："><a href="#登录页面代码：" class="headerlink" title="登录页面代码："></a>登录页面代码：</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;$&#123;requestScope.errorMsg&#125;&lt;/span&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="拦截器代码"><a href="#拦截器代码" class="headerlink" title="拦截器代码"></a>拦截器代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//从session中获取user</span></span><br><span class="line">        User user = (User) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//存在用户信息则放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//转发到登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/login.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/WEB-INF/pages/index.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"index.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/login"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zxw.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>响应数据</tag>
        <tag>参数绑定</tag>
        <tag>文件上传</tag>
        <tag>异常处理</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（一）</title>
    <url>/2020/07/16/Spring-MVC%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring-MVC（一）"><a href="#Spring-MVC（一）" class="headerlink" title="Spring MVC（一）"></a>Spring MVC（一）</h1><h2 id="回顾MVC"><a href="#回顾MVC" class="headerlink" title="回顾MVC"></a>回顾MVC</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul>
<li><p><strong>表现层</strong>：也就是web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求web层，web层接收http请求，完成http响应</p>
<p>表现层包括：<strong>展示层</strong>和<strong>控制层</strong>，控制层负责接收处理请求，展示层负责结果的展示</p>
<p>表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理的结果响应给客户端。</p>
<p>表现层的设计一般都是用<strong>MVC模型</strong>（MVC模型是表现层模型）</p>
</li>
<li><p><strong>业务层</strong>：也就是service层，它负责业务逻辑的处理，和开发项目的需求息息相关。web层依赖于业务层，但是业务层不依赖web层</p>
<p>业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性</p>
</li>
<li><p><strong>持久层</strong>：也就是dao（Data Access Object）层。负责数据持久化，包括数据层即数据库和数据库访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层持将数据持久化到数据库中。通俗的说，持久层负责和数据库交互，对数据表进行增删改查。</p>
</li>
</ul>
<h3 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h3><ul>
<li>MVC是模型（Model）、视图（View）、控制器（Controller）的简称，是一种软件设计规范</li>
<li>MVC将业务逻辑、数据、显示分离来组织代码</li>
<li>MVC的主要作用是<strong>降低了视图与业务逻辑的双向耦合</strong></li>
<li>MVC不只是一种设计模式，它还是<strong>一种架构模式</strong></li>
</ul>
<p>&emsp;&emsp;<strong>Model（模型）</strong>：数据模型，提供要展示的数据，包含数据的行为，可以认为是域模型或JavaBean组件（包含数据与行为），不过现在一般都分离开来：Value Object（数据Dao）和服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p>&emsp;&emsp;<strong>View（视图）</strong>：负责模型的展示，就是用户能够看到的内容</p>
<p>&emsp;&emsp;<strong>Controller（控制器）</strong>：接收用户的请求，然后委托给模型进行处理，处理完之后将返回的模型数据返回给视图，然后由视图向用户展示模型数据。Controller在这个过程中起到了调度的作用。</p>
<p>&emsp;&emsp;最典型的MVC就是：<strong>JSP + Servlet + JavaBean</strong>的模式</p>
<h3 id="Model1时代"><a href="#Model1时代" class="headerlink" title="Model1时代"></a>Model1时代</h3><ul>
<li>在早期的web开发中，通常采用的都是Model1</li>
<li>Model1主要使用了两个技术：JSP + JavaBean</li>
</ul>
<p>下图虚线表示Web容器（例如Tomcat）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200720102938938.png" align="left"/>

<p>在Model1时代，JSP需要接收请求做出响应，调用JavaBean处理业务逻辑，还要展示数据，负担太大。</p>
<p><strong>优点</strong>：架构简单，适合小型项目的开发</p>
<p><strong>缺点</strong>：JSP的任务太重，需要同时完成View和Controller的功能，不利于项目的维护。</p>
<h3 id="Model2时代"><a href="#Model2时代" class="headerlink" title="Model2时代"></a>Model2时代</h3><p>Model2将一个项目分为三部分：视图（JSP）、控制（Servlet）、模型（JavaBean）</p>
<ul>
<li>JSP负责显示页面</li>
<li>Servlet作为前端控制器，负责接收客户端的请求，获取表单参数、调用业务逻辑、页面跳转（转发或者重定向）等</li>
<li>JavaBean负责处理业务逻辑、与数据库进行交互</li>
</ul>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200720105140611.png" align="left"/>

<h2 id="Spring-MVC基本概念"><a href="#Spring-MVC基本概念" class="headerlink" title="Spring MVC基本概念"></a>Spring MVC基本概念</h2><h3 id="Spring-MVC是什么"><a href="#Spring-MVC是什么" class="headerlink" title="Spring MVC是什么"></a>Spring MVC是什么</h3><p>&emsp;&emsp;Spring MVC是一种基于Java实现的<strong>MVC设计模型</strong>的请求驱动类型的<strong>轻量级Web框架</strong>，属于Spring FrameWork的后续产品，已经融合在Spring Web Flow里面。Spring框架提供了构建Web应用程序的全功能MVC模块。使用Spring可插入的MVC架构，从而在使用Spring时进行Web开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。</p>
<p>&emsp;&emsp;Spring MVC已经成为<strong>目前最主流的MVC框架</strong>之一，并且随着Spring 3.0的发布，<strong>全面超越了Struts2</strong>，成为了<strong>最优秀的MVC框架</strong>。</p>
<p>&emsp;&emsp;它通过一套注解，让一个简单的Java类称为处理请求的控制器，而无序实现任何接口。同时它还支持RESTful编程风格的请求。</p>
<p><strong>官方文档</strong>：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
<h3 id="Spring-MVC的特点"><a href="#Spring-MVC的特点" class="headerlink" title="Spring MVC的特点"></a>Spring MVC的特点</h3><ol>
<li>轻量级，简单易学</li>
<li>高效，基于请求和响应的MVC框架</li>
<li>是Spring Framework的一部分，与Spring框架无缝对接</li>
<li>约定大于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<h3 id="为什么要使用Spring-MVC"><a href="#为什么要使用Spring-MVC" class="headerlink" title="为什么要使用Spring MVC"></a>为什么要使用Spring MVC</h3><p>除了前面说到的优点，Spring MVC是目前<strong>最主流的MVC框架</strong>，也就是说很多公司都在用，这是主要的原因。</p>
<h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>&emsp;&emsp;Spring web框架围绕<strong>DispatcherServlet</strong>设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 1.5或者以上版本的用户可以使用基于注解的Controller</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/mvc-context-hierarchy.png" align="left"/>

<p>&emsp;&emsp;Spring MVC，和其他的web框架一样，围绕着前端控制器这种模式进行设计，核心Servlet：DispatcherServlet，提供了一个用于请求处理的共享算法，而实际工作中是通过一些可配置的委托组件执行的。这种模型非常灵活，并且支持多种工作流程。（Dispatcher Servlet相当于是一个调度器）</p>
<p>&emsp;&emsp;DispatcherServlet实际上还是继承了HttpServlet，如下图所示，所以DispatcherServlet也需要在<code>web.xml</code>中进行配置；和原生的Servlet API不同，配置了DispatcherServlet就不需要再去配置其他Servlet，这极大地简化了开发流程</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200718095252290.png" align="left"/>



<p>&emsp;&emsp;Spring MVC处理请求的工作流程如下图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200718101501328.png" align="left"/>

<h3 id="Spring-MVC执行原理"><a href="#Spring-MVC执行原理" class="headerlink" title="Spring MVC执行原理"></a>Spring MVC执行原理</h3><p>下图是Spring MVC的实际执行流程。实线部分是框架内部的流程，而虚线部分则需要开发人员实现</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200722223238009.png" align="left"/>

<p><strong>执行流程</strong></p>
<ol>
<li>DispatcherServlet是前端控制器，是Spring MVC的核心，用户发出请求，DispatcherServlet接收请求</li>
<li>HandlerMapping是处理器映射，负责根据请求的url找到对应的Handler，由DispatcherServlet调用</li>
<li>HandlerExecution是具体的Handler，负责根据url查找控制器</li>
<li>HandlerExecution将解析后的信息返回给DispatcherServlet</li>
<li>HandlerAdapter表示处理器适配器，按照特定的规则执行Handler</li>
<li>Handler让具体的Controller执行</li>
<li>Controller将具体的执行结果返回给HandlerAdapter，例如返回一个ModelAndView对象</li>
<li>HandlerAdapter将处理结果返回给DispatcherServlet</li>
<li>DispatcherServlet调用ViewResolver（视图解析器）解析逻辑视图，得到对应的物理视图</li>
<li>DispatcherServlet调用对应的物理视图，将数据渲染到物理视图中</li>
</ol>
<h3 id="Spring-MVC和Struts2的优劣分析"><a href="#Spring-MVC和Struts2的优劣分析" class="headerlink" title="Spring MVC和Struts2的优劣分析"></a>Spring MVC和Struts2的优劣分析</h3><p><strong>相同点</strong>：</p>
<ul>
<li>都是表现层框架，都是基于MVC模型编写的</li>
<li>它们的底层都离不开原始Servlet API</li>
<li>它们处理请求的机制都是一个核心控制器</li>
</ul>
<p><strong>不同点</strong></p>
<ul>
<li>Spring MVC的入口时Servlet，而Struts2是Filter</li>
<li>Spring MVC是基于方法设计的，而Struts2是基于类，Struts2每次执行都会创建一个动作类。所以Spring MVC会比Struts2稍快一些</li>
<li>Spring MVC的使用更加简洁，同时还支持JSR303（是一套JavaBean参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加到自己编写的JavaBean属性上，这样就可以在需要的时候完成校验了），处理ajax的请求更方便。</li>
<li>Struts2的OGNL表达式使得页面的开发效率相比Spring MVC更高一些，但是执行效率并没有比JSTL提升，尤其是Struts2的表单标签，远没有html的执行效率高</li>
</ul>
<h2 id="HelloSpringMVC"><a href="#HelloSpringMVC" class="headerlink" title="HelloSpringMVC"></a>HelloSpringMVC</h2><h3 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h3><ol>
<li><p>新建一个module，可以使用maven模板创建一个web项目</p>
</li>
<li><p>添加Spring MVC的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit4--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring webmvc--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring web--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring core--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>web.xml</code>中注册DispatcherServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Spring MVC的核心控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置初始参数，用于指定Spring MVC配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置servlet在应用加载时就创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        / 匹配所有的请求（不包括.jsp）</span></span><br><span class="line"><span class="comment">        /* 匹配所有的请求（包括.jsp）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建SpringMVC的配置文件（名称要和<code>web.xml</code>中配置的文件名相同）</p>
<p><code>SpringMVC.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加处理映射器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加处理器适配器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器Controller，有两种方式：</p>
<ul>
<li>实现Controller接口</li>
<li>使用<code>@Controller</code>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向ModelAndView中添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，跳转到/WEB-INF/pages/success.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将自定义的Controller类交给Spring IoC容器管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.zxw.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写<code>index.jsp</code>和<code>success.jsp</code></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/hello"&gt;Spring MVC入门案例&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务器，访问主页，点击超链接即可测试。如果在跳转到<code>success.jsp</code>后显示了保存的<code>msg</code>中的信息，则测试成功！</p>
</li>
</ol>
<h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><ol>
<li><p>创建一个module，添加maven依赖（和配置版的相同）</p>
</li>
<li><p>maven可能存在资源过滤的问题，可以在<code>pom.xml</code>中添加如下配置解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Spring MVC配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置在web容器启动时加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Spring MVC的配置文件：<code>spring-mvc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自动扫描的包，让指定的包下的注解生效，交给Spring IoC容器统一管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--防止Spring MVC处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启mvc注解驱动</span></span><br><span class="line"><span class="comment">        一般使用@RequestMapping注解来完成映射关系，在使用这个注解之前，需要使用</span></span><br><span class="line"><span class="comment">        annotation-driven注入DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">        的实例.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        前缀:将视图放在WEB-INF目录下，保证客户端无法直接访问！</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器类：<code>HelloController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxw.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/HelloController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加数据，可以在jsp页面中获取</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//返回视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Controller将当前类作为一个控制器实例注入到Spring IoC容器中</li>
<li>@RequestMapping用于映射请求路径，可以写在类或者方法上，示例中的访问路径是：<code>/HelloController/hello</code></li>
<li>hello方法有一个Model类型的参数，这个参数的作用是将数据传递到视图（View）中</li>
<li>hello方法返回的是一个逻辑视图，经过Spring MVC配置文件中配置的视图解析器解析之后就变成了：<code>/WEB-INF/pages/success.jsp</code></li>
</ul>
</li>
<li><p>创建主页<code>index.jsp</code>和对应的视图<code>success.jsp</code></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/HelloController/hello"&gt;Spring MVC HelloWorld 注解版&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问主页，点击对应的超链接，得到如下结果则说明测试成功！</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200723152904255.png" align="left"/>

</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><strong>Spring MVC的使用步骤</strong></p>
<ol>
<li>新建一个web项目</li>
<li>添加对应的maven依赖</li>
<li>编写<code>web.xml</code>，配置前端控制器<code>DispatcherServlet</code></li>
<li>编写Spring MVC的配置文件</li>
<li>编写控制器类Controller</li>
<li>编写对应的视图</li>
<li>测试</li>
</ol>
<p><strong>Spring MVC中必须配置的三大组件</strong></p>
<ol>
<li>处理器映射器</li>
<li>处理器适配器</li>
<li>视图解析器</li>
</ol>
<p>一般开发中会开启<strong>注解驱动</strong>，从而自动完成处理器映射器和处理器适配器的注入；我们只需要手动配置视图解析器即可！</p>
<h2 id="Controller和RESTful风格"><a href="#Controller和RESTful风格" class="headerlink" title="Controller和RESTful风格"></a>Controller和RESTful风格</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><h4 id="什么是Controller"><a href="#什么是Controller" class="headerlink" title="什么是Controller"></a>什么是Controller</h4><ul>
<li>控制器负责提供访问应用程序的行为，通常可以通过实现Controller接口或者使用@Controller注解两种方式实现</li>
<li>控制器负责解析用户的请求并将其转换为一个模型</li>
<li>在Spring MVC中一个控制器可以包含多个方法，控制器的配置方式也有很多种（一般使用注解方式）</li>
</ul>
<h4 id="Controller的实现方式一：实现Controller接口"><a href="#Controller的实现方式一：实现Controller接口" class="headerlink" title="Controller的实现方式一：实现Controller接口"></a>Controller的实现方式一：实现Controller接口</h4><p><code>Controller</code>是<code>org.springframework.web.servlet.mvc</code>包下的一个接口，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求并返回一个视图和模型对象</span></span><br><span class="line">    <span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向ModelAndView中添加数据</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，跳转到/WEB-INF/pages/success.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写完毕之后，需要在Spring配置文件中注册请求的bean，name属性对应请求的路径，class属性对应处理器类的全类名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.zxw.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>缺点：</strong></p>
<ul>
<li>实现Controller接口的方式实现控制器是比较老的方式</li>
<li>一个控制器中只能有一个方法，还是很不方便</li>
</ul>
<h4 id="Controller的实现方式二：使用-Controller注解"><a href="#Controller的实现方式二：使用-Controller注解" class="headerlink" title="Controller的实现方式二：使用@Controller注解"></a>Controller的实现方式二：使用@Controller注解</h4><ul>
<li><p>使用@Controller注解修饰的类会被Spring IoC容器作为一个控制器实例注入（和@Service、@Repository、@Component的作用相同)</p>
</li>
<li><p>需要保证@Controller修饰的类可以被Spring扫描到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/HelloController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加数据，可以在jsp页面中获取</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Hello, Spring MVC!"</span>);</span><br><span class="line">        <span class="comment">//返回视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>优点</strong>：使用@Controller注解实现控制器的方式，可以在一个控制器中编写多个方法处理不同的请求，简化了开发。</p>
<h4 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h4><p>@RequestMapping用于将url映射到特定控制器的特定方法，可以用在<strong>类</strong>或<strong>方法</strong>上。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"url1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"url2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则这个控制器中的test方法对应的访问路径为：<code>http://localhost:8080/项目名/url1/url2</code></p>
<h3 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h3><p>传统的URL风格：<code>localhost:8080/helloworld/abc?username=aaa&amp;password=bbb</code></p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>RESTful风格就是一个资源定位及资源操作的风格。它不是标准也不是协议，只是一种风格。</p>
<p><strong>优点</strong>：</p>
<p>基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制</p>
<h4 id="RESTful可以做什么？"><a href="#RESTful可以做什么？" class="headerlink" title="RESTful可以做什么？"></a>RESTful可以做什么？</h4><p><strong>资源</strong>：互联网上能够访问到的所有事务都可以被抽象为资源</p>
<p><strong>资源操作</strong>：</p>
<ul>
<li><p>POST：添加操作</p>
<ul>
<li>传统方式示例：<code>http://localhost:8080/item/addItem</code></li>
<li>RESTful：<code>http://localhost:8080/item</code>，POST请求</li>
</ul>
</li>
<li><p>DELETE：删除操作</p>
<ul>
<li>传统方式：<code>http://localhost:8080/item/deleteItem?id=1</code></li>
<li>RESTful：<code>http://localhost:8080/item/1</code>，DELETE请求</li>
</ul>
</li>
<li><p>PUT：更新操作</p>
<ul>
<li>传统方式：<code>http://localhost:8080/item/updateItem</code></li>
<li>RESTful：<code>http://localhost:8080/item</code>，PUT请求</li>
</ul>
</li>
<li><p>GET：查询操作</p>
<ul>
<li>传统方式示例：<code>http://localhost:8080/item/queryItem?id=1</code></li>
<li>RESTful：<code>http://localhost:8080/item/1</code>，GET请求</li>
</ul>
</li>
</ul>
<p><strong>RESTful示例</strong></p>
<p><strong>最简单示例</strong></p>
<p>控制器：</p>
<p>使用@PathVariable注解来匹配url中的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add/&#123;a&#125;/&#123;b&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@PathVariable <span class="keyword">int</span> a, @PathVariable String b, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果为"</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时访问<code>http://localhost:8080/工程名/add/1/2</code>就可以在<code>success.jsp</code>中得到结果为3</p>
<p>前面说过，RESTful风格支持多种请求方法，这里以DELETE为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path=<span class="string">"/add/&#123;a&#125;/&#123;b&#125;"</span>, method= RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@PathVariable <span class="keyword">int</span> a, @PathVariable String b, Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果为"</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样只有发送一个DELETE请求才能够调用这个方法进行处理</p>
<p><strong>注意</strong>：所有在浏览器地址栏的请求默认都是GET请求！</p>
<p>还可以使用下面几种组合注解来替代上面这种方式：</p>
<ul>
<li>@GetMapping</li>
<li>@PostMapping</li>
<li>@DeleteMapping</li>
<li>@PutMapping</li>
<li>@PatchMapping</li>
</ul>
<p>以@DeleteMapping为例，上面使用@RequestMapping的方式相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/add/&#123;a&#125;/&#123;d&#125;"</span>)</span><br></pre></td></tr></table></figure>



<h3 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h3><p>小黄鸭调试法，就是在桌子上放一个小黄鸭（橡皮鸭），然后对着这个小黄鸭解释代码的含义，在这个过程中就很容易找到程序的问题。</p>
<p>当然，并不一定非要是小黄鸭，只要是你可以向它解释代码的含义即可</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>Spring MVC入门</tag>
        <tag>Controller</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC（三）</title>
    <url>/2020/07/29/Spring-MVC%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring-MVC（三）"><a href="#Spring-MVC（三）" class="headerlink" title="Spring MVC（三）"></a>Spring MVC（三）</h1><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><p><strong>整合说明</strong>：</p>
<p>&emsp;&emsp;Spring MVC + Spring + MyBatis（SSM）整合可以使用多种方式，这里选择使用XML+注解的方式进行整合</p>
<p><strong>整合的思路</strong>：</p>
<ol>
<li>搭建整合环境</li>
<li>搭建Spring</li>
<li>Spring整合Spring MVC</li>
<li>搭建MyBatis环境</li>
<li>Spring整合MyBatis</li>
</ol>
<h3 id="搭建整合环境"><a href="#搭建整合环境" class="headerlink" title="搭建整合环境"></a>搭建整合环境</h3><ol>
<li><p>创建数据库和表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> ssm;</span><br><span class="line"><span class="keyword">USE</span> ssm;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>), </span><br><span class="line">	money <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用maven创建web工程，添加maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--版本控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aspectj.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log start--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--long end--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>创建实体类</p>
<p><code>Account.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Integer id, String name, Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Dao层接口</p>
<p><code>AccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写service层接口及其实现类</p>
<p><code>AccountService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccountServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="Spring框架代码的编写"><a href="#Spring框架代码的编写" class="headerlink" title="Spring框架代码的编写"></a>Spring框架代码的编写</h3><p><strong>步骤一：创建spring的配置文件<code>spring-config.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除Controller注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：编写测试类进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ApplicationContext对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring-config.xml"</span>);</span><br><span class="line">        <span class="comment">//获取AccountService对象</span></span><br><span class="line">        AccountService accountService = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(accountService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring整合Spring-MVC框架"><a href="#Spring整合Spring-MVC框架" class="headerlink" title="Spring整合Spring MVC框架"></a>Spring整合Spring MVC框架</h3><h4 id="搭建和测试Spring-MVC开发环境"><a href="#搭建和测试Spring-MVC开发环境" class="headerlink" title="搭建和测试Spring MVC开发环境"></a>搭建和测试Spring MVC开发环境</h4><p><strong>步骤一：在<code>web.xml</code>中配置前端控制器和编码过滤器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤二：创建Spring MVC的配置文件<code>spring-mvc.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包含Controller注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启Spring MVC注解支持，自动注入HandlerMapping和HandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤三：编写jsp页面和Controller测试SpringMVC是否搭建成功</strong></p>
<p><code>index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/account/findAll"&gt;查询所有&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>控制器<code>AccountController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果页面<code>list.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;查询结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Spring整合Spring-MVC框架-1"><a href="#Spring整合Spring-MVC框架-1" class="headerlink" title="Spring整合Spring MVC框架"></a>Spring整合Spring MVC框架</h4><p><strong>目的</strong>：在Controller中能够成功调用service对象中的方法</p>
<p><strong>步骤一：修改<code>web.xml</code>，配置ContextLoaderListener监听器在应用启动时加载Spring的配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置加载类路径的配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：修改Controller中的代码，在Controller中注入Service对象并调用其方法进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"findAll"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Controller#findAll"</span>);</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring整合MyBatis框架"><a href="#Spring整合MyBatis框架" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h3><h4 id="搭建和测试MyBatis环境"><a href="#搭建和测试MyBatis环境" class="headerlink" title="搭建和测试MyBatis环境"></a>搭建和测试MyBatis环境</h4><p><strong>步骤一：创建MyBatis的配置文件<code>SqlMapConfig.xml</code>，编写核心配置文件</strong></p>
<p><code>log4j.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.ConsoleAppender"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"Encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"org.apache.log4j.PatternLayout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p><code>SqlMapConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入db.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.zxw.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤二：编写映射配置文件<code>AccountDao.xml</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.dao.AccountDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--findAll--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"Account"</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM account;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--saveAccount--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveAccount"</span> <span class="attr">parameterType</span>=<span class="string">"Account"</span>&gt;</span></span><br><span class="line">        INSERT INTO account(name, money)</span><br><span class="line">        VALUES (#&#123;name&#125;, #&#123;money&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>步骤三：编写测试方法进行测试</strong></p>
<p><code>MyBatisTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取配置文件的输入流对象</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//获取SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//获取AccountDao的代理类对象</span></span><br><span class="line">        AccountDao accountDao = sqlSession.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用AccountDao中的方法</span></span><br><span class="line">        accountDao.saveAccount(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"zhangsan"</span>, <span class="number">1000.0</span>));</span><br><span class="line">        accountDao.saveAccount(<span class="keyword">new</span> Account(<span class="keyword">null</span>, <span class="string">"lisi"</span>, <span class="number">2000.0</span>));</span><br><span class="line">        accountDao.findAll().forEach(System.out::println);</span><br><span class="line">        <span class="comment">//提交试图</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Spring整合MyBatis框架-1"><a href="#Spring整合MyBatis框架-1" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h4><p><strong>步骤一：将<code>SqlMapConfig.xml</code>中配置的内容配置到Spring的配置文件当中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入db.properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置druid数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.zxw.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.zxw.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：修改Dao接口，添加@Repository注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤三：修改Serice接口实现类，注入Dao对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Service#findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤四：添加Spring声明式事务</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入点表达式配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.zxw.service.impl.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--建立事务通知和切入点表达式之间的联系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤五：修改Controller和<code>list.jsp</code>进行测试</strong></p>
<p><code>AccountController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"accountService"</span>)</span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/account/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Controller#findAll"</span>);</span><br><span class="line">        List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"accounts"</span>, accounts);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>list.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;查询结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;money&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;accounts&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;account.id&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;account.name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;account.money&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是JSON</h3><p>&emsp;&emsp;JSON（JavaScript Object Notation，JavaScript对象标记），是一种<strong>轻量级</strong>的数据交换格式（非常常用！）</p>
<p><strong>特点</strong></p>
<ul>
<li>完全独立于编程语言的<strong>文本格式</strong>（也就是字符串）来存储和表示数据</li>
<li>简洁且层次清晰，所以是轻量级的</li>
<li>易于人的阅读和编写，也易于机器的解析和生成，大大提高了数据在网络中传输的效率</li>
</ul>
<p><strong>语法格式</strong>：</p>
<ul>
<li>对象使用键值对表示，键值对之间使用逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
<li>字符串和布尔类型的属性值可以不用引号</li>
</ul>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>, <span class="string">"age"</span>,<span class="string">"20"</span>, <span class="string">"friends"</span>,[<span class="string">"李四"</span>,<span class="string">"李白"</span>]&#125;</span><br></pre></td></tr></table></figure>



<p><strong>JSON和JavaScript的关系</strong></p>
<p>&emsp;&emsp;JSON可以理解为表示JavaScript对象的<strong>字符串</strong>，使用文本的形式来表示JS对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;;<span class="comment">//这是一个JS对象</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"name":"张三", "age":"20"&#125;'</span>;<span class="comment">//这是一个JSON字符串</span></span><br></pre></td></tr></table></figure>



<p><strong>JSON和JavaScript对象的相互转换</strong></p>
<ul>
<li><p>JSON转换为JavaScript对象，使用<code>JSON.parse()</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"张三", "age":"20"&#125;'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript对象转换为JSON字符串，使用<code>JSON.stringify()</code>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>:<span class="string">"张三"</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h3><p>&emsp;&emsp;Jackson是一个较为好用的json解析工具，还有别的解析工具，例如阿里巴巴的fastjson等</p>
<p>要使用Jackson首先需要导入对应的maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写<code>web.xml</code>和SpringMVC的配置文件<code>spring-mvc-servlet.xml</code></p>
<p><code>web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>spring-mvc-servlet.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zxw.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持，注册HandlerMapping和HandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写一个实体类<code>User</code></p>
<p>这里使用了lombok来帮助构建JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写控制器<code>UserController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json1"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//将这个user对象解析为json字符串</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//使用了@ResponseBody注解，会将str转换为json格式返回</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/json/json1，结果如下图所示：" target="_blank" rel="noopener">http://localhost:8080/json/json1，结果如下图所示：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730161444194.png" align="left"/>

<p>出现了乱码，可以使用@RequestMapping的produces属性来解决：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/json1"</span>, produces = <span class="string">"application/json;charset=utf-8"</span>)</span><br></pre></td></tr></table></figure>

<p>再次访问的结果如下图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730161644541.png" align="left"/>



<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><h4 id="乱码问题的统一处理"><a href="#乱码问题的统一处理" class="headerlink" title="乱码问题的统一处理"></a>乱码问题的统一处理</h4><p>&emsp;&emsp;上面的那种处理乱码的方式在每个@RequestMapping中都要添加，可以通过Spring配置来统一指定。可以在SpringMVC的配置文件上添加一段<code>StringHttpMessageConverter</code>转换配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="控制器中统一返回JSON字符串"><a href="#控制器中统一返回JSON字符串" class="headerlink" title="控制器中统一返回JSON字符串"></a>控制器中统一返回JSON字符串</h4><p>在类上直接使用<strong>@RestController</strong>，这样Controller中里面的所有的方法都会返回JSON字符串，而不需要在每一个方法上都添加@ResponseBody注解。这在前后端分离的开发中十分便捷</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//将这个user对象解析为json字符串</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//使用了@ResponseBody注解，会将str转换为json格式返回</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试集合输出"><a href="#测试集合输出" class="headerlink" title="测试集合输出"></a>测试集合输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个元素为User的List</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="number">22</span>, <span class="string">"女"</span>));</span><br><span class="line">    <span class="comment">//将集合对象转换为json字符串</span></span><br><span class="line">    String str = mapper.writeValueAsString(users);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/json/json2" target="_blank" rel="noopener">http://localhost:8080/json/json2</a></p>
<p>得到的结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730170259449.png" align="left"/>



<h3 id="输出时间对象"><a href="#输出时间对象" class="headerlink" title="输出时间对象"></a>输出时间对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个Date类型的对象</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">//将Date对象转换为json字符串并返回</span></span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080/json/json3，结果如下：" target="_blank" rel="noopener">http://localhost:8080/json/json3，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730195620378.png" align="left"/>

<p>很明显，这是返回了这个日期对象举例1970年1月1日的毫秒数，那么如何返回一个指定格式的日期字符串？</p>
<p>Jackson默认会将时间转换为timestamp（时间戳）的形式</p>
<p><strong>解决方案</strong>：自定义时间格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">//创建一个Date类型的对象</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">//自定义格式</span></span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="comment">//设置指定的格式</span></span><br><span class="line">    mapper.setDateFormat(sdf);</span><br><span class="line">    <span class="comment">//将Date对象转换为json字符串并返回</span></span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时返回的结果为：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200730200151544.png" align="left"/>



<h3 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h3><p>可以将返回json字符串的过程抽取为一个工具类中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个对象转换为JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 要转换的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(obj, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个对象转换为JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 要转换的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateFormat Date类型转换的格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object obj, String dateFormat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建jackson的对象映射器</span></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="comment">//判断obj是否为Date类型的对象</span></span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Date) &#123;</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">                mapper.setDateFormat(sdf);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用了工具类的代码变得十分简洁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/json4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="keyword">return</span> JsonUtils.getJson(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h3><p>&emsp;&emsp;fastjson是阿里巴巴开发的专门用于将Java对象转换为JSON字符串的库，当然它也可以将JSON字符串转换为Java对象。</p>
<p>要使用fastjson首先需要添加maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>fastjson三个主要的类</strong><br>==JSONObject==</p>
<ul>
<li><p>JSONObject代表了json对象</p>
</li>
<li><p>JSONObject实现了Map接口</p>
</li>
<li><p>JSONObject代表json对象，可以通过<code>getXXX()</code>方法获取json对象中的数据，也可以用<code>size()</code>、<code>isEmpty()</code>等方法获取键值对的个数。本质上和操作Map相同</p>
</li>
</ul>
<p>==JSONArray==</p>
<ul>
<li>JSONArray代表json对象数组</li>
<li>JSONArray内部使用List实现</li>
</ul>
<p>==JSON==</p>
<ul>
<li>JSON用于JSONObject、JSONArray的转换</li>
<li>主要实现了json对象、json对象数组、JavaBean对象、json字符串之间的相互转换</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastjsonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建4个User对象</span></span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"李四"</span>, <span class="number">21</span>, <span class="string">"女"</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"王二"</span>, <span class="number">22</span>, <span class="string">"男"</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"黎明"</span>, <span class="number">23</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//将这四个User对象放入一个List容器中</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(u1);</span><br><span class="line">        users.add(u2);</span><br><span class="line">        users.add(u3);</span><br><span class="line">        users.add(u4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java对象转换为JSON字符串</span></span><br><span class="line">        System.out.println(<span class="string">"Java对象==&gt;JSON字符串"</span>);</span><br><span class="line">        String str1 = JSON.toJSONString(users);</span><br><span class="line">        System.out.println(<span class="string">"users:"</span> + str1);</span><br><span class="line">        String str2 = JSON.toJSONString(u1);</span><br><span class="line">        System.out.println(<span class="string">"u1:"</span> + str2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON字符串转换为Java对象</span></span><br><span class="line">        System.out.println(<span class="string">"JSON字符串==&gt;Java对象"</span>);</span><br><span class="line">        User jsonToUser = JSON.parseObject(str2, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java对象转换为JSON对象</span></span><br><span class="line">        System.out.println(<span class="string">"Java对象==&gt;JSON对象"</span>);</span><br><span class="line">        JSONObject jsonObj = (JSONObject) JSON.toJSON(u1);</span><br><span class="line">        System.out.println(jsonObj.get(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON对象转换为Java对象</span></span><br><span class="line">        User jsonObjectToUser = JSON.toJavaObject(jsonObj, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(jsonObjectToUser);</span><br><span class="line">        System.out.println(jsonObjectToUser.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Java对象转换为JSON对象数组</span></span><br><span class="line">        JSONArray usersJSONArray = (JSONArray) JSON.toJSON(users);</span><br><span class="line">        JSONObject first = (JSONObject) usersJSONArray.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(first.get(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JSON对象数组转换为Java对象</span></span><br><span class="line">        List&lt;User&gt; jsonArrayToUsers = JSON.parseArray(usersJSONArray.toJSONString(), User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(jsonArrayToUsers.get(<span class="number">0</span>).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>类似于这种第三方的工具类只需要记住是用来干什么的，然后在需要的时候查找并使用即可！</p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h3><ul>
<li><strong>Ajax</strong>就是<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML（异步的JavaScript和XML）</li>
<li>Ajax能够在不重新加载网页的条件下局部更新网页中的内容</li>
<li>Ajax是一种为了更好更快以及交互性更强的Web应用程序的技术</li>
</ul>
<p>&emsp;&emsp;最常见的Ajax示例就是百度的搜索框：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200731174837446.png" align="left"/>



<h3 id="原生的Ajax请求"><a href="#原生的Ajax请求" class="headerlink" title="原生的Ajax请求"></a>原生的Ajax请求</h3><p><strong>步骤</strong></p>
<ol>
<li><p>创建<strong>XMLHttpRequest</strong>对象</p>
</li>
<li><p>调用<strong>open</strong>方法</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200510165700201.png" align="left"/>
</li>
<li><p>在发送请求之前绑定<strong>onreadstatechange</strong>事件，监听处理请求完成之后的操作</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200510165752614.png" align="left"/>
</li>
<li><p>调用<strong>send</strong>方法发送请求</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200510170235343.png" align="left"/>



</li>
</ol>
<p><strong>使用示例</strong></p>
<p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testJSAjax"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testJSAjax</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"Tom"</span>, <span class="number">26</span>, <span class="string">"male"</span>);</span><br><span class="line">        <span class="keyword">return</span> mapper.writeValueAsString(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>test.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh_CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;iframe测试页面无刷新&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function">function <span class="title">ajaxRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//1.创建XMLHttpRequest对象</span></span><br><span class="line">            let xmlHttpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//2.调用open方法设置请求参数</span></span><br><span class="line">            xmlHttpRequest.open(<span class="string">"POST"</span>, <span class="string">"$&#123;pageContext.request.contextPath&#125;/testJSAjax"</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//4.在send方法之前绑定onreadystatechange事件</span></span><br><span class="line">            xmlHttpRequest.onreadystatechange = function() &#123;</span><br><span class="line">                <span class="keyword">if</span> (xmlHttpRequest.readyState == <span class="number">4</span> &amp;&amp; xmlHttpRequest.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    let user = JSON.parse(xmlHttpRequest.responseText);</span><br><span class="line">                    alert(user.id);</span><br><span class="line">                    alert(user.name);</span><br><span class="line">                    alert(user.age);</span><br><span class="line">                    alert(user.gender);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.调用send方法发送请求</span></span><br><span class="line">            xmlHttpRequest.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"testJSAjax"</span> onclick=<span class="string">"ajaxRequest()"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><p>jQuery中的ajax本质上就是封装了XMLHttpRequest，使得调用起来更加方便</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(参数)</span><br></pre></td></tr></table></figure>

<p>部分参数如下：</p>
<ul>
<li><code>url</code>：请求地址</li>
<li><code>type</code>：请求方式，GET、POST（1.9.0之后使用<code>method</code>）</li>
<li><code>headers</code>：请求头</li>
<li><code>data</code>：要发送的数据</li>
<li><code>contentType</code>：即将发送信息至服务器的内容编码类型，默认值为：<code>application/x-www-form-urlencoded; charset=UTF-8</code></li>
<li><code>async</code>：是否异步</li>
<li><code>timeout</code>：设置请求超时时间（毫秒）</li>
<li><code>beforeSend</code>：发送请求前执行的回调函数（全局）</li>
<li><code>complete</code>：完成之后执行的回调函数（全局）</li>
<li><code>success</code>：成功之后执行的回调函数（全局）</li>
<li><code>error</code>：失败之后执行的回调函数（全局）</li>
<li><code>accepts</code>：通过请求头发送给服务器，告诉服务器当前客户端可以接收的数据类型</li>
<li><code>dataType</code>：将服务器端返回的数据转换成指定类型<ul>
<li><code>&quot;xml&quot;</code>: 返回 XML 文档，可用 jQuery 处理。</li>
<li><code>&quot;html&quot;</code>: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。</li>
<li><code>&quot;script&quot;</code>: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 “cache” 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）</li>
<li><code>&quot;json&quot;</code>: 返回 JSON 数据 。</li>
<li><code>&quot;jsonp&quot;</code>: JSONP 格式。使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</li>
<li><code>&quot;text&quot;</code>: 返回纯文本字符串</li>
</ul>
</li>
</ul>
<p><strong>参考地址</strong>：<a href="https://www.w3school.com.cn/jquery/ajax_ajax.asp" target="_blank" rel="noopener">jQuery ajax方法</a></p>
<p><strong>使用示例</strong>：</p>
<p>需求：使用ajax从服务器查询所有用户信息并返回</p>
<p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUsers"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"张三"</span>, <span class="number">20</span>, <span class="string">"男"</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"李四"</span>, <span class="number">21</span>, <span class="string">"女"</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"李宁"</span>, <span class="number">22</span>, <span class="string">"男"</span>));</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>test.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh_CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;iframe测试页面无刷新&lt;/title&gt;</span><br><span class="line">    &lt;script src="$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.5.1.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function() &#123;</span><br><span class="line">            $(<span class="string">'#loadUsers'</span>).click(</span><br><span class="line">                <span class="function">function <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    $.post(&#123;</span><br><span class="line">                        url: <span class="string">"$&#123;pageContext.request.contextPath&#125;/getUsers"</span>,</span><br><span class="line">                        data: &#123;username: <span class="string">"张三"</span>&#125;,</span><br><span class="line">                        success: function(users) &#123;</span><br><span class="line">                            let str = <span class="string">''</span>;</span><br><span class="line">                            str += <span class="string">'&lt;tr&gt;\n'</span> +</span><br><span class="line">                                <span class="string">'    &lt;th&gt;id&lt;/th&gt;\n'</span> +</span><br><span class="line">                                <span class="string">'    &lt;th&gt;姓名&lt;/th&gt;\n'</span> +</span><br><span class="line">                                <span class="string">'    &lt;th&gt;年龄&lt;/th&gt;\n'</span> +</span><br><span class="line">                                <span class="string">'    &lt;th&gt;性别&lt;/th&gt;\n'</span> +</span><br><span class="line">                                <span class="string">'&lt;/tr&gt;'</span>;</span><br><span class="line">                            <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line">                                str += <span class="string">'&lt;tr&gt;'</span> +</span><br><span class="line">                                        <span class="string">'&lt;td&gt;'</span> + users[i].id + <span class="string">'&lt;/td&gt;'</span> +</span><br><span class="line">                                        <span class="string">'&lt;td&gt;'</span> + users[i].name + <span class="string">'&lt;/td&gt;'</span> +</span><br><span class="line">                                        <span class="string">'&lt;td&gt;'</span> + users[i].age + <span class="string">'&lt;/td&gt;'</span> +</span><br><span class="line">                                        <span class="string">'&lt;td&gt;'</span> + users[i].gender + <span class="string">'&lt;/td&gt;'</span> +</span><br><span class="line">                                    <span class="string">'&lt;/tr&gt;'</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            $(<span class="string">'#table'</span>).html(str);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        dataType: <span class="string">"json"</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input id=<span class="string">"loadUsers"</span> type=<span class="string">"button"</span> value=<span class="string">"加载用户数据"</span>/&gt;</span><br><span class="line">&lt;table id=<span class="string">"table"</span> border=<span class="string">"1"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>





<h3 id="注册提示效果"><a href="#注册提示效果" class="headerlink" title="注册提示效果"></a>注册提示效果</h3><p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/verifyUsername"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">verifyUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    String msg = <span class="string">""</span>;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="keyword">if</span> (username == <span class="keyword">null</span> || <span class="string">""</span>.equals(username)) &#123;</span><br><span class="line">        msg = <span class="string">"用户名不能为空"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">        msg = <span class="string">"用户名已存在"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (username.length() &lt; <span class="number">6</span> || username.length() &gt; <span class="number">12</span>) &#123;</span><br><span class="line">        msg = <span class="string">"用户名长度必须在6~12个字符"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        msg = <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>login.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">    &lt;script src="$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.5.1.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function() &#123;</span><br><span class="line">            <span class="comment">//失去焦点验证用户名</span></span><br><span class="line">            $(<span class="string">'#username'</span>).blur(function() &#123;</span><br><span class="line">                $.get(&#123;</span><br><span class="line">                    url: <span class="string">"$&#123;pageContext.request.contextPath&#125;/verifyUsername"</span>,</span><br><span class="line">                    data: &#123;username: $(<span class="string">'#username'</span>).val()&#125;,</span><br><span class="line">                    success: function(data) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (data == <span class="string">'OK'</span>) &#123;</span><br><span class="line">                            $(<span class="string">'#usernameInfo'</span>).css(<span class="string">'color'</span>,<span class="string">'green'</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            $(<span class="string">'#usernameInfo'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        $(<span class="string">'#usernameInfo'</span>).html(data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;table border=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;用户名:&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"username"</span> type=<span class="string">"text"</span> name=<span class="string">"username"</span> placeholder=<span class="string">"请输入用户名"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span id="usernameInfo"&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;密码:&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"password"</span> type=<span class="string">"password"</span> name=<span class="string">"password"</span> placeholder=<span class="string">"请输入密码"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span id="passwordInfo"&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200801085903064.png" align="left"/>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200801085945002.png" align="left"/>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200801090022078.png" align="left"/>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200801090056975.png" align="left"/>]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>SSM整合</tag>
        <tag>JSON</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解驱动开发（三）</title>
    <url>/2020/08/17/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring注解驱动开发（三）"><a href="#Spring注解驱动开发（三）" class="headerlink" title="Spring注解驱动开发（三）"></a>Spring注解驱动开发（三）</h1><h2 id="AOP功能测试"><a href="#AOP功能测试" class="headerlink" title="AOP功能测试"></a>AOP功能测试</h2><p><strong>1、要使用AOP功能，需要导入AOP相关的依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、定义一个业务逻辑类MathCalculator，在业务逻辑运行的时候将日志进行打印（方法前、方法后、方法发生异常，最终）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、定义一个日志切面类（LogAspect）：切面类中的方法会在运行到MathCalculator类的div方法时调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法运行...参数列表为：&#123;&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法正常返回...运行结果是：&#123;&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法异常...异常信息：&#123;&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>&emsp;&emsp;通知方法：</p>
<ul>
<li>前置通知：会在目标方法调用之前执行</li>
<li>后置通知：会在目标方法正常调用之后执行</li>
<li>异常通知：会在目标方法发生异常时调用</li>
<li>最终通知：无论是否发生异常都会调用</li>
<li>环绕通知：功能强大，前面四种通知都可以通过环绕通知实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    前置通知;</span><br><span class="line">    目标方法;</span><br><span class="line">    后置通知;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    异常通知;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    最终通知;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、给切面类的目标方法标注何时何地运行（通知注解）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public int com.zxw.aop.MathCalculator.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果要引入其他切面类的切入点表达式，则要使用全类名访问</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法运行...参数列表为：&#123;&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法正常返回...运行结果是：&#123;&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"除法异常...异常信息：&#123;&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5、将切面类和业务逻辑类都加入到容器中</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfAOP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogAspect <span class="title">logAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogAspect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MathCalculator <span class="title">mathCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MathCalculator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6、使用@Aspect注解将切面类标记</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7、使用@EnableAspectJAutoProxy注解开启aop支持</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfAOP</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>8、编写测试类从容器中获取MathCalculator对象调用其div方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfAOP<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    MathCalculator calculator = ac.getBean(MathCalculator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    calculator.div(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><font color="red">如果想要在通知方法中获取目标方法的相关信息应该怎么做？</font></p>
<p>可以在通知方法中传入一个<strong>JoinPoint</strong>类对象，可以通过这个对象来获取目标方法的相关信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public int com.zxw.aop.MathCalculator.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果要引入其他切面类的切入点表达式，则要使用全类名访问</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String methodName = jp.getSignature().getName();</span><br><span class="line">        <span class="comment">//获取方法参数</span></span><br><span class="line">        Object[] args = jp.getArgs();</span><br><span class="line">        System.out.println(methodName + <span class="string">"除法运行...参数列表为：&#123;"</span> + Arrays.toString(args) + <span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">        String methodName = jp.getSignature().getName();</span><br><span class="line">        System.out.println(methodName + <span class="string">"除法结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//returning属性指定通知方法参数中返回值</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"pointCut()"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(JoinPoint jp, Object result)</span> </span>&#123;</span><br><span class="line">        String methodName = jp.getSignature().getName();</span><br><span class="line">        System.out.println(methodName + <span class="string">"除法正常返回...运行结果是：&#123;"</span> + result + <span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//throwing属性指定通知方法参数中异常对应</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"pointCut()"</span>, throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint jp, Exception exception)</span> </span>&#123;</span><br><span class="line">        String methodName = jp.getSignature().getName();</span><br><span class="line">        System.out.println(methodName + <span class="string">"除法异常...异常信息：&#123;"</span> + exception + <span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：JoinPoint类型的参数必须是参数列表的第一个参数，否则会报错！</strong></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>三步：</p>
<ul>
<li>将业务逻辑组件和切面类都加入到容器中，告诉Spring哪个是切面类（通过@Aspect注解）</li>
<li>在切面类上的每一个方法上标注通知注解，告诉Spring何时何地运行（通过切入点表达式）</li>
<li>开启基于注解的aop支持：@EnableAspectJAutoProxy</li>
</ul>
<h2 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h2><h3 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h3><p>@EnableAspectJAutoProxy注解的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//使用@Import注解快速导入一个组件</span></span><br><span class="line"><span class="comment">//AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar</span></span><br><span class="line"><span class="meta">@Import</span>(AspectJAutoProxyRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAspectJAutoProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 使用何种方式来实现动态代理</span></span><br><span class="line"><span class="comment">	 * true表示使用cglib</span></span><br><span class="line"><span class="comment">	 * false表示使用jdk，默认值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 是否通过aop框架暴露该代理对象，使得aopContext能够访问，默认值为false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar接口，可以自定义注册组件，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//向容器中注册AnnotationAwareAspectJAutoProxyCreator组件</span></span><br><span class="line">		AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面就是获取@EnableAspectJAutoProxy注解中的属性，然后实现属性所对应的功能</span></span><br><span class="line">		AnnotationAttributes enableAspectJAutoProxy =</span><br><span class="line">				AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span> (enableAspectJAutoProxy != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"proxyTargetClass"</span>)) &#123;</span><br><span class="line">				AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"exposeProxy"</span>)) &#123;</span><br><span class="line">				AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以说，我们需要重点关注的是AnnotationAwareAspectJAutoProxyCreator这个类</p>
<h3 id="AnnotationAwareAspectJAutoProxyCreator"><a href="#AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator"></a>AnnotationAwareAspectJAutoProxyCreator</h3><p>前面说到AspectJAutoProxyRegistrar会向容器中注册一个名为<code>internalAutoProxyCreator</code>且类型为<code>AnnotationAwareAspectJAutoProxyCreator</code>的组件</p>
<p>下面给出<code>AnnotationAwareAspectJAutoProxyCreator</code>的继承关系：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200818101944250.png" align="left"/>



<p><code>AnnotationAwareAspectJAutoProxyCreator</code>实现了如下几个重要的接口</p>
<ul>
<li><code>BeanPostProcessor</code></li>
<li><code>InstantiationAwareBeanPostProcessor</code></li>
<li><code>BeanFactoryAware</code></li>
</ul>
<p>==BeanPostProcessor接口中的重要方法==</p>
<ul>
<li><code>postProcessBeforeInitialization</code>：在Bean初始化方法调用之前被调用</li>
<li><code>postProcessAfterInitialization</code>：在Bean初始化方法调用之后被调用</li>
</ul>
<p>==InstantiationAwareBeanPostProcessor==</p>
<ul>
<li><code>postProcessBeforeInstantiation</code>：在Bean实例化之前被调用</li>
<li><code>postProcessAfterInstantiation</code>：在Bean实例化之后被调用</li>
<li><code>postProcessPropertyValues</code>：在给定属性值赋值前进行处理</li>
</ul>
<p>==BeanFactoryAware==</p>
<ul>
<li><code>setBeanFactory</code>：将BeanFactory对象从容器中注入到实现了该接口的类中</li>
</ul>
<p>在这些接口对应的实现方法上打上断点，并在主配置类中对应注入业务类和切面类的方法上打上断点</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200819092716430.png" align="left"/>

<p>在测试方法上打上断点：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200819092943721.png" align="left"/>





<h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>下面将介绍Spring注解方式是如何注册AnnotationAwareAspectJAutoProxyCreator到Spring容器中的：</p>
<p>调用AnnotationConfigApplicationContext的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用无参构造</span></span><br><span class="line">	<span class="keyword">this</span>();</span><br><span class="line">    <span class="comment">//注册配置类</span></span><br><span class="line">	register(annotatedClasses);</span><br><span class="line">    <span class="comment">//刷新容器</span></span><br><span class="line">	refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，这个<code>refresh</code>方法就是Spring运行的核心方法，那么<code>refresh</code>中究竟做了什么？，然我们看看<code>refresh</code>方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册后置处理器用于拦截bean的创建</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化剩余的非懒加载的单例bean</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                            <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="registerBeanPostProcessors"><a href="#registerBeanPostProcessors" class="headerlink" title="registerBeanPostProcessors"></a>registerBeanPostProcessors</h4><p>这个方法用于将所有的后置处理器注册到容器中，前面说到过<code>AnnotationAwareAsepctJAutoProxyCreator</code>方法也实现了<code>BeanPostProcessor</code>接口，所以也是一个后置处理器，所以此处也会注册<code>AnnotationAwareAspectJAutoProxyCrator</code></p>
<p><strong>流程</strong>：</p>
<p><code>registerBeanPostProcessors(beanFactory)</code>：注册bean的后置处理器用于拦截bean</p>
<ol>
<li><p>先获取IoC容器已经定义了的需要的所有的BeanPostProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给容器中添加一个BeanPostProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据BeanPostProcessor实现的优先级接口的情况进行分组封装到ArrayList中</p>
<ul>
<li>实现了PriorityOrdered接口的</li>
<li>实现了Ordered接口的</li>
<li>没有实现优先级接口的</li>
</ul>
</li>
<li><p>先注册实现了PriorityOrdered接口的BeanPostProcessor</p>
</li>
<li><p>在注册实现了Ordered接口的BeanPostProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">	BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	orderedPostProcessors.add(pp);</span><br><span class="line">	<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">		internalPostProcessors.add(pp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br></pre></td></tr></table></figure>

<p><code>getBean</code>&rightarrow;<code>doGetBean</code>&rightarrow;<code>getSingleton</code>&rightarrow;<code>getObject</code>&rightarrow;<code>createBean</code>&rightarrow;<code>doCreateBean</code></p>
<p>==doCreateBean==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化这个bean</span></span><br><span class="line">    <span class="comment">//首先创建一个BeanWrapper对象</span></span><br><span class="line">    BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        <span class="comment">//factoryBeanInstanceCache代表还没有被创建的bean，从其中移除并获取要创建的BeanWrapper</span></span><br><span class="line">        instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有获取到BeanWrapper</span></span><br><span class="line">    <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//就根据bean名称、定义信息、和参数创建BeanWrapper</span></span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从BeanWrapper中获取bean实例</span></span><br><span class="line">    <span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">    <span class="comment">//从BeanWrapper中获取bean类型</span></span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">    <span class="keyword">if</span> (beanType != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//设置bean定义的目标类型</span></span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许后置处理器来操纵合并的bean定义.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//调用对应的后置处理器</span></span><br><span class="line">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">    <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">    <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                                      isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">                         <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化这个bean实例</span></span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//为bean的属性赋值</span></span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="comment">//调用initializeBean方法初始化bean得到要暴露的对象</span></span><br><span class="line">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">                <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                                                               <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                                                               StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                                               <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                                                               <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                                                               <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                                                               <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean as disposable.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==initializeBean==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            <span class="comment">//执行Aware接口中对应的方法</span></span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//执行Aware接口中对应的方法</span></span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">//执行BeanPostProcessor中的postProcessBeforeInitialization方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//执行bean的初始化方法</span></span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">            beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">//执行BeanPostProcessor的postProcessAfterInitialization方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p>最后注册没有实现优先级接口的BeanPostProcessor</p>
</li>
<li><p>将BeanPostProcessor注册到BeanFactory中</p>
</li>
</ol>
<p><code>AnnotationAwareAspectJAutoProxyCreator</code>类实现<code>BeanFactoryAware</code>接口中的<code>setBeanFactory</code>就是在<code>initializeBean</code>方法中调用<code>invokeAwareMethod</code>方法来实现的！</p>
<h4 id="finishBeanFactoryInitialization"><a href="#finishBeanFactoryInitialization" class="headerlink" title="finishBeanFactoryInitialization"></a>finishBeanFactoryInitialization</h4><p>这个方法的作用是：实例化所有剩余的非懒加载的单例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">        beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line">    <span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">    <span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware<span class="class">.<span class="keyword">class</span>, <span class="title">false</span>, <span class="title">false</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法我们只需要关注最后一行：<code>beanFactory.preInstantiateSingletons</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">"Pre-instantiating singletons in "</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">    <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">    List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">                <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">                <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">                <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">                    isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;) () -&gt;</span><br><span class="line">                                                                ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit(),</span><br><span class="line">                                                                getAccessControlContext());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                                   ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                    getBean(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        Object singletonInstance = getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">            <span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">                    smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法中会调用<code>getBean</code>方法来获取bean实例，这个<code>getBean</code>方法也是Spring最核心的方法之一，可以将这个getBean方法分为如下几部分来解析（<code>getBean</code>方法中调用了<code>doGetBean</code>方法）</p>
<p>==第一部分==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">Object bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">Object sharedInstance = getSingleton(beanName);</span><br><span class="line"><span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                         <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>getSingleton(beanName)</code>方法区singleton（单例）的缓存中查找bean实例，如果是第一个初始化这个bean，则缓存中肯定不存在这个单例实例</p>
<p>==第二部分==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line"><span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line"><span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">    <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">    String nameToLookup = originalBeanName(name);</span><br><span class="line">    <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">            nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">        <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">        <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码首先根据当前的BeanFactory获取父一级的BeanFactory，然后逐级递归查找所需要的bean，很显然这里也获取不到，因为这是第一次获取</p>
<p>==第三部分==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">    markBeanAsCreated(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">    String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">    <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registerDependentBean(dep, beanName);</span><br><span class="line">            getBean(dep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>markBeanAsCreated(beanName)</code>方法的作用在创建这个bean之前先打上创建的标记，防止其他线程来重复创建bean对象，然后获取到该bean对应的<code>BeanDefinition</code>，在Spring创建初期把bean的初始化信息通过注解和反射等预先存在了<code>BeanDefinition</code>中，当然也包括bean依赖等。这里会将所依赖的bean依次实例化</p>
<p>==第四部分==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create bean instance.</span></span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">    sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">            <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">            <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">            destroySingleton(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个<code>getSingleton</code>方法的参数是<code>ObjectFactory</code>，<code>getSingleton</code>方法会调用传入的<code>ObjectFactory</code>对象的<code>getObject</code>返回，这里使用了lambda表达式，调用了<code>createBean</code>方法，我们继续来分析这个<code>createBean</code>方法</p>
<p>==第五部分==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure bean class is actually resolved at this point, and</span></span><br><span class="line">    <span class="comment">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class="line">    <span class="comment">// which cannot be stored in the shared merged bean definition.</span></span><br><span class="line">    Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">    <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">        mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare method overrides.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mbdToUse.prepareMethodOverrides();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">                                               beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">        <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">                                        <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">        <span class="comment">// A previously detected exception with proper bean creation context already...</span></span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">        <span class="comment">// An IllegalStateException to be communicated up to DefaultSingletonBeanRegistry...</span></span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbdToUse.getResourceDescription(), beanName, <span class="string">"Unexpected exception during bean creation"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>判断该bean的字节码是否存在</li>
<li>准备方法重写</li>
<li>给<code>InstantiationAwareBeanPostProcessor</code>一个机会在bean实例化之前修改bean，此处如果能够返回则使用这个后置处理器返回，否则调用<code>doCreateBean</code>来返回</li>
</ul>
<p><strong>doCreateBean</strong>方法已经在<code>registerBeanPostProcessors</code>方法的执行流程中介绍过了</p>
<h3 id="AnnotationAwareAspectJAutoProxyCreator相关方法分析"><a href="#AnnotationAwareAspectJAutoProxyCreator相关方法分析" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator相关方法分析"></a>AnnotationAwareAspectJAutoProxyCreator相关方法分析</h3><h4 id="postProcessBeforeInstantiation"><a href="#postProcessBeforeInstantiation" class="headerlink" title="postProcessBeforeInstantiation"></a>postProcessBeforeInstantiation</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        <span class="comment">//判断通知bean（已经增强的bean）中是否包含这个缓存key，如果包含则直接返回null</span></span><br><span class="line">        <span class="comment">//advisedBeans中保存了所有需要增强的bean</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//isInfrastructureClass判断是否是Advice、Pointcut、Advisor、AopInfrastructureBean</span></span><br><span class="line">        <span class="comment">//shouldSkip，是否应该跳过，只会在beanName的值和通知类对应的bean名称相同时才会返回true</span></span><br><span class="line">        <span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">            <span class="comment">//将这个cacheKey添加到要增强的bean中</span></span><br><span class="line">            <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create proxy here if we have a custom TargetSource.</span></span><br><span class="line">    <span class="comment">// Suppresses unnecessary default instantiation of the target bean:</span></span><br><span class="line">    <span class="comment">// The TargetSource will handle target instances in a custom fashion.</span></span><br><span class="line">    <span class="comment">//这里targetSource返回null</span></span><br><span class="line">    TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line">    <span class="keyword">if</span> (targetSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">        Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">        <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//最终会返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==isInfrastructureClass==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isInfrastructureClass</span><span class="params">(Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否beanClass是否是Advice、Pointcut、Advisor、AopInfrastructureBean的其中一种</span></span><br><span class="line">    <span class="keyword">boolean</span> retVal = Advice<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">        <span class="title">Pointcut</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">            <span class="title">Advisor</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ||</span></span><br><span class="line"><span class="class">                <span class="title">AopInfrastructureBean</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (retVal &amp;&amp; logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Did not attempt to auto-proxy infrastructure class ["</span> + beanClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>==shouldSkip==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldSkip</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取候选的增强器（对应的就是通知方法中的通知）</span></span><br><span class="line">    List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">    <span class="comment">//只有在增强器（通知方法）对应的增强类的bean的名称和beanName相同时返回true</span></span><br><span class="line">    <span class="keyword">for</span> (Advisor advisor : candidateAdvisors) &#123;</span><br><span class="line">        <span class="comment">//判断增强器是否是AspectJPointcutAdvisor类型</span></span><br><span class="line">        <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> AspectJPointcutAdvisor) &#123;</span><br><span class="line">            <span class="comment">//我们编写的增强器是InstantiationModelAwarePointcutAdvisor类型的，所以这里不会返回true</span></span><br><span class="line">            <span class="keyword">if</span> (((AbstractAspectJAdvice) advisor.getAdvice()).getAspectName().equals(beanName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.shouldSkip(beanClass, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="postProcessAfterInitialization"><a href="#postProcessAfterInitialization" class="headerlink" title="postProcessAfterInitialization"></a>postProcessAfterInitialization</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(@Nullable Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法调用<code>wrapIfNecessary</code>方法在有必要的情况下对bean进行包装（此时bean已经完成了实例化）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该bean有对应的增强器（通知方法），则创建其代理对象</span></span><br><span class="line">    <span class="comment">// getAdvicesAndAdvisorsForBean方法用于获取指定bean上的advice和advisor</span></span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//如果返回的增强器数组不为空</span></span><br><span class="line">    <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        <span class="comment">//将当前这个需要增强的bean在advisedBeans中对应的值设置为true</span></span><br><span class="line">        <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        <span class="comment">//使用动态代理创建代理对象</span></span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">            bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line">        <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        <span class="comment">//返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//如果返回的增强器数组为空则将advisedBeans中对应的值设置为false，并返回这个bean</span></span><br><span class="line">    <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==getAdvicesAndAdvisorsForBean==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, <span class="meta">@Nullable</span> TargetSource targetSource) &#123;</span><br><span class="line">    <span class="comment">//找到合适的增强器，主要是通过切入点表达式来匹配的</span></span><br><span class="line">    <span class="comment">//先获取到所有候选增强器，然后筛选出能在当前bean中使用的增强器</span></span><br><span class="line">    <span class="comment">//还对增强器进行了排序</span></span><br><span class="line">    List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">    <span class="comment">//没找到则返回DO_NOT_PROXY（null）</span></span><br><span class="line">    <span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则将找到的增强器以Advisor数组的形式返回</span></span><br><span class="line">    <span class="keyword">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==createProxy==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(Class&lt;?&gt; beanClass, @Nullable String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params">                             @Nullable Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">        AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个代理工厂对象proxyFactory</span></span><br><span class="line">    ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">    <span class="comment">//从配置文件拷贝配置信息到proxyFactory对象中</span></span><br><span class="line">    proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">            proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取增强器添加到proxyFactory中</span></span><br><span class="line">    Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    proxyFactory.addAdvisors(advisors);</span><br><span class="line">    proxyFactory.setTargetSource(targetSource);</span><br><span class="line">    customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">    proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line">    <span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">        proxyFactory.setPreFiltered(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用proxyFactory的getProxy方法返回一个代理类对象</span></span><br><span class="line">    <span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ProxyFactory#getProxy</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//createAopProxy()会返回一个AopProxy对象</span></span><br><span class="line">    <span class="comment">//getProxy方法会返回一个代理对象</span></span><br><span class="line">    <span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>createAopProxy</code>方法会调用<code>getAopProxyFactory</code>方法返回一个<code>AopProxyFactory</code>对象，然后调用其<code>createAopProxy</code>方法返回一个<code>AopProxy</code>对象</p>
<p><code>AopProxyFactory</code>是一个接口，有一个默认实现类<code>DefaultAopProxyFactory</code>，所以此处会调用<code>DefaultAopProxyFactory</code>的<code>createAopProxy</code>方法</p>
<p>==DefaultAopProxyFactory#createAopProxy==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">        Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">        <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line">                                         <span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果目标对象是接口或者是代理类，则使用JDK动态代理</span></span><br><span class="line">        <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">            <span class="comment">//JDK动态代理的AopProxy对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cglib动态代理的AopProxy对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//JDK动态代理的AopProxy对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AopProxy接口实现类：</p>
<ul>
<li><code>JdkDynamicAopProxy</code>：jdk动态代理</li>
<li><code>ObjenesisCglibAopProxy</code>：cglib动态代理</li>
</ul>
<p>上面的方法中给出了合适返回何种动态代理对象，一般来说可以由Spring自动根据情况选择，但也可以强制使用cglib动态代理</p>
<p>经过上述的动态代理操作之后，容器中所存放的bean就是动态代理创建的代理对象了，所以获取到这个bean之后调用了其中的方法之后也会调用对应的通知方法</p>
<h4 id="目标方法的执行"><a href="#目标方法的执行" class="headerlink" title="目标方法的执行"></a>目标方法的执行</h4><p>容器中保存了组件的代理对象（使用cglib动态代理之后增强的对象），这个对象里面保存了详细信息（比如增强器、目标对象等）</p>
<ol>
<li><p>调用CglibAopProxy的静态成员内部类DynamicAdvisedInterceptor的intercept方法，这个方法用于拦截目标方法的执行</p>
</li>
<li><p>根据ProxyFactory对象获取将要执行的目标方法的拦截器链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br></pre></td></tr></table></figure>

<p>1）创建一个List用于存储拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; interceptorList = <span class="keyword">new</span> ArrayList&lt;&gt;(advisors.length);</span><br></pre></td></tr></table></figure>

<p>advisors的长度为5，一个默认advisor和四个通知类中的通知方法</p>
<p>2）遍历所有的增强器，将其转换为Interceptor数组</p>
<p>3）将增强器转为<code>List&lt;MethodInterceptor&gt;</code>，</p>
<p>​    如果是MethodInterceptor则直接加入到集合当中；</p>
<p>​    如果不是使用AdvisorAdapter将增强器转换为MethodInterceptor，</p>
<p>​    转换完成返回MethodInterceptor数组</p>
</li>
<li><p>如果没有拦截器链，直接执行目标方法</p>
<p>拦截器链就是步骤2中返回的MethodInterceptor数组对象，方法的拦截就是通过这个MethodInterceptor对象来实现</p>
</li>
<li><p>如果有拦截器链，把需要执行的目标对象、目标方法、拦截器链等信息用来创建一个CglibMethodInvocation对象，并调用其proceed方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">retVal = <span class="keyword">new</span> CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</span><br></pre></td></tr></table></figure>
</li>
<li><p>拦截器链的触发过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">// currentInterceptorIndex代表当前拦截器的索引</span></span><br><span class="line">    <span class="comment">// 只有当currentInterceptorIndex的值为最后一个拦截器的索引时才会返回invokeJoinpoint()的返回值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object interceptorOrInterceptionAdvice =</span><br><span class="line">        <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="keyword">this</span>.currentInterceptorIndex);</span><br><span class="line">    <span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line">        <span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line">        <span class="comment">// been evaluated and found to match.</span></span><br><span class="line">        InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">            (InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">        Class&lt;?&gt; targetClass = (<span class="keyword">this</span>.targetClass != <span class="keyword">null</span> ? <span class="keyword">this</span>.targetClass : <span class="keyword">this</span>.method.getDeclaringClass());</span><br><span class="line">        <span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, targetClass, <span class="keyword">this</span>.arguments)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Dynamic matching failed.</span></span><br><span class="line">            <span class="comment">// Skip this interceptor and invoke the next in the chain.</span></span><br><span class="line">            <span class="keyword">return</span> proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 前面介绍过，会将advisor转换为MethodInterceptor并返回，所以这里会执行MethodInterceptor的实现了类中的</span></span><br><span class="line">        <span class="comment">// invoke方法</span></span><br><span class="line">        <span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无论是哪一种MethodInterceptor的实现类都会都会执行MethodInvocation（也就是这里传入的this）的proceed()方法，所以整个拦截器链，其执行流程如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200824104707812.png" align="left"/>

<p>注意：发生异常时由于产生了异常，返回通知无法正常执行，但是由于最终通知放在了finally块中，所以无论是否发生异常都会执行！</p>
</li>
</ol>
<h2 id="AOP原理总结"><a href="#AOP原理总结" class="headerlink" title="AOP原理总结"></a>AOP原理总结</h2><ol>
<li><p>使用<code>@EnableAspectJAutoProxy</code>开启AOP功能</p>
</li>
<li><p><code>@EnableAspectJAutoProxy</code>会给容器中注册一个<code>AnnotationAwareAspectJAutoProxyCreator</code>组件</p>
</li>
<li><p><code>AnnotationAwareAspectJAutoProxyCreator</code>是一个后置处理器</p>
</li>
<li><p>容器的创建流程：</p>
<ol>
<li><p><code>registerBeanPostProcessors</code>会注册后置处理器，此处会创建<code>AnnotationAwareAspectJAutoProxyCreator</code>对象</p>
</li>
<li><p><code>finishBeanFactoryInitialization</code>初始化剩下的单实例bean</p>
<ol>
<li><p>创建业务逻辑组件和切面组件</p>
</li>
<li><p>AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程</p>
</li>
<li><p>组件创建完之后，判断组件是否需要增强</p>
<p>是：将切面的通知方法包装成增强器（Advisor），给业务逻辑对象组件创建一个代理对象</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>执行目标方法</p>
<ol>
<li><p>代理对象执行目标方法</p>
</li>
<li><p>CglibAopProxy#DynamicAdvisedInterceptor.interceptor()</p>
<ol>
<li><p>得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）</p>
</li>
<li><p>利用拦截器的链式机制，依次进入每一个拦截器进行执行</p>
</li>
<li><p>效果：</p>
<p>正常执行：Before Advice&rightarrow;Target Method&rightarrow;After Returning Advice&rightarrow;After Advice</p>
<p>异常执行：Before Advice&rightarrow;Target Method&rightarrow;After Throwing Advice&rightarrow;After Advice</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring注解驱动</tag>
        <tag>AOP注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解驱动开发（二）</title>
    <url>/2020/08/15/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring注解驱动开发（二）"><a href="#Spring注解驱动开发（二）" class="headerlink" title="Spring注解驱动开发（二）"></a>Spring注解驱动开发（二）</h1><h2 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h2><h3 id="Value赋值"><a href="#Value赋值" class="headerlink" title="@Value赋值"></a>@Value赋值</h3><ol>
<li>基本数值</li>
<li>SpEL表达式，<code>#{}</code>，表示获取bean的某个属性值，或者调用bean的某个方法</li>
<li><code>${}</code>，从配置文件中取出值（在运行环境中的值）</li>
</ol>
<p><strong>使用示例</strong></p>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;20-4&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfPropertyValue<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Person person = ac.getBean(<span class="string">"person"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PropertySource加载外部配置文件"><a href="#PropertySource加载外部配置文件" class="headerlink" title="@PropertySource加载外部配置文件"></a>@PropertySource加载外部配置文件</h3><p>@PropertySource可以用于加载外部的配置文件，然后配合@Value可以将配置文件中的对应值进行绑定</p>
<p><strong>使用示例</strong>：</p>
<p><code>person.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.nickName</span>=<span class="string">飞天小霸王</span></span><br></pre></td></tr></table></figure>

<p><code>Person.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;20-4&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.nickName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfPropertyValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfPropertyValue<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Person person = ac.getBean(<span class="string">"person"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200815190832645.png" align="left"/>



<p>所有被@PropertySource加载的配置文件中的信息都会被存储到Environment对象中，如使用通过Environment对象获取上述配置文件中的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfPropertyValue<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Environment environment = ac.getEnvironment();</span><br><span class="line">    String nickName = environment.getProperty(<span class="string">"person.nickName"</span>);</span><br><span class="line">    System.out.println(nickName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200815191332212.png" align="left"/>

<p><strong>@PropertySource</strong>是一个可重复注解（1.8新特性），如果要引入多个配置文件，可以使用多个@PropertySource或者在@PropertySource注解中给出多个值（String类型的数组）</p>
<h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p><strong>自动装配</strong>：Spring利用依赖注入（DI），完成对IoC容器中各个组件的依赖关系赋值</p>
<h3 id="Autowired-amp-Qualifier-amp-Primary"><a href="#Autowired-amp-Qualifier-amp-Primary" class="headerlink" title="@Autowired &amp; @Qualifier &amp; @Primary"></a>@Autowired &amp; @Qualifier &amp; @Primary</h3><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p><strong>出现的位置</strong>：构造器、参数、方法、属性</p>
<p>@Autowired：自动注入，当一个组件中需要用到另外一个组件时，只需要在属性上加上一个@Autowired注解</p>
<ul>
<li>优先按照类型从容器中寻找对应的组件<ul>
<li>找到就赋值</li>
<li>如果存在多个相同类型的组件，再将属性名作为组件的id去容器中查找</li>
</ul>
</li>
</ul>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><p>@Qualifier可以和@Autowired配合使用，用于装配指定id的该类型组件</p>
<p>默认一定要将属性自动装配，如果没有找到，则会报错！</p>
<p>如果想要设置没有找到也不报错，可以通过@Autowired来设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"bookDao"</span>)</span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br></pre></td></tr></table></figure>



<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"bookDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h4><p><strong>作用</strong>：让Spring进行自动装配时，默认使用首选的bean</p>
<p><strong>示例</strong><br>配置类中添加一个Bean并使用@Primary注解将该Bean标记为首选</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"bookDao2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BookDao <span class="title">bookDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BookDao();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BookService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时@Autowired注解在容器中存在多个相同类型的组件时，会使用@Primary标记的组件，而不是根据属性名来选择！</p>
<h3 id="Resource-amp-Inject"><a href="#Resource-amp-Inject" class="headerlink" title="@Resource &amp; @Inject"></a>@Resource &amp; @Inject</h3><p>Spring还支持使用@Resource（JSR250）和@Inject（JSR330），这是Java规范的注解</p>
<h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p><strong>作用</strong>：和@Autowired一样可以实现自动装配功能，默认按照组件名称进行装配的（@Primary在使用@Resource时不会生效）</p>
<ul>
<li>不支持@Primary</li>
<li>没有required属性，即不能设置<code>required=false</code></li>
</ul>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"bookDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h4><p>要使用这个注解首先需要添加inject依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.inject/javax.inject --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用</strong>：和@Autowired的功能一样，不同的是@Inject注解中没有属性，而@Autowired有required属性（不能设置<code>required=false</code>）</p>
<p><strong>自动装配功能是由AutowiredAnnotationBeanPostProcessor来实现的</strong></p>
<h3 id="方法构造器位置的自动装配"><a href="#方法构造器位置的自动装配" class="headerlink" title="方法构造器位置的自动装配"></a>方法构造器位置的自动装配</h3><h4 id="Autowired-1"><a href="#Autowired-1" class="headerlink" title="@Autowired"></a>@Autowired</h4><p>==写在方法上==</p>
<p><strong>作用</strong>：方法所使用的参数将会从IoC容器中获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Boss&#123;"</span> +</span><br><span class="line">                <span class="string">"car="</span> + car +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Bean标注的方法创建对象时，方法参数从容器中获取（可以省略@Autowired）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Color <span class="title">color</span><span class="params">(@Autowired Car car)</span> </span>&#123;<span class="comment">//此处的@Autowired可以省略</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Color(car);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>==写在构造方法上==</p>
<p>标注在构造器上创建bean时则不会调用无参构造，而是调用标注的构造方法并自动装配</p>
<p><strong>如果组件只有一个有参构造器，则@Autowired可以省略，构造器中的参数还是可以从容器中获取！</strong></p>
<p>==写在参数上==</p>
<p>标注在参数上，所标注的参数会被自动装配。</p>
<h3 id="Aware自动注入Spring底层组件-amp-原理"><a href="#Aware自动注入Spring底层组件-amp-原理" class="headerlink" title="Aware自动注入Spring底层组件 &amp; 原理"></a>Aware自动注入Spring底层组件 &amp; 原理</h3><p>如果想要在自定义的组件中使用Spring容器底层的一些组件（例如：ApplicationContext、BeanFactory …）</p>
<p>此时只需要让自定义的组件实现<code>XXXAware</code>即可</p>
<p>例如：<code>ApplicationContextAware</code>接口，实现了这个接口后</p>
<p><strong>使用示例</strong>：</p>
<p>Red类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">BeanNameAware</span>, <span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        System.out.println(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这个resolver用于解析String的值（包括$&#123;&#125;、#&#123;&#125;等)</span></span><br><span class="line">        String result = resolver.resolveStringValue(<span class="string">"#&#123;20-4&#125;"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前bean的name为："</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfAutowired<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XXXAware的功能都是通过XXXAwareProcessor来实现的，前面在介绍BeanPostProcessor时已经介绍了其原理：</p>
<p>在创建完了Bean之后，实现了对应XXXAware接口的类会在XXXAwareProcessor中调用这些接口中的方法</p>
<h3 id="Profile环境搭建"><a href="#Profile环境搭建" class="headerlink" title="@Profile环境搭建"></a>@Profile环境搭建</h3><p><strong>Profile概念：</strong>Spring为我们提供的可以根据当前环境，动态地激活和切换一些列组件的功能</p>
<p>开发一个项目可以会包含：</p>
<ul>
<li>开发环境</li>
<li>测试环境</li>
<li>项目上线之后的生产环境</li>
</ul>
<p>首先导入mysql的jdbc驱动和Druid数据库连接池的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql connector--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写主配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfProfile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"devDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">devDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.setProperty(<span class="string">"driverClassName"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:330/dev"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"password"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"testDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.setProperty(<span class="string">"driverClassName"</span>, <span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:330/test"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"password"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoCTestOfProfile</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfProfile<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String[] namesForType = ac.getBeanNamesForType(DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (String name : namesForType) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Profile根据环境注册bean"><a href="#Profile根据环境注册bean" class="headerlink" title="@Profile根据环境注册bean"></a>@Profile根据环境注册bean</h3><p>@Profile：指定组件在哪个环境下才能注册到容器中。<strong>如果不指定，则任何环境下都能注册这个组件</strong>！</p>
<ul>
<li>加了环境标识的组件只有指定的环境被激活时才会被加载，默认为default环境</li>
</ul>
<p><strong>如何激活其他环境？</strong></p>
<ol>
<li><p>使用命令行动态参数的方式：</p>
<p><code>-Dspring.profiles.active=dev</code></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200816223025380.png" align="left"/>
</li>
<li><p>使用代码的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">    <span class="comment">//设置一个激活的环境，这里可以设置多个环境</span></span><br><span class="line">    ac.getEnvironment().setActiveProfiles(<span class="string">"test"</span>, <span class="string">"dev"</span>);</span><br><span class="line">    <span class="comment">//注册主配置类</span></span><br><span class="line">    ac.register(MainConfigOfProfile<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//启动刷新容器</span></span><br><span class="line">    ac.refresh();</span><br><span class="line">    <span class="comment">//输出DataSource类型的bean的名称</span></span><br><span class="line">    String[] namesForType = ac.getBeanNamesForType(DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (String name : namesForType) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主配置类上使用@Profile注解，其值是指定的环境标识</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfProfile</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="IoC小结"><a href="#IoC小结" class="headerlink" title="IoC小结"></a>IoC小结</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200816225936000.png" align="left"/>]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>自动装配</tag>
        <tag>属性赋值</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解驱动开发（一）</title>
    <url>/2020/08/10/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Spring注解驱动开发（一）"><a href="#Spring注解驱动开发（一）" class="headerlink" title="Spring注解驱动开发（一）"></a>Spring注解驱动开发（一）</h1><p>==为什么要学习Spring注解驱动？==</p>
<p>&emsp;&emsp;很多人都会使用Spring的基础框架，例如Spring、Spring MVC。但是现在随着Spring Boot和Spring Cloud的兴起，其底层使用到了大量的Spring注解，如果不学习Spring中的注解就很难真正理解这些框架！</p>
<h2 id="注入组件"><a href="#注入组件" class="headerlink" title="注入组件"></a>注入组件</h2><h3 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h3><p>&emsp;&emsp;首先需要回顾配置文件的方式注入组件</p>
<ol>
<li><p>创建一个maven工程</p>
</li>
<li><p>添加maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-context--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类Person</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Spring的配置文件<code>beans.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.zxw.pojo.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试方法进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext</span></span><br><span class="line">	ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    <span class="comment">//获取Person对象</span></span><br><span class="line">    Person person = ac.getBean(<span class="string">"person"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200810142209404.png" align="left"/>

</li>
</ol>
<h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p><strong>步骤</strong>：</p>
<ol>
<li><p>编写一个配置类MainConfig来替代配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用@Configuration注解表明该类是Spring的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用@Bean注解将一个方法的返回值注入到IoC容器中，id默认值为方法名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试方法进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取ApplicationContext对象</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//获取Person对象</span></span><br><span class="line">    Person person = ac.getBean(<span class="string">"person"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果如下所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200810143038811.png" align="left"/>



</li>
</ol>
<h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p><strong>作用</strong>：@Configuration在某个类上时会将这个类作为配置类注入到SpringIoC容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor</span>(annotation = Component<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">	String value() default "";</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Configuration本身也是@Component的别名，所以@Configuration修饰的类也会作为组件被注入到Spring IoC容器中</p>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p><strong>作用</strong>：@Bean注解修饰的方法会作为bean注入到Spring的IoC容器中</p>
<p><strong>注解的定义如下</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line">	String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">	String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function">Autowire <span class="title">autowire</span><span class="params">()</span> <span class="keyword">default</span> Autowire.NO</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">initMethod</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">destroyMethod</span><span class="params">()</span> <span class="keyword">default</span> AbstractBeanDefinition.INFER_METHOD</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>value</code>、<code>name</code>：对应bean标签中的id属性</li>
<li><code>autowire</code>：返回一个Autowire枚举类的对象，默认值为Autowire.NO<ul>
<li><code>Autowire.NO</code>：不自动装配</li>
<li><code>Autowire.BY_NAME</code>：根据名称自动装配</li>
<li><code>Autowire.BY_TYPE</code>：根据类型自动装配</li>
</ul>
</li>
<li><code>initMethod</code>：指定当bean创建时调用的方法</li>
<li><code>destroyMethod</code>：指定当bean销毁时调用的方法</li>
</ul>
<h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p><strong>作用</strong>：根据定义的扫描路径，把符合规则的类装配到Spring容器中</p>
<p><strong>注解的定义如下</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable</span>(ComponentScans<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ComponentScan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"basePackages"</span>)</span><br><span class="line">	String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">	String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">	Class&lt;? extends ScopeMetadataResolver&gt; scopeResolver() <span class="keyword">default</span> AnnotationScopeMetadataResolver<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">ScopedProxyMode <span class="title">scopedProxy</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">String <span class="title">resourcePattern</span><span class="params">()</span> <span class="keyword">default</span> ClassPathScanningCandidateComponentProvider.DEFAULT_RESOURCE_PATTERN</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">useDefaultFilters</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">	Filter[] includeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	Filter[] excludeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">lazyInit</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">	<span class="meta">@Target</span>(&#123;&#125;)</span><br><span class="line">	<span class="meta">@interface</span> Filter &#123;</span><br><span class="line"></span><br><span class="line">		<span class="function">FilterType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> FilterType.ANNOTATION</span>;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@AliasFor</span>(<span class="string">"classes"</span>)</span><br><span class="line">		Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">		Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">		String[] pattern() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>value</code>和<code>basePackages</code>：用于指定包的路径，进行扫描</li>
<li><code>basePackageClasses</code>：可以指定多个类或接口的class，扫描时会在这些指定的类和接口所属的包进行扫描</li>
<li><code>nameGenerator</code>：bean的名称生成器，默认值为BeanNameGenerator.class</li>
<li><code>useDefaultFilters</code>：是否开启对@Component、@Repository、@Service、@Controller的类进行检测，默认值为true</li>
<li><code>includeFilters</code>：包含的过滤条件，Filter数组</li>
<li><code>excludeFilters</code>：排除的过滤条件，Filter数组</li>
</ul>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="@Filter"></a>@Filter</h4><p>@Filter注解是一个定义在@Component注解中的注解，用于过滤扫描的内容</p>
<p><strong>注解的定义</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;&#125;)	</span><br><span class="line"><span class="meta">@interface</span> Filter &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">FilterType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> FilterType.ANNOTATION</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"classes"</span>)</span><br><span class="line">	Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">	Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	String[] pattern() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>type</code>：用于指定过滤的类型，默认值为FilterType.ANNOTATION</p>
<ul>
<li><p><code>ANNOTATION</code>：注解类型</p>
</li>
<li><p><code>ASSIGNABLE_TYPE</code>：指定的类型</p>
</li>
<li><p><code>ASPECTJ</code>：按照Aspectj的表达式，基本上不会使用</p>
</li>
<li><p><code>REGEX</code>：按照正则表达式</p>
</li>
<li><p><code>CUSTOM</code>：自定义规则</p>
<p><strong>用法</strong>：实现TypeFilter接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReader 读取到当前正在扫描类的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReaderFactory 可以获取到其他任何类的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前类的注解信息</span></span><br><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">//获取当前正在扫描类的类信息</span></span><br><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">//获取当前类的资源信息（类的路径等）</span></span><br><span class="line">        Resource resource = metadataReader.getResource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前类的类名</span></span><br><span class="line">        String className = classMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">"当前类的类名:"</span> + className);</span><br><span class="line">        <span class="keyword">return</span> className.contains(<span class="string">"er"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加自定义的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">        basePackages = <span class="string">"com.zxw"</span>,</span><br><span class="line">        useDefaultFilters = <span class="keyword">false</span>,</span><br><span class="line">        includeFilters = &#123;</span><br><span class="line">                <span class="meta">@ComponentScan</span>.Filter(</span><br><span class="line">                        type = FilterType.CUSTOM,</span><br><span class="line">                        classes = &#123;</span><br><span class="line">                                MyTypeFilter<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">                        &#125;</span></span><br><span class="line"><span class="class">                )</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">)</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><code>value</code>和<code>classes</code>：指定要过滤的类型，例如：<code>Controller.class</code></li>
<li><code>pattern</code>：匹配规则，Aspectj或者Regex的匹配规则</li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>@Scope相当于bean标签中的scope属性，默认值是singleton，即单例的</p>
<ul>
<li>singleton：默认值，单例的，即每次从IoC获取时获得的是同一个对象，会在<strong>容器创建时</strong>将这个单实例添加到IoC容器中</li>
<li>prototype：多实例，每次从IoC容器中获取的是不同的对象（每次获取重新创建一个），<strong>每次获取时</strong>都会创建实例</li>
<li>request：同一个请求中获取的是同一个对象</li>
<li>session：同一个会话中获取的是同一个对象</li>
</ul>
<h4 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h4><p>singleton的时候会在IoC容器创建时加载，那如何修改成懒加载，即在获取时创建呢？</p>
<p>可以使用@Lazy标签实现，默认值为true，可以使得单例的bean变为懒加载模式</p>
<p>@Lazy(false)没有意义，和没写@Lazy的作用一样！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Jerry"</span>, <span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p><strong>作用</strong>：按照一定的条件进行判断，满足条件给容器中注册Bean</p>
<p><strong>出现位置</strong>：方法和类上</p>
<p><strong>注解定义</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * All &#123;<span class="doctag">@link</span> Condition&#125;s that must &#123;<span class="doctag">@linkplain</span> Condition#matches match&#125;</span></span><br><span class="line"><span class="comment">	 * in order for the component to be registered.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Class&lt;? extends Condition&gt;[] value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>value</code>：是一个Conditon的数组，Condition是一个函数接口，定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>matches方法返回true则注入bean，否则不注入bean</p>
<p>==ConditionContext的常用方法==</p>
<ul>
<li><code>BeanDefinitionRegistry getRegistry()</code>：返回condition匹配的持有bean定义的BeanDefinitionRegistry对象，也就是说可以获取和Bean定义有关的信息</li>
<li><code>ConfigurableListableBeanFactory getBeanFactory()</code>：返回Bean工厂对象</li>
<li><code>Environment getEnvironment()</code>：返回当前应用运行的环境Environment对象</li>
<li><code>ResourceLoader getResourceLoader()</code>：返回当前正在使用的资源加载器对象</li>
<li><code>ClassLoader getClassLoader()</code>：返回被用于加载class字节码的类加载器对象</li>
</ul>
<p>==AnnotatedTypeMetadata常用方法==</p>
<ul>
<li><code>boolean isAnnotated(String annotationName)</code>：返回当前的元素（扫描的类或者接口）是否包含指定的注解（或元注解）</li>
<li><code>Map&lt;String, Object&gt; getAnnotationAttributes(String annotationName)</code>：以Map&lt;String, Object&gt;对象的形式返回当前元素的指定注解的属性</li>
<li><code>Map&lt;String, Object&gt; getAnnotationAttributes(String annotationName, boolean classValuesAsString)</code>：以Map&lt;String, Object&gt;的形式返回当前元素的指定注解的属性，第二个参数表示是否将class对象转换为字符串存入Map中</li>
<li><code>MultiValueMap&lt;String, Object&gt; getAnnotationAttributes(String annotationName)</code>：以MultiValueMap&lt;String, Object&gt;对象的形式返回当前元素的指定注解的属性</li>
<li><code>MultiValueMap&lt;String, Object&gt; getAnnotationAttributes(String annotationName, boolean classValuesAsString)</code>：以MultiValueMap&lt;String, Object&gt;的形式返回当前元素的指定注解的属性，第二个参数表示是否将class对象转换为字符串存入Map中</li>
</ul>
<p>matches方法通过这两个参数来获取信息然后判断当前bean是否应当注入到IoC容器中</p>
<p><strong>使用示例</strong>：</p>
<p>需求：根据操作系统注入Bean</p>
<p><code>LinuxCondition</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        Environment environment = context.getEnvironment();</span><br><span class="line">        String osName = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (osName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> osName.toLowerCase().contains(<span class="string">"linux"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>WindowsCondition</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        Environment environment = context.getEnvironment();</span><br><span class="line">        String osName = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (osName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> osName.toLowerCase().contains(<span class="string">"windows"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建Bean的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Conditional</span>(&#123;</span><br><span class="line">        WindowsCondition<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line">@Bean("bill")</span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">bill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>, <span class="number">65</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Conditional</span>(&#123;</span><br><span class="line">        LinuxCondition<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line">@Bean("linus")</span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">linus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"Linus"</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取系统名称</span></span><br><span class="line">    Environment environment = ac.getEnvironment();</span><br><span class="line">    String osName = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">    System.out.println(osName);</span><br><span class="line">    Map&lt;String, Person&gt; personMap = ac.getBeansOfType(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Person&gt; entry : personMap.entrySet()) &#123;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于我的电脑的操作系统是Windows10，所以linus没有被注入到IoC容器当中！</p>
<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p><strong>给容器中注入组件的方式</strong>：</p>
<ol>
<li><p>包扫描+@Component、@Service、@Controller、@Repository注解的方式</p>
<p><strong>缺点</strong>：只适用于自己编写的类</p>
</li>
<li><p>@Bean，可以导入第三方包里面的组件</p>
</li>
<li><p>@Import，使用@Bean每次都需要创建一个对象，有的时候只需要调用无参构造，此时可以使用@Import来快速导入一个组件</p>
</li>
<li><p>使用Spring提供的FactoryBean（工厂Bean），经常在Spring与其他框架进行整合时使用</p>
</li>
</ol>
<p><strong>作用</strong>：向IoC容器中快速注入组件</p>
<p><strong>注解定义</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span><br><span class="line"></span><br><span class="line">	Class&lt;?&gt;[] value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Import的三种用法</strong>：</p>
<ol>
<li>参数为class数组</li>
<li>参数为ImportSelector</li>
<li>ImportBeanDefinitionRegistrar</li>
</ol>
<h4 id="class数组"><a href="#class数组" class="headerlink" title="class数组"></a>class数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(&#123;</span><br><span class="line">    类名<span class="number">1</span><span class="class">.<span class="keyword">class</span>, </span></span><br><span class="line"><span class="class">    类名2.<span class="title">class</span>, </span></span><br><span class="line"><span class="class">    ...</span></span><br><span class="line"><span class="class">&#125;)</span></span><br></pre></td></tr></table></figure>



<p>这种方式会将class对象所对应类的对象添加到Spring容器当中，bean的名称是其全类名，例如：com.zxw.pojo.Person</p>
<h4 id="ImportSelector"><a href="#ImportSelector" class="headerlink" title="ImportSelector"></a>ImportSelector</h4><p><strong>这种方式需要重点掌握，在Spring Boot底层中大量的使用了！</strong></p>
<p><code>ImportSelector</code>是一个接口，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中selectImports的返回值为String数组，返回的是全类名的字符串数据，这种方式需要实现ImportSelector接口</p>
<p><strong>AnnotationMetadata</strong>表示的是被@Import注解标注的类上的所有注解的信息</p>
<p><strong>注意</strong>：selectImports方法不能返回null，否则会产生空指针异常！</p>
<p><strong>使用示例</strong>：</p>
<p>自定义一个ImportSelector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"com.zxw.pojo.Person"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置类中使用@Import注解给出这个自定义的ImportSelect的Class类对象作为参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;</span><br><span class="line">        MyImportSelector<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printBeanNames(ac);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printBeanNames</span><span class="params">(ApplicationContext ac)</span> </span>&#123;</span><br><span class="line">    String[] names = ac.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现bean的名称中包含了<code>com.zxw.pojo.Person</code></p>
<h4 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h4><p><code>ImportBeanDefinitionRegistrar</code>同样也是一个接口，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个参数<code>AnnotationMetadata</code>和<code>ImportSelector</code>的matches方法的参数相同，表示被@Import注解标注的所有注解信息</li>
<li>第二个参数<code>BeanDefinitionRegistry</code>用于注册定义一个bean</li>
</ul>
<p><strong>使用示例</strong>：</p>
<ol>
<li><p>编写自定义类实现<code>ImportBeanDefinitionRegistrar</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定bean的信息（包括bean的类型、作用域等）</span></span><br><span class="line">        RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//给注册的bean指定名字（id）</span></span><br><span class="line">        registry.registerBeanDefinition(<span class="string">"personXXX"</span>, rootBeanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置类上使用@Import注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;</span><br><span class="line">        MyImportBeanDefinitionRegistrar<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试方法进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printBeanNames(ac);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printBeanNames</span><span class="params">(ApplicationContext ac)</span> </span>&#123;</span><br><span class="line">    String[] names = ac.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200811214648060.png" align="left"/>





</li>
</ol>
<h4 id="Import注解的三种使用方式总结"><a href="#Import注解的三种使用方式总结" class="headerlink" title="@Import注解的三种使用方式总结"></a>@Import注解的三种使用方式总结</h4><ul>
<li>class数组的方式，容器会自动注册这个组件，id默认为全类名</li>
<li>ImportSelector的方式，需要返回导入组件的全类名的字符串数组，id也是全类名，spring boot底层使用十分频繁（<strong>重点</strong>）</li>
<li>ImportBeanDefinitionRegistrar的方式，手动注册到bean，可以自定义bean的名称（id）</li>
</ul>
<p><strong>注意</strong>：这三种方式可以在同一个@Import注解中使用！</p>
<h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p><strong>FactoryBean</strong>是一个接口，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>getObject()</code>：返回一个T类型的对象，FactoryBean会将这个对象注入到IoC容器中</li>
<li><code>getObjectType()</code>：返回这个对象的类型</li>
<li><code>isSingleton()</code>：返回是否为单例</li>
</ul>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置类中使用@Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PersonFactoryBean <span class="title">personBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonFactoryBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object personBean = ac.getBean(<span class="string">"personBean"</span>);</span><br><span class="line">    System.out.println(personBean.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200812083805117.png" align="left"/>



<p>那么如何注入PersonFactoryBean类型的对象？</p>
<p>只需要在获取这个bean时添加一个前缀<code>&amp;</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object personBean = ac.getBean(<span class="string">"&amp;personBean"</span>);</span><br><span class="line">    System.out.println(personBean.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200812084125767.png" align="left"/>



<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="Bean的初始化与销毁"><a href="#Bean的初始化与销毁" class="headerlink" title="Bean的初始化与销毁"></a>Bean的初始化与销毁</h3><p><strong>初始化</strong>：对象创建完成并且调用赋值完毕时，调用初始化方法</p>
<p><strong>销毁</strong>：</p>
<ul>
<li>单实例：容器关闭时（默认）如果设置了懒加载则和多实例的销毁相同</li>
<li>多实例：容器不会管理这个Bean，容器不会调用销毁方法</li>
</ul>
<h4 id="Bean标签"><a href="#Bean标签" class="headerlink" title="Bean标签"></a>Bean标签</h4><p>在bean标签中指定<code>init-method</code>和<code>destroy-method</code>属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.zxw.pojo.Person"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Bean注解"><a href="#Bean注解" class="headerlink" title="@Bean注解"></a>@Bean注解</h4><p>使用@Bean注解的<code>initMethod</code>和<code>destroyMethod</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(</span><br><span class="line">        name = <span class="string">"animal"</span>,</span><br><span class="line">        initMethod = <span class="string">"init"</span>,</span><br><span class="line">        destroyMethod = <span class="string">"destroy"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Animal <span class="title">animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="让Bean实现InitializingBean和DisposableBean接口"><a href="#让Bean实现InitializingBean和DisposableBean接口" class="headerlink" title="让Bean实现InitializingBean和DisposableBean接口"></a>让Bean实现InitializingBean和DisposableBean接口</h4><p> InitializingBean接口可以实现Bean的初始化，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DisposableBean接口可以实现Bean的销毁，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>使用示例</strong></p>
<p><code>Cat</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cat destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cat initialize...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cat <span class="title">cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试方法</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConfigurableApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfLifeCycle<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-PostConstruct和-PreDestroy"><a href="#使用-PostConstruct和-PreDestroy" class="headerlink" title="使用@PostConstruct和@PreDestroy"></a>使用@PostConstruct和@PreDestroy</h4><p>@PostConstruct：在bean创建完成并且属性赋值完成之后，进行初始化</p>
<p>@PreDestroy：当bean从容器中移除之前，执行销毁方法</p>
<p>示例代码：</p>
<p><code>Car</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car constructor..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConfigurableApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfLifeCycle<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p><code>BeanPostProcessor</code>是一个接口，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>postProcessBeforeInitialization</code>：在初始化之前调用</li>
<li><code>postProcessAfterInitialization</code>：在初始化之后调用</li>
</ul>
<p><strong>使用示例</strong>：</p>
<p>自定义一个后置处理器并添加到Spring容器中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postProcessBeforeInitialization..."</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postProcessAfterInitialization..."</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个后置处理器会对容器中所有符合条件的bean执行初始化前和初始化后的处理</p>
<p>执行顺序：</p>
<p>构造方法&rightarrow;初始化前&rightarrow;初始化&rightarrow;初始化后</p>
<p>==BeanPostProcessor原理==</p>
<p>BeanPostProcessor是如何实现在初始化方法前后调用这两个方法的？</p>
<p>可以通过IDEA的debug功能来探究，在<code>postProcessBeforeInitialization</code>和<code>postProcessAfterInitialization</code>方法处打上断点，然后以debug模式执行测试类中的测试方法：</p>
<p>在<code>doCreateBean</code>方法中有这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Bean填充属性</span></span><br><span class="line">populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br></pre></td></tr></table></figure>



<p>最终我们在<code>initializeBean</code>方法中发现了这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    <span class="comment">//执行BeanPostProcessor的postProcessBeforeInitialization方法</span></span><br><span class="line">    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//执行初始化方法</span></span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">            beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    <span class="comment">//执行BeanPostProcessor的postProcessAfterInitialization方法</span></span><br><span class="line">    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>==BeanPostProcessor在Spring底层的使用==</p>
<p>&emsp;&emsp;<code>BeanPostProcessor</code>接口有很多实现类，在Spring中起到了很重要的作用，下面以其中的一个实现类<code>ApplicationContextAwareProcessor</code>为例进行说明：</p>
<p>&emsp;&emsp;<code>ApplicationContextAwareProcessor</code>实现了<code>BeanPostProcessor</code>接口，其<code>postProcessBeforeInitialization</code>方法如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    AccessControlContext acc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            (bean <span class="keyword">instanceof</span> EnvironmentAware || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware ||</span><br><span class="line">                    bean <span class="keyword">instanceof</span> ResourceLoaderAware || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware ||</span><br><span class="line">                    bean <span class="keyword">instanceof</span> MessageSourceAware || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123;</span><br><span class="line">        acc = <span class="keyword">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (acc != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            invokeAwareInterfaces(bean);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, acc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        invokeAwareInterfaces(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法中又调用了<code>invokeAwareInterfaces</code>方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareInterfaces</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</span><br><span class="line">            ((EnvironmentAware) bean).setEnvironment(<span class="keyword">this</span>.applicationContext.getEnvironment());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class="line">            ((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(<span class="keyword">this</span>.embeddedValueResolver);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class="line">            ((ResourceLoaderAware) bean).setResourceLoader(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class="line">            ((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</span><br><span class="line">            ((MessageSourceAware) bean).setMessageSource(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span><br><span class="line">            ((ApplicationContextAware) bean).setApplicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，会一次按照：</p>
<ul>
<li><code>EnvironmentAware</code></li>
<li><code>EmbeddedValueResolverAware</code></li>
<li><code>ResourceLoaderAware</code></li>
<li><code>ApplicationEventPublisherAware</code></li>
<li><code>MessageSourceAware</code></li>
<li><code>ApplicationContextAware</code></li>
</ul>
<p>来执行接口中对应的方法，然后在看<code>ApplicationContextAwareProcessor</code>在何时被调用：</p>
<p>在<code>AbstractApplicationContext</code>的<code>prepareBeanFactory</code>方法中有如下的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>

<p>前面我们分析过，实现了<code>BeanPostProcessor</code>接口的类会在Bean的初始化前后调用其中对应的方法，所以<code>ApplicationContextAwareProcessor</code>中的<code>postProcessBeforeInitialization</code>方法会在bean调用其初始化方法前执行，所以，</p>
<ul>
<li><code>EnvironmentAware</code></li>
<li><code>EmbeddedValueResolverAware</code></li>
<li><code>ResourceLoaderAware</code></li>
<li><code>ApplicationEventPublisherAware</code></li>
<li><code>MessageSourceAware</code></li>
<li><code>ApplicationContextAware</code></li>
</ul>
<p>实现了上述接口的Bean在Bean被初始化前会调用这些接口的方法！</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>IoC容器</tag>
        <tag>注入组件</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解驱动-声明式事务</title>
    <url>/2020/08/24/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Spring注解驱动-声明式事务"><a href="#Spring注解驱动-声明式事务" class="headerlink" title="Spring注解驱动-声明式事务"></a>Spring注解驱动-声明式事务</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>1、导入相关依赖</strong></p>
<p>数据源、数据库驱动、spring-jdbc模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql connector--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-jdbc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、配置数据源、JdbcTemplate（Spring提供简化数据库操作的工具）操作数据</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;</span><br><span class="line">        <span class="string">"com.zxw.dao"</span>,</span><br><span class="line">        <span class="string">"com.zxw.service"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Spring对Configuration类有特殊处理</span></span><br><span class="line">        <span class="comment">//给容器中加入组件的方法，多次调用只是从容器中查找组件，不会多次创建组件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、创建数据库表、UserDao、UserService</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建数据库表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_user(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line">	username <span class="built_in">VARCHAR</span>(<span class="number">50</span>), </span><br><span class="line">	age <span class="built_in">INT</span>(<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>UserDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"INSERT INTO tab_user(username, age) VALUES(?, ?)"</span>;</span><br><span class="line">        String username = UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        jdbcTemplate.update(sql, username, <span class="number">19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">        System.out.println(<span class="string">"插入完成..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、编写测试类进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(TxConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        UserService userService = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.insertUser();</span><br><span class="line"></span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>由于没有加入事务控制，所以即使发生了异常，插入操作仍然会成功</p>
<p><strong>5、给方法上标注@Transaction表示当前方法是一个事务方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">        System.out.println(<span class="string">"插入完成..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仅仅加上@Transactional注解仍然会插入成功！</p>
<p><strong>6、@EnableTransactionManagement开启基于注解的事务管理功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;</span><br><span class="line">        <span class="string">"com.zxw.dao"</span>,</span><br><span class="line">        <span class="string">"com.zxw.service"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>7、配置事务管理器来控制事务</strong></p>
<p>在配置类中添加方法注入事务管理器组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加事务管理器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">txManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时即使发生了异常，由于事务管理器的存在，也会进行回滚，也就不会插入数据</p>
<h2 id="声明式事务-源码分析"><a href="#声明式事务-源码分析" class="headerlink" title="声明式事务-源码分析"></a>声明式事务-源码分析</h2><p>@EnableTransactionManagement注解是开启事务管理的关键，所以下面将从@EnableTransactionManagement开始分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(TransactionManagementConfigurationSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableTransactionManagement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">AdviceMode <span class="title">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">()</span> <span class="keyword">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableTransactionManagement</code>注解中使用了<code>@Import</code>引入组件，而<code>TransactionManagementConfigurationSelector</code>是实现了<code>ImportSelector</code>接口，而<code>@Import</code>接口会将<code>ImportSelector</code>接口实现类的<code>selectImports</code>方法返回的String数组类型（全类名数组）加载到容器中</p>
<h3 id="TransactionManagementConfiugraitonSelector的selectImports方法"><a href="#TransactionManagementConfiugraitonSelector的selectImports方法" class="headerlink" title="TransactionManagementConfiugraitonSelector的selectImports方法"></a><code>TransactionManagementConfiugraitonSelector</code>的<code>selectImports</code>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">    <span class="comment">//AdviceMode是一个枚举类型</span></span><br><span class="line">    <span class="comment">//有两个值：PROXY和ASPECTJ</span></span><br><span class="line">    <span class="keyword">switch</span> (adviceMode) &#123;</span><br><span class="line">        <span class="comment">//@EnableTransactionManagement注解中的AdviceModel类型的属性mode的默认值就是PROXY</span></span><br><span class="line">        <span class="keyword">case</span> PROXY:</span><br><span class="line">            <span class="comment">//如果mode为PROXY，则会将AutoProxyRegistrar和ProxyTransactionManagementConfiguration返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;AutoProxyRegistrar<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(),</span></span><br><span class="line"><span class="class">                                 <span class="title">ProxyTransactionManagementConfiguration</span>.<span class="title">class</span>.<span class="title">getName</span>()&#125;</span>;</span><br><span class="line">        <span class="keyword">case</span> ASPECTJ:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;determineTransactionAspectClass()&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由这个<code>selectImports</code>方法可知，在默认情况下会将</p>
<ul>
<li><code>AutoProxyRegistrar</code></li>
<li><code>ProxyTransactionManagementConfiguration</code></li>
</ul>
<p>加载到组件当中</p>
<h3 id="AutoProxyRegistrar"><a href="#AutoProxyRegistrar" class="headerlink" title="AutoProxyRegistrar"></a>AutoProxyRegistrar</h3><p><code>AutoProxyRegistrar</code>类实现了<code>ImportBeanDefinitionRegistrar</code>接口，而<code>ImportBeanDefinitionRegistrar</code>主要通过<code>registerBeanDefinitions</code>方法来导入组件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> candidateFound = <span class="keyword">false</span>;</span><br><span class="line">    Set&lt;String&gt; annTypes = importingClassMetadata.getAnnotationTypes();</span><br><span class="line">    <span class="keyword">for</span> (String annType : annTypes) &#123;</span><br><span class="line">        AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annType);</span><br><span class="line">        <span class="keyword">if</span> (candidate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取@EnableTransactionManagement的mode属性的值</span></span><br><span class="line">        Object mode = candidate.get(<span class="string">"mode"</span>);</span><br><span class="line">        <span class="comment">//获取@EnableTransactionManagement的proxyTargetClass属性</span></span><br><span class="line">        Object proxyTargetClass = candidate.get(<span class="string">"proxyTargetClass"</span>);</span><br><span class="line">        <span class="keyword">if</span> (mode != <span class="keyword">null</span> &amp;&amp; proxyTargetClass != <span class="keyword">null</span> &amp;&amp; AdviceMode<span class="class">.<span class="keyword">class</span> </span>== mode.getClass() &amp;&amp;</span><br><span class="line">            Boolean<span class="class">.<span class="keyword">class</span> </span>== proxyTargetClass.getClass()) &#123;</span><br><span class="line">            candidateFound = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (mode == AdviceMode.PROXY) &#123;</span><br><span class="line">                <span class="comment">//在mode为PROXY时，注册registerAutoProxyCreator</span></span><br><span class="line">                AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">                <span class="keyword">if</span> ((Boolean) proxyTargetClass) &#123;</span><br><span class="line">                    <span class="comment">//proxyTargetClass为true时，强制使用类自动代理</span></span><br><span class="line">                    AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!candidateFound &amp;&amp; logger.isInfoEnabled()) &#123;</span><br><span class="line">        String name = getClass().getSimpleName();</span><br><span class="line">        logger.info(String.format(<span class="string">"%s was imported but no annotations were found "</span> +</span><br><span class="line">                                  <span class="string">"having both 'mode' and 'proxyTargetClass' attributes of type "</span> +</span><br><span class="line">                                  <span class="string">"AdviceMode and boolean respectively. This means that auto proxy "</span> +</span><br><span class="line">                                  <span class="string">"creator registration and configuration may not have occurred as "</span> +</span><br><span class="line">                                  <span class="string">"intended, and components may not be proxied as expected. Check to "</span> +</span><br><span class="line">                                  <span class="string">"ensure that %s has been @Import'ed on the same class where these "</span> +</span><br><span class="line">                                  <span class="string">"annotations are declared; otherwise remove the import of %s "</span> +</span><br><span class="line">                                  <span class="string">"altogether."</span>, name, name, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>mode</code>属性的默认值为<code>PROXY</code>，<code>proxyTargetClass</code>属性默认值为false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br></pre></td></tr></table></figure>

<p>&downarrow;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerAutoProxyCreatorIfNecessary</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> registerAutoProxyCreatorIfNecessary(registry, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&downarrow;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerAutoProxyCreatorIfNecessary</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    BeanDefinitionRegistry registry, @Nullable Object source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> registerOrEscalateApcAsRequired(InfrastructureAdvisorAutoProxyCreator<span class="class">.<span class="keyword">class</span>, <span class="title">registry</span>, <span class="title">source</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以说这个方法最终会注册一个<code>InfrastructureAdvisorAutoProxyCreator</code>这个组件，这个组件的名称很是熟悉，之前在介绍AOP自动代理时曾经介绍过<code>AnnotationAwareAspectJAutoProxyCreator</code>，而这里的<code>InfrastructureAdvisorAutoProxyCreator</code>和其功能几乎相同，同样实现了BeanPostProcessor和Aware接口，这里不再赘述。</p>
<h3 id="ProxyTransactionManagementConfiguration"><a href="#ProxyTransactionManagementConfiguration" class="headerlink" title="ProxyTransactionManagementConfiguration"></a>ProxyTransactionManagementConfiguration</h3><p><code>ProxyTransactionManagementConfiguration</code>类是一个配置类（被@Configuration注解标注）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTransactionManagementConfiguration</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionManagementConfiguration</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ProxyTransactionManagementConfiguration</code>中主要使用@Bean注解为容器中注入了三个组件：</p>
<p><strong>第一个组件：事务增强器</strong></p>
<p>组件的名称为：<code>org.springframework.transaction.config.internalTransactionAdvisor</code>，也就是<code>TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME</code>的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)</span><br><span class="line"><span class="meta">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanFactoryTransactionAttributeSourceAdvisor <span class="title">transactionAdvisor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BeanFactoryTransactionAttributeSourceAdvisor advisor = <span class="keyword">new</span> BeanFactoryTransactionAttributeSourceAdvisor();</span><br><span class="line">    <span class="comment">//这个增强器需要设置事务属性源（获取事务的注解信息）</span></span><br><span class="line">    advisor.setTransactionAttributeSource(transactionAttributeSource);</span><br><span class="line">    <span class="comment">//还要设置事务拦截器</span></span><br><span class="line">    advisor.setAdvice(transactionInterceptor);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.enableTx != <span class="keyword">null</span>) &#123;</span><br><span class="line">        advisor.setOrder(<span class="keyword">this</span>.enableTx.&lt;Integer&gt;getNumber(<span class="string">"order"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> advisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二个组件：事务属性源</strong></p>
<p>第一个组件中用到了事务属性信息，这里使用@Bean来添加这个组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionAttributeSource <span class="title">transactionAttributeSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AnnotationTransactionAttributeSource();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看这个<code>AnnotationTransactionAttributeSource</code>类的构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationTransactionAttributeSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&downarrow;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationTransactionAttributeSource</span><span class="params">(<span class="keyword">boolean</span> publicMethodsOnly)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.publicMethodsOnly = publicMethodsOnly;</span><br><span class="line">    <span class="keyword">if</span> (jta12Present || ejb3Present) &#123;</span><br><span class="line">        <span class="keyword">this</span>.annotationParsers = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//Spring事务注解解析器</span></span><br><span class="line">        <span class="keyword">this</span>.annotationParsers.add(<span class="keyword">new</span> SpringTransactionAnnotationParser());</span><br><span class="line">        <span class="keyword">if</span> (jta12Present) &#123;</span><br><span class="line">            <span class="comment">//Jta事务注解解析器</span></span><br><span class="line">            <span class="keyword">this</span>.annotationParsers.add(<span class="keyword">new</span> JtaTransactionAnnotationParser());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ejb3Present) &#123;</span><br><span class="line">            <span class="comment">//ejb事务注解解析器</span></span><br><span class="line">            <span class="keyword">this</span>.annotationParsers.add(<span class="keyword">new</span> Ejb3TransactionAnnotationParser());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果publicMethodsOnly属性为false，则值加载Spring事务注解解析器</span></span><br><span class="line">        <span class="keyword">this</span>.annotationParsers = Collections.singleton(<span class="keyword">new</span> SpringTransactionAnnotationParser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三个组件：事务拦截器</strong></p>
<p>前面也介绍过拦截器的作用，在处理增强器时会将其转换为MethodInterceptor然后通过拦截器链来实现方法的增强。毫无疑问，事务的处理也是通过这个拦截器来实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">transactionInterceptor</span><span class="params">(TransactionAttributeSource transactionAttributeSource)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个事务拦截器</span></span><br><span class="line">    TransactionInterceptor interceptor = <span class="keyword">new</span> TransactionInterceptor();</span><br><span class="line">    <span class="comment">//设置事务属性源</span></span><br><span class="line">    interceptor.setTransactionAttributeSource(transactionAttributeSource);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.txManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果事务管理器不为空，则设置事务管理器，也就是在主配置类中注入的事务管理器</span></span><br><span class="line">        interceptor.setTransactionManager(<span class="keyword">this</span>.txManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么这个<code>TransactionInterceptor</code>又做了什么了？</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200826092539545.png" align="left"/>

<p>上面是<code>TransactionInterceptor</code>的继承关系图</p>
<p><code>TransactionInterceptor</code>实现了<code>MethodInterceptor</code>接口，之前说到过<code>MethodInterceptor</code>在AOP中的作用，其中最重要的方法就是<code>invoke</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">//获取目标类</span></span><br><span class="line">    Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用父类的invokeWithinTransaction方法</span></span><br><span class="line">    <span class="keyword">return</span> invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TransactionInterceptor做了什么</strong></p>
<ol>
<li>获取事务相关的属性</li>
<li>获取<code>PlatformTransactionManager</code>，如果没有指定任何的事务管理器，则会从容器中获取一个类型为<code>PlatformTransactionManagement</code>类型的事务管理器</li>
<li>执行目标方法<ul>
<li>如果发生了异常，则利用事务管理器进行回滚</li>
<li>如果正常，则利用事务管理器提交事务</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring注解驱动</tag>
        <tag>声明式事务注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解驱动-扩展原理</title>
    <url>/2020/08/26/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8-%E6%89%A9%E5%B1%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Spring注解驱动-扩展原理"><a href="#Spring注解驱动-扩展原理" class="headerlink" title="Spring注解驱动-扩展原理"></a>Spring注解驱动-扩展原理</h1><h2 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h2><p><strong>BeanPostProcessor</strong>：bean的后置处理器，在bean调用初始化方法前后进行拦截工作的</p>
<p><strong>BeanFactoryPostProcessor</strong>：BeanFactory的后置处理器，在BeanFactory标准初始化之后调用（<strong>也就是所有的bean定义都已经保存加载到BeanFactory中，但是Bean的实例还没有创建</strong>）</p>
<h3 id="BeanFactoryPostProcessor使用示例"><a href="#BeanFactoryPostProcessor使用示例" class="headerlink" title="BeanFactoryPostProcessor使用示例"></a>BeanFactoryPostProcessor使用示例</h3><p><strong>1、创建一个类实现<code>BeanFactoryPostProcessor</code>接口</strong></p>
<p><code>MyBeanFactoryPostProcessor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyBeanFactoryPostProcessor#postProcessBeanFactory"</span>);</span><br><span class="line">        <span class="comment">//count为容器中定义bean定义的数量</span></span><br><span class="line">        <span class="keyword">int</span> count = beanFactory.getBeanDefinitionCount();</span><br><span class="line">        System.out.println(<span class="string">"Bean的数量为:"</span> + count);</span><br><span class="line">        <span class="comment">//names为容器中定义bean的名称</span></span><br><span class="line">        String[] names = beanFactory.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、编写一个实体类</strong></p>
<p><code>Animal.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Animal construct..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、编写一个主配置类</strong></p>
<p><code>ExternalConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanFactoryPostProcessor <span class="title">myBeanFactoryPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBeanFactoryPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、编写测试类进行测试</strong></p>
<p><code>ExternalTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(ExternalConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果如下</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200826213619535.png" align="left"/>



<h3 id="BeanFactoryPostProcessor执行原理"><a href="#BeanFactoryPostProcessor执行原理" class="headerlink" title="BeanFactoryPostProcessor执行原理"></a>BeanFactoryPostProcessor执行原理</h3><ol>
<li>调用<code>AnnotationConfigApplicationContext</code>的构造方法创建容器</li>
<li>构造方法中调用了<code>refresh</code>方法</li>
<li><code>refresh</code>方法中调用了<code>invokeBeanFactoryPostProcessors(beanFactory)</code>方法来执行<code>BeanFactoryPostProcessor</code></li>
</ol>
<p><strong>BeanFactoryPostProcessor</strong>的查找和执行流程：</p>
<p><strong>1、首先从BeanFactory中获取所有<code>BeanFactoryPostProcessor</code>类型的Bean的名称</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] postProcessorNames =</span><br><span class="line">				beanFactory.getBeanNamesForType(BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>2、对<code>BeanFactoryPostProcessor</code>进行分类</strong></p>
<p>按照：</p>
<ul>
<li>实现了<code>PriorityOrdered</code>接口<code>BeanFactoryPostProcessor</code></li>
<li>实现了<code>Ordered</code>接口的<code>BeanFactoryPostProcessor</code></li>
<li>没有实现这两个接口的的普通<code>BeanFactoryPostProcessor</code></li>
</ul>
<p>进行分类</p>
<p><strong>3、调用<code>invokeBeanFactoryPostProcessors</code>方法执行这些<code>BeanFactoryPostProcessor</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Collection&lt;? extends BeanFactoryPostProcessor&gt; postProcessors, ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//遍历执行每个BeanFactoryPostProcessor的postProcessBeanFactory对象</span></span><br><span class="line">    <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : postProcessors) &#123;</span><br><span class="line">        postProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>为什么<code>BeanFactoryPostProcessor</code>会在Bean的构造方法执行之前执行？</strong></p>
<p>从源码的<code>refresh()</code>方法中可以看出来：<code>invokeBeanFactoryPostProcessors</code>方法在<code>finishBeanFactoryInitialization</code>方法之前执行！</p>
<h2 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>BeanDefinitionRegistryPostProcessor</code>继承了<code>BeanFactoryPostProcessor</code>接口，添加了一个<code>postProcessBeanDefinitionRegistry</code>方法</p>
<p><strong><code>postProcessBeanDefinitonRegistry</code>方法的执行时机</strong></p>
<p>在所有Bean信息将要被记载到BeanFactory，但是Bean实例还未创建的时候调用</p>
<p>所以这个方法会在<code>BeanFactoryPostProcessor</code>的<code>postProcessBeanFactory</code>方法执行之前调用！</p>
<h3 id="BeanDefinitionRegistryPostProcessor使用示例"><a href="#BeanDefinitionRegistryPostProcessor使用示例" class="headerlink" title="BeanDefinitionRegistryPostProcessor使用示例"></a>BeanDefinitionRegistryPostProcessor使用示例</h3><p><strong>1、自定义类实现<code>BeanDefinitionRegistryPostProcessor</code>接口</strong></p>
<p>在<a href="#BeanFactoryPostProcessor使用示例">BeanFactoryPostProcessor使用示例</a>的基础上添加一个实现了<code>BeanDefinitionRegistryPostProcessor</code>接口的类</p>
<p><code>MyBeanDefinitionRegistryPostProcessor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = registry.getBeanDefinitionCount();</span><br><span class="line">        System.out.println(<span class="string">"容器中Bean的数量:"</span> + count);</span><br><span class="line">        <span class="comment">//给容器中添加一个Bean定义，然后注册到Bean的注册中心中</span></span><br><span class="line">        <span class="comment">//也可以这样创建Bean定义</span></span><br><span class="line">        <span class="comment">// AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(Animal.class).getBeanDefinition();</span></span><br><span class="line">        RootBeanDefinition animalDefinition = <span class="keyword">new</span> RootBeanDefinition(Animal<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">"animal"</span>, animalDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">//输出容器中定义bean的数量</span></span><br><span class="line">        <span class="keyword">int</span> count = beanFactory.getBeanDefinitionCount();</span><br><span class="line">        System.out.println(<span class="string">"容器中Bean的数量:"</span> + count);</span><br><span class="line">        <span class="comment">//从容器中获取所有的bean的名称然后输出</span></span><br><span class="line">        String[] names = beanFactory.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、修改配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanDefinitionRegistryPostProcessor <span class="title">myBeanDefinitionRegistryPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBeanDefinitionRegistryPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、运行测试方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionRegistryPostProcessor <span class="title">myBeanDefinitionRegistryPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyBeanDefinitionRegistryPostProcessor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200827102032064.png" align="left"/>



<h3 id="BeanDefinitionRegistryPostProcessor执行原理"><a href="#BeanDefinitionRegistryPostProcessor执行原理" class="headerlink" title="BeanDefinitionRegistryPostProcessor执行原理"></a>BeanDefinitionRegistryPostProcessor执行原理</h3><p><code>BeanDefinitionRegistryPostProcessor</code>是<code>BeanFactoryPostProcessor</code>接口的子接口，所以毫无疑问，<code>BeanDefinitionRegistryPostProcessor</code>肯定是在<code>BeanFactoryPostProcessor</code>的执行流程中执行</p>
<p>在调用<code>invokeBeanFactoryPostProcessors</code>方法执行每个<code>BeanFactoryPostProcessor</code>中的<code>postProcessBeanFactory</code>方法之前，会调用<code>invokeBeanDefinitionRegistryPostProcessors</code>方法来执行每个<code>BeanDefinitionRegistryPostProcessor</code>的<code>postProcessBeanDefinitionRegistry</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanDefinitionRegistryPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Collection&lt;? extends BeanDefinitionRegistryPostProcessor&gt; postProcessors, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionRegistryPostProcessor postProcessor : postProcessors) &#123;</span><br><span class="line">        postProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这也解释了为什么<code>postProcessBeanDefinitionRegistry</code>方法会在<code>postProcessBeanFactory</code>之前执行：</p>
<p>因为<code>invokeBeanDefinitionRegistryPostProcessors</code>方法会在<code>invokeBeanFactoryPostProcessors</code>方法之前调用</p>
<h2 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h2><h3 id="ApplicationListener用法"><a href="#ApplicationListener用法" class="headerlink" title="ApplicationListener用法"></a>ApplicationListener用法</h3><p><strong>作用</strong>：监听容器中发布的事件，完成容器的驱动开发</p>
<p><strong>ApplicationListener接口的定义如下</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Handle an application event.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> event the event to respond to</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E event)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们要编写一个监听器就要实现<code>ApplicationListener</code>接口，并且要传入一个继承了<code>ApplicationEvent</code>接口的泛型E，所以所监听的事件必须<code>ApplicationEvent</code>及其子类对象</p>
<p><code>MyApplicationListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当容器中发布此事件以后，该方法触发</span></span><br><span class="line">    <span class="comment">//这里只要容器中发布了ApplicationEvent类型及其子类型的事件就会触发这个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到的事件:"</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(ExternalConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200827224246847.png" align="left"/>

<p>容器中发布了两个<code>ApplicationEvent</code>类型的事件：</p>
<ul>
<li><code>ContextRefreshedEvent</code>：事件在<code>ApplicationContext</code>被初始化或者刷新时触发</li>
<li><code>ContextClosedEvent</code>：事件在<code>ApplicationContext</code>被关闭时触发</li>
</ul>
<p><strong>自定义事件步骤</strong></p>
<ol>
<li><p>写一个监听器来监听某个事件（ApplicationEvent及其子类）</p>
</li>
<li><p>把容器加入到容器中</p>
</li>
<li><p>只要容器中有相关事件的发布，我们就能够监听到这个事件，并调用监听器中的方法</p>
</li>
<li><p>如何发布事件，使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(ExternalConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//发布一个事件</span></span><br><span class="line">    ac.publishEvent(<span class="keyword">new</span> ApplicationEvent(<span class="keyword">new</span> String(<span class="string">"我发布了一个事件"</span>)) &#123;&#125;);</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200827225346578.png" align="left"/>



</li>
</ol>
<h3 id="ApplicationListener原理"><a href="#ApplicationListener原理" class="headerlink" title="ApplicationListener原理"></a>ApplicationListener原理</h3><p><strong>ContextRefreshedEvent事件</strong>：</p>
<ol>
<li><p>容器对象创建，构造方法中调用<code>refresh</code>方法</p>
</li>
<li><p>在<code>refresh</code>方法的最后调用了<code>finishRefresh</code>方法来完成容器的刷新</p>
</li>
<li><p><code>finishRefresh</code>方法中调用了<code>publishEvent(new ContextRefreshedEvent(this));</code></p>
<p><strong>事件的发布流程</strong>：</p>
<p>1）获取事件的派发器（多播器）：<code>getApplicationEventMulticaster()</code></p>
<p>2）调用<code>multicastEvent</code>方法来派发事件：</p>
<ul>
<li><p>获取到所有的<code>ApplicationListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getApplicationListeners(event, type);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>Executor executor = getTaskExecutor();</code>来获取<code>Executor</code></p>
<ul>
<li>如果<code>executor</code>存在，则使用<code>executor</code>来异步执行所有监听器</li>
<li>如果<code>executor</code>不存在（为null），则同步执行所有监听器</li>
</ul>
</li>
</ul>
<p>3）无论是同步还是异步都会调用<code>invokeListener</code>方法来执行监听器，<code>invokeListener</code>做了如下的事情：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeListener</span><span class="params">(ApplicationListener&lt;?&gt; listener, ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取一个异常处理器</span></span><br><span class="line">    ErrorHandler errorHandler = getErrorHandler();</span><br><span class="line">    <span class="comment">//如果异常处理器不为空则使用异常处理器来处理异常</span></span><br><span class="line">    <span class="keyword">if</span> (errorHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doInvokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            errorHandler.handleError(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有异常处理器，则调用doInvokeListener方法来执行异常处理器</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        doInvokeListener(listener, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>doInvokeListener</code>方法中回调了<code>listener</code>的<code>onApplicationEvent</code>方法</p>
</li>
</ol>
<p>其他两个事件监听器的执行也是调用了<code>publishEvent</code>方法来实现的！</p>
<p><strong>事件多播器（派发器）是如何获取的？</strong></p>
<p>1）容器创建，调用<code>refresh</code>方法</p>
<p>2）<code>refresh</code>方法中调用了<code>initApplicationEventMulticaster()</code>方法来初始化事件多播器</p>
<ul>
<li>先去容器中查找有没有id为<code>applicationEventMulticaster</code>的组件</li>
<li>如果没有就使用<code>new SimpleApplicationEventMulticaster(beanFactory)</code>创建一个事件多播器，并且加入到容器中。这样我们就可以在其他组件派发事件时，自动注入这个<code>applicationEventMulticaster</code></li>
</ul>
<p><strong>容器中有哪些监听器？</strong></p>
<p>1）容器创建，调用<code>refresh</code>方法</p>
<p>2）<code>refresh</code>方法中调用了<code>registerListeners()</code>方法</p>
<ul>
<li><p>从容器中拿到所有的监听器，把它们注册到事件派发器<code>applicationEventMulticaster</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] listenerBeanNames = getBeanNamesForType(ApplicationListener<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">    getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h2 id="EventListener"><a href="#EventListener" class="headerlink" title="@EventListener"></a>@EventListener</h2><p>除了实现<code>ApplicationListener</code>接口的方式来实现对特定事件的监听以外，还可以使用<code>@EventListener</code>注解来指定一个用于监听特定事件的方法</p>
<h3 id="EventListener使用示例"><a href="#EventListener使用示例" class="headerlink" title="@EventListener使用示例"></a>@EventListener使用示例</h3><p><code>AccountService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span>(&#123;</span><br><span class="line">            ApplicationEvent<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    &#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">listen</span>(<span class="title">ApplicationEvent</span> <span class="title">event</span>) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AccountService监听到事件:"</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果如下：</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200828202123575.png" align="left"/>



<p>毫无疑问，开发中使用这个注解来实现监听器功能更加方便</p>
<h3 id="EventListener原理"><a href="#EventListener原理" class="headerlink" title="@EventListener原理"></a>@EventListener原理</h3><p><code>@EventListener</code>通过<code>EventListenerMethodProcessor</code>这个后置处理器来实现监听功能</p>
<p><code>EventListenerMethodProcessor</code>的继承关系图如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200828202607833.png" align="left"/>

<p>可以看到，<code>EventListenerMethodProcessor</code>实现了<code>SmartInitialLizingSingleton</code>接口</p>
<h3 id="SmartInitializingSingleton原理"><a href="#SmartInitializingSingleton原理" class="headerlink" title="SmartInitializingSingleton原理"></a>SmartInitializingSingleton原理</h3><p>1）容器创建，调用<code>refresh()</code>方法</p>
<p>2）<code>refresh()</code>方法中调用<code>finishBeanFactoryInitialization(beanFactory)</code>来完成剩余的单实例bean的创建</p>
<p>3）<code>finishBeanFactoryInitialization(beanFactory)</code>方法中调用<code>beanFactory.preInstantiateSingletons()</code>方法来完成剩余非懒加载的单实例bean的创建</p>
<p><code>preInstantiateSingletons()</code>方法中：</p>
<ul>
<li>从BeanFactory中获取所有的bean定义的名称，然后根据这些名称调用<code>getBean</code>方法来创建对应的单实例bean</li>
<li>获取所有的单实例bean，使用for循环来对每个bean进行处理：判断bean是否为<code>SmartInitializingSingleton</code>的示例，如果是则调用<code>smartSingleton.afterSingletonsInstantiated()</code>来执行这个接口的<code>afterSingletonsInstantiated</code>方法</li>
</ul>
<h2 id="Spring容器的创建"><a href="#Spring容器的创建" class="headerlink" title="Spring容器的创建"></a>Spring容器的创建</h2><p>Spring容器的创建也就是<code>refresh()</code>方法（Spring的核心方法）</p>
<h3 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh()"></a>prepareRefresh()</h3><p><strong>作用</strong>：刷新前的预处理工作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录启动的时间</span></span><br><span class="line">    <span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 设置ApplicationContext开启</span></span><br><span class="line">    <span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 设置ApplicationContext已激活</span></span><br><span class="line">    <span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志操作</span></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Refreshing "</span> + <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Refreshing "</span> + getDisplayName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initProperySources默认为空实现，可以通过子类来重写这个方法来自定义属性设置方法</span></span><br><span class="line">    initPropertySources();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验属性的合法性</span></span><br><span class="line">    getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果earlyApplicationListeners为空，则使用applicationListeners为其赋值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.earlyApplicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.applicationListeners);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不为空则重置ApplicationListeners到刷新前的状态</span></span><br><span class="line">        <span class="keyword">this</span>.applicationListeners.clear();</span><br><span class="line">        <span class="keyword">this</span>.applicationListeners.addAll(<span class="keyword">this</span>.earlyApplicationListeners);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// earlyApplicationEvents赋予初值</span></span><br><span class="line">    <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory()"></a>obtainFreshBeanFactory()</h3><p><strong>作用</strong>：告知子类刷新内置的bean工厂，并返回这个刷新后的bean工厂</p>
<p><code>obtainFreshBeanFactory()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//刷新BeanFactory</span></span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    <span class="comment">//得到BeanFactory，返回当前的BeanFactory对象</span></span><br><span class="line">    <span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>refreshBeanFactory()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">            <span class="string">"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置用于序列化的id</span></span><br><span class="line">    <span class="keyword">this</span>.beanFactory.setSerializationId(getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>this.beanFactory</code>是在何处初始化的？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用无参构造来赋值</span></span><br><span class="line">    <span class="keyword">this</span>.beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以返回的<code>BeanFactory</code>就是<code>DefaultListableBeanFactory</code>对象</p>
<h3 id="prepareBeanFactory-beanFactory"><a href="#prepareBeanFactory-beanFactory" class="headerlink" title="prepareBeanFactory(beanFactory)"></a>prepareBeanFactory(beanFactory)</h3><p><strong>作用</strong>：BeanFactory的预准备工作（BeanFactory进行一些设置）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置类加载器</span></span><br><span class="line">    beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">    <span class="comment">// 设置bean的表达式解析器</span></span><br><span class="line">    beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">    <span class="comment">//添加一个PropertyEditorRegistrar用于所有bean创建的过程</span></span><br><span class="line">    beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加ApplicationContextAwareProcessor这个后置处理器</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line">    <span class="comment">// 自动装配时忽略指定接口或类的依赖注入</span></span><br><span class="line">    beanFactory.ignoreDependencyInterface(EnvironmentAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ResourceLoaderAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(MessageSourceAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationContextAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册可以解析的自动装配，可以直接在任何组件中自动注入BeanFactory、ResourceLoader、</span></span><br><span class="line">    <span class="comment">// ApplicationEventPublisher、ApplicationContext</span></span><br><span class="line">    beanFactory.registerResolvableDependency(BeanFactory<span class="class">.<span class="keyword">class</span>, <span class="title">beanFactory</span>)</span>;</span><br><span class="line">    beanFactory.registerResolvableDependency(ResourceLoader<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationEventPublisher<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationContext<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加ApplicationListenerDetector这个后置处理器</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加编译时的AspectJ支持</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">        <span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">        beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给BeanFactory中注册一些能用的组件：</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="comment">// ConfigurableEnvironment getEnvironment()</span></span><br><span class="line">        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="comment">// Map&lt;String, Object&gt; getSystemProperties()</span></span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        <span class="comment">// Map&lt;String, Object&gt; getSystemEnvironment()</span></span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="postProcessBeanFactory-beanFactory"><a href="#postProcessBeanFactory-beanFactory" class="headerlink" title="postProcessBeanFactory(beanFactory)"></a>postProcessBeanFactory(beanFactory)</h3><p><strong>作用</strong>：准备工作完成后进行的后置处理工作</p>
<p>这个方法默认为空实现，也就是说<code>AnnotationConfigApplicationContext</code>类中默认没有这个后置处理；子类可以通过重写这个方法来自定义一些准备工作完成后的后置处理工作！</p>
<p><strong><code>prepareRefresh()</code>、<code>obtainFreshBeanFactory()</code>、<code>prepareBeanFactory(beanFactory)</code>、<code>postProcessBeanFactory(beanFactory)</code>就是BeanFactory的创建和预准备工作！</strong></p>
<h3 id="invokeBeanFactoryPostProcessors-beanFactory"><a href="#invokeBeanFactoryPostProcessors-beanFactory" class="headerlink" title="invokeBeanFactoryPostProcessors(beanFactory)"></a>invokeBeanFactoryPostProcessors(beanFactory)</h3><p><strong>作用</strong>：执行<code>BeanFactoryPostProcessor</code></p>
<p><strong>BeanFactoryPostProcessor</strong>：BeanFactory的后置处理器。在BeanFactory的标准初始化后（也就是前面的四个方法执行完成后）调用</p>
<p><strong>两个重要的接口</strong>：<code>BeanFactoryPostProcessor</code>及其子接口<code>BeanDefinitionRegistryPostProcessor</code></p>
<p> 这个方法其实在前面介绍<code>BeanFactoryPostProcessor</code>时已经介绍过了，其处理逻辑如下：</p>
<ul>
<li><p>执行<code>BeanDefinitionRegistryPostProcessor</code>，从容器中获取所有<code>BeanDefinitionRegistryPostProcessor</code>，按照如下的顺序执行</p>
<ul>
<li>实现了<code>PriorityOrdered</code>优先级接口的，按照优先级排序后执行</li>
<li>实现了<code>Ordered</code>顺序接口的，按照顺序排序后执行</li>
<li>没有实现优先级和顺序接口的，最后执行</li>
</ul>
<p><code>BeanDefinitionRegistryPostProcessor</code>的执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invokeBeanDefinitionRegistryPostProcessors(postProcessors, registry)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>执行<code>BeanFactoryPostProcessor</code>，从容器中获取所有<code>BeanFactoryPostProcessor</code>，按照如下的顺序执行</p>
<ul>
<li>实现了<code>PriorityOrdered</code>优先级接口的，按照优先级排序后执行</li>
<li>实现了<code>Ordered</code>顺序接口的，按照顺序排序后执行</li>
<li>没有实现优先级和顺序接口的，最后执行</li>
</ul>
<p><code>BeanFactoryPostProcessor</code>的执行:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invokeBeanFactoryPostProcessors(postProcessors, beanFactory)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="registerBeanPostProcessors-beanFactory"><a href="#registerBeanPostProcessors-beanFactory" class="headerlink" title="registerBeanPostProcessors(beanFactory)"></a>registerBeanPostProcessors(beanFactory)</h3><p><strong>作用</strong>：注册<code>BeanPostProcessor</code>（Bean的后置处理器）</p>
<p><strong>BeanPostProcessor</strong>：拦截Bean的创建过程的，在Bean的初始化方法执行前后调用</p>
<p>几种常用的<code>BeanPostProcessor</code></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200829100607504.png" align="left"/>

<p>不同接口的Bean后置处理器在Bean创建过程中的<strong>执行时机不同</strong></p>
<ul>
<li><code>BeanPostProcessor</code>：在Bean的初始化方法前后执行</li>
<li><code>InstantiationAwareBeanPostProcessor</code>：在Bean的实例化前后调用</li>
<li><code>DestructionAwareBeanPostProcessor</code>：在Bean的销毁方法执行前调用</li>
<li><code>SmartInstantiationAwareBeanPostProcessor</code>：</li>
<li><code>MergedBeanDefinitionPostProcessor</code>：</li>
</ul>
<p><strong>执行逻辑</strong>：</p>
<p>1）从容器中获取所有的<code>BeanPostProcessor</code>的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>2）注册一个<code>BeanPostProcessorChecker</code>（也是一个后置处理器）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br></pre></td></tr></table></figure>

<p>3）按照如下顺序对获取到的后置处理器进行分类</p>
<ul>
<li>实现了<code>PriorityOrdered</code>接口但是不是<code>MergedBeanDefinitionPostProcessor</code>这种后置处理器的</li>
<li>实现了<code>Ordered</code>接口但是不是<code>MergedBeanDefinitionPostProcessor</code>这种后置处理器的</li>
<li>剩余的不是<code>MergedBeanDefinitionPostProcessor</code>这种后置处理器的</li>
<li>所有<code>MergedBeanDefinitionPostProcessor</code>这种后置处理器的</li>
</ul>
<p>4）按照上述的顺序先对集合中的后置处理器进行排序，然后将这些后置处理器注册到容器当中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sortPostProcessors(postProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, postProcessors);</span><br></pre></td></tr></table></figure>

<p>5）添加一个用于检测<code>ApplicationListener</code>的后置处理器<code>ApplicationListenerDetector</code>，将其添加到后置处理器链的末尾（这个后置处理器是用于检测<code>ApplicationListener</code>，实现AOP的功能！）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</span><br></pre></td></tr></table></figure>

<p><strong>注意：注册并不是执行！</strong></p>
<h3 id="initMessageSource"><a href="#initMessageSource" class="headerlink" title="initMessageSource()"></a>initMessageSource()</h3><p><strong>作用</strong>：初始化<code>MessageSource</code>组件（用于国际化功能、消息绑定、消息解析）</p>
<p><strong>执行逻辑</strong>：</p>
<p>1）获取BeanFactory（容器)</p>
<p>2）如果容器中包含id为messageSource的<code>MessageSource</code>类型的对象</p>
<ul>
<li>如果有则赋值给<code>messageSource</code>属性</li>
<li>如果没有则创建一个<code>DelegatingMessageSource</code>赋值给<code>messageSource</code>属性</li>
</ul>
<p><code>MessageSource</code>：能按照区域信息取出国际化配置文件中的某个key值</p>
<p>3）把创建好的MessageSource注册在容器中，以后获取国际化配置文件的时候可以自动注入MessageSource，然后调用<code>getMessage</code>方法来实现国际化</p>
<h3 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster()"></a><code>initApplicationEventMulticaster()</code></h3><p><strong>作用</strong>：初始化事件派发器</p>
<p><strong>执行逻辑</strong>：</p>
<p>1）获取<code>BeanFactory</code></p>
<p>2）从<code>BeanFactory</code>中获取id为<code>applicationEventMulticaster</code>，类型为<code>ApplicationEventMulticaster</code>的Bean对象</p>
<p>3）如果上一步中没有获取到，则使用<code>new SimpleApplicationEventMulticaster(beanFactory)</code>来创建一个，然后赋予给<code>applicationEventMulticaster</code>属性</p>
<p>4）将创建的bean对象注册到<code>BeanFactory</code>中，以便其他组件自动注入</p>
<h3 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh()"></a>onRefresh()</h3><p><strong>作用</strong>：这个方法也是一个空实现，提供给子类（子容器）来实现，用于自定义剩余bean的初始化</p>
<h3 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners()"></a>registerListeners()</h3><p><strong>作用</strong>：向容器中注册项目中所有的监听器</p>
<p><strong>执行逻辑</strong>：</p>
<p>1）从容器中拿到所有的<code>ApplicationListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getApplicationListeners()</span><br></pre></td></tr></table></figure>

<p>2）将获取到的<code>ApplicationListener</code>添加到从容器中获取到的事件派发器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getApplicationEventMulticaster().addApplicationListener(listener);</span><br></pre></td></tr></table></figure>

<p>3）派发早期的的监听器</p>
<h3 id="finishBeanFactoryInitialization-beanFactory"><a href="#finishBeanFactoryInitialization-beanFactory" class="headerlink" title="finishBeanFactoryInitialization(beanFactory)"></a>finishBeanFactoryInitialization(beanFactory)</h3><p><strong>作用</strong>：初始化所有剩下的单实例bean</p>
<p><strong>执行逻辑</strong>：</p>
<p>1）实例化<code>conversionService</code></p>
<p>2）如果容器中没有<code>EmbeddedValueResolver</code>，就向容器中注册一个</p>
<p>3）获取<code>LoadTimeWeaverAware</code>类型的<code>BeanDefinition</code>，提前实例化</p>
<p>4）停止使用用于类型匹配的临时<code>ClassLoader</code></p>
<p>5）冻结上下文，不允许再修改配置</p>
<p>6）实例化剩余的非懒加载的单实例bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">beanFactory.preInstantiateSingletons();</span><br></pre></td></tr></table></figure>



<h4 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons()"></a>preInstantiateSingletons()</h4><p>1）获取容器中所有的定义的Bean的名称</p>
<p>2）获取Bean的定义信息：<code>RootBeanDefinition</code>类型对象<code>bd</code></p>
<p>3）初始化所有的非懒加载的Bean</p>
<ul>
<li>首先判断<code>bd</code>是否是非抽象的，单实例的，是非懒加载的<ul>
<li>如果是判断对应的Bean是否实现了<code>FactoryBean</code>接口，如果是则使用<code>FactoryBean</code>的<code>getObject</code>方法来创建Bean对象</li>
<li>如果不是工厂Bean则利用<a href="#getBean(beanName"><code>getBean</code></a>方法来创建Bean对象</li>
</ul>
</li>
</ul>
<p>4）对所有合适的Bean执行Bean初始化后的回调方法</p>
<ul>
<li>判断Bean是否实现了<code>SmartInitializingSingleton</code>接口，如果是则调用其<code>afterSingletonsInstantiated</code>方法来进行Bean初始化后的后置处理</li>
</ul>
<h4 id="getBean-beanName"><a href="#getBean-beanName" class="headerlink" title="getBean(beanName)"></a>getBean(beanName)</h4><p><code>getBean(beanName)</code>中调用了<code>doGetBean(name, null, args, false)</code>方法，其<strong>执行流程</strong>如下：</p>
<p>1）先获取缓存中保存的单实例Bean，如果能够获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）</p>
<p>从<code>Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256);</code>这个属性中获取缓存的单实例Bean</p>
<p>2）缓存中获取不到，则开始创建Bean的流程</p>
<ul>
<li><p>标记当前Bean已经被创建（防止多线程重复创建Bean）</p>
</li>
<li><p>获取Bean的定义信息</p>
</li>
<li><p>获取当前Bean所依赖的其他Bean，如果有则使用<code>getBean</code>方法创建所依赖的Bean</p>
</li>
<li><p>启动单实例Bean创建流程，调用<code>createBean(beanName, mbd, args)</code>创建单实例Bean</p>
<ul>
<li><p>首先，给后置处理器（<code>BeanPostProcessor</code>）一个机会返回一个目标Bean实例的代理对象，如果获取到了代理对象则返回这个代理对象（这个后置处理器是<strong><code>InstantiationAwareBeanPostProcessor</code></strong>，这个后置处理器中的方法会在Bean实例化之前就调用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br></pre></td></tr></table></figure>

<ul>
<li>首先执行<code>postProcessBeforeInstantiation</code>方法</li>
</ul>
</li>
<li><p>如果上面的方法有返回值（不为null），则执行<code>postProcessAfterInitialization</code>方法</p>
</li>
<li><p>调用<a href="#doCreateBean(beanName, mbdToUse, args)"><code>doCreateBean</code></a>方法创建Bean</p>
</li>
</ul>
</li>
</ul>
<p>3）如果成功创建了单实例Bean，则将这个单实例Bean放入到单实例Bean的缓存中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addSingleton(beanName, singletonObject);</span><br></pre></td></tr></table></figure>



<h4 id="doCreateBean-beanName-mbdToUse-args"><a href="#doCreateBean-beanName-mbdToUse-args" class="headerlink" title="doCreateBean(beanName, mbdToUse, args)"></a>doCreateBean(beanName, mbdToUse, args)</h4><p><code>doCreateBean</code>用于创建Bean，其<strong>执行流程</strong>如下：</p>
<p>1）<strong>Bean实例化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">    <span class="comment">//如果Bean定义为单例，则从容器的属性中获取对应的BeanWrapper对象</span></span><br><span class="line">    instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//如果没有获取到，则使用beanName和Bean定义来创建一个对应的BeanWrapper对象</span></span><br><span class="line">    instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取BeanWrapper中封装的Object对象，也就是获取到bean对象的实例</span></span><br><span class="line"><span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line"><span class="comment">//获取BeanWrapper中封装的bean的Class</span></span><br><span class="line">Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line"><span class="keyword">if</span> (beanType != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将Bean的类型设置到Bean定义的目标类型中</span></span><br><span class="line">    mbd.resolvedTargetType = beanType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）允许后置处理器（<code>MergedBeanDefinitionPostProcessor</code>）来处理符合条件的Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br></pre></td></tr></table></figure>

<p>这个方法会调用<code>MergedBeanDefinitionPostProcessor</code>的<code>postProcessMergedBeanDefinition</code>方法</p>
<p>3）为<strong>Bean的属性赋值</strong>：<code>populateBean(beanName, mbd, instanceWrapper)</code></p>
<ol>
<li>拿到<code>InstantiationAwareBeanPostProcessor</code>后置处理器，执行其<code>postProcessAfterInstantiation</code>方法</li>
<li>拿到<code>InstantiationAwareBeanPostProcessor</code>后置处理器，执行其<code>postProcessProperties</code>方法，执行<code>postProcessPropertyValues</code>方法，得到<code>PropertyValues</code>对象</li>
<li>调用<code>applyPropertyValues(beanName, mbd, bw, pvs)</code>方法将获取到的属性应用到Bean中（为属性利用setter方法进行赋值）</li>
</ol>
<p>4）<strong>Bean初始化</strong>：<code>exposedObject = initializeBean(beanName, exposedObject, mbd)</code></p>
<ol>
<li><p>执行Bean中实现的XXXAware接口中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invokeAwareMethods(beanName, bean);</span><br></pre></td></tr></table></figure>

<p>按照：BeanNameAware、BeanClassLoaderAware、BeanFactoryAware的顺序依次注入对应的组件</p>
</li>
<li><p>执行后置处理器（<code>BeanPostProcessor</code>）的<code>postProcessBeforeInitialization</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行Bean的初始化方法：<code>invokeInitMethods(beanName, wrappedBean, mbd)</code></p>
<ul>
<li>是否是<code>InitializingBean</code>接口的实现，执行接口规定的初始化方法</li>
<li>如果不是，则从Bean定义中获取自定义的初始化方法并执行</li>
</ul>
</li>
<li><p>执行后置处理器（<code>BeanPostProcessor</code>）的<code>postProcessAfterInitialization</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后返回这个经过重重包装的<code>wrappedBean</code>对象</p>
</li>
</ol>
<p>5）注册Bean的销毁方法：<code>registerDisposableBeanIfNecessary(beanName, bean, mbd)</code></p>
<ul>
<li><p>如果Bean实现了<code>Disposable</code>接口，则将这个Bean添加到<code>disposableBeans</code>属性（一个Map集合，以beanName为键，以Bean为值，存储了可以执行销毁方法的Bean的Map集合）</p>
<p><strong>注意</strong>：这里只是注册了可以执行销毁方法的Bean，会在Bean被销毁时执行这些Bean的销毁方法</p>
</li>
</ul>
<h3 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh()"></a>finishRefresh()</h3><p><strong>作用</strong>：完成BeanFactory的初始化创建工作，IoC容器就创建完成</p>
<p>1）清空context级别的资源缓存（resource cache）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">clearResourceCaches();</span><br></pre></td></tr></table></figure>

<p>2）初始化和生命周期有关的后置处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initLifecycleProcessor();</span><br></pre></td></tr></table></figure>

<p><code>LifecycleProcessor</code>接口的方法：</p>
<ul>
<li><code>onRefresh()</code>：在容器刷新时拦截</li>
<li><code>onClose()</code>：在容器关闭时拦截</li>
</ul>
<p><code>initLifecycleProcessor()</code>默认会从容器中查找是否有<code>LifecycleProcessor</code>类型的Bean，</p>
<p>如果没有则创建<code>DefaultLifecycleProcessor</code>的组件，并注册到容器中</p>
<p>3）调用生命周期处理器的<code>onRefresh()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getLifecycleProcessor().onRefresh();</span><br></pre></td></tr></table></figure>

<p>4）派发容器刷新完成事件（<code>ContextRefreshedEvent</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>

<p>5）<code>LiveBeansView.registerApplicationContext(this);</code></p>
<h2 id="Spring源码总结"><a href="#Spring源码总结" class="headerlink" title="Spring源码总结"></a>Spring源码总结</h2><ol>
<li><p>Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息</p>
<p>1）使用xml注册Bean</p>
<p>2）使用注解注册Bean：@Service、@Component、@Bean….</p>
</li>
<li><p>Spring容器会在合适的时机创建这些Bean</p>
<p>1）在用到这些Bean的时候：利用<code>getBean</code>方法创建这个Bean，创建好以后保存到容器中</p>
<p>2）统一创建剩下所有的非懒加载的、单实例的Bean</p>
</li>
<li><p><strong>后置处理器</strong>：</p>
<p>每一个Bean创建完成以后，都会使用<strong>各种后置处理器</strong>进行处理来<strong>增强Bean的功能</strong></p>
<p><code>AutowiredAnnotationBeanPostProcessor</code>：处理自动注入</p>
<p><code>AnnotationAwareAspectJAutoProxyCreator</code>：实现AOP</p>
<p>…</p>
</li>
<li><p>事件驱动模型</p>
<p><code>ApplicationListener</code>：事件监听器</p>
<p><code>ApplicationEventMulticaster</code>：事件多播器（派发器）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring注解驱动</tag>
        <tag>扩展原理</tag>
        <tag>Spring容器的创建流程</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解驱动-web</title>
    <url>/2020/09/01/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8-web/</url>
    <content><![CDATA[<h1 id="Spring注解驱动-web"><a href="#Spring注解驱动-web" class="headerlink" title="Spring注解驱动-web"></a>Spring注解驱动-web</h1><h2 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h2><p>1、创建一个Maven项目，选择web工程的模板，删除其<code>web.xml</code>文件，然后添加servlet和jsp的maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、编写<code>index.jsp</code>页面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;主页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="hello"&gt;hello&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>根据我们之前所学习的知识，点击这个hello超链接时会向服务器发送请求，会在<code>web.xml</code>中的所有的servlet路径进行匹配，匹配到<code>hello</code>所对应的Servlet然后请求这个Servlet。但是此时没有<code>web.xml</code> 应该如何实现？</p>
<p>3、编写<code>HelloServlet</code>，使用@WebServlet来配置Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"hello..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处的@WebServlet注解就替代了原先<code>web.xml</code>文件中的Servlet相关配置！</p>
<h2 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h2><h3 id="ServletContainerInitializer-和-HandlesTypes"><a href="#ServletContainerInitializer-和-HandlesTypes" class="headerlink" title="ServletContainerInitializer 和 @HandlesTypes"></a>ServletContainerInitializer 和 @HandlesTypes</h3><ol>
<li>Servlet容器启动会扫描，当前应用里面每一个jar包的<code>ServletContainerInitializer</code>的实现</li>
<li>提供的<code>ServletContainerInitializer</code>的实现类，必须绑定在<code>META-INF/services/javax.servlet.ServletContainerInitializer</code>。文件的内容就是这个实现类的全类名</li>
</ol>
<p><strong>总结</strong>：容器在启动应用的时候，会扫描当前应用每一个jar包里面的<code>META-INF/services/javax.servlet.ServletContainerInitializer</code>中指定的实现类，启动并运行这个实现类的方法</p>
<p><strong>使用示例</strong><br>1、创建一个<code>ServletContainerInitializer</code>的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器启动的时候会将@HandesType注解指定的实现类、子接口传递过来</span></span><br><span class="line"><span class="meta">@HandlesTypes</span>(value=&#123;</span><br><span class="line">        HelloService<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"感兴趣的类型："</span>);</span><br><span class="line">        <span class="comment">//输出@HandlerTypes中所给出类型的所有实现类、子接口</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz : c) &#123;</span><br><span class="line">            System.out.println(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、创建<code>HelloService</code>接口，以及子接口<code>HelloServiceExt1</code>、抽象实现类<code>AbstractHelloService</code>、实现类<code>HelloServiceImpl</code></p>
<p><code>HelloService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>HelloServiceExt1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloServiceExt1</span> <span class="keyword">extends</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AbstractHelloService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHelloService</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>HelloServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、在resources目录下创建<code>META-INF/services/javax.servlet.ServletContainerInitializer</code>文件，文件的内容是<code>MyServletContainerInitializer</code>的全类名</p>
<p><code>javax.servlet.ServletContainerInitializer</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.zxw.servlet.MyServletContainerInitializer</span><br></pre></td></tr></table></figure>

<p>4、运行web项目，查看控制台的输出结果：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200902104425157.png" align="left"/>



<h4 id="使用ServletContext注册Web组件"><a href="#使用ServletContext注册Web组件" class="headerlink" title="使用ServletContext注册Web组件"></a>使用ServletContext注册Web组件</h4><p>前面介绍了如何使用注解的方式导入Web组件，但是如果需要加载第三方的Web组件，就无法使用@WebServlet的方式来加载Servlet、FIlter、Listener了。此时就可以使用<strong>ServletContext注册Web组件</strong>：</p>
<p><strong>使用示例</strong>：</p>
<p><code>UserServlet</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"UserServlet#doGet..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//过滤请求</span></span><br><span class="line">        System.out.println(<span class="string">"UserFilter#doFilter"</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UserListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听项目启动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sce</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserListener#contextInitialized..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听项目停止</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sce</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserListener#contextDestroyed..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用ServletContainerInitializer通过ServletContext来注册Web的三大组件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes</span>(value=&#123;</span><br><span class="line">        HelloService<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"感兴趣的类型："</span>);</span><br><span class="line">        <span class="comment">//输出@HandlerTypes中所给出类型的所有实现类、子接口</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz : c) &#123;</span><br><span class="line">            System.out.println(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加Servlet</span></span><br><span class="line">        ServletRegistration.Dynamic userServlet = ctx.addServlet(<span class="string">"userServlet"</span>, <span class="keyword">new</span> UserServlet());</span><br><span class="line">        <span class="comment">//配置Servlet的映射信息</span></span><br><span class="line">        userServlet.addMapping(<span class="string">"/user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加一个Listener</span></span><br><span class="line">        ctx.addListener(UserListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加Filter</span></span><br><span class="line">        FilterRegistration.Dynamic userFilter = ctx.addFilter(<span class="string">"userFilter"</span>, UserFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//配置Filter的映射信息</span></span><br><span class="line">        userFilter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), <span class="keyword">true</span>, <span class="string">"/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="与SpringMVC整合分析"><a href="#与SpringMVC整合分析" class="headerlink" title="与SpringMVC整合分析"></a>与SpringMVC整合分析</h3><p>&emsp;&emsp;打开<code>spring-web</code>的jar依赖包下的<code>META-INF/services/javax.servlet.ServletContainerInitializer</code>，结果给出全类名路径为<code>org.springframework.web.SpringServletContainerInitializer</code></p>
<p>&emsp;&emsp;前面介绍过，Web容器启动时会调用``META-INF/services/javax.servlet.ServletContainerInitializer<code>中所指定的全类名路径所对应类中的</code>onStartup<code>方法。所以下面将要分析</code>SpringServletContainerInitializer<code>类中的</code>onStartup`方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes</span>(WebApplicationInitializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(@Nullable Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses, ServletContext servletContext)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以看到@HandlesTypes注解的属性中给出的值为<code>WebApplicationInitializer.class</code>，所以在调用<code>SpringServletContainerInitializer</code>的<code>onStartup</code>方法时会找到所有<code>WebApplicationInitializer</code>类型的字节码（<code>.class</code>）</p>
<p><strong>SpringServletContainerInitializer的onStartup方法分析</strong><br>1）首先创建一个<code>WebApplicationInitializer</code>类型的集合<code>initializers</code>用于存储从@HandlesTypes中给出的感兴趣类型的字节码所创建的示例</p>
<p>2）遍历传入的<code>webApplnitializerClasses</code>集合，从中获取到<code>WebApplicationInitializer</code>的非抽象类、非接口的子类型，然后创建其实例存入到<code>initializers</code>中</p>
<p>3）判断<code>initializers</code>是否为空，如果为空则打印日志</p>
<p>4）不为空则调用<code>AnnotationAwareOrderComparator.sort(initializers);</code>进行排序，然后遍历执行<code>initializers</code>中所有的<code>WebApplicationInitializer</code>类实例的<code>onStartup</code>方法</p>
<p>&emsp;&emsp;通过上面的分析可以得知，<code>SpringServletContainerInitializer</code>会在Web容器加载时调用其<code>onStartup</code>方法，这个方法会执行所有<code>WebApplicationInitializer</code>的实现类的<code>onStartup</code>方法。</p>
<p>&emsp;&emsp;<code>WebApplicationInitializer</code>的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Configure the given &#123;<span class="doctag">@link</span> ServletContext&#125; with any servlets, filters, listeners</span></span><br><span class="line"><span class="comment">	 * context-params and attributes necessary for initializing this web application. See</span></span><br><span class="line"><span class="comment">	 * examples &#123;<span class="doctag">@linkplain</span> WebApplicationInitializer above&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> servletContext the &#123;<span class="doctag">@code</span> ServletContext&#125; to initialize</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> ServletException if any call against the given &#123;<span class="doctag">@code</span> ServletContext&#125;</span></span><br><span class="line"><span class="comment">	 * throws a &#123;<span class="doctag">@code</span> ServletException&#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;所以，如果我们想要在完全不使用<code>web.xml</code>的情况下整合SpringMVC，可以通过自定义<code>WebApplicationInitializer</code>的实现类来完成SpringMVC的整合。</p>
<h3 id="WebApplicationInitializer分析"><a href="#WebApplicationInitializer分析" class="headerlink" title="WebApplicationInitializer分析"></a>WebApplicationInitializer分析</h3><p><code>WebApplicationInitializer</code>继承关系图如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200903160600721.png" align="left"/>

<h4 id="AbstractContextLoaderInitializer"><a href="#AbstractContextLoaderInitializer" class="headerlink" title="AbstractContextLoaderInitializer"></a>AbstractContextLoaderInitializer</h4><p><code>AbstractContextLoaderInitializer</code>的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractContextLoaderInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//注册ContextLoaderListener</span></span><br><span class="line">		registerContextLoaderListener(servletContext);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册ContextLoaderListener，相当于在web.xml中配置ContextLoaderListener</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerContextLoaderListener</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">		WebApplicationContext rootAppContext = createRootApplicationContext();</span><br><span class="line">		<span class="keyword">if</span> (rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">			ContextLoaderListener listener = <span class="keyword">new</span> ContextLoaderListener(rootAppContext);</span><br><span class="line">			listener.setContextInitializers(getRootApplicationContextInitializers());</span><br><span class="line">            <span class="comment">//将这个listener添加到ServletContext容器中</span></span><br><span class="line">			servletContext.addListener(listener);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			logger.debug(<span class="string">"No ContextLoaderListener registered, as "</span> +</span><br><span class="line">					<span class="string">"createRootApplicationContext() did not return an application context"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象方法，由子类来实现，提供一个获取WebApplicationContext对象的方法，也就是提供Spring IoC容器</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于获取ApplicationContextInitializer，如果需要可以重写这个方法添加需要的ApplicationContextInitializer</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">protected</span> ApplicationContextInitializer&lt;?&gt;[] getRootApplicationContextInitializers() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AbstractContextLoaderInitializer</code>的<code>onStartup</code>用于注册<code>ContextLoaderListener</code>这个Listener，子实现类需要实现<code>createRootApplicationContext()</code>方法来提供Spring的IoC容器</p>
<h4 id="AbstractDispatcherServletInitializer"><a href="#AbstractDispatcherServletInitializer" class="headerlink" title="AbstractDispatcherServletInitializer"></a>AbstractDispatcherServletInitializer</h4><p>和之前一样，还是只需要关心这个类中的<code>onStartup</code>方法和抽象方法</p>
<p><code>onStartup</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//首先调用父类的onStartup方法，用于注册ContextLoaderListener这个Listener</span></span><br><span class="line">    <span class="keyword">super</span>.onStartup(servletContext);</span><br><span class="line">    <span class="comment">//注册SpringMVC的前端控制器</span></span><br><span class="line">    registerDispatcherServlet(servletContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象方法：</p>
<p><code>createServletApplicationContext()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象方法，用于提供Spring MVC的容器</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> WebApplicationContext <span class="title">createServletApplicationContext</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p><code>getMappings()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象方法，设置DispatcherServlet的映射路径</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> String[] getServletMappings();</span><br></pre></td></tr></table></figure>



<h4 id="AbstractAnnotationConfigDispatcherServletInitializer"><a href="#AbstractAnnotationConfigDispatcherServletInitializer" class="headerlink" title="AbstractAnnotationConfigDispatcherServletInitializer"></a>AbstractAnnotationConfigDispatcherServletInitializer</h4><p><code>AbstractAnnotationConfigDispatcherServletInitializer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span></span></span><br><span class="line"><span class="class">		<span class="keyword">extends</span> <span class="title">AbstractDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Class&lt;?&gt;[] configClasses = getRootConfigClasses();</span><br><span class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">			AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">			context.register(configClasses);</span><br><span class="line">			<span class="keyword">return</span> context;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createServletApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">		Class&lt;?&gt;[] configClasses = getServletConfigClasses();</span><br><span class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">			context.register(configClasses);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> context;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getRootConfigClasses();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getServletConfigClasses();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AbstractAnnotationConfigDispatcherServletInitializer</code>中实现了父类的两个抽象方法<code>createRootApplicationContext()</code>和<code>createServletApplicationContext()</code>，但是又新增了两个抽象方法：</p>
<ul>
<li><code>getRootConfigClasses()</code>：由子类实现，提供Spring配置类的Class对象</li>
<li><code>getServletConfigClasses()</code>：由子类实现，提供SpringMVC配置类的Class对象</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>&emsp;&emsp;由上述分析可知，要想实现没有<code>web.xml</code>的情况下整合SpringMVC，就需要自定义一个类实现<code>AbstractAnnotationConfigDispatcherServletInitializer</code>即可！</p>
<h3 id="Servlet-3-0整合SpringMVC示例"><a href="#Servlet-3-0整合SpringMVC示例" class="headerlink" title="Servlet 3.0整合SpringMVC示例"></a>Servlet 3.0整合SpringMVC示例</h3><p><strong>1、编写Spring容器的配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">        basePackages = &#123;<span class="string">"com.zxw"</span>&#125;,</span><br><span class="line">        <span class="comment">//Spring容器不扫描Controller</span></span><br><span class="line">        excludeFilters = &#123;</span><br><span class="line">                <span class="meta">@Filter</span>(type= FilterType.ANNOTATION, classes = &#123;Controller<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RootConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、编写Spring MVC容器的配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">        basePackages = &#123;<span class="string">"com.zxw"</span>&#125;,</span><br><span class="line">        <span class="comment">//SpringMVC容器只扫描Controller，形成互补配置</span></span><br><span class="line">        includeFilters = &#123;</span><br><span class="line">                <span class="meta">@Filter</span>(type = FilterType.ANNOTATION, classes = &#123;Controller<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">        &#125;,</span></span><br><span class="line"><span class="class">        //禁用默认的过滤规则</span></span><br><span class="line"><span class="class">        <span class="title">useDefaultFilters</span> </span>= <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、自定义<code>MyWebApplnitializer</code>继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;RootConfig<span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;AppConfig<span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、编写<code>HelloService</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5、编写<code>HelloController</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String msg = helloService.sayHello(<span class="string">"tomcat..."</span>);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="定制与接管Spring-MVC"><a href="#定制与接管Spring-MVC" class="headerlink" title="定制与接管Spring MVC"></a>定制与接管Spring MVC</h3><p>&emsp;&emsp;前面的示例中，给出的Spring MVC配置类中处理使用@ComponentScan来配置要扫描的内容外，没有其他的配置。那么应该如何实现之前使用XML文件的Spring MVC配置？</p>
<p><strong>参考文档</strong>：<a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web.html#mvc-config" target="_blank" rel="noopener">MVC Config</a></p>
<p><strong>注意</strong>：这部分内容无需记忆，上面给出的参考文档很容易理解，需要的时候查找官方文档对应的部分即可，只需要了解大概的原理即可。</p>
<h4 id="EnableWebMvc"><a href="#EnableWebMvc" class="headerlink" title="@EnableWebMvc"></a>@EnableWebMvc</h4><p><strong>作用</strong>：开启Spring MVC定制配置功能，作用和下面的XML配置相同</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）"><a href="#配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）" class="headerlink" title="配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）"></a>配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）</h4><p>可以通过实现<code>WebMvcConfigurer</code>接口来实现之前在配置文件中才能够实现的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>WebMvcConfigurer</code>接口中提供了很多默认方法，需要实现某些功能时，只需要重写这些默认方法即可！</p>
<h4 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制视图解析器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.jsp(<span class="string">"/WEB-INF/pages/"</span>, <span class="string">".jsp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其作用相当于如下的xml配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--配置视图解析器--&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>



<h4 id="静态资源过滤"><a href="#静态资源过滤" class="headerlink" title="静态资源过滤"></a>静态资源过滤</h4><p>&emsp;&emsp;为什么会出现静态资源过滤的问题？</p>
<p>&emsp;&emsp;由于配置了前端控制器且路径为<code>/</code>，这表示会过滤所有除了jsp页面的访问，所以会将静态资源的访问作为普通请求来处理。此时，由于无法找到对应的控制器的方法进行处理，所以会报错。Spring MVC有两种处理静态资源过滤问题的方法：</p>
<ol>
<li><p>采用<code>&lt;mvc:default-servlet-handler/&gt;</code></p>
<p>这种方式比较简单，需要注意的是一般的Web应用服务器默认的Servlet名称是<code>default</code>，因此<code>DefaultServletHttpRequestHandler</code>可以找到这个Servlet。如果不是，则需要使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mvc:<span class="keyword">default</span>-servlet-handler <span class="keyword">default</span>-servlet-name=<span class="string">"默认的Servlet名称"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>这种方式就是将静态资源重新交给Web应用服务器来处理！</strong></p>
</li>
<li><p>采用<code>&lt;mvc:resources/&gt;</code></p>
<p><code>&lt;mvc:resources/&gt;</code>则更进一步，由Spring MVC框架自己来处理静态资源，并添加一些有用的附加值功能。<code>&lt;mvc:resources/&gt;</code>非常灵活，允许静态资源<strong>存储在任何地方</strong>，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/,classpath:/META-INF/publicResources/"</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上的配置将Web根路径<code>/</code>和类路径下的<code>/META-INF/publicResources/</code>作为静态资源的实际路径，访问时通过<code>/resources/**</code>进行映射，例如：<code>/resources/js/jquery.js</code>则会请求Web根路径或者类路径下的<code>/META-INF/publicResources</code>下的<code>js</code>目录下的<code>jquery.js</code>这个JavaScript文件。</p>
</li>
</ol>
<p><strong>重写WebMvcConfigurer的方法来实现这两种方式处理静态资源</strong></p>
<ol>
<li><p><code>&lt;mvc:default-servlet-handler/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//过滤静态资源方式一</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//也可以使用configurer.enable(defaultServletName)来指定默认Servlet名称</span></span><br><span class="line">    configurer.enable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于如下的xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p><code>&lt;mvc:resources/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义静态资源的映射</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">        .addResourceLocations(<span class="string">"/,classpath:/META-INF/resources/"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于如下xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/,classpath:/META-INF/resources/"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LocaleChangeInterceptor());</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> ThemeChangeInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/admin/**"</span>);</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> SecurityInterceptor()).addPathPatterns(<span class="string">"/secure/*"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于如下的xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/admin/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.theme.ThemeChangeInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/secure/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.SecurityInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>&emsp;&emsp;在介绍异步请求之前，就不得不谈到同步请求了：</p>
<p><strong>同步请求</strong>：在Servlet 3.0之前，Servlet采用了Thread-Per-Request的方式处理请求，即每一次Http请求都由某一个线程从头到尾负责处理。</p>
<p>&emsp;&emsp;这种同步请求随即带来了很多问题：如果需要进行IO操作、数据库访问等耗时操作，那么就会导致某个线程长时间不能完成，我们之前学习过线程池，也知道线程池中的线程数量是有限制的，如果有很多这样的线程（并发量太大）的情况下，就会导致网站的响应速度非常慢，因为其他请求都在等待从线程池中获取线程来执行请求所需的操作。我们所学习过的Spring、Struts等框架都是在Servlet的基础上建立的，所以即便是使用了这些框架也无法解决这样的问题！</p>
<p>&emsp;&emsp;为了解决这样的问题，Servlet 3.0引入了异步处理，Servlet 3.1中又引入了非阻塞IO来进一步增强异步处理的性能。</p>
<h3 id="Servlet-3-0异步处理"><a href="#Servlet-3-0异步处理" class="headerlink" title="Servlet 3.0异步处理"></a>Servlet 3.0异步处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(value = <span class="string">"/async"</span>, asyncSupported = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//开启异步模式，获取AsyncContext对象</span></span><br><span class="line">        System.out.println(<span class="string">"当前线程:"</span> + Thread.currentThread() + <span class="string">" start..."</span>);</span><br><span class="line">        AsyncContext asyncContext = req.startAsync();</span><br><span class="line">        <span class="comment">//执行业务</span></span><br><span class="line">        asyncContext.start(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sayHello();</span><br><span class="line">                    asyncContext.complete();</span><br><span class="line">                    <span class="comment">//响应</span></span><br><span class="line">                    asyncContext.getResponse().getWriter().write(<span class="string">"async..."</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"当前线程:"</span> + Thread.currentThread() + <span class="string">" end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前线程:"</span> + Thread.currentThread() + <span class="string">" processing..."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200905211237751.png" align="left"/>

<p>也就是说，主线程先结束，然后后来开启的线程执行完毕后响应浏览器，这样线程池中的线程就可以正常返回，而不需要等待耗时线程执行完毕。</p>
<h3 id="返回Callable"><a href="#返回Callable" class="headerlink" title="返回Callable"></a>返回Callable</h3><p><strong>使用示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/async01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">async01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程:"</span> + Thread.currentThread() + <span class="string">"开始"</span>);</span><br><span class="line">        Callable&lt;String&gt; callable = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"副线程: "</span> + Thread.currentThread() + <span class="string">"开始"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                System.out.println(<span class="string">"副线程: "</span> + Thread.currentThread() + <span class="string">"结束"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Callable&lt;String&gt; async01()"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">"主线程:"</span> + Thread.currentThread() + <span class="string">"结束"</span>);</span><br><span class="line">        <span class="keyword">return</span> callable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Callable的执行流程"><a href="#Callable的执行流程" class="headerlink" title="Callable的执行流程"></a>Callable的执行流程</h4><ul>
<li>控制器返回一个<code>Callable</code>对象</li>
<li>Spring异步处理，将<code>Callable</code>提交到<code>TaskExecutor</code>，使用一个隔离的线程进行执行</li>
<li>DispatcherServlet和所有的Filter退出web容器的线程，但是response保持打开状态（还没有响应）</li>
<li><code>Callable</code>返回结果，Spring MVC将请求重新派发给容器，恢复之前的处理</li>
<li>根据<code>Callable</code>返回的结果，Spring MVC继续进行视图渲染流程等（从接收请求到视图渲染）</li>
</ul>
<p><strong>异步的拦截器</strong>：</p>
<ol>
<li>原生的<code>AsyncListener</code></li>
<li>Spring MVC，实现<code>AsyncHandlerInterceptor</code></li>
</ol>
<h3 id="返回DeferredResult"><a href="#返回DeferredResult" class="headerlink" title="返回DeferredResult"></a>返回DeferredResult</h3><p><strong>DeferredResult应用场景</strong>：Controller中的方法可以返回一个<code>DeferredResult</code>对象，返回这个对象后会等待处理（通过消息中间件存储），而另一个服务器中监听到了消息中间件的消息产生后会取得<code>DeferredResult</code>对象然后进行处理并设置结果到这个对象中，然后返回到消息中间件，处理之后之前的服务器就可以返回对应的结果。当然也可以设置等待超时时会返回的值。</p>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/createOrder"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DeferredResult&lt;Object&gt; <span class="title">createOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DeferredResult&lt;Object&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;Object&gt;((<span class="keyword">long</span>) <span class="number">3000</span>, <span class="string">"create fail..."</span>);</span><br><span class="line">    <span class="comment">//临时保存起来</span></span><br><span class="line">    DeferredResultQueue.save(deferredResult);</span><br><span class="line">    <span class="keyword">return</span> deferredResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建订单</span></span><br><span class="line">    String order = UUID.randomUUID().toString();</span><br><span class="line">    DeferredResult&lt;Object&gt; deferredResult = DeferredResultQueue.get();</span><br><span class="line">    deferredResult.setResult(order);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success===&gt;"</span> + order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用了一个<code>DeferredResultQueue</code>来模拟了消息中间件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeferredResultQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Queue&lt;DeferredResult&lt;Object&gt;&gt; queue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(DeferredResult&lt;Object&gt; deferredResult)</span> </span>&#123;</span><br><span class="line">        queue.add(deferredResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DeferredResult&lt;Object&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring注解驱动</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>一、SpringBoot入门</title>
    <url>/2020/09/07/%E4%B8%80%E3%80%81SpringBoot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200907185641315.png" align="left"/>

<p>&emsp;&emsp;Spring Boot是用来简化Spring应用开发，<strong>约定大于配置</strong>，去繁从简，能创建一个“just run”的独立的、产品级的Spring应用</p>
<p><strong>背景</strong>：</p>
<p>&emsp;&emsp;最初的J2EE开发在需求不断增加的情况下变得越来越笨重，为了简化开发，于是轻量级的Spring框架诞生了。但是随着Spring集成的模块越来越多，功能的不断增加，Spring也开始变得“笨重”了，于是为了提高开发效率，简化部署流程，降低第三方技术的集成难度，Spring Boot诞生了！</p>
<p><strong>优点</strong>：</p>
<ul>
<li>快速创建独立运行的Spring项目以及主流框架的集成</li>
<li>使用嵌入式的Servlet容器，应用无需打包成war包</li>
<li>starters自动依赖与版本控制</li>
<li>大量的自动配置，简化开发，也可以修改默认配置</li>
<li>无需配置XML，没有代码生成，开箱即用</li>
<li>准生产环境的运行时应用监控</li>
<li>与云计算的天然集成</li>
</ul>
<h3 id="微服务简介"><a href="#微服务简介" class="headerlink" title="微服务简介"></a>微服务简介</h3><p>&emsp;&emsp;说到微服务就不得不说到<a href="https://baike.baidu.com/item/马丁·福勒/3107032?fr=aladdin#2" target="_blank" rel="noopener">马丁·福勒</a>，他虽然不是微服务这一概念的创始人，但是却发表了一篇关于微服务的文章，这篇文章生动形象地解释了微服务是什么，为什么要使用微服务。</p>
<p><strong>微服务概念</strong>：</p>
<p>&emsp;&emsp;微服务这种<strong>架构风格</strong>就是把<strong>一组小服务</strong>演化成为一个单一的应用的一种方法。每个应用都<strong>运行在自己的进程中</strong>，并通过轻量级的机制保持通信，就像HTTP这样的API。这些服务要<strong>基于业务场景</strong>，并<strong>使用自动化部署工具</strong>进行独立的发布。有一个<strong>非常轻量级的集中式管理协调这些服务</strong>，可以使用不同的语言来编写服务，也可以使用不同的数据存储技术。</p>
<p align="right">– James Lewis and Martin Fowler</p>

<p><strong>单体应用</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200907202748287.png" align="left"/>

<p>&emsp;&emsp;如图所示，多个模块作为一个进程部署在多个服务器上（每个服务器上部署的内容相同），这就是<strong>单体应用</strong>。很明显，单体应用有很多缺点：</p>
<ul>
<li>逻辑复杂，模块耦合，迭代效率低</li>
<li>由于每个服务器上的应用都需要加载所有的模块，所以启动的速度很慢</li>
<li>任何一个模块的错误都可以导致所有服务器的崩溃</li>
<li>不能在不影响应用运行时对某一个模块进行修改</li>
<li>任何一个修改都需要对整个系统进行升级（不能单独对某个模块进行升级）</li>
</ul>
<p><strong>微服务</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200907203900679.png" align="left"/>

<p>&emsp;&emsp;如图所示，每个功能模块被放入一个独立的服务中，每个分布式的服务器只需要加载所需要的服务，这就是<strong>微服务</strong>。这些服务还可以被独立部署，每个服务也都提供了清晰的模块边界，甚至不同的服务都可以使用不同的变成语言来实现，也可以由不同的团队进行管理。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>学习Spring Boot之前需要掌握的知识</strong>：</p>
<ul>
<li>Spring框架的使用经验（越熟悉越好）</li>
<li>Maven</li>
<li>IDEA（Eclipse也行）</li>
</ul>
<p><strong>环境</strong>：</p>
<p>这里给出我的环境，仅供参考：</p>
<ul>
<li>JDK 1.8</li>
<li>Maven 3.6.3</li>
<li>IntelliJ IDEA 2020</li>
<li>Spring Boot 2.3.0</li>
</ul>
<p>Maven的配置文件修改以及IDEA整合自己下的Maven可以自行搜索相关教程，这里不再赘述。</p>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>有两种方式：</p>
<ul>
<li>创建Maven项目</li>
<li>使用IDEA集成的Spring Initializr</li>
</ul>
<h3 id="1、创建Maven项目（jar）"><a href="#1、创建Maven项目（jar）" class="headerlink" title="1、创建Maven项目（jar）"></a>1、创建Maven项目（jar）</h3><p>&emsp;&emsp;创建一个名称为<code>spring-boot-01-helloworld</code>的Maven项目，创建目录结构如图所示</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200907221020792.png" align="left"/>



<h3 id="2、引入starters"><a href="#2、引入starters" class="headerlink" title="2、引入starters"></a>2、引入starters</h3><p>parent标签中指定了父工程，然后引入了web的starter：<code>spring-boot-starter-web</code>，后面会介绍starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3、创建主程序"><a href="#3、创建主程序" class="headerlink" title="3、创建主程序"></a>3、创建主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><p><code>HelloService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloService的hello()方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>HelloController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        helloService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、运行主程序进行测试"><a href="#5、运行主程序进行测试" class="headerlink" title="5、运行主程序进行测试"></a>5、运行主程序进行测试</h3><p>运行主程序进行测试，访问：<a href="http://localhost:8080/hello，浏览器显示如下：" target="_blank" rel="noopener">http://localhost:8080/hello，浏览器显示如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200907221724360.png" align="left"/>

<p>控制台显示如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200907222033769.png" align="left"/>



<h3 id="6、简化部署工"><a href="#6、简化部署工" class="headerlink" title="6、简化部署工"></a>6、简化部署工</h3><p>&emsp;&emsp;为了创建一个可执行的jar，需要添加<code>spring-boot-maven-plugin</code>到<code>pom.xml</code>。为了做到这点，需要在<code>dependencies</code>标签后面添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个插件可以将应用打包成可执行的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;使用<code>mvn package</code>命令或者IDEA自带的Maven工具中LifeCycle中的package进行打包，然后会在target目录中看到：<code>spring-boot-01-helloworld-1.0-SNAPSHOT</code>，打开命令行窗口，进入这个jar包所在的目录，然后使用如下命令运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-01-helloworld-1.0-SNAPSHOT</span><br></pre></td></tr></table></figure>



<h2 id="HelloWorld分析"><a href="#HelloWorld分析" class="headerlink" title="HelloWorld分析"></a>HelloWorld分析</h2><h3 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h3><p><strong>父项目</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&downarrow;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而<code>spring-boot-dependencies</code>则是Spring Boot的版本仲裁中心：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.12<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.80<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以后导入依赖的时候，默认不需要提供版本号（因为仲裁中心给出了默认的版本号），在仲裁中心中没有的则需要给出版本号</p>
<p><strong>启动器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>spring-boot-starter-web</code>：帮我们导入web模块正常依赖所依赖的组件</p>
<p><code>spring-boot-starter-xxx</code>：Spring Boot的场景启动器</p>
<p>&emsp;&emsp;Spring Boot将一个个功能场景抽取出来，构成一个个starter。需要某个场景时，就导入对应的starter。更多有关starter的内容可以参考：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></p>
<h3 id="主程序类、主入口类"><a href="#主程序类、主入口类" class="headerlink" title="主程序类、主入口类"></a>主程序类、主入口类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动Spring应用</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>@SpringBootApplication</strong>：Spring Boot应用标注在某个类上说明是Spring Boot的主配置类，Spring Boot就应该运行这个类的<code>main</code>方法来启动Spring Boot应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>@SpringBootConfiguration</strong>：Spring Boot的配置类，标注在某个类上说明是Spring Boot的配置类</p>
<ul>
<li><p>@Configuration：这个注解在Spring中学习过，标注在某个类上表示这个类是Spring的配置类（和配置文件的作用相同）</p>
<p>查看@Configuration源码可以发现，@Configuration也标注的类也是一个组件（@Component）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>@EnableAutoConfiguration</strong>：开启自动配置功能。</p>
<p>在Spring Boot的HelloWord中，可以发现即使我们没有编写任何的配置，还是可以实现之前需要进行大量配置才能够完成的功能。这就是通过Spring Boot的<strong>自动配置</strong>功能。@EnableAutoConfiguration告诉Spring Boot开启自动配置功能，这样自动配置才能够生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>@AutoConfigurationPackage</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>AutoConfigurationPackages.Registrar</code>实现了<code>ImportBeanDefinitionRegistrar</code>，@Imort注解会向IoC容器快速注入组件，如果是<code>ImportBeanDefinitionRegistrar</code>类型，则会调用其<code>registerBeanDefinitions</code>方法来注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以在此处打上断点，然后使用IDEA的工具计算<code>new PackageImports(metadata).getPackageNames()</code>的值是多少，结果发现，这个值就是主配置类（<code>HelloWorldMainApplication</code>所在的包名），也就是说<strong>@Import(AutoConfigurationPackages.Registrar.class)会将主配置类所在包及所有子包下面的所有组件注册到IoC容器当中</strong>，这也是为什么主配置类的位置有明确的要求（约定）</p>
</li>
</ul>
<ul>
<li><p><strong>@Import(AutoConfigurationImportSelector.class)</strong></p>
<p>&emsp;&emsp;<code>AutoConfigurationImportSelector</code>是<code>ImportSelector</code>类的对象，如果@Import注解中给出的值的类型为<code>ImportSelector</code>类型的对象，则其中的<code>selectImports</code>方法则会返回所有要注入组件的全类名构成的String类型的数组。所以值得注意的就是<code>AutoConfigurationImportSelector</code>的<code>selectImports</code>方法：</p>
<p><strong>注意</strong>：<code>AutoConfigurationImportSelector</code>并非直接实现<code>ImportSelector</code>接口，而是实现其子接口<code>DeferredImportSelector</code>（至少在我使用的2.3.0版本是这样的）</p>
<p>&emsp;&emsp;在<code>selectImports</code>方法上打断点然后debug模式运行主配置类，结果程序没有在<code>selectImports</code>方法上停住，这说明并非使用了<code>selectImports</code>方法来导入组件的。</p>
<p>&emsp;&emsp;然后在<code>getAutoConfigurationEntry</code>方法上打断点，debug之后发现，在这个方法上停了。查看方法调用栈发现，是在一个名为<code>process</code>的方法中调用了<code>getAutoConfiugrationEntry</code>来获取要加载到容器的组件的。如果你看过<code>DeferredImportSelector</code>的源码就会发现，这是<code>DeferredImportSelector</code>接口中定义的一个接口<code>Group</code>中的一个方法。</p>
<p>&emsp;&emsp;查看<code>AutoConfigurationImportSelector</code>的源码可以发现有一个私有的静态内部类<code>AutoConfigurationGroup</code>实现了<code>DeferredImportSelector</code>接口中的<code>Group</code>接口。所以说@Import在属性给出的值的类型为<code>DeferredImportSelector</code>时会调用<code>process</code>方法来处理要导入到容器的组件</p>
<p><strong>getAutoConfigurationEntry</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200909092037764.png" align="left"/>

<p>&emsp;&emsp;这里获取了各种<code>XXXAutoConfiguration</code>，也就是自动配置类；将这些自动配置类导入到组件之后，就不需要我们再编写配置文件了，因为这些自动配置类中已经给出了默认的配置。当然，我们也可以编写配置文件来覆盖这些默认的配置！</p>
<p>&emsp;&emsp;这个方法中，调用了<code>getCandidateConfigurations</code>方法来获取候选的配置，<code>getCandidateConfigurations</code>方法中又调用了<code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, classLoader)</code>来加载可用的自动配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;此处<code>factoryTypeName</code>的值为<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>，<code>loadSpringFactories</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">                                 classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                                 ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">        result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">            URL url = urls.nextElement();</span><br><span class="line">            UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line">                <span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">                    result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(classLoader, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">                                           FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;<code>FACTORIES_RESOURCE_LOCATION</code>的值为<code>META-INF/spring.factories</code>，也就是说所有的自动配置类的全类名路径会存储在<code>META-INF/spring.factories</code>这个文件中，这个文件中存储的都是一个键对应多值的形式，如下图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200909094304826.png" align="left"/>

<p>&emsp;&emsp;这个文件中一个键对应的值是一个字符串数组，<code>getOrDefault</code>方法的作用就是从中获取键为<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>所对应的值（<code>List&lt;String&gt;</code>类型)</p>
</li>
</ul>
<h2 id="快速创建Spring-Boot应用"><a href="#快速创建Spring-Boot应用" class="headerlink" title="快速创建Spring Boot应用"></a>快速创建Spring Boot应用</h2><p>&emsp;&emsp;前面介绍了如何使用Maven来创建一个Spring Boot应用，除了这种方式，Spring还提供了一种更加快捷的方式来创建Spring Boot应用。它就是Spring Initializr，下面将介绍如何使用Spring Initializr来创建Spring Boot应用：</p>
<p>&emsp;&emsp;首先点击New Project选中Spring Initializr，选择JDK版本并设置自定义的镜像网站：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200909102052084.png" align="left"/>

<p>&emsp;&emsp;点击next，填写并选择所需的设置</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200909102432429.png" align="left"/>

<p>&emsp;&emsp;点击next，选择所需要的模块</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200909102631784.png" align="left"/>

<p>&emsp;点击next，再点击finish完成项目的创建</p>
<p>编写HelloController，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"quick hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@RestController就相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br></pre></td></tr></table></figure>

<p>运行主程序，访问<code>localhost:8080/hello</code>进行测试，结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200909103548386.png" align="left"/>



<p>默认生成的Spring Boot项目：</p>
<ul>
<li><p>主程序已经编写好了，我们只需要编写自己的业务逻辑即可</p>
</li>
<li><p>resources目录结构：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200909104856036.png" align="left"/>

<ul>
<li>static：用来存放静态资源，包括js、css、images</li>
<li>templates：保存所有的模板页面（Spring Boot默认使用jar的打包方式，使用嵌入式的Tomcat，默认不支持JSP页面），可以使用模板引擎（freemarker、thymeleaf）</li>
<li>application.properties：Spring Boot应用的配置文件，可以修改一些默认设置</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot基础</tag>
        <tag>SpringBoot入门</tag>
        <tag>Spring Boot HelloWorld</tag>
        <tag>SpringBoot核心技术</tag>
      </tags>
  </entry>
  <entry>
    <title>七、SpringBoot启动配置原理</title>
    <url>/2020/09/07/%E4%B8%83%E3%80%81SpringBoot%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Spring-Boot启动配置原理"><a href="#Spring-Boot启动配置原理" class="headerlink" title="Spring Boot启动配置原理"></a>Spring Boot启动配置原理</h1><p>几个重要的回调机制：</p>
<ul>
<li><code>ApplicationContextInitializer</code>：配置在类路径META-INF/spring.factories中的</li>
<li><code>SpringApplicationRunListener</code>：配置在类路径META-INF/spring.factories中的</li>
<li><code>ApplicationRunner</code>：放在IoC容器中的</li>
<li><code>CommandLineRunner</code>：放在IoC容器中的</li>
</ul>
<h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p><strong>1、创建SpringApplication</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">//主配置类必须不为空</span></span><br><span class="line">    Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">    <span class="comment">//保存主配置类在primarySources中</span></span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">//获取Web应用的类型，有三种REACTIVE、SERVELT、NONE（这里是SERVLET）</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">//从类路径下找到META-INF/spring.factories中配置的所有ApplicationContextInitializer然后保存到this.initializers中</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">//从类路径下找到META-INF/spring.factories中配置的所有的ApplicationListener然后保存到</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">//从传入的配置类中找到有main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到的所有<code>ApplicationContextInitializer</code>（后面会用到）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201004220508975.png" align="left"/>

<p>找到的所有<code>ApplicationListener</code></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201004220747271.png" align="left"/>



<p><strong>2、运行run方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//StopWatch是Spring用于开始停止的监听无需关注</span></span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    <span class="comment">//获取SpringApplicationRunListener，从类路径下META-INF/spring.factories中获取</span></span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">//回调所有的SpringApplicationRunListener的starting方法</span></span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//封装命令行参数</span></span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">        <span class="comment">//准备环境</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建环境完成后会回到所有SpringApplicationRunListener的environmentPrepared方法，表示环境准备完成</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">        <span class="comment">//从配置文件中读取spring.beaninfo.ignore指定的忽略的bean信息添加到系统属性中</span></span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">//打印Beanner就是下面这个</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  .   ____          _            __ _ _</span></span><br><span class="line"><span class="comment">         /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="comment">        ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span></span><br><span class="line"><span class="comment">         \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span><br><span class="line"><span class="comment">          '  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="comment">         =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="comment">         :: Spring Boot ::        (v2.3.0.RELEASE)</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        <span class="comment">//根据WebApplicationType属性利用BeanUtils通过反射来创建IoC容器有如下三种情况：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.SERVLET：创建AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line"><span class="comment">        2.REACTIVE：创建oAnnotationConfigReactiveWebServerApplicationContext</span></span><br><span class="line"><span class="comment">        3.NONE：创建AnnotationConfigApplicationContext</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        <span class="comment">//从类路径META-INF/spring.factories中获取SpringBootExceptionReporter保存到exceptionReporters集合中</span></span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">                                                         new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        <span class="comment">//准备上下文环境，传入了之前创建好的IoC容器、监听器、封装好的命令行参数、Banner</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        将environment保存到IoC容器中，而且调用了applyInitializers(context);回调之前保存的所有ApplicationContextInitializer的initialize方法</span></span><br><span class="line"><span class="comment">        然后回调所有ApplicationContextInitializer的contextPrepared方法</span></span><br><span class="line"><span class="comment">        方法最后最后回调所有ApplicationContextInitializer的contextLoaded方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">//刷新IoC容器，也就是IoC容器的初始化过程（调用refresh()方法），如果是Web应用还会创建嵌入式的Tomcat</span></span><br><span class="line">        <span class="comment">//扫描、创建、加载所有组件的地方（配置类、组件、自动配置等都是在这里完成的，详细参考Spring注解版)</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">        <span class="comment">//SpringBoot 2.0以上版本这个方法为空</span></span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="comment">//日志记录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用所有的SpringApplicationRunListener的started方法</span></span><br><span class="line">        listeners.started(context);</span><br><span class="line">        <span class="comment">//调用所有的ApplicationRunner和CommandLineRunner的run方法</span></span><br><span class="line">        <span class="comment">//ApplicationRunner先回调然后回调CommandLineRunner</span></span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="comment">//异常处理</span></span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用所有SpringApplicationRunListener的running方法</span></span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="comment">//异常处理</span></span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回IoC容器</span></span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h2><p>通过上一个章节的源码分析，了解到有如下几个重要的回调机制：</p>
<ul>
<li><code>ApplicationContextInitializer</code>：配置在类路径META-INF/spring.factories中的</li>
<li><code>SpringApplicationRunListener</code>：配置在类路径META-INF/spring.factories中的</li>
<li><code>ApplicationRunner</code>：放在IoC容器中的</li>
<li><code>CommandLineRunner</code>：放在IoC容器中的</li>
</ul>
<p>下面来进行测试：</p>
<p><strong>1、创建这四个接口的实现类</strong></p>
<p><code>MyApplicationContextInitializer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyApplicationContextInitializer的initialize方法执行了..."</span> + applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MySpringApplicationRunListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意这里要提供一个有参构造器，因为通过反射创建这个对象时调用的是这个有参构造器，不提供会报NoSuchMethodException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySpringApplicationRunListener#starting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySpringApplicationRunListener#environmentPrepared..."</span> + environment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySpringApplicationRunListener#contextPrepared..."</span> + context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySpringApplicationRunListener#contextLoaded..."</span> + context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySpringApplicationRunListener#started..."</span> + context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySpringApplicationRunListener#running..."</span> + context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySpringApplicationRunListener#failed..."</span> + context + <span class="string">"..."</span> + exception);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MyApplicationRunner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyApplicationRunner#run..."</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MyCommandLineRunner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyCommandLineRunner#run..."</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>2、使用spring.factories和@Component分别导入</strong></p>
<p><code>spring.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">com.zxw.springboot.listener.MyApplicationContextInitializer</span></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">com.zxw.springboot.listener.MySpringApplicationRunListener</span></span><br></pre></td></tr></table></figure>

<p><code>MyApplicationRunner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyApplicationRunner#run..."</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MyCommandLineRunner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyCommandLineRunner#run..."</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、运行Spring Boot应用进行测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySpringApplicationRunListener#starting...</span><br><span class="line">MySpringApplicationRunListener#environmentPrepared...StandardServletEnvironment &#123;activeProfiles&#x3D;[], defaultProfiles&#x3D;[default], propertySources&#x3D;[ConfigurationPropertySourcesPropertySource &#123;name&#x3D;&#39;configurationProperties&#39;&#125;, StubPropertySource &#123;name&#x3D;&#39;servletConfigInitParams&#39;&#125;, StubPropertySource &#123;name&#x3D;&#39;servletContextInitParams&#39;&#125;, PropertiesPropertySource &#123;name&#x3D;&#39;systemProperties&#39;&#125;, OriginAwareSystemEnvironmentPropertySource &#123;name&#x3D;&#39;systemEnvironment&#39;&#125;, RandomValuePropertySource &#123;name&#x3D;&#39;random&#39;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> &#x2F;\\ &#x2F; ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#39;_ | &#39;_| | &#39;_ \&#x2F; _&#96; | \ \ \ \</span><br><span class="line"> \\&#x2F;  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#39;  |____| .__|_| |_|_| |_\__, | &#x2F; &#x2F; &#x2F; &#x2F;</span><br><span class="line"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|_|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|___&#x2F;&#x3D;&#x2F;_&#x2F;_&#x2F;_&#x2F;</span><br><span class="line"> :: Spring Boot ::        (v2.3.0.RELEASE)</span><br><span class="line"></span><br><span class="line">MyApplicationContextInitializer的initialize方法执行了...org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@33afa13b, started on Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">MySpringApplicationRunListener#contextPrepared...org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@33afa13b, started on Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">2020-10-05 08:49:25.978  INFO 4472 --- [           main] c.z.springboot.SpringBoot07Application   : Starting SpringBoot07Application on DESKTOP-FLFSLOV with PID 4472 (D:\Java EE workspace\spring-boot-07\target\classes started by zxw in D:\Java EE workspace\spring-boot-07)</span><br><span class="line">2020-10-05 08:49:25.980  INFO 4472 --- [           main] c.z.springboot.SpringBoot07Application   : No active profile set, falling back to default profiles: default</span><br><span class="line">MySpringApplicationRunListener#contextLoaded...org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@33afa13b, started on Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">2020-10-05 08:49:26.805  INFO 4472 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2020-10-05 08:49:26.814  INFO 4472 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2020-10-05 08:49:26.815  INFO 4472 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat&#x2F;9.0.35]</span><br><span class="line">2020-10-05 08:49:26.889  INFO 4472 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2020-10-05 08:49:26.889  INFO 4472 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 871 ms</span><br><span class="line">2020-10-05 08:49:27.021  INFO 4472 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;</span><br><span class="line">2020-10-05 08:49:27.071  INFO 4472 --- [           main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page: class path resource [static&#x2F;index.html]</span><br><span class="line">2020-10-05 08:49:27.162  INFO 4472 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;</span><br><span class="line">2020-10-05 08:49:27.170  INFO 4472 --- [           main] c.z.springboot.SpringBoot07Application   : Started SpringBoot07Application in 1.586 seconds (JVM running for 3.073)</span><br><span class="line">MySpringApplicationRunListener#started...org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@33afa13b, started on Mon Oct 05 08:49:26 CST 2020</span><br><span class="line">MyApplicationRunner#run...org.springframework.boot.DefaultApplicationArguments@2c1dc8e</span><br><span class="line">MyCommandLineRunner#run...[Ljava.lang.String;@b273a59</span><br><span class="line">MySpringApplicationRunListener#running...org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@33afa13b, started on Mon Oct 05 08:49:26 CST 2020</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot核心技术</tag>
        <tag>SpringBoot启动配置原理</tag>
      </tags>
  </entry>
  <entry>
    <title>三、SpringBoot与日志</title>
    <url>/2020/09/07/%E4%B8%89%E3%80%81SpringBoot%E4%B8%8E%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="Spring-Boot与日志"><a href="#Spring-Boot与日志" class="headerlink" title="Spring Boot与日志"></a>Spring Boot与日志</h1><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><p>&emsp;&emsp;市面上存在很多日志框架：JUL（java.util.logging），JCL（Apache Commons Logging），Log4j，Log4j2，Logback，SLF4j，jboss-logging等。Spring Boot框架内使用JCL，spring-boot-starter-logging采用了slf4j+logback的形式，Spring Boot也能够自动适配（jul、log4j、logback）并简化配置</p>
<table>
<thead>
<tr>
<th align="left">日志门面（日志的抽象层）</th>
<th align="left">日志实现</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><s>JCL（Jakarta Commons Logging）</s><br/><font color="red">SLF4J（Simple Logging Facade for Java）</font><br/><s>jboss-logging</s></td>
<td align="left">log4j<br/>JUL（java.util.logging）<br/>Log4j2<br/><font color="red">Logback</font></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层）、右边选择一个实现</p>
<p>日志门面：SLF4J</p>
<p>日志实现：Logback</p>
<p>Spring Boot底层是Spring框架，Spring框架默认使用的是JCL；</p>
<p><strong>Spring Boot选用slf4j+logback</strong></p>
<h2 id="slf4j使用"><a href="#slf4j使用" class="headerlink" title="slf4j使用"></a>slf4j使用</h2><h3 id="如何在系统中使用slf4j"><a href="#如何在系统中使用slf4j" class="headerlink" title="如何在系统中使用slf4j"></a>如何在系统中使用slf4j</h3><p>&emsp;&emsp;以后开发的时候，日志方法的记录，应该调用日志抽象层的方法，而不是直接调用日志的实现类。</p>
<p>首先应该导入slf4j依赖和logback的实现依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>slf4j使用原理</strong>：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200913191021851.png" align="left"/>

<p>&emsp;&emsp;上图就是slf4j的使用原理，slf4j是日志的抽象层，它定义了一个日志框架应该有什么样的功能，但是没有给出具体的实现。从上面的图可以看到slf4j对于不同的日志实现的支持。有些日志实现是在slf4j诞生之后才出现的，所以它们直接实现了slf4j定义的方法；而在slf4j之前就有的日志框架就需要一个适配器来将通过适配器调用这些日志实现类的方法来实现slf4j中定义的功能。上图给出了需要导入何种包，在使用不同的日志门户和日志实现的组合需要导入依赖时，可以查看这张图。</p>
<p>&emsp;&emsp;之前每一个日志框架都有自己的配置文件。使用slf4j，配置文件<strong>还是使用原有日志框架的配置文件</strong>。</p>
<h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><p>a（slf4j+logback）：Spring（jul）、Hibernate（jboss-logging）、MyBatis、…</p>
<p>这么多的框架用了很多种的日志框架，那么如何统一来使用slf4j进行输出？slf4j的官网有这样一张图：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200913194449740.png" align="left"/>

<p><strong>解决思路</strong>：无论是何种组合的方式，最终程序编码时都应当面向slf4j进行编程，但是集成的各种框架中又需要不同的日志框架，此时可以将这些框架的依赖排除，然后添加一个替换包来冒充原有的日志框架包，这个替换包中所有的类以及类中的方法都和原有的相同，但是其实现也是面向slf4j进行编程的，这样无论是slf4j加上和中具体日志实现的组合都可以用这种方式来解决！</p>
<h2 id="Spring-Boot日志关系"><a href="#Spring-Boot日志关系" class="headerlink" title="Spring Boot日志关系"></a>Spring Boot日志关系</h2><p>&emsp;&emsp;Spring Boot项目中无论是<code>spring-boot-starter-web</code>还是<code>spring-boot-starter-test</code>都依赖了<code>spring-boot-starter</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;而在<code>spring-boot-starter</code>中又依赖了<code>spring-boot-starter-logging</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;Spring Boot使用<code>spring-boot-starter-logging</code>来实现日志功能，这一部分就是之前所说的slf4j+logback的实现，具体可以参考上一章节<a href="#遗留问题">遗留问题</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200913220820749.png" align="left"/>

<p><strong>总结</strong>：</p>
<ol>
<li>Spring Boot底层使用的是slf4j+logback的方式进行日志记录</li>
<li>Spring Boot也把其他的日志替换成了slf4j替换包</li>
<li>如果我们要引入其他框架，一定要把这个框架的默认日志依赖移除掉</li>
</ol>
<p>Spring 5的日志框架已经做了修改，Spring 4使用的是commons-logging，而Spring 5使用的则是jul，所以这里存在的是jul-to-slf4j。</p>
<h2 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h2><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>&emsp;&emsp;Spring Boot默认已经帮我们配置好了日志，这也是为什么以启动Spring Boot控制台就会按照指定格式打印日志信息。可以通过slf4j的日志工厂获<code>LoggerFactory</code>调用其<code>getLogger(this.getClass())</code>方法来获取一个日志记录器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br></pre></td></tr></table></figure>

<p>日志有五个级别，从低到高分别是：</p>
<ul>
<li>trace</li>
<li>debug</li>
<li>info</li>
<li>warn</li>
<li>error</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot03LoggingApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取日志记录器</span></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        日志的级别由低到高：trace、debug、info、warn、error</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        logger.trace(<span class="string">"这是trace日志"</span>);</span><br><span class="line">        logger.debug(<span class="string">"这是debug日志"</span>);</span><br><span class="line">        <span class="comment">//Spring Boot的默认日志级别是info，info及更高级别的日志才会输出</span></span><br><span class="line">        logger.info(<span class="string">"这是info日志"</span>);</span><br><span class="line">        logger.warn(<span class="string">"这是warn日志"</span>);</span><br><span class="line">        logger.error(<span class="string">"这是error日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行这个测试可以得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-14 08:59:38.764  INFO 1664 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是info日志</span><br><span class="line">2020-09-14 08:59:38.764  WARN 1664 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是warn日志</span><br><span class="line">2020-09-14 08:59:38.764 ERROR 1664 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是error日志</span><br></pre></td></tr></table></figure>



<p>这说明<strong>默认情况下Spring Boot的日志级别是info</strong>，也就是说Spring Boot运行时只有info、warn、error级别的日志会被输出</p>
<h4 id="调整日志级别"><a href="#调整日志级别" class="headerlink" title="调整日志级别"></a>调整日志级别</h4><p>例如：在配置文件中将com.zxw包的日志级别设置为trace，可以在<code>application.properties</code>中添加如下设置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.com.zxw</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure>

<p>再次运行测试类，得到如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-14 09:19:46.890 TRACE 7900 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是trace日志</span><br><span class="line">2020-09-14 09:19:46.891 DEBUG 7900 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是debug日志</span><br><span class="line">2020-09-14 09:19:46.891  INFO 7900 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是info日志</span><br><span class="line">2020-09-14 09:19:46.891  WARN 7900 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是warn日志</span><br><span class="line">2020-09-14 09:19:46.891 ERROR 7900 --- [           main] .z.s.SpringBoot03LoggingApplicationTests : 这是error日志</span><br></pre></td></tr></table></figure>



<h4 id="配置文件目录和配置文件名称"><a href="#配置文件目录和配置文件名称" class="headerlink" title="配置文件目录和配置文件名称"></a>配置文件目录和配置文件名称</h4><p>注意<code>logging.file</code>和<code>logging.name</code>已经被弃用</p>
<p>配置日志文件名称：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.file.name</span>=<span class="string">springboot.log</span></span><br></pre></td></tr></table></figure>

<p>此时运行测试类，会发现当前项目src所在的同级目录下出现了一个<code>springboot.log</code>文件，这就是输出的日志文件 </p>
<p>当然这种方式也可以指定日志文件的位置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.file.name</span>=<span class="string">D:/springboot.log</span></span><br></pre></td></tr></table></figure>

<p>还可以通过<code>logging.file.path</code>来指定日志文件的路径，这会在指定目录生成一个名为<code>spring.log</code>的日志文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果不指定盘符，则是相对于当前项目的路径</span></span><br><span class="line"><span class="meta">logging.file.path</span>=<span class="string">D:/log/</span></span><br></pre></td></tr></table></figure>

<p>但是要注意，<code>logging.file.name</code>和<code>logging.file.path</code>只需要配置一个即可，因为它们的功能有所冲突</p>
<h4 id="日志的输出格式"><a href="#日志的输出格式" class="headerlink" title="日志的输出格式"></a>日志的输出格式</h4><ul>
<li><code>%d</code>表示日期时间</li>
<li><code>%thread</code>表示线程名</li>
<li><code>%-5level</code>：级别从左显示五个字符宽度</li>
<li><code>%logger{50}</code>：表示logger名字最长50个字符，否则按照句点分割</li>
<li><code>%msg</code>：日志消息</li>
<li><code>%n</code>：表示换行符</li>
</ul>
<p><strong>控制台输出日志的格式</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置控制台输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>

<p><strong>日志文件日志的格式设置</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置日志文件中输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] ==== %-5level === %logger&#123;50&#125; === %msg%n</span></span><br></pre></td></tr></table></figure>



<h3 id="指定配置"><a href="#指定配置" class="headerlink" title="指定配置"></a>指定配置</h3><p>&emsp;&emsp;给类路径下放上每个日志框架自己的配置文件即可，这样Spring Boot就不会使用默认的配置，而是使用类路径下的配置文件，下面给出不同日志系统和对应的日志文件名：</p>
<table>
<thead>
<tr>
<th align="left">Logging System</th>
<th align="left">Customization</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Logback</td>
<td align="left"><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td>
</tr>
<tr>
<td align="left">Log4j2</td>
<td align="left"><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td align="left">JDK (Java Util Logging)</td>
<td align="left"><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>推荐使用带spring扩展名的配置文件，这样配置文件就不会直接被日志框架识别，而是由Spring Boot来加载，可以使用Spring Boot的Profile功能，否则就会报错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">    在日志文件需要的地方使用这样的标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在特定profile环境才需要加载时可以使用上述标签，使用了之后，只有在标签指定的profile未当前的环境的profile时才会生效！</p>
<p>不同的日志框架应该如何配置，具体可以参考日志框架的官网，或者参考相关博客！</p>
<h2 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h2><p>&emsp;&emsp;前面在<a href="#slf4j使用">slf4j使用</a>中已经介绍过了slf4j是如何实现统一面向slf4j编程的，Spring Boot中默认使用的是slf4j+logback的方式，如果想要切换其他的日志框架应该怎么做？</p>
<p>&emsp;&emsp;在SpringBoot切换日志框架其实是不推荐的，默认的slf4j+logback的方式就已经很好了，但也不排除有必须要换的情况。所以下面将介绍：</p>
<ul>
<li>切换到slf4j+log4j</li>
<li>切换到slf4j+log4j2</li>
</ul>
<h3 id="切换到log4j"><a href="#切换到log4j" class="headerlink" title="切换到log4j"></a>切换到log4j</h3><ol>
<li><p>在slf4j的官网上找到那张slf4j绑定log4j的图，如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200915190759986.png" align="left"/>
</li>
<li><p>剔除相关包</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200915210818538.png" align="left"/>

<p>使用shift+delete删除这两个依赖（我也不知道为什么idea 2020.2中没有exclude这个选项，但是shift+delete又可以生效）</p>
</li>
<li><p>加入适配器包<code>slf4-log4j12</code>的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>我现在使用的是Spring Boot 2.3.0版本，这个版本中已经不支持log4j了，所以也没有默认的配置，需要自己在类路径下添加log4j的配置文件，例如：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 级别，名称</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug, console</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%m%n</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="切换到slf4j-log4j2"><a href="#切换到slf4j-log4j2" class="headerlink" title="切换到slf4j+log4j2"></a>切换到slf4j+log4j2</h3><p>&emsp;&emsp;比起log4j，更有可能切换到十分优秀的log4j2，下面将介绍如何切换到slf4j+log4j2，其实很简单，因为Spring Boot已经为我们准备号了一个启动器，我们只需要去除之前的日志启动器，然后导入这个新的启动器即可。</p>
<ol>
<li><p>排除<code>spring-boot-starter-logging</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个使用log4j2的启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot日志</tag>
        <tag>SpringBoot核心技术</tag>
      </tags>
  </entry>
  <entry>
    <title>九、SpringBoot与缓存</title>
    <url>/2020/09/07/%E4%B9%9D%E3%80%81SpringBoot%E4%B8%8E%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="Spring-Boot与缓存"><a href="#Spring-Boot与缓存" class="headerlink" title="Spring Boot与缓存"></a>Spring Boot与缓存</h1><h2 id="JSR-107"><a href="#JSR-107" class="headerlink" title="JSR-107"></a>JSR-107</h2><p>Java Caching定义了5个核心接口：</p>
<ul>
<li><strong>CachingProvider</strong>：定义了创建、配置、获取、管理和控制多个<strong>CacheManager</strong>。一个应用可以在运行期间访问多个CachingProvider</li>
<li><strong>CacheManager</strong>：定义了创建、配置、获取、管理和控制多个唯一命名的<strong>Cache</strong>，这些Cache存在于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。</li>
<li><strong>Cache</strong>：是一个类似于Map的数据结构并临时存储以key为索引的值。一个Cache仅被一个CacheManager所拥有。</li>
<li><strong>Entry</strong>：是一个存储在Cache中的key-value对</li>
<li><strong>Expiry</strong>：每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期状态。一旦过期，条目将不可访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置</li>
</ul>
<p>它们之间的关系如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201005152030307.png" align="left"/>



<p>要使用JSR-107，需要导入javax.cache依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.cache/cache-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cache-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>这部分内容了解即可，由于使用JSR-107的难度相对较大，实际开发中更多会使用Spring缓存抽象。</p>
<h2 id="Spring缓存抽象"><a href="#Spring缓存抽象" class="headerlink" title="Spring缓存抽象"></a>Spring缓存抽象</h2><p>Spring从3.1开始定义了<code>org.springframework.cache.Cache</code>和<code>org.springframework.cache.CacheManager</code>接口来统一不同的缓存技术。并且支持JCache（JSR-107）注解简化开发</p>
<ul>
<li>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合</li>
<li>Cache接口下Spring提供了各种XXXCache的实现，例如：RedisCache、EhCacheCache、ConcurrentMapCache等</li>
<li>每次调用需要缓存功能的方法时，Spring会检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户，下次调用时直接从缓存中获取</li>
<li>使用Spring缓存抽象时需要关注以下两点：<ol>
<li>确定方法需要被缓存以及它们的缓存策略</li>
<li>从缓存中读取之前缓存存储的数据</li>
</ol>
</li>
</ul>
<h3 id="几个重要概念-amp-缓存注解"><a href="#几个重要概念-amp-缓存注解" class="headerlink" title="几个重要概念&amp;缓存注解"></a>几个重要概念&amp;缓存注解</h3><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Cache</td>
<td align="left">缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等</td>
</tr>
<tr>
<td align="left">CacheManager</td>
<td align="left">缓存管理器，管理各种缓存（Cache）组件</td>
</tr>
<tr>
<td align="left">@Cacheable</td>
<td align="left">主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td>
</tr>
<tr>
<td align="left">@CacheEvict</td>
<td align="left">清空缓存</td>
</tr>
<tr>
<td align="left">@CachePut</td>
<td align="left">保证方法被调用，又希望结果被缓存</td>
</tr>
<tr>
<td align="left">@EnableCaching</td>
<td align="left">开启基于注解的缓存</td>
</tr>
<tr>
<td align="left">keyGenerator</td>
<td align="left">缓存数据时key的生成策略</td>
</tr>
<tr>
<td align="left">serialize</td>
<td align="left">缓存数据时value序列化策略</td>
</tr>
</tbody></table>
<h3 id="Spring缓存抽象使用示例"><a href="#Spring缓存抽象使用示例" class="headerlink" title="Spring缓存抽象使用示例"></a>Spring缓存抽象使用示例</h3><h4 id="搭建基本环境"><a href="#搭建基本环境" class="headerlink" title="搭建基本环境"></a>搭建基本环境</h4><p><strong>1、使用Spring Initializr创建一个用于演示Spring缓存抽象使用的项目<code>spring-boot-01-cache</code>，在I/O中选择Spring cache abstraction</strong></p>
<p><strong>2、连接本地数据库创建spring_cache数据库，运行SQL文件创建department和employee两张表</strong></p>
<p>department表</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201005165828504.png" align="left"/>

<p>employee表</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201005165900720.png" align="left"/>

<p><strong>3、创建JavaBean</strong></p>
<p><code>Department</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Department&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", departmentName='"</span> + departmentName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(Integer id, String departmentName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.departmentName = departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDepartmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartmentName</span><span class="params">(String departmentName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departmentName = departmentName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Employee</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> Integer dId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", gender="</span> + gender +</span><br><span class="line">                <span class="string">", dId="</span> + dId +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer id, String lastName, String email, Integer gender, Integer dId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.dId = dId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getdId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setdId</span><span class="params">(Integer dId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dId = dId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、整合MyBatis操作数据库</strong></p>
<ol>
<li><p>配置数据源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spring_cache?serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用注解版的MyBatis</p>
<p>1）使用@MapperScan指定要扫描的Mapper接口所在的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.zxw.cache.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01CacheApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot01CacheApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建对应的Mapper接口</p>
<p><code>DepartmentMapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>EmployeeMapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM employee WHERE id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"UPDATE employee SET "</span> +</span><br><span class="line">            <span class="string">"lastName=#&#123;lastName&#125;,"</span> +</span><br><span class="line">            <span class="string">"email=#&#123;email&#125;,"</span> +</span><br><span class="line">            <span class="string">"gender=#&#123;gender&#125;,"</span> +</span><br><span class="line">            <span class="string">"d_id=#&#123;dId&#125;"</span> +</span><br><span class="line">            <span class="string">"WHERE id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"DELETE FROM employee WHERE id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO employee(lastName,email,gender,d_id) "</span> +</span><br><span class="line">            <span class="string">"VALUES(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写配置文件，开启驼峰命名映射</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="string">on</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>5、编写service和controller</strong></p>
<p><code>EmployeeService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询"</span> + id + <span class="string">"号员工"</span>);</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmpById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>EmployeeController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployee</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeService.getEmp(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6、访问<a href="http://localhost:8080/emp/1进行测试" target="_blank" rel="noopener">http://localhost:8080/emp/1进行测试</a></strong>（已经插入了一条记录）</p>
<p>结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201005190631534.png" align="left"/>



<h4 id="快速体验缓存"><a href="#快速体验缓存" class="headerlink" title="快速体验缓存"></a>快速体验缓存</h4><ol>
<li><p>开启基于注解的缓存（使用@EnableCaching）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.zxw.cache.mapper"</span>)</span><br><span class="line"><span class="comment">//开启基于注解的缓存</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01CacheApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot01CacheApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>标注缓存注解</p>
<p><strong>@Cacheable注解的几个属性：</strong></p>
<ul>
<li><p>cacheNames/value：指定组件的名字，缓存中有很多种缓存，例如：Department的缓存、Employee的缓存等等，需要为缓存指定一个名字区分是何种类型的缓存。注意：这里可以指定多个缓存名</p>
</li>
<li><p>key：缓存数据时使用的key，有key才能取得对应的值。默认使用方法参数的值，此处可以使用SpEL表达式，如下表所示</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>methodName</td>
<td>当前方法名</td>
<td>#root.methodName</td>
</tr>
<tr>
<td>method</td>
<td>当前方法</td>
<td>#root.method.name</td>
</tr>
<tr>
<td>target</td>
<td>当前被调用的对象</td>
<td>#root.target</td>
</tr>
<tr>
<td>targetClass</td>
<td>当前被调用的对象的class</td>
<td>#root.targetClass</td>
</tr>
<tr>
<td>args</td>
<td>当前方法组成的数组</td>
<td>#root.args[0]</td>
</tr>
<tr>
<td>caches</td>
<td>当前被调用的方法使用的Cache</td>
<td>#root.caches[0].name</td>
</tr>
<tr>
<td>argument name</td>
<td>参数名</td>
<td>#id 参数id的值 等同于#a0 #p0 #root.args[0]</td>
</tr>
<tr>
<td>result</td>
<td>方法执行后的返回值（只有在方法执行之后有效）</td>
<td>#result</td>
</tr>
</tbody></table>
<p>#root可以省略，Spring默认使用的就是#root</p>
</li>
<li><p>keyGenerator：key的生成器，默认的生成器会指定方法参数值作为key，可以指定IoC容器种的key生成器的id。key和keyGenerator二选一</p>
</li>
<li><p>cacheManager：指定缓存管理器。</p>
</li>
<li><p>cacheResolver：指定缓存解析器。cacheManager和cacheResolver二选一</p>
</li>
<li><p>condition：指定符合条件的情况下才缓存，可以使用SpEL表达式</p>
</li>
<li><p>unless：当unless指定的条件为true，方法的返回值就不会被缓存，可以获取到结果进行判断</p>
</li>
<li><p>sync：缓存是否使用异步模式</p>
</li>
</ul>
<p>在EmployeeService中使用@Cacheable注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的运行结果进行缓存,以后相同的数据会从缓存中获取，不用调用方法了</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheNames = &#123;<span class="string">"emp"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询"</span> + id + <span class="string">"号员工"</span>);</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmpById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要显示查询所用的SQL语句，则需要调整mapper所在包对应的日志级别：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">zxw:</span></span><br><span class="line">        <span class="attr">cache:</span></span><br><span class="line">          <span class="attr">mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<p>重启Spring Boot项目之后，连续访问<a href="http://localhost:8080/emp/1两次，发现控制台只输出了一次SQL语句，这说明缓存生效了！" target="_blank" rel="noopener">http://localhost:8080/emp/1两次，发现控制台只输出了一次SQL语句，这说明缓存生效了！</a></p>
<p><strong>@CachePut</strong>：先调用目标方法，然后将目标方法的结果缓存起来，它的属性和@Cacheable相同</p>
<p><strong>注意</strong>：使用@CachePut时需要保证key是一致的！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(cacheNames = &#123;<span class="string">"emp"</span>&#125;, key=<span class="string">"#employee.id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">updateEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"更新"</span> + employee.getId() + <span class="string">"号员工"</span>);</span><br><span class="line">    employeeMapper.updateEmp(employee);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@CacheEvict</strong>：缓存清除</p>
<p>key可以指定要清除的key，默认值也是方法参数</p>
<p><strong>allEntries</strong>：是否删除该cacheNames的所有缓存，默认值为false</p>
<p><strong>beforeInvocation</strong>：清除缓存操作是否在方法之前执行，默认值为false，即在方法之后执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(cacheNames = &#123;<span class="string">"emp"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"删除"</span> + id + <span class="string">"号员工"</span>);</span><br><span class="line">    employeeMapper.deleteEmpById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Caching</strong>：如果缓存策略比较复杂，可以使用@Caching注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Caching &#123;</span><br><span class="line"></span><br><span class="line">	Cacheable[] cacheable() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	CachePut[] put() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	CacheEvict[] evict() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Caching</span>(</span><br><span class="line">    cacheable = &#123;</span><br><span class="line">        <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"emp"</span>, key = <span class="string">"#lastName"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    put = &#123;</span><br><span class="line">        <span class="meta">@CachePut</span>(cacheNames = <span class="string">"emp"</span>, key = <span class="string">"#result.id"</span>),</span><br><span class="line">        <span class="meta">@CachePut</span>(cacheNames = <span class="string">"emp"</span>, key = <span class="string">"#result.email"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employeeMapper.getEmpByLastName(lastName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@CacheConfig</strong>：一些公共的配置可以通过@CacheConfig在Mapper类上进行配置</p>
</li>
</ol>
<h3 id="缓存工作原理"><a href="#缓存工作原理" class="headerlink" title="缓存工作原理"></a>缓存工作原理</h3><p>缓存的自动配置类是<code>CacheAutoConfiguration</code>，其源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CacheManager<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnBean</span>(<span class="title">CacheAspectSupport</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">value</span> </span>= CacheManager<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= <span class="string">"cacheResolver"</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(CacheProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; CouchbaseAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">HazelcastAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">HibernateJpaAutoConfiguration</span>.<span class="title">class</span>, <span class="title">RedisAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">//通过@<span class="title">Import</span>来快速导入组件到容器中，这两个类都是该自动配置类中的静态内部类</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; CacheConfigurationImportSelector<span class="class">.<span class="keyword">class</span>, <span class="title">CacheManagerEntityManagerFactoryDependsOnPostProcessor</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CacheAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以通过在组件中添加CacheManagerCustomizer来对CacheManager进行自定义设置</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CacheManagerCustomizers <span class="title">cacheManagerCustomizers</span><span class="params">(ObjectProvider&lt;CacheManagerCustomizer&lt;?&gt;&gt; customizers)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CacheManagerCustomizers(customizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入CacheManager的验证器</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CacheManagerValidator <span class="title">cacheAutoConfigurationValidator</span><span class="params">(CacheProperties cacheProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">			ObjectProvider&lt;CacheManager&gt; cacheManager)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CacheManagerValidator(cacheProperties, cacheManager);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于对应的Class和Bean都不存在，所以这个组件不会加载</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(LocalContainerEntityManagerFactoryBean<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	@<span class="title">ConditionalOnBean</span>(<span class="title">AbstractEntityManagerFactoryBean</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">static</span> <span class="title">class</span> <span class="title">CacheManagerEntityManagerFactoryDependsOnPostProcessor</span></span></span><br><span class="line"><span class="class">			<span class="keyword">extends</span> <span class="title">EntityManagerFactoryDependsOnPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		CacheManagerEntityManagerFactoryDependsOnPostProcessor() &#123;</span><br><span class="line">			<span class="keyword">super</span>(<span class="string">"cacheManager"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Bean used to validate that a CacheManager exists and provide a more meaningful</span></span><br><span class="line"><span class="comment">	 * exception.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheManagerValidator</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> CacheProperties cacheProperties;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> ObjectProvider&lt;CacheManager&gt; cacheManager;</span><br><span class="line"></span><br><span class="line">		CacheManagerValidator(CacheProperties cacheProperties, ObjectProvider&lt;CacheManager&gt; cacheManager) &#123;</span><br><span class="line">			<span class="keyword">this</span>.cacheProperties = cacheProperties;</span><br><span class="line">			<span class="keyword">this</span>.cacheManager = cacheManager;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			Assert.notNull(<span class="keyword">this</span>.cacheManager.getIfAvailable(),</span><br><span class="line">					() -&gt; <span class="string">"No cache manager could be auto-configured, check your configuration (caching type is '"</span></span><br><span class="line">							+ <span class="keyword">this</span>.cacheProperties.getType() + <span class="string">"')"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> ImportSelector&#125; to add &#123;<span class="doctag">@link</span> CacheType&#125; configuration classes.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="comment">//使用selectImports向容器中注入组件</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">			CacheType[] types = CacheType.values();</span><br><span class="line">			String[] imports = <span class="keyword">new</span> String[types.length];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; types.length; i++) &#123;</span><br><span class="line">				imports[i] = CacheConfigurations.getConfigurationClass(types[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> imports;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>return imports</code>处打上断点，以debug模式启动Spring Boot，imports中的内容如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201006075254658.png" align="left"/>

<p>也可以在CacheType这个枚举类中找到要加载的10个Cache类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CacheType &#123;</span><br><span class="line">    GENERIC,</span><br><span class="line">    JCACHE,</span><br><span class="line">    EHCACHE,</span><br><span class="line">    HAZELCAST,</span><br><span class="line">    INFINISPAN,</span><br><span class="line">    COUCHBASE,</span><br><span class="line">    REDIS,</span><br><span class="line">    CAFFEINE,</span><br><span class="line">    SIMPLE,</span><br><span class="line">    NONE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CacheType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么多的Cache的配置类，究竟哪一个被加载了 ？</p>
<p>要探究Cache的配置类就需要开启自动配置报告：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启自动配置报告</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>正常启动Spring Boot，查看控制台的自动配置报告，搜索<code>CacheConfiguration</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SimpleCacheConfiguration matched:</span><br><span class="line">      - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition)</span><br><span class="line">      - @ConditionalOnMissingBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans (OnBeanCondition)</span><br></pre></td></tr></table></figure>

<p>结果只有<code>SimpleCacheConfiguration</code>被加载了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(CacheManager<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Conditional</span>(<span class="title">CacheCondition</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SimpleCacheConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function">ConcurrentMapCacheManager <span class="title">cacheManager</span><span class="params">(CacheProperties cacheProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">			CacheManagerCustomizers cacheManagerCustomizers)</span> </span>&#123;</span><br><span class="line">		ConcurrentMapCacheManager cacheManager = <span class="keyword">new</span> ConcurrentMapCacheManager();</span><br><span class="line">		List&lt;String&gt; cacheNames = cacheProperties.getCacheNames();</span><br><span class="line">		<span class="keyword">if</span> (!cacheNames.isEmpty()) &#123;</span><br><span class="line">			cacheManager.setCacheNames(cacheNames);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cacheManagerCustomizers.customize(cacheManager);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个配置类中给容器中注册了一个ConcurrentMapCacheManager，这是一个缓存管理器，CacheManager的作用就是用来获取Cache，ConcurrentMapCacheManager将缓存保存在一个ConcurrentMap中</p>
<p><strong>@Cacheable运行流程</strong>：</p>
<p>1、方法运行之前，先去<code>ConcurrentMapCacheManager</code>的<code>getCache</code>方法中查询Cache（缓存组件），按照cacheNames指定的名字来获取（CacheManager先获取相应的缓存）；第一次获取缓存会自动创建一个Cache（缓存组件）</p>
<p>2、调用<code>ConcurrentMapCache</code>的<code>lookup</code>方法去Cache中查找缓存的内容，使用一个key，默认值为方法参数</p>
<p>&emsp;&emsp;key是按照某种策略生成的（通过keyGenerator生成的，默认使用SimpleKeyGenerator）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">generateKey</span><span class="params">(Object... params)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果没有参数，则使用SimpleKey EMPTY = new SimpleKey()作为key</span></span><br><span class="line">    <span class="keyword">if</span> (params.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> SimpleKey.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有一个参数，则使用这个参数的值作为key</span></span><br><span class="line">    <span class="keyword">if</span> (params.length == <span class="number">1</span>) &#123;</span><br><span class="line">        Object param = params[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !param.getClass().isArray()) &#123;</span><br><span class="line">            <span class="keyword">return</span> param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果有多个参数，则使用参数数组作为来构造一个SimpleKey作为key</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleKey(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3、没有查到缓存就调用目标方法</p>
<p>4、将目标方法返回的结果放进缓存中</p>
<p><strong>小结</strong>：方法执行之前，@Cacheable标注的方法，首先会检查缓存中有没有这个数据，默认按照参数的值作为key查询。如果没有，则运行方法并将结果放入缓存；如果有，则拿到缓存中的结果并返回，此时就不会调用目标方法。</p>
<p><strong>核心</strong></p>
<ol>
<li>使用CacheManager（默认为ConcurrentMapCacheManager）按照名字得到Cache（默认为ConcurrentMapCache）组件</li>
<li>key使用KeyGenerator（默认为SimpleKeyGenerator）生成的</li>
</ol>
<h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><p>&emsp;&emsp;Spring Boot默认使用的是ConcurrentMapCacheManager创建ConcurrentMapCache缓存，它将缓存的数据保存在一个ConcurrentMap中。但是在实际开发中，经常使用的是一些缓存中间件，例如：redis、memcached、ehcache。下面将整合redis作为缓存中间件！</p>
<h3 id="使用docker安装redis"><a href="#使用docker安装redis" class="headerlink" title="使用docker安装redis"></a>使用docker安装redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<p>启动redis容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379 --name myredis redis</span><br></pre></td></tr></table></figure>

<p>可以使用Redis Desktop Manager来连接虚拟机（或者远程服务器）中的redis并进行可视化操作</p>
<h3 id="引入redis的starter"><a href="#引入redis的starter" class="headerlink" title="引入redis的starter"></a>引入redis的starter</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入redis的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">redis:</span> </span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.113</span></span><br></pre></td></tr></table></figure>

<p><strong>测试Redis的基本操作</strong>：</p>
<p>自定义的Redis配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于将对象转换为json字符串存入redis的RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Employee&gt; <span class="title">empRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Employee&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        template.setDefaultSerializer(RedisSerializer.json());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面演示了对如何对Redis的五大数据类型进行操作，以及以序列化的方式存储Object和以JSON的方式存储Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01CacheApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key、value都是Object的</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key、value都是字符串的</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;Object, Employee&gt; empRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis常见的五大数据类型：</span></span><br><span class="line"><span class="comment">     *  String（字符串）、List（列表）、Set（集合）、Hash（散列）、ZSet（有序集合）</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForValue():用来操作String</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForList():用来操作List</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForSet():用来操作Set</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForHash():用来操作Hash</span></span><br><span class="line"><span class="comment">     *  stringRedisTemplate.opsForZSet():用来操作ZSet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在redis中保存了一个数据</span></span><br><span class="line">        <span class="comment">//stringRedisTemplate.opsForValue().append("msg", "hello");</span></span><br><span class="line">        <span class="comment">//从redis读取一个数据</span></span><br><span class="line"><span class="comment">//        String msg = stringRedisTemplate.opsForValue().get("msg");</span></span><br><span class="line"><span class="comment">//        System.out.println(msg);</span></span><br><span class="line">        stringRedisTemplate.opsForList().leftPush(<span class="string">"mylist"</span>, <span class="string">"1"</span>);</span><br><span class="line">        stringRedisTemplate.opsForList().leftPush(<span class="string">"mylist"</span>, <span class="string">"2"</span>);</span><br><span class="line">        stringRedisTemplate.opsForList().leftPush(<span class="string">"mylist"</span>, <span class="string">"3"</span>);</span><br><span class="line">        stringRedisTemplate.opsForList().leftPush(<span class="string">"mylist"</span>, <span class="string">"4"</span>);</span><br><span class="line">        stringRedisTemplate.opsForList().leftPush(<span class="string">"mylist"</span>, <span class="string">"5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试保存对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee emp = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//默认如果保存对象，使用jdk序列化机制。序列化后的数据保存到redis</span></span><br><span class="line">        <span class="comment">//redisTemplate.opsForValue().set("emp-01", emp);</span></span><br><span class="line">        <span class="comment">//1、将数据以json方式保存</span></span><br><span class="line">        <span class="comment">//1）自己将对象转化为json字符串</span></span><br><span class="line">        <span class="comment">//2）redisTemplate有默认的序列化规则</span></span><br><span class="line">        empRedisTemplate.opsForValue().set(<span class="string">"emp-01"</span>, emp);</span><br><span class="line"><span class="comment">//        Object value = empRedisTemplate.opsForValue().get("emp-01");</span></span><br><span class="line"><span class="comment">//        System.out.println(value);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee emp = employeeMapper.getEmpById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试缓存"><a href="#测试缓存" class="headerlink" title="测试缓存"></a>测试缓存</h3><p>启动项目，查看控制台的自动配置日志，发现只有Redis的缓存配置生效了，这是因为所有的<code>XXXCacheConfiguration</code>中都有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(CacheManager<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure>

<p>而在<code>RedisCacheConfigurtaion</code>中注册了<code>RedisCacheManager</code>组件，<code>RedisCacheConfiguration</code>又在<code>SimpleCacheConfiguration</code>前面进行判断，所以<code>SimpleCacheConfiguration</code>不会生效</p>
<p><code>RedisCacheManager</code>会创建<code>RedisCache</code>作为缓存，<code>RedisCache</code>通过操作Redis来实现缓存功能</p>
<p>现在重新运行项目，访问<a href="http://localhost:8080/emp/1，第一次会查询数据库，第二次由于有缓存，所以不会访问数据库，但是在redis中结果是以序列化的形式存入的！（特别是key、value都是对象时）" target="_blank" rel="noopener">http://localhost:8080/emp/1，第一次会查询数据库，第二次由于有缓存，所以不会访问数据库，但是在redis中结果是以序列化的形式存入的！（特别是key、value都是对象时）</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201007194127188.png" align="left"/>

<p><strong>那么在这种情况下应该如何保存为json形式？</strong></p>
<p>默认创建的RedisCacheManager方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RedisCacheManager <span class="title">cacheManager</span><span class="params">(CacheProperties cacheProperties, CacheManagerCustomizers cacheManagerCustomizers,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ObjectProvider&lt;org.springframework.data.redis.cache.RedisCacheConfiguration&gt; redisCacheConfiguration,</span></span></span><br><span class="line"><span class="function"><span class="params">                               ObjectProvider&lt;RedisCacheManagerBuilderCustomizer&gt; redisCacheManagerBuilderCustomizers,</span></span></span><br><span class="line"><span class="function"><span class="params">                               RedisConnectionFactory redisConnectionFactory, ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">    RedisCacheManagerBuilder builder = RedisCacheManager.builder(redisConnectionFactory).cacheDefaults(</span><br><span class="line">        determineConfiguration(cacheProperties, redisCacheConfiguration, resourceLoader.getClassLoader()));</span><br><span class="line">    List&lt;String&gt; cacheNames = cacheProperties.getCacheNames();</span><br><span class="line">    <span class="keyword">if</span> (!cacheNames.isEmpty()) &#123;</span><br><span class="line">        builder.initialCacheNames(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(cacheNames));</span><br><span class="line">    &#125;</span><br><span class="line">    redisCacheManagerBuilderCustomizers.orderedStream().forEach((customizer) -&gt; customizer.customize(builder));</span><br><span class="line">    <span class="keyword">return</span> cacheManagerCustomizers.customize(builder.build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要知道如何修改Redis序列化为JSON，首先需要知道为什么默认情况下会使用JDK的序列化方式！</p>
<p>这就需要关注<code>RedisCacheConfiguration</code>，顾名思义就是Redis缓存的配置，<code>determineConfiguration</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> org.springframework.data.redis.cache.<span class="function">RedisCacheConfiguration <span class="title">determineConfiguration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CacheProperties cacheProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">    ObjectProvider&lt;org.springframework.data.redis.cache.RedisCacheConfiguration&gt; redisCacheConfiguration,</span></span></span><br><span class="line"><span class="function"><span class="params">    ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisCacheConfiguration.getIfAvailable(() -&gt; createConfiguration(cacheProperties, classLoader));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>createConfiguration</code>方法如下，这个方法会在容器中没有给出<code>RedisCacheConfiguration</code>组件时调用，返回一个<code>RedisCacheConfiguration</code>对象，所以这个方法中给出的就是默认的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> org.springframework.data.redis.cache.<span class="function">RedisCacheConfiguration <span class="title">createConfiguration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    CacheProperties cacheProperties, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    Redis redisProperties = cacheProperties.getRedis();</span><br><span class="line">    org.springframework.data.redis.cache.RedisCacheConfiguration config = org.springframework.data.redis.cache.RedisCacheConfiguration</span><br><span class="line">        .defaultCacheConfig();</span><br><span class="line">    <span class="comment">//使用JDK</span></span><br><span class="line">    config = config.serializeValuesWith(</span><br><span class="line">        SerializationPair.fromSerializer(<span class="keyword">new</span> JdkSerializationRedisSerializer(classLoader)));</span><br><span class="line">    <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        config = config.prefixCacheNameWith(redisProperties.getKeyPrefix());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">        config = config.disableCachingNullValues();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">        config = config.disableKeyPrefix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们在编写自己的<code>RedisCacheConfiguration</code>组件时，只需要在此基础上进行修改即可!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheConfiguration <span class="title">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span> </span>&#123;</span><br><span class="line">    CacheProperties.Redis redisProperties = cacheProperties.getRedis();</span><br><span class="line">    org.springframework.data.redis.cache.RedisCacheConfiguration config = org.springframework.data.redis.cache.RedisCacheConfiguration</span><br><span class="line">        .defaultCacheConfig();</span><br><span class="line">    <span class="comment">//修改成使用JSON的序列化方式</span></span><br><span class="line">    config = config.serializeValuesWith(</span><br><span class="line">        RedisSerializationContext.SerializationPair.fromSerializer(RedisSerializer.json()));</span><br><span class="line">    <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        config = config.prefixCacheNameWith(redisProperties.getKeyPrefix());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">        config = config.disableCachingNullValues();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">        config = config.disableKeyPrefix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面这段代码也可以看出，一些Redis的配置可以通过<code>RedisProperties</code>来完成（即通过配置文件中<code>spring.redis</code>的相关内容）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201007211306994.png" align="left"/>

<p>从上图可以看出，默认的键是<code>cacheNames::参数</code>的形式，<code>userKeyPrefix</code>属性默认为true</p>
<p><strong>有的时候需要在方法指定的过程中将某个值添加到缓存中应该怎么做？</strong></p>
<p>步骤：</p>
<ol>
<li>自动注入CacheManager</li>
<li>在方法中获取对应cacheNames的Cache对象</li>
<li>操作Cache</li>
</ol>
<p><strong>注意</strong>：光这样肯定不行，因为不再使用缓存注解，所以方法每次都会调用数据库，这时就需要自己编写代码来实现缓存的相关策略！</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot与缓存</tag>
        <tag>SpringBoot高级应用</tag>
      </tags>
  </entry>
  <entry>
    <title>二、SpringBoot配置</title>
    <url>/2020/09/07/%E4%BA%8C%E3%80%81SpringBoot%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>Spring Boot使用一个全局的配置文件（名称是固定的）</strong></p>
<ul>
<li><code>application.properties</code></li>
<li><code>application.yml</code></li>
</ul>
<p><strong>配置文件的位置</strong>：</p>
<ul>
<li><code>src/main/resources</code>目录或者<code>类路径/config</code>目录下</li>
</ul>
<p><strong><code>.yml</code>是什么</strong></p>
<ul>
<li><p><code>.yml</code>是YAML（YAML Ain‘t Markup Language）语言的文件，YAML<strong>以数据为中心</strong>，它比json和xml更适合作为配置文件</p>
<p>YAML A Markup Language：是一个标记语言</p>
<p>YAML isn’t Markup Language：不是一个标记语言</p>
<p>YAML配置示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>XML配置示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>很明显，YAML相较于XML更加简洁易懂</p>
</li>
<li><p>YAML的语法规范：<a href="http://www.yaml.org/" target="_blank" rel="noopener">http://www.yaml.org/</a></p>
</li>
</ul>
<p><strong>全局配置文件的作用</strong>：</p>
<ul>
<li>修改Spring Boot自动配置的默认值</li>
</ul>
<h3 id="1、YAML基本语法"><a href="#1、YAML基本语法" class="headerlink" title="1、YAML基本语法"></a>1、YAML基本语法</h3><ul>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用Tab键，只允许使用空格</li>
<li>缩进的空格数目不重要，只要相同层级的元素左对齐即可</li>
<li><strong>属性和值都是大小写敏感的</strong></li>
</ul>
<p><code>k: v</code>：表示一对键值对（必须有空格）</p>
<p>以空格的缩进来控制层级关系（多少个空格没有关系，只要相同层级保持左对齐即可）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/config</span></span><br></pre></td></tr></table></figure>



<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><p><strong>字面量（数字、字符串、布尔）</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>

<p>字面量直接来写即可</p>
<ul>
<li><p>字符串也不用使用单引号或者双引号，如果使用了单引号或者双引号则有特殊含义：</p>
<ul>
<li><p>“”：双引号，不会转义字符串里面的特殊字符；例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">"zhangsan \n lisi"</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhangsan 换行 lisi</span><br></pre></td></tr></table></figure>
</li>
<li><p>‘’：单引号，会转义字符串里面的特殊字符</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">'zhangsan \n lisi'</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zhangsan \n lisi</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<p><strong>对象、Map（属性和值，也就是键值对）</strong></p>
<p>对象也是<code>k: v</code>的形式</p>
<p>示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">friend:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span> <span class="string">&#123;age:</span> <span class="number">20</span><span class="string">,friend:</span> <span class="string">&#123;name:</span> <span class="string">zhangsan,age:</span> <span class="number">20</span><span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>数组（List、Set）</strong></p>
<p>用<code>- 值</code>表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cow</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,cow,pig]</span></span><br></pre></td></tr></table></figure>



<h3 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h3><p>配置文件：<code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">20</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhangfei</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">liubei</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">wangwang</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>实体类：</p>
<p><code>Person</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：将本类中所有的属性和配置文件中指定的相关属性进行绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>要想起作用，则必须是容器的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="comment">//省略了getter和setter方法以及toString方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Dog</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//省略getter和setter方法以及toString方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加依赖，导入配置文件处理器，导入后配置文件绑定就会有提示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试类进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02ConfigApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>properties配置文件实现</strong></p>
<p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">lisi,zhagnfei,liubei</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2020/01/01</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">wangwang</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">3</span></span><br></pre></td></tr></table></figure>

<p>运行测试类，查看结果即可！</p>
<p>如果结果中出现了中文乱码，则很有可能是IDEA的properties的编码设置问题</p>
<p><strong>@Value</strong><br>@Value来进行属性值的注入，就相当于：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zxw.bean.Person"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">value</span>=<span class="string">"字面量/$&#123;key&#125;/#&#123;SpEL&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>字面量：直接给出值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>${key}：从环境变量、配置文件中获取</p>
<p>如果是从其他的配置文件中获取的，则需要使用@PropertySource来指定配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>#{SpEL}：SpEL表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;2*8&#125;"</span>)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><strong>@Value和@ConfigurationProperties比较</strong></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">@ConfigurationProperties</th>
<th align="center">@Value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">功能</td>
<td align="center">可以批量注入配置文件的属性</td>
<td align="center">需要一个个指定</td>
</tr>
<tr>
<td align="center">松散绑定（松散语法）</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td align="center">SpEL</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">JSR303数据校验</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td align="center">复杂类型封装</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
</tbody></table>
<p>无论配置文件yml还是properties它们都能够获取到值</p>
<p>如果说，我们只是在某个业务逻辑中需要获取以下配置文件的某项值，则使用@Value</p>
<p>如果说，我们专门编写了一个JavaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties</p>
<p><strong>什么是松散语法？</strong></p>
<ul>
<li>person.firstName</li>
<li>person.first-name</li>
<li>person.first_name</li>
<li>PERSON_FIRST_NAME</li>
</ul>
<p>这四种方式都是等效的，这就是松散语法</p>
<p>4、JSR303校验</p>
<p>首先需要导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSR303校验--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Person</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果lastName获取到的值不是邮箱格式则会报错</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="comment">//此处省略了getter、setter方法和toString方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>相关注解如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">空检查</span><br><span class="line">@Null       验证对象是否为null</span><br><span class="line">@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="line">@NotEmpty 检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line"> </span><br><span class="line">Booelan检查</span><br><span class="line">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="line">@AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="line"> </span><br><span class="line">长度检查</span><br><span class="line">@Size(min&#x3D;, max&#x3D;) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line">@Length(min&#x3D;, max&#x3D;) Validates that the annotated string is between min and max included.</span><br><span class="line"> </span><br><span class="line">日期检查</span><br><span class="line">@Past           验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line">@Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"> </span><br><span class="line">数值检查，建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为&quot;&quot;,Integer为null</span><br><span class="line">@Min            验证 Number 和 String 对象是否大等于指定的值  </span><br><span class="line">@Max            验证 Number 和 String 对象是否小等于指定的值  </span><br><span class="line">@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</span><br><span class="line">@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</span><br><span class="line">@Digits     验证 Number 和 String 的构成是否合法  </span><br><span class="line">@Digits(integer&#x3D;,fraction&#x3D;) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</span><br><span class="line"> </span><br><span class="line">@Range(min&#x3D;, max&#x3D;) 检查数字是否介于min和max之间.</span><br><span class="line">@Range(min&#x3D;10000,max&#x3D;50000,message&#x3D;&quot;range.bean.wage&quot;)private BigDecimal wage;</span><br><span class="line"> </span><br><span class="line">@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)</span><br><span class="line">@CreditCardNumber信用卡验证</span><br><span class="line">@Email  验证是否是邮件地址，如果为null,不进行验证，算通过验证。</span><br><span class="line">@ScriptAssert(lang&#x3D; ,script&#x3D;, alias&#x3D;)</span><br><span class="line">@URL(protocol&#x3D;,host&#x3D;, port&#x3D;,regexp&#x3D;, flags&#x3D;)</span><br></pre></td></tr></table></figure>



<h3 id="4、-PropertySource-amp-ImportResource"><a href="#4、-PropertySource-amp-ImportResource" class="headerlink" title="4、@PropertySource &amp; @ImportResource"></a>4、@PropertySource &amp; @ImportResource</h3><p><strong>@PropertySource</strong>：加载指定的配置文件</p>
<p>创建<code>person.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">lisi,zhagnfei,liubei</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2020/01/01</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">wangwang</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">3</span></span><br></pre></td></tr></table></figure>

<p>使用@PropertySource引入这个配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="comment">//省略了getter和setter方法以及toString方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>@ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效</p>
<p>创建<code>HelloService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写一个Spring配置文件<code>beans.xml</code>，将HelloService对象注入到容器中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.zxw.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试类测试IoC容器中是否包含这个名为<code>helloService</code>的bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02ConfigApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(ac.containsBean(<span class="string">"helloService"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，由于没有加载过这个配置文件，所以结果是false</p>
<p>在主配置文件使用@ImportResource引入<code>beans.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot02ConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后进行测试，结果就会返回false了</p>
<p><strong>SpringBoot推荐的给容器中添加组件的方式</strong>：</p>
<p>1、配置类（和配置文件的作用相同）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span> 指明当前类是一个配置类</span></span><br><span class="line"><span class="comment"> * 配置文件中使用bean标签添加组件，配置类中使用<span class="doctag">@Bean</span>注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加了这个配置类之后，注释掉之前使用@ImportResource注解的内容，然后进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@ImportResource("classpath:beans.xml")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot02ConfigApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为true，应为这个配置文件使用了@Configuration注解，所以在扫描主配置类所在包时会被作为组件注入到Spring容器中</p>
<h3 id="5、配置文件占位符"><a href="#5、配置文件占位符" class="headerlink" title="5、配置文件占位符"></a>5、配置文件占位符</h3><p><strong>1、随机数</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$&#123;random.value&#125;</span><br><span class="line">$&#123;random.int&#125;</span><br><span class="line">$&#123;random.long&#125;</span><br><span class="line">$&#123;random.int(10)&#125;</span><br><span class="line">$&#123;random.int(10, 20)&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、占位符获取之前配置的值，如果没有可以使用<code>:</code>指定默认的值</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.name</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.abc:Tom&#125;_dog</span></span><br></pre></td></tr></table></figure>



<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><p>&emsp;&emsp;Profile是Spring对不同环境提供不同配置功能的支持</p>
<h3 id="多Profile文件"><a href="#多Profile文件" class="headerlink" title="多Profile文件"></a>多Profile文件</h3><p>&emsp;&emsp;在主配置文件编写的时候，文件名可以是<code>application-{profile}.properties/yml</code></p>
<p>使用示例：</p>
<p>&emsp;&emsp;这里给出的是properties配置文件的示例，yaml配置文件也是一样</p>
<p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8090</span></span><br></pre></td></tr></table></figure>

<p><code>application-dev.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8091</span></span><br></pre></td></tr></table></figure>

<p><code>application-test.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8092</span></span><br></pre></td></tr></table></figure>



<h3 id="yml支持多文档块方式"><a href="#yml支持多文档块方式" class="headerlink" title="yml支持多文档块方式"></a>yml支持多文档块方式</h3><p>&emsp;&emsp;yaml中可以使用三个连续的<code>-</code>来将文档分块</p>
<p>使用示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>



<h3 id="激活指定profile"><a href="#激活指定profile" class="headerlink" title="激活指定profile"></a>激活指定profile</h3><ol>
<li><p>在配置文件中指定：</p>
<p>properties文件指定：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">profile名称</span></span><br></pre></td></tr></table></figure>

<p>yaml文件指定：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">profile名称</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行的方式激活：<code>–spring.profiles.active=dev</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;profile名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>虚拟机参数：<code>-Dspring.profiles.active=profile名称</code></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200911215237719.png" align="left"/>



</li>
</ol>
<h2 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h2><p>&emsp;&emsp;Spring Boot启动会扫描以下位置的<code>application.properties</code>或者<code>application.yml</code>文件作为Spring Boot的默认配置文件：</p>
<ul>
<li><code>file:./config/</code></li>
<li><code>file:./config/*/</code></li>
<li><code>file:./</code></li>
<li><code>classpath:/config/</code></li>
<li><code>classpath:/</code></li>
</ul>
<p>&emsp;&emsp;以上是按照<strong>优先级</strong>从高到底的顺序，所有的配置文件都会被加载，<strong>高优先级的配置</strong>的内容会覆盖<strong>低优先级的配置</strong>，也可以通过<strong>spring.config.location</strong>来改变默认位置</p>
<p>&emsp;&emsp;这五个位置的配置文件会互补配置（相同的配置以高优先级的为主）</p>
<p>&emsp;&emsp;还可以通过<strong>spring.config.location</strong>来改变默认的配置文件位置，要在项目打包以后，可以使用命令行参数的形式，启动项目时来指定配置文件的新位置！<strong>指定配置文件和默认加载的这些配置文件共同起作用，形成互补配置。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location&#x3D;</span><br><span class="line">D:\config\application.properties</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这种方式在运维的时候十分方便，在项目打包之后仍然可以使用指定外部配置文件的方式在不重新打包的情况下修改部分配置</p>
<p><strong>外部配置文件的加载顺序</strong></p>
<p>&emsp;&emsp;Spring Boot允许使用配置文件，这样就可以在不同的环境中使用相同的应用代码。你可以使用properties文件，YAML文件，环境变量以及命令行参数来进行配置。属性值可以通过<code>@Value</code>注解直接注入到bean中，而所有properties文件中配置的键值对都会在加载时被放入Environment对象中。如果需要绑定一系列的值到一个bean中，则可以通过<code>@ConfigurationProperties</code>注解来实现。</p>
<p>&emsp;&emsp;外部配置文件的加载顺序可以参考官网：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p>
<p>&emsp;&emsp;Spring Boot也可以从以下的位置加载配置，优先级从高到低，高优先级的配置会覆盖低优先级的相同配置，不同配置之间根据优先级形成互补配置</p>
<ol>
<li><p><font color="red">命令行参数</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-<span class="number">02</span>-config-<span class="number">02</span>-<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT.jar --server.port=<span class="number">8087</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>来自<code>java:comp/env</code>的JNDI属性</p>
</li>
<li><p>Java系统属性（<code>System.getProperties()</code>）</p>
</li>
<li><p>操作系统环境变量</p>
</li>
<li><p>RandomValueProperty配置的<code>random.*</code>属性值</p>
</li>
<li><p><font color="red">jar包外部<code>application-{profile}.properties</code>或<code>application.yml</code>（带spring.profile）配置文件</font></p>
</li>
<li><p><font color="red">jar包内部<code>application-{profile}.properties</code>或<code>application.yml</code>（带spring.profile）配置文件</font></p>
</li>
<li><p><font color="red">jar包外部的<code>application.properties</code>或<code>application.yml</code>（不带spring.profile`）配置文件</font></p>
</li>
<li><p><font color="red">jar包内部的<code>application.properties</code>或<code>application.yml</code>（不带spring.profile`）配置文件</font></p>
</li>
<li><p>@Configuration注解上的@PropertySource</p>
</li>
<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>
</li>
</ol>
<p>Tips：<strong>首先优先加载带profile的配置文件，然后优先加载外部的配置文件</strong></p>
<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性</a></p>
<p><strong>注意</strong>：学习这部分内容之前一定要先掌握Spring注解驱动的相关内容！</p>
<p><strong>自动配置原理</strong>：</p>
<p>1）Spring Boot启动的时候加载主配置类，开启了自动配置功能<code>@EnableAutoConfiguration</code></p>
<p>2）<code>@EnableAutoConfiguration</code>的作用：</p>
<ul>
<li><p>利用<code>AutoConfigurationImportSelector</code>给容器中导入一些组件</p>
</li>
<li><p>详细可以查看<code>getAutoConfigurationEntry()</code>方法</p>
</li>
<li><p><code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code>：获取候选的配置</p>
<ul>
<li><pre><code class="java">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),
                getBeanClassLoader());
<span class="comment">//扫描所有jar包类路径下的META-INF/spring.factories文件</span>
<span class="comment">//把扫描到的这些文件的内容包装成Properties对象</span>
<span class="comment">//将结果以Map&lt;String, List&lt;String&gt;&gt;的形式返回</span>
<span class="comment">//然后loadFactoryNames从中找出键值为·org.springframework.boot.autoconfigure.EnableAutoConfiguration所对应的List&lt;String&gt;然后返回，于是就找到了可以加载的自动配置类</span>
&lt;!--￼<span class="number">44</span>--&gt;

根据当前的<span class="meta">@ConditionalXXX</span>进行判断，决定这个配置类是否生效，这个配置类一旦生效，配置类中添加的组件也会生效，而这些组件的属性是从对应的XXXProperties中获取的，而XXXProperties中的每个属性都是和配置文件绑定的</code></pre>
</li>
<li><p>所有配置文件中能配置的属性都是在<code>xxxProperties</code>类中封装，配置文件中能够配置什么内容可以找到对应的<code>xxxProperties</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"server"</span>, ignoreUnknownFields = <span class="keyword">true</span>)<span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定 ，ignoreUnknownFields表示忽略未知的属性，默认值为true</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>注意这里绑定的是<code>ServerProperties</code>，而不是之前的<code>HttpEncodingProperties</code>，这说明<code>ServerProperties</code>有不止一个自动配置类使用到了，其中和<code>HttpEncodingAutoConfiguration</code>有关的前缀是<code>server.servlet.encoding</code></p>
</li>
</ul>
</li>
</ul>
<p><strong>精髓</strong>：</p>
<p>1）SpringBoot启动会加载大量的自动配置类</p>
<p>2）需要某些功能时就可以在SpringBoot中查找有没有对应的自动配置类</p>
<p>3）然后再来看看自动配置类有哪些配置（只要有我们用的组件，就不需要来进行配置了）</p>
<p>4）给容器中自动配置类添加组件时，会从对应的<code>XXXProperties</code>类中获取某些属性，我们可以在配置文件中指定这些属性（它和配置文件对应项绑定了）</p>
<p>这就是为什么我们只需要在<code>properties</code>或者<code>yml</code>中配置一些值就可以轻松的完成以前需要大量配置才能够完成的功能，因为自动配置类读取了配置文件的值进行相关组件的注入    </p>
<h3 id="Conditional扩展"><a href="#Conditional扩展" class="headerlink" title="@Conditional扩展"></a>@Conditional扩展</h3><table>
<thead>
<tr>
<th align="center">@Conditional扩展注解</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@ConditionalOnJava</td>
<td align="center">系统的Java版本是否符合要求</td>
</tr>
<tr>
<td align="center">@ConditionalOnBean</td>
<td align="center">容器中存在指定Bean</td>
</tr>
<tr>
<td align="center">@ConditionalOnMissingBean</td>
<td align="center">容器中不存在指定Bean</td>
</tr>
<tr>
<td align="center">@ConditionalOnExpression</td>
<td align="center">满足指定的SpEL表达式</td>
</tr>
<tr>
<td align="center">@ConditionalOnClass</td>
<td align="center">系统中存在指定类</td>
</tr>
<tr>
<td align="center">@ConditionalOnMissingClass</td>
<td align="center">系统中没有指定的类</td>
</tr>
<tr>
<td align="center">@ConditionalOnSingleCandidate</td>
<td align="center">容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td align="center">@ConditionalOnProperty</td>
<td align="center">系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td align="center">@ConditionalOnResource</td>
<td align="center">类路径下是否存在指定的资源文件</td>
</tr>
<tr>
<td align="center">@ConditionalOnWebApplication</td>
<td align="center">当前是web环境</td>
</tr>
<tr>
<td align="center">@ConditionalOnNotWebApplication</td>
<td align="center">当前不是web环境</td>
</tr>
<tr>
<td align="center">@ConditionalOnJndi</td>
<td align="center">JNDI中存在指定项</td>
</tr>
</tbody></table>
<p>由于自动配置类上有很多@ConditionalOnXXX注解，所以并非所有的自动配置类都会生效！</p>
<p>可以在配置文件中配置<code>debug=true</code>开启Spring Boot的debug模式，这样在Spring Boot启动时会打印自动配置报告！</p>
<p>成功生效的自动配置示例：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200912221126116.png" align="left"/>

<p>未生效的自动配置示例：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200912221310715.png" align="left"/>]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot配置</tag>
        <tag>YAML</tag>
        <tag>自动配置</tag>
        <tag>SpringBoot核心技术</tag>
      </tags>
  </entry>
  <entry>
    <title>五、SpringBoot与Docker</title>
    <url>/2020/09/07/%E4%BA%94%E3%80%81SpringBoot%E4%B8%8EDocker/</url>
    <content><![CDATA[<h1 id="Spring-Boot与Docker"><a href="#Spring-Boot与Docker" class="headerlink" title="Spring Boot与Docker"></a>Spring Boot与Docker</h1><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的Linux和Windows机器上，也可以实现虚拟化。容器完全使用沙箱机制，相互之间不会有任何接口。</p>
<p>在开发的过程中不可避免的需要进行环境的配置，但是很明显环境的配置非常麻烦。每次更换机器都需要重新配置环境，不但费时费力，而且还容易出错。Docker就是为了解决这个问题而出现的，在安装的时候将原始的环境完全复制过来，这样开发人员就可以利用Docker来保证开发环境的完全一致！</p>
<h2 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h2><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200930084826260.png" align="left"/>

<p><strong>docker主机（Host）</strong>：安装了Docker程序的机器（Docker直接安装在操作系统上的）</p>
<p><strong>docker客户端（Client）</strong>：连接Docker主机进行操作，客户端通过命令行或者其他工具使用Docker API与Docker的守护线程通信</p>
<p><strong>docker仓库（Registry）</strong>：用来保存各种打包好的软件镜像</p>
<p><strong>docker镜像（Images）</strong>：软件打包好的镜像，放在docker仓库中</p>
<p><strong>docker容器（Container）</strong>：镜像启动以后的实例成为一个容器</p>
<p><strong>使用Docker的步骤</strong>：</p>
<ol>
<li>安装Docker</li>
<li>在Docker仓库找到所需要的软件对应的镜像</li>
<li>使用Docker运行这个镜像，这个镜像就会生成一个Docker容器</li>
<li>对容器的启动和停止，就是对所需软件的启动和停止</li>
</ol>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="安装Linux虚拟机"><a href="#安装Linux虚拟机" class="headerlink" title="安装Linux虚拟机"></a>安装Linux虚拟机</h3><ol>
<li><p>安装Virtual Box（下载地址：<a href="https://www.virtualbox.org/wiki/Downloads，一直下一步即可）" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads，一直下一步即可）</a></p>
</li>
<li><p>导入centos7虚拟机文件，或者使用centos7镜像新建虚拟机</p>
</li>
<li><p>双击启动Linux虚拟机，使用root用户和对应的密码登录</p>
</li>
<li><p>使用客户端连接linux服务器（例如XShell、SmarTTY等）</p>
</li>
<li><p>设置虚拟机的网络（选择桥接网络和对应的界面名称，并选中接入网线）</p>
</li>
<li><p>设置好网络之后，使用下面的命令重启虚拟机网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看linux服务器的ip地址（不同版本可能使用的命令不同）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="在Linux虚拟机上安装Docker"><a href="#在Linux虚拟机上安装Docker" class="headerlink" title="在Linux虚拟机上安装Docker"></a>在Linux虚拟机上安装Docker</h3><p><strong>查看centos版本</strong>：</p>
<p>Docker要求centos系统内核版本高于3.10</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200930224009684.png" align="left"/>

<p><strong>升级软件包及内核（可选）</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<p><strong>安装docker</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure>

<p><strong>启动docker</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p><strong>将docker服务设为开机启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>如果启动失败了可以参考这篇博客：<a href="https://blog.csdn.net/lixiaoyaoboy/article/details/82667510，当然如果不知道如何在linux中修改文件的内容就需要去查看linux的有关知识了" target="_blank" rel="noopener">https://blog.csdn.net/lixiaoyaoboy/article/details/82667510，当然如果不知道如何在linux中修改文件的内容就需要去查看linux的有关知识了</a></p>
<p><strong>停止docker</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>





<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">命令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="red">检索</font></td>
<td align="center"><strong>docker search 关键字</strong><br/>例如：docker search redis</td>
<td align="center">相当于在docker hub中进行搜索</td>
</tr>
<tr>
<td align="center">拉取</td>
<td align="center">docker pull 镜像名:tag</td>
<td align="center">:tag是可选的，tag表示标签，多为软件版本，默认是latest</td>
</tr>
<tr>
<td align="center">列表</td>
<td align="center">docker images</td>
<td align="center">查看所有本地镜像</td>
</tr>
<tr>
<td align="center">删除</td>
<td align="center">docker rmi image-id</td>
<td align="center">删除指定的本地镜像</td>
</tr>
</tbody></table>
<p>如果docker pull操作下载的速度过慢，可以设置阿里云docker镜像（阿里云地址：<a href="https://cr.console.aliyun.com/cn-beijing/instances/mirrors）" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-beijing/instances/mirrors）</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201001181050903.png" align="left"/>

<p><strong>docker镜像搜索网站</strong>：<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a></p>
<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p>docker的使用步骤：</p>
<ol>
<li>获取软件镜像</li>
<li>运行镜像</li>
<li>产生一个容器（容器就是正在运行的软件，同一个镜像可以产生多个容器）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、搜索Tomcat镜像</span><br><span class="line">docker search tomcat</span><br><span class="line">2、拉取tomcat镜像</span><br><span class="line">docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、查看运行中的容器</span><br><span class="line">docker ps</span><br><span class="line">5、停止运行中的容器</span><br><span class="line">docker stop 容器的id</span><br><span class="line">6、查看所有的容器（无论是否运行）</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line">docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d: 后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口 主机端口：容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示方便关闭了linux防火墙</span><br><span class="line">service firewalld status: 查看防火墙状态</span><br><span class="line">service firewalld stop: 关闭防火墙</span><br><span class="line">11、查看容器日志</span><br><span class="line">docker logs container-name/container-id</span><br><span class="line"></span><br><span class="line">更多命令查看</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker</span><br><span class="line">可以参考每一个镜像文档</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：从docker hub上pull下来的最新的tomcat中存在<code>webapps</code>和<code>webapps.dist</code>目录，其中<code>webapps</code>目录是空的，这会导致访问tomcat首页时会出现404</p>
<p><strong>解决方案</strong>：</p>
<p>删除之前的<code>webapps</code>目录，将<code>webapps.dist</code>目录重命名为<code>webapps</code></p>
<p>但是这样治标不治本，因为从docker hub上pull下来的tomcat镜像本来就有问题，所以需要将之前修复好的容器制作成镜像，这样之后通过这个镜像启动的容器就不会出现问题！（使用<code>docker commit</code>命令来制作镜像）</p>
<h3 id="安装并启动mysql"><a href="#安装并启动mysql" class="headerlink" title="安装并启动mysql"></a>安装并启动mysql</h3><p><strong>下载mysql镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<p><strong>错误的启动方式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql01 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<p>查看所有容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201002103943835.png" align="left"/>

<p>可以看出mysql容器并没有正常启动，可以查看容器的日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs 68e8b6bfd9d1</span><br></pre></td></tr></table></figure>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201002104125577.png" align="left"/>

<p>也就是必须要指定<code>MYSQL_ROOT_PASSWORD</code>、<code>MYSQL_ALLOW_EMPTY_PASSWORD</code>、<code>MYSQL_RANDOM_ROOT_PASSWORD</code>中的其中一个的值</p>
<p><strong>正确的启动方式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<p>但是这种方式也不行，因为没有进行端口映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql03 -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<p>然后使用navicat或者SQLyog进行测试</p>
<p><strong>更多高级操作</strong></p>
<p>更多高级操作就可以参考docker hub对应镜像的页面，例如mysql镜像的页面：<a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">https://hub.docker.com/_/mysql</a></p>
<p>其中介绍了如何使用自定义的配置文件启动mysql，以及不使用<code>cnf</code>配置文件来启动mysql</p>
<ul>
<li><p>使用自定义的配置文件来启动mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure>

<p>这个命令会使得<code>/etc/mysql/my.cnf</code>和<code>/etc/mysql/conf.d/config.file.cnf</code>配置文件共同生效</p>
</li>
<li><p>不使用<code>cnf</code>配置文件启动mysql</p>
<p>不使用<code>cnf</code>配置文件，可以在命令行中给出参数来启动mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot核心技术</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>八、SpringBoot自定义starters</title>
    <url>/2020/09/07/%E5%85%AB%E3%80%81SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89starters/</url>
    <content><![CDATA[<h1 id="Spring-Boot自定义starters"><a href="#Spring-Boot自定义starters" class="headerlink" title="Spring Boot自定义starters"></a>Spring Boot自定义starters</h1><p>虽然Spring Boot为我们提供了很多的starters，但是也不能面面俱到，所以有些时候还是需要自定义starters。</p>
<p>starters：</p>
<ol>
<li><p>这个场景需要使用到什么依赖？</p>
</li>
<li><p>如何编写自动配置？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这个类为自动配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//在指定条件成立的情况下，自动配置类生效</span></span><br><span class="line"><span class="meta">@ConditonalOnXXX</span></span><br><span class="line"><span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给容器中添加组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//结合相关的XXXProperties类来绑定相关的配置</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span></span><br><span class="line">    <span class="comment">//让上面配置的XXXProperties生效并且加入到容器中</span></span><br><span class="line">    <span class="meta">@EnableConfigurationProperties</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外自动配置类要能够加载，需要将自动配置类的全类名配置在类路径下的<code>META-INF/spring.factories</code>中，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure>
</li>
<li><p>模式：</p>
<p>启动器只用来做依赖导入</p>
<p>专门写一个自动配置模块，启动器依赖自动配置模块</p>
<p>开发人员只需要引入启动器就可以了</p>
<p><strong>推荐使用以下命名规约：</strong></p>
<ul>
<li><p>官方命名空间</p>
<ul>
<li>前缀：<code>spring-boot-starter-</code></li>
<li>模式：<code>spring-boot-starter-模块名</code></li>
<li>举例：<code>spring-boot-starter-web</code>、<code>spring-boot-starter-jdbc</code></li>
</ul>
</li>
<li><p>自定义命名空间</p>
<ul>
<li>后缀：<code>-spring-boot-starter</code></li>
<li>模式：<code>模块名-spring-boot-starter</code></li>
<li>举例：<code>mybatis-spring-boot-starter</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="自定义starter示例"><a href="#自定义starter示例" class="headerlink" title="自定义starter示例"></a>自定义starter示例</h2><p>这里给出的是大致的步骤</p>
<p><strong>1、创建项目</strong></p>
<p>使用maven创建<code>zxw-spring-boot-starter</code>项目，使用Spring Initializr创建<code>zxw-spring-boot-starter-autoconfigurer</code>项目（不需要依赖任何其他的Spring Boot模块</p>
<p><strong>2、修改pom.xml</strong></p>
<p>删除自动配置模块的主配置类和test目录以及<code>application.properties</code>，并在pom.xml中取出test模块的依赖，删除build标签的内容（去除插件)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入spring-boot-starter，这是所有starter的基本配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只保留最基本的<code>spring-boot-starter</code></p>
<p>在pom.xml文件中右键add as Maven Project，将项目转换为Maven项目</p>
<p><strong>3、开始编写starter中自定义的内容</strong></p>
<p><code>HelloProperties</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"zxw.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HelloProperties会与配置文件中<code>zxw.hello</code>开头的properties进行属性绑定！</p>
<p><code>HelloService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHelloZxw</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix() + <span class="string">"-"</span> + name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里提供了一个HelloService，需要传入HelloProperties对象，所以需要将HelloService和HelloProperties注入到组件中</p>
<p><code>HelloServiceAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="comment">//使得HelloProperties生效并与配置文件中的内容绑定然后注入到容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加HelloSerivce组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> HelloService();</span><br><span class="line">        helloService.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4、对这两个项目执行install操作</strong></p>
<p>首先对<code>zxw-spring-boot-starter-configurer</code>执行Maven生命周期中的install操作，然后在<code>zxw-spring-boot-starter</code>中引入依赖它：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入自动配置模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zxw-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后对<code>zxw-spring-boot-starter</code>执行install操作</p>
<p><strong>5、编写一个Spring Boot项目进行测试</strong></p>
<p>使用Spring Initializr创建一个用于测试的项目，导入Web模块的依赖（因为HelloServiceAutoConfiguration只有在Web环境下才会生效）</p>
<p>在项目中引入自定义的starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入自定义starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zxw-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写Controller</p>
<p><code>HelloController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHelloZxw(<span class="string">"haha"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写<code>application.properties</code>配置前后缀：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">zxw.hello.prefix</span>=<span class="string">zxw</span></span><br><span class="line"><span class="meta">zxw.hello.suffix</span>=<span class="string">HELLO WORLD</span></span><br></pre></td></tr></table></figure>

<p>启动项目，访问：<a href="http://localhost:8080/hello，结果如下：" target="_blank" rel="noopener">http://localhost:8080/hello，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201005142140112.png" align="left"/>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot核心技术</tag>
        <tag>SpringBoot自定义starters</tag>
      </tags>
  </entry>
  <entry>
    <title>六、SpringBoot与数据访问</title>
    <url>/2020/09/07/%E5%85%AD%E3%80%81SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="Spring-Boot与数据访问"><a href="#Spring-Boot与数据访问" class="headerlink" title="Spring Boot与数据访问"></a>Spring Boot与数据访问</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;对于DAO层（Data Access Object，也称数据访问层），Spring Boot默认采用整合Spring Data的方式来进行统一的处理（无论是SQL还是NOSQL都使用Spring Data），其中添加了大量的自动配置，引入了很多XXXTemplate、XXXRepository来简化DAO层的操作。使用Spring Data只需要进行简单的配置即可。下面将从如下几个部分来进行讲解：</p>
<ul>
<li>JDBC</li>
<li>MyBatis</li>
<li>JPA</li>
</ul>
<p>当然，Spring Data远不止这些，其中包含了很多的子项目，具体可以参考：<a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener">https://spring.io/projects/spring-data</a></p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>创建项目，导入mysql驱动和spring data jdbc的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写<code>application.yml</code>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.113:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>编写测试类，测试是否能够成功连接数据库（这里连接的是linux虚拟机上运行的docker mysql容器）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class com.zaxxer.hikari.HikariDataSource</span><br><span class="line">HikariProxyConnection@449541293 wrapping com.mysql.cj.jdbc.ConnectionImpl@7bf01cb</span><br></pre></td></tr></table></figure>

<p>虽然成功运行了，但是日志中提示<code>com.mysql.jdbc.Driver</code>已经被弃用了，现在应该使用<code>com.mysql.cj.jdbc.Driver</code>，修改配置文件中的对应项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.113:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>重新运行测试类，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class com.zaxxer.hikari.HikariDataSource</span><br><span class="line">HikariProxyConnection@1829287142 wrapping com.mysql.cj.jdbc.ConnectionImpl@1015a4b9</span><br></pre></td></tr></table></figure>

<p>Spring Boot 2.3.0中默认使用HikariDataSource作为数据源</p>
<p>数据源的相关配置都在<code>DataSourceProperties</code>里面</p>
<p><strong>自动配置原理</strong>：</p>
<ol>
<li><p><code>DataSourceConfiguration</code>：根据<code>spring.datasource.type</code>配置来创建数据源，默认为<code>HikariDataSource</code></p>
<p>可以通过<code>spring.datasource.type</code>指定自定义的数据源类型</p>
</li>
<li><p>Spring Boot默认支持</p>
<ul>
<li><code>org.apache.tomcat.jdbc.pool.DataSource</code></li>
<li><code>com.zaxxer.hikari.HikariDataSource</code></li>
<li><code>org.apache.commons.dbcp2.BasicDataSource</code></li>
</ul>
</li>
<li><p>自定义数据源类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Generic DataSource configuration.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DataSource<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">name</span> </span>= <span class="string">"spring.datasource.type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义的DataSource，就是从配置文件中获取<code>spring.datasource.type</code>的值，然后利用反射创建DataSource</p>
</li>
<li><p><code>DataSourceInitializerInvoker</code></p>
<p><code>DataSourceAutoConfiguration</code>中使用<code>@Import</code>注解引入了<code>DataSourceInitializationConfiguration</code>。而在<code>DataSourceInitializationConfiguration</code>中又使用了<code>@Import</code>注解引入了<code>DataSourceInitializerInovker</code></p>
<p><code>DataSourceInitializerInover</code>顾名思义就是<code>DataSourceInitializer</code>的执行器，它实现了<code>ApplicationListener&lt;DataSourceSchemaCreatedEvent&gt;</code>，也就是说当<code>DataSourceSchemaCreatedEvent</code>事件发生了，这个类中的<code>onApplicationEvent</code>方法就会执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(DataSourceSchemaCreatedEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// NOTE the event can happen more than once and</span></span><br><span class="line">    <span class="comment">// the event datasource is not used here</span></span><br><span class="line">    DataSourceInitializer initializer = getDataSourceInitializer();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.initialized &amp;&amp; initializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        initializer.initSchema();</span><br><span class="line">        <span class="keyword">this</span>.initialized = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DataSourceSchemaCreatedEvent</code>会在<code>schema-*.sql</code>文件被执行时或者Hibernate初始化数据库的时候调用</p>
<p><code>DataSourceInitializer</code>的作用：</p>
<ul>
<li>运行建表语句（<code>schema-*.sql</code>）</li>
<li>运行插入数据语句（<code>data-*.sql</code>）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Create the schema if necessary.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the schema was created</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> DataSourceProperties#getSchema()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">createSchema</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Resource&gt; scripts = getScripts(<span class="string">"spring.datasource.schema"</span>, <span class="keyword">this</span>.properties.getSchema(), <span class="string">"schema"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!scripts.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Initialization disabled (not running DDL scripts)"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String username = <span class="keyword">this</span>.properties.getSchemaUsername();</span><br><span class="line">        String password = <span class="keyword">this</span>.properties.getSchemaPassword();</span><br><span class="line">        runScripts(scripts, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !scripts.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Initialize the schema if necessary.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> DataSourceProperties#getData()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initSchema</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Resource&gt; scripts = getScripts(<span class="string">"spring.datasource.data"</span>, <span class="keyword">this</span>.properties.getData(), <span class="string">"data"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!scripts.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Initialization disabled (not running data scripts)"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String username = <span class="keyword">this</span>.properties.getDataUsername();</span><br><span class="line">        String password = <span class="keyword">this</span>.properties.getDataPassword();</span><br><span class="line">        runScripts(scripts, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Resource&gt; <span class="title">getScripts</span><span class="params">(String propertyName, List&lt;String&gt; resources, String fallback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> getResources(propertyName, resources, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String platform = <span class="keyword">this</span>.properties.getPlatform();</span><br><span class="line">    List&lt;String&gt; fallbackResources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fallbackResources.add(<span class="string">"classpath*:"</span> + fallback + <span class="string">"-"</span> + platform + <span class="string">".sql"</span>);</span><br><span class="line">    fallbackResources.add(<span class="string">"classpath*:"</span> + fallback + <span class="string">".sql"</span>);</span><br><span class="line">    <span class="keyword">return</span> getResources(propertyName, fallbackResources, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说<code>schema-*.sql</code>和<code>data-*.sql</code>文件会被执行（默认是在类路径下，也可以通过<code>spring.datasource.schema</code>和<code>spring.datasource.data</code>来指定路径（可以指定多个），将文件放在对应的目录下，在Spring Boot应用启动时就会执行这些SQL文件</p>
</li>
</ol>
<p>   <strong>使用示例</strong></p>
<p>   <code>department.sql</code></p>
   <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for department</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`department`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`department`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`departmentName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<p>   将这个sql文件放在类路径下，然后在配置文件中指定sql文件的位置：</p>
   <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.113:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">schema:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:department.sql</span></span><br></pre></td></tr></table></figure>

<p>   注意这里一定要设置<code>spring.datasource.initialization-mode</code>的值为<code>always</code>，默认值为embedded，表示只有在嵌入式数据库时才会初始化；always表示无论何种数据库都初始化</p>
<p>   最后启动Spring Boot项目，发现department表已经随着Spring Boot的启动在数据库中创建了</p>
<ol start="5">
<li><p>操作数据库：自动配置了JdbcTemplate用于操作数据库（<code>JdbcTemplateAutoConfiguration</code>）</p>
<p><strong>使用示例</strong></p>
<p>编写控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">map</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">"select * from department"</span>);</span><br><span class="line">        <span class="comment">//返回数department表中的第一条记录</span></span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/jdbc/query，结果如下：" target="_blank" rel="noopener">http://localhost:8080/jdbc/query，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201003174814051.png" align="left"/>



</li>
</ol>
<h2 id="整合Druid-amp-配置数据源监控"><a href="#整合Druid-amp-配置数据源监控" class="headerlink" title="整合Druid&amp;配置数据源监控"></a>整合Druid&amp;配置数据源监控</h2><p><strong>1、引入Druid依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、修改配置文件，更改自定义数据源</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.113:3306/jdbc</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:department.sql</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,logback</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

<p>这里还提供了有关druid数据源的有关设置，但是在<code>DataSourceProperties</code>中没有这些属性所以这样设置并不能绑定到DataSource对象中</p>
<p><strong>3、编写德鲁伊数据库的配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1.配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;StatViewServlet&gt; <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"allow"</span>, <span class="string">""</span>);</span><br><span class="line">        initParams.put(<span class="string">"deny"</span>, <span class="string">"192.168.0.1"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;WebStatFilter&gt; <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里主要做了三个操作：</p>
<ol>
<li>将配置文件中数据源的相关属性设置绑定到容器的数据源对象中</li>
<li>配置Druid管理后台的Servlet（之后可以通过<a href="http://localhost:8080/jdbc/druid/，来访问Druid的监控管理页面）" target="_blank" rel="noopener">http://localhost:8080/jdbc/druid/，来访问Druid的监控管理页面）</a></li>
<li>配置Druid管理后台的Filter（这个Filter可以监控有关Druid数据源的相关访问）</li>
</ol>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201003193914708.png" align="left"/>







<h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="注解模式"><a href="#注解模式" class="headerlink" title="注解模式"></a>注解模式</h3><p>编写Druid配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1.配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;StatViewServlet&gt; <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"allow"</span>, <span class="string">""</span>);</span><br><span class="line">        initParams.put(<span class="string">"deny"</span>, <span class="string">"192.168.0.1"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;WebStatFilter&gt; <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>将<code>department.sql</code>和<code>employee.sql</code>放在resources目录的sql目录下</p>
<p>编写配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.113:3306/mybatis</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">schema:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:sql/department.sql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:sql/employee.sql</span></span><br><span class="line">    <span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/mybatis</span></span><br></pre></td></tr></table></figure>

<p>编写实体类：</p>
<p><code>Department</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDepartmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartmentName</span><span class="params">(String departmentName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departmentName = departmentName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Employee</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer dId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getdId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setdId</span><span class="params">(Integer dId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dId = dId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写DepartmentMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的Mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Mapper表明该类是一个Mapper</p>
<p>@Select、@Delete、@Insert、@Update对应着select、delete、insert、update语句</p>
<p>@Options(useGeneratedKeys = true, keyProperty = “id”)会将插入后自增的主键绑定到id属性中</p>
<p>编写<code>DepartmentController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dept"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">insertDept</span><span class="params">(Department department)</span> </span>&#123;</span><br><span class="line">        departmentMapper.insertDept(department);</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>如何自定义MyBatis配置？</strong></p>
<p>下面以开启驼峰命名映射为例：</p>
<p>编写一个MyBatis的配置类，项容器中注入一个<code>ConfigurationCustomizer</code>类型的组件进行自定义配置（原理可以查看<code>MyBatisAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">customizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//开启驼峰命名映射</span></span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果Mapper特别多，不想在每个Mapper上都写上@Mapper注解，可以在主配置类或者MyBatis的配置类上使用@MapperScan注解指定要扫描的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;</span><br><span class="line">        <span class="string">"com.zxw.springboot.mapper"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="配置文件模式"><a href="#配置文件模式" class="headerlink" title="配置文件模式"></a>配置文件模式</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#指定全局配置文件的位置</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment">#指定映射配置文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>指定了之后，其余配置就和MyBatis的使用完全相同</p>
<p>注解模式和配置文件模式可以同时生效！</p>
<h2 id="整合JPA"><a href="#整合JPA" class="headerlink" title="整合JPA"></a>整合JPA</h2><h3 id="Spring-Data与JPA"><a href="#Spring-Data与JPA" class="headerlink" title="Spring Data与JPA"></a>Spring Data与JPA</h3><p>&emsp;&emsp;Spring Data是为了简化Spring框架应用的数据访问技术，包括非关系型数据库、Map-Reduce框架、云数据服务和关系型数据库等等。</p>
<p>Spring Data包含了非常多的子项目：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201004090249654.png" align="left"/>



<p><strong>Spring Data的特点</strong></p>
<p>&emsp;&emsp;Spring Data提供<strong>统一的</strong>API来对数据访问层进行操作，这主要是通过Spring Data Commons项目来实现的。Spring Data Commons可以让开发人员在使用关系型数据库和非关系型数据库访问技术时都基于Spring提供的统一标准（包含了CRUD、排序、分页等操作）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201004094239035.png" align="left"/>

<p><strong>Spring Data与JPA的关系</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201004094406577.png" align="left"/>

<p>JPA：Java Persistence API，Java持久化层API。是JAVA提供的持久层规范，如上图所示Hibernate、Toplink、OpenJPA等都实现了JPA规范</p>
<p>Spring Data XXX是Spring Data对各种数据访问技术进行自动配置（简化），例如：Spring Data Redis、Spring Data MongoDB等，它们都可以使用Spring Data提供的统一API进行持久层编程，也就是说使用了Spring Data之后就可以不用关心具体使用了何种数据访问技术，统一使用Spring Data提供的API进行持久层的编程开发。</p>
<p>Spring Data也提供了对JPA的支持，Spring Data JPA就是Spring Data的JPA模块，对JPA进行了自动配置和简化操作。JPA 2.0可以查看JSR 317的相关文档。</p>
<h3 id="整合JPA-1"><a href="#整合JPA-1" class="headerlink" title="整合JPA"></a>整合JPA</h3><p>JPA也是基于ORM（Object Relational Mapping）</p>
<p><strong>1、编写好一个实体类（bean）和数据表进行映射</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span><span class="comment">//告诉JPA这是一个实体类</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>)<span class="comment">//@Table指定和哪个数据表对应，省略默认表明就是类名小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, length = <span class="number">50</span>)<span class="comment">//和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span><span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、编写一个Dao接口来操作实体类对应的数据表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承JpaRepository来完成对数据库操作</span></span><br><span class="line"><span class="comment">第一个泛型是操作的实体类类型</span></span><br><span class="line"><span class="comment">第二个泛型是实体类的主键类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、基本的配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.0.113:3306/jpa</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment">#更新或者创建数据表</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment">#控制台显示SQL语句</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>JPA有关的配置都可以在<code>JpaProperties</code>中找到</p>
<p><strong>4、编写控制器进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserRepository</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRepository = userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        User save = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后访问对应的路径进行测试即可：</p>
<ul>
<li><a href="http://localhost:8080/user?lastName=aa&amp;email=abc@qq.com" target="_blank" rel="noopener">http://localhost:8080/user?lastName=aa&amp;email=abc@qq.com</a></li>
<li><a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a></li>
</ul>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot核心技术</tag>
        <tag>SpringBoot 数据访问</tag>
        <tag>Spring Data</tag>
      </tags>
  </entry>
  <entry>
    <title>十一、SpringBoot与检索</title>
    <url>/2020/09/07/%E5%8D%81%E4%B8%80%E3%80%81SpringBoot%E4%B8%8E%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="Spring-Boot与检索"><a href="#Spring-Boot与检索" class="headerlink" title="Spring Boot与检索"></a>Spring Boot与检索</h1><h2 id="ElasticSearch简介"><a href="#ElasticSearch简介" class="headerlink" title="ElasticSearch简介"></a>ElasticSearch简介</h2><p>&emsp;&emsp;全文检索是一个经常使用的功能，开源的ElasticSearch是目前全文搜索引擎的首选。它可以快速存储、搜索和分析海量数据。Spring Boot通过整合Spring Data ElasticSearch为我们提供了非常便捷的检索功能支持</p>
<p>&emsp;&emsp;ElasticSearch是一个分布式搜索服务，提供Restful API，底层基于Lucence，采用多shard（分片）的方式保证数据安全，并且提供自动resharding的功能，github等大型站点也是采用了ElasticSearch作为其搜索服务。</p>
<h3 id="在文档和索引中的数据"><a href="#在文档和索引中的数据" class="headerlink" title="在文档和索引中的数据"></a>在文档和索引中的数据</h3><p>&emsp;&emsp;Elasticsearch是一个分布式的文档（document）存储。Elasticsearch将复杂数据序列化为JSON文档（documents）进行存储而非将信息存储到类似于MySQL那种行列数据库中。当你有多个Elasticsearch节点在集群（cluster）时，被存储的文档会分布在集群且可以从任何节点进行访问。</p>
<p>&emsp;&emsp;当一个文档被存储时，它会被索引（indexed）并且可以近乎实时搜索（在1秒内）。Elasticsearch使用叫做倒排索引（inverted index）的数据结构（这种数据结构支持快速的全文搜索）。一个倒排索引会列出所有出现在文档中不重复的词并给出出现该词的文档ID。</p>
<p>&emsp;&emsp;一个索引（index）可以被看成一个被优化的文档集合，且每一个文档都是一个字段（field，出现在数据中的键值对）集合。默认情况下，Elasticsearch为每个字段中的所有数据建立索引，并且每个索引字段都具有专用的优化数据结构。例如，文本字段存储在倒排索引中，数字字段和地理字段存储在BKD树中。使用按字段数据结构组合并返回搜索结果的能力使Elasticsearch如此之快。</p>
<p>&emsp;&emsp;Elasticsearch还具有无模式的能力（schema-less），这意味着无需显式指定如何处理文档中可能出现的每个不同字段即可对文档建立索引。启用动态映射后，Elasticsearch自动检测并向索引添加新字段。这种默认行为使索引和浏览数据变得更容易—只需要开始建立索引文件，Elasticsearch就会检测和映射布尔值、浮点数、整数值、日期、字符串到何时的Elasticsearch数据类型中。</p>
<p>&emsp;&emsp;当然，你肯定比Elasticsearch更知道如何使用你的数据。你可以定义规则来控制动态映射，也可以显式定义映射以完全控制字段的存储和索引方式。</p>
<p>&emsp;&emsp;定义你自己的映射使你能够：</p>
<ul>
<li>区分全文字符串字段和精确字符串字段</li>
<li>执行特定语言的文本分析</li>
<li>优化字段以进行部分匹配</li>
<li>使用自定义的日期格式</li>
<li>使用无法自动检测的数据类型，例如geo_point和geo_shape</li>
</ul>
<p>&emsp;&emsp;为不同的目的以不同的方式对同一字段建立索引通常很有用。例如，你可能希望将字符串字段索引为全文搜索的文本字段和索引关键字，以便对数据进行排序或汇总。或者，你可能选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。</p>
<h3 id="搜索和分析"><a href="#搜索和分析" class="headerlink" title="搜索和分析"></a>搜索和分析</h3><p>&emsp;&emsp;虽然你可以将Elasticsearch用作文档存储并检索文档及其元数据，但真正的强大之处在于能够轻松访问基于Apache Lucene搜索引擎库构建的全套搜索功能。</p>
<p>&emsp;&emsp;ElasticSearch提供一个简单、一致的REST API，用于管理你的集群以及索引和搜索你的数据。为了进行测试你可以直接从命令行或者通过Kibana的开发者控制台轻松提交请求。在你的应用程序中，你可以将<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">Elasticsearch客户端</a>用于你所选择的语言，例如：Java、JavaScript、Go、.NET、PHP、Perl、Python或者Ruby。</p>
<p><strong>搜索你的数据</strong></p>
<p>&emsp;&emsp;Elasticsearch REST API支持结构化查询，全文查询和结合了前两者的复杂查询。结构化查询类似于你可以在SQL中构造的查询类型。例如，你可以<code>employee</code>索引中搜索<code>gender</code>和<code>age</code>字段，然后按照<code>hire_date</code>字段进行排序。全文查询会超导所有与查询字符串相匹配的文档，并且按照相关性（与搜索词的匹配程度）返回。</p>
<p>&emsp;&emsp;除了搜索个别的term（术语、词），你还可以执行短语搜索、相似性搜索以及前缀搜索，并且获得自动完成建议。</p>
<p>&emsp;&emsp;有地理空间数据或者其他数字数据想要搜索？Elasticsearch支持高性能地理和数字查询的优化数据结构中索引非文本数据。</p>
<p>&emsp;&emsp;你还可以使用Elasticsearch全面的JSON样式查询语言（Query DSL）来获取所有这些查询功能。你也可以使用构造SQL样式的查询，以在Elasticsearch内原生地查询和聚合，并且JDBC和ODBC驱动使得大范围的第三方应用程序可以通过SQL与Elasticsearch进行交互。</p>
<p><strong>分析你的数据</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201014095725495.png" alt="image-20201014095725495"></p>
<p>&emsp;&emsp;Elasticsearch聚合是你能够构建数据的复杂摘要，并深入了解关键指标（metrics）、模式（pattern）和趋势（trend）。除了众所周知的“草垛找针”问题，聚合还使得你能回答以下问题：</p>
<ul>
<li>草垛里有多少根针？</li>
<li>针的平均长度是多少？</li>
<li>按照制造商细分，针的长度的中位数是多少？</li>
<li>每6个月中有多少根针被放进了草垛中？</li>
</ul>
<p>&emsp;&emsp;你也可以使用聚合来回答更加微妙的问题，例如：</p>
<ul>
<li>最受欢迎的针的制造商是？</li>
<li>是否有不寻常或者不规则的一团针？</li>
</ul>
<p>&emsp;&emsp;因为聚合利用和搜索相同的数据结构，所以聚合页非常快。这使得你能够实时分析和可视化数据。你的报告和dashboard会随着数据的更改而更新，因此你可以根据最新的消息来采取措施。</p>
<p>&emsp;&emsp;聚合操作和搜索请求和同时运行。你可以在相同数据，同一个请求中同时搜索文档、过滤结果以及执行分析。</p>
<h3 id="可扩展性和弹性：集群、节点和片"><a href="#可扩展性和弹性：集群、节点和片" class="headerlink" title="可扩展性和弹性：集群、节点和片"></a>可扩展性和弹性：集群、节点和片</h3><p>&emsp;&emsp;Elasticsearch旨在始终可用并根据你的需求扩展。它是通过自然分布来实现的。你可以将服务器（节点）添加到集群以增加容量，Elasticsearch会自动在所有可用节点之间分配数据和查询负载。无需大修你的应用程序，Elasticsearch知道如何平衡多节点集群以提供扩展性和高可用性。节点越多，越好。</p>
<p>&emsp;&emsp;这是如何工作的？在幕后，Elasticsearch实际上只是一个或者多个物理分片（shard）的逻辑分组，其中每个分片实际上是一个独立的索引，通过在多个分片之间的索引中分配文档，并在多个节点（node）之间分配这些分片，Elasticsearch可以确保冗余性，这既可以防止硬件故障，又可以在节点添加到集群时提高查询能力。随着集群的增长（或收缩），Elasticsearch会自动迁移碎片以重新平衡集群。</p>
<p>&emsp;&emsp;分片有两种类型：主分片和副本分片。索引中的每个文档都术语一个主分片。副本分片是主分片的副本。副本分片可以提供数据的冗余副本，以防止硬件故障并提高处理读取请求（如搜索或检索文档）的能力。</p>
<p>&emsp;&emsp;创建索引时，索引中的主分片的数量是固定的，但是副本分片的数量可以随时更改，而不会中断索引或查询操作。</p>
<p><strong>视情况而定…</strong></p>
<p>&emsp;&emsp;在分片大小和索引配置的主分片数量方面，存在许多性能方面的考虑和权衡取舍。分片越多，维护这些索引的开销就越大。分片大小越大，Elasticsearch需要重新平衡集群时，移动分片所需的时间就越长。</p>
<p>&emsp;&emsp;查询很多小分片回使每个分片的处理速度更快，但是更多的查询意味着更多的开销，因此查询较小数量的大分片可能会更快。总之，要视情况而定…</p>
<ul>
<li>将平均分片大小保持在几GB到几十GB之间。对于具有基于时间的数据的用例，通常会看到20GB到40GB范围内的碎片</li>
<li>避免庞大的碎片问题。节点可以容纳的分片数量与可用堆空间成正比。通常，每GB堆空间中的分片数量应少于20。</li>
</ul>
<p>&emsp;&emsp;确定用例最佳配置的最好方式就是通过使用自己的数据和查询进行测试。</p>
<p><strong>发生意外怎么办？</strong></p>
<p>&emsp;&emsp;处于性能原因，集群内的节点必须位于同一网络上。跨不同数据中心节点的集群中的分片平衡花费的时间太长。但是高可用性架构要求你避免将所有鸡蛋放在一个篮子里。如果一个位置发生重大故障，则另一个位置的服务器能够无缝接管。那么应该如何接解决？答案是跨集群复制（CCR，Cross-cluster replication）</p>
<p>&emsp;&emsp;CCR提供了一种方法，可以自动将索引从主集群同步到可作为热备份的辅助远程集群中。如果主集群发生了故障，则辅助集群可以接管。你还可以使用CCR创建辅助集群，以接近地理位置的方式向你的用户提供读取请求。</p>
<p>&emsp;&emsp;跨集群复制时主动-被动模式（active-passive）。主集群上的索引是活动的领导者索引（leader index），并处理所有写入请求（write request）。复制到辅助集群的索引是只读关注着（read-only followers）</p>
<p><strong>关心和维护</strong></p>
<p>&emsp;&emsp;和所有企业系统一样，你需要工具来保护、管理和监控你的Elasticsearch集群。集成到Elasticsearch中的安全性、监视和管理功能使得你可以将<strong>Kibana作为控制中心</strong>来管理集群。数据汇总和索引生命周期管理等功能可以帮助你随着时间的推移智能地管理数据。</p>
<h2 id="Elasticsearch入门"><a href="#Elasticsearch入门" class="headerlink" title="Elasticsearch入门"></a>Elasticsearch入门</h2><p>学习ElasticSearch最好的方式就是它的官网：<a href="https://www.elastic.co/" target="_blank" rel="noopener">https://www.elastic.co/</a></p>
<p>&emsp;&emsp;准备好将Elasticsearch作为测试驱动，并亲自了解如何使用REST API来存储、搜索、分析数据？</p>
<p>&emsp;&emsp;入门教程的步骤如下：</p>
<ol>
<li>启动并运行Elasticsearch集群</li>
<li>索引一些样本文档</li>
<li>使用Elasticsearch查询语言搜索文档</li>
<li>使用桶聚合（bucket aggregation）和指标聚合（metric aggregation）分析结果</li>
</ol>
<h3 id="启动并运行Elasticsearch集群"><a href="#启动并运行Elasticsearch集群" class="headerlink" title="启动并运行Elasticsearch集群"></a>启动并运行Elasticsearch集群</h3><p>有两种部署方式：</p>
<ul>
<li>在Elastic Cloud上运行Elasticsearch（收费，可以免费试用14天）</li>
<li></li>
</ul>
<p><strong>拉取ElasticSearch镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.9.2</span><br></pre></td></tr></table></figure>

<p><strong>运行ElasticSearch</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">9200</span>:<span class="number">9200</span> -p <span class="number">9300</span>:<span class="number">9300</span> -e <span class="string">"discovery.type=single-node"</span> -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> --name es01 elasticsearch:<span class="number">7.9</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>这里有两个端口映射，这是因为ElasticSearch在分布式的情况下会使用9300端口</p>
<p><strong>测试</strong></p>
<p>访问<code>ip地址:9200</code>，例如：<a href="http://192.168.0.113:9200，得到如下的JSON数据说明访问成功">http://192.168.0.113:9200，得到如下的JSON数据说明访问成功</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201014225435792.png" alt="image-20201014225435792"></p>
<h3 id="索引一些文档"><a href="#索引一些文档" class="headerlink" title="索引一些文档"></a>索引一些文档</h3><p>&emsp;&emsp;集群启动并运行后，就可以为一些数据建立索引了。Elasticsearch有多种摄取（ingest）选项，但最终它们都做了同一件事情：将JSON文档放入Elasticsearch索引中。</p>
<p>You can do this directly with a simple PUT request that specifies the index you want to add the document, a unique document ID, and one or more <code>&quot;field&quot;: &quot;value&quot;</code> pairs in the request body:</p>
<p>&emsp;&emsp;你可以使用简单的PUT请求直接执行此操作，该请求指定要添加文档的索引，唯一的文档ID、以及请求正文中的一个或多个字段（键值对）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /customer/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>安装Kibana</strong></font></p>
<p>为了方便使用Kibana的开发工具进行测试，需要使用docker安装并启动Kibana</p>
<p><strong>拉取镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.9.2</span><br></pre></td></tr></table></figure>

<p><strong>运行kibana</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --link YOUR_ELASTICSEARCH_CONTAINER_NAME_OR_ID:elasticsearch -p 5601:5601 &#123;docker-repo&#125;:&#123;version&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name kibana01 --link es01:elasticsearch -p 5601:5601 kibana:7.9.2</span><br></pre></td></tr></table></figure>



<p><strong>添加文档</strong></p>
<p>使用Kibana的开发工具发起PUT请求，添加文档：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201015163023320.png" alt="image-20201015163023320"></p>
<p><strong>查询指定id的文档</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201015163158602.png" alt="image-20201015163158602"></p>
<h2 id="Spring-Boot整合Elasticsearch"><a href="#Spring-Boot整合Elasticsearch" class="headerlink" title="Spring Boot整合Elasticsearch"></a>Spring Boot整合Elasticsearch</h2><p>首先在官网中找到我们需要的REST Client的内容：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/index.html</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201015211037292.png" alt="image-20201015211037292"></p>
<p>使用Java High Level REST Client</p>
<p>1、找到原生依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、找到要分析的类</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201015211614781.png" alt="image-20201015211614781"></p>
<p>很明显<code>RestHighLevelClient</code>就是我们要研究的类</p>
<p>3、分析<code>RestHighLevelClient</code>中的方法</p>
<h3 id="创建项目修改依赖"><a href="#创建项目修改依赖" class="headerlink" title="创建项目修改依赖"></a>创建项目修改依赖</h3><p>使用Spring Initializr创建一个Spring Boot项目，添加Web依赖和Spring Data Elasticsearch模块的依赖</p>
<p>默认集成的elasticsearch版本可能和服务器（或者虚拟机）中所安装的elasticsearch版本不一致，<code>pom.xml</code>中添加如下配置覆盖版本仲裁中心的配置</p>
<p>Spring Boot有一个版本仲裁中心，集成的其他内容都有默认的版本，这也是为什么在Spring Boot中不需要写版本号，如果想要覆盖，则可以在properties标签中覆盖对应的版本即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义elasticsearch的版本，保证和连接的ES版本一致!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.9.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201015214441600.png" alt="image-20201015214441600"></p>
<p>不同版本的ES，api可能有所区别，所以最好保持ES版本一致，以免发生不必要的错误！</p>
<h3 id="自动配置源码分析"><a href="#自动配置源码分析" class="headerlink" title="自动配置源码分析"></a>自动配置源码分析</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201015221618450.png" alt="image-20201015221618450"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201015221644338.png" alt="image-20201015221644338"></p>
<p><code>ElasticsearchDataAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="comment">//在ElastisearchTemplate存在时才加载，这个类在4.0时被弃用，但是还是存在的</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; ElasticsearchTemplate<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class">//在<span class="title">ElasticsearchRestClientAutoConfiguration</span>、<span class="title">ReactiveElasticsearchRestClientAutoConfiguration</span>之后加载</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; ElasticsearchRestClientAutoConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ReactiveElasticsearchRestClientAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">//加载<span class="title">ElasticsearchDataConfiguration</span>的三个静态内部类（配置类）</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; ElasticsearchDataConfiguration.BaseConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ElasticsearchDataConfiguration</span>.<span class="title">RestClientConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ElasticsearchDataConfiguration</span>.<span class="title">ReactiveRestClientConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ElasticsearchDataAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ElasticsearchDataConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchDataConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">		<span class="function">ElasticsearchConverter <span class="title">elasticsearchConverter</span><span class="params">(SimpleElasticsearchMappingContext mappingContext)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> MappingElasticsearchConverter(mappingContext);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">		<span class="function">SimpleElasticsearchMappingContext <span class="title">mappingContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> SimpleElasticsearchMappingContext();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(RestHighLevelClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">static</span> <span class="title">class</span> <span class="title">RestClientConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span>(value = ElasticsearchOperations<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= <span class="string">"elasticsearchTemplate"</span>)</span><br><span class="line">		<span class="meta">@ConditionalOnBean</span>(RestHighLevelClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">		<span class="title">ElasticsearchRestTemplate</span> <span class="title">elasticsearchTemplate</span>(<span class="title">RestHighLevelClient</span> <span class="title">client</span>, <span class="title">ElasticsearchConverter</span> <span class="title">converter</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ElasticsearchRestTemplate(client, converter);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; WebClient<span class="class">.<span class="keyword">class</span>, <span class="title">ReactiveElasticsearchOperations</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">	<span class="title">static</span> <span class="title">class</span> <span class="title">ReactiveRestClientConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span>(value = ReactiveElasticsearchOperations<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= <span class="string">"reactiveElasticsearchTemplate"</span>)</span><br><span class="line">		<span class="meta">@ConditionalOnBean</span>(ReactiveElasticsearchClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">		<span class="title">ReactiveElasticsearchTemplate</span> <span class="title">reactiveElasticsearchTemplate</span>(<span class="title">ReactiveElasticsearchClient</span> <span class="title">client</span>,</span></span><br><span class="line"><span class="class">				<span class="title">ElasticsearchConverter</span> <span class="title">converter</span>) </span>&#123;</span><br><span class="line">			ReactiveElasticsearchTemplate template = <span class="keyword">new</span> ReactiveElasticsearchTemplate(client, converter);</span><br><span class="line">			template.setIndicesOptions(IndicesOptions.strictExpandOpenAndForbidClosed());</span><br><span class="line">			template.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);</span><br><span class="line">			<span class="keyword">return</span> template;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于WebClient不存在，所以这个类中的<code>ReactiveRestClientConfiguration</code>不会生效，其他两个配置类注入了如下组件：</p>
<ul>
<li><code>ElasticsearchConverter</code></li>
<li><code>SimpleElasticsearchMappingContext</code></li>
<li><code>ElasticsearchRestTemplate</code></li>
</ul>
<p><code>ElasticsearchRepositoriesAutoConfiguration</code></p>
<p>这个就是SpringData Elasticsearch有关的自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Client<span class="class">.<span class="keyword">class</span>, <span class="title">ElasticsearchRepository</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.data.elasticsearch.repositories"</span>, name = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>,</span><br><span class="line">		matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(ElasticsearchRepositoryFactoryBean<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(<span class="title">ElasticsearchRepositoriesRegistrar</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ElasticsearchRepositoriesAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>ElasticsearchRestClientAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RestClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//让<span class="title">ElasticsearchRestClientProperties</span>生效</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">ElasticsearchRestClientProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">//让<span class="title">ElasticsearchRestClientConfigurations</span>的三个静态内部配置类生效</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; ElasticsearchRestClientConfigurations.RestClientBuilderConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ElasticsearchRestClientConfigurations</span>.<span class="title">RestHighLevelClientConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ElasticsearchRestClientConfigurations</span>.<span class="title">RestClientFallbackConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ElasticsearchRestClientAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>RestClientBuilderConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(RestClientBuilder<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">static</span> <span class="title">class</span> <span class="title">RestClientBuilderConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestClientBuilderCustomizer <span class="title">defaultRestClientBuilderCustomizer</span><span class="params">(ElasticsearchRestClientProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultRestClientBuilderCustomizer(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestClientBuilder <span class="title">elasticsearchRestClientBuilder</span><span class="params">(ElasticsearchRestClientProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     ObjectProvider&lt;RestClientBuilderCustomizer&gt; builderCustomizers)</span> </span>&#123;</span><br><span class="line">        HttpHost[] hosts = properties.getUris().stream().map(<span class="keyword">this</span>::createHttpHost).toArray(HttpHost[]::<span class="keyword">new</span>);</span><br><span class="line">        RestClientBuilder builder = RestClient.builder(hosts);</span><br><span class="line">        builder.setHttpClientConfigCallback((httpClientBuilder) -&gt; &#123;</span><br><span class="line">            builderCustomizers.orderedStream().forEach((customizer) -&gt; customizer.customize(httpClientBuilder));</span><br><span class="line">            <span class="keyword">return</span> httpClientBuilder;</span><br><span class="line">        &#125;);</span><br><span class="line">        builder.setRequestConfigCallback((requestConfigBuilder) -&gt; &#123;</span><br><span class="line">            builderCustomizers.orderedStream().forEach((customizer) -&gt; customizer.customize(requestConfigBuilder));</span><br><span class="line">            <span class="keyword">return</span> requestConfigBuilder;</span><br><span class="line">        &#125;);</span><br><span class="line">        builderCustomizers.orderedStream().forEach((customizer) -&gt; customizer.customize(builder));</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpHost <span class="title">createHttpHost</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> createHttpHost(URI.create(uri));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> HttpHost.create(uri);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpHost <span class="title">createHttpHost</span><span class="params">(URI uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(uri.getUserInfo())) &#123;</span><br><span class="line">            <span class="keyword">return</span> HttpHost.create(uri.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> HttpHost.create(<span class="keyword">new</span> URI(uri.getScheme(), <span class="keyword">null</span>, uri.getHost(), uri.getPort(), uri.getPath(),</span><br><span class="line">                                           uri.getQuery(), uri.getFragment()).toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个配置类会在容器中没有<code>RestClientBuilder</code>时生效，它会为容器中注入一个<code>RestClientBuilderCustomizer</code>类型的组件，这个自定义器是根据<code>ElasticsearchClientProperties</code>这个Properties来构建的（也就是说可以通过配置文件来覆盖这些配置）</p>
<p><code>RestHighLevelClientConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RestHighLevelClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">static</span> <span class="title">class</span> <span class="title">RestHighLevelClientConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function">RestHighLevelClient <span class="title">elasticsearchRestHighLevelClient</span><span class="params">(RestClientBuilder restClientBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function">RestClient <span class="title">elasticsearchRestClient</span><span class="params">(RestClientBuilder builder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       ObjectProvider&lt;RestHighLevelClient&gt; restHighLevelClient)</span> </span>&#123;</span><br><span class="line">        RestHighLevelClient client = restHighLevelClient.getIfUnique();</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> client.getLowLevelClient();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个配置类会注入这两个类型的组件：</p>
<ul>
<li><code>RestHighLevelClient</code></li>
<li><code>RestClient</code></li>
</ul>
<p>前面在查看官方文档中见到过，有两个类型的Rest客户端，一个高级的，一个低级的。我们一般使用<code>RestHighLevelClient</code>，因为这个类的封装程度更高，后面的章节会介绍这个类中有关索引和文档相关的API</p>
<p><code>RestClientFallbackConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientFallbackConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function">RestClient <span class="title">elasticsearchRestClient</span><span class="params">(RestClientBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个会在容器中没有<code>RestClient</code>类型的组件时，调用<code>RestClientBuilder</code>的<code>build()</code>方法来注入一个<code>RestClient</code>类型的组件</p>
<h3 id="索引相关的API详解"><a href="#索引相关的API详解" class="headerlink" title="索引相关的API详解"></a>索引相关的API详解</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootEs01ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//    @Qualifier("restHighLevelClient")</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试索引的创建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建索引的请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"zxw_index"</span>);</span><br><span class="line">        <span class="comment">//2、执行创建索引的请求，获得请求后的响应</span></span><br><span class="line">        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取索引"><a href="#获取索引" class="headerlink" title="获取索引"></a>获取索引</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建获取索引的请求</span></span><br><span class="line">    GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">"zxw_index"</span>);</span><br><span class="line">    <span class="comment">//判断索引是否存在</span></span><br><span class="line">    <span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">        <span class="comment">//存在则获取索引</span></span><br><span class="line">        GetIndexResponse response = client.indices().get(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//打印获取索引的名称</span></span><br><span class="line">        System.out.println(response.getIndices()[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"索引不存在！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建删除索引的请求</span></span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">"zxw_index"</span>);</span><br><span class="line">    <span class="comment">//删除索引</span></span><br><span class="line">    AcknowledgedResponse response = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//isAcknowledged返回true则说明成功删除</span></span><br><span class="line">    <span class="keyword">if</span> (response.isAcknowledged()) &#123;</span><br><span class="line">        System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文档相关的API详解"><a href="#文档相关的API详解" class="headerlink" title="文档相关的API详解"></a>文档相关的API详解</h3><p><code>User</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"zxw"</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">//创建请求</span></span><br><span class="line">    IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"zxw_index"</span>);</span><br><span class="line">    <span class="comment">//设置规则 PUT /zxw_index/_doc/1</span></span><br><span class="line">    request.id(<span class="string">"1"</span>);</span><br><span class="line">    request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//将数据放入请求</span></span><br><span class="line">    request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">    <span class="comment">//客户端发送请求，获取响应的结果</span></span><br><span class="line">    IndexResponse response = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.toString());</span><br><span class="line">    System.out.println(response.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取文档"><a href="#获取文档" class="headerlink" title="获取文档"></a>获取文档</h4><p><strong>判断文档是否存在</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExistsDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//首先判断文档是否存在</span></span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">"zxw_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">    <span class="comment">// request中一些可用的方法，这些设置可以减少查询的开销</span></span><br><span class="line">    request.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">    request.storedFields(<span class="string">"_none_"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> exists = client.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">        System.out.println(<span class="string">"文档存在！"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"文档不存在！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取文档信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建请求</span></span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">"zxw_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">    <span class="comment">//发送请求获取文档，得到响应</span></span><br><span class="line">    GetResponse response = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//打印响应的信息</span></span><br><span class="line">    System.out.println(response.getSourceAsString());</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里获得的response，相当于将<code>PUT /zxw_index/_doc/1</code>返回的JSON数据封装成一个对象</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201016095904074.png" alt="image-20201016095904074"></p>
<h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建请求</span></span><br><span class="line">    UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">"zxw_index"</span>, <span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放入要修改的数据</span></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"龙傲天"</span>, <span class="number">18</span>);</span><br><span class="line">    request.doc(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">    <span class="comment">//发送请求，获取响应</span></span><br><span class="line">    UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建请求</span></span><br><span class="line">    DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"zxw_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">    <span class="comment">//发起删除请求，获取响应</span></span><br><span class="line">    DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="批量请求"><a href="#批量请求" class="headerlink" title="批量请求"></a>批量请求</h4><p>这里以批量插入为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实的项目中一般都会批量插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建请求</span></span><br><span class="line">    BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    request.timeout(<span class="string">"10s"</span>);</span><br><span class="line">    <span class="comment">//创建一个用于存放User的集合</span></span><br><span class="line">    ArrayList&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"zhangsan1"</span>, <span class="number">20</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"zhangsan2"</span>, <span class="number">20</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"zhangsan3"</span>, <span class="number">20</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"zhangsan4"</span>, <span class="number">20</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"zhangsan5"</span>, <span class="number">20</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"zhangsan6"</span>, <span class="number">20</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">"zhangsan7"</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批处理请求</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class="line">        request.add(</span><br><span class="line">                <span class="keyword">new</span> IndexRequest(<span class="string">"zxw_index"</span>)</span><br><span class="line">                .id(<span class="string">""</span> + (i + <span class="number">1</span>))</span><br><span class="line">                .source(JSON.toJSONString(users.get(i)), XContentType.JSON)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发送请求获取响应</span></span><br><span class="line">    BulkResponse response = client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//输出是否失败</span></span><br><span class="line">    System.out.println(response.hasFailures());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建请求</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"zxw_index"</span>);</span><br><span class="line">    <span class="comment">//构建搜索条件</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//精确匹配</span></span><br><span class="line">    TermQueryBuilder queryBuilder = QueryBuilders.termQuery(<span class="string">"name"</span>, <span class="string">"zhangsan1"</span>);</span><br><span class="line">    <span class="comment">//        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">    sourceBuilder.query(queryBuilder);</span><br><span class="line">    <span class="comment">//设置超时时间</span></span><br><span class="line">    sourceBuilder.timeout(TimeValue.timeValueSeconds(<span class="number">60</span>));</span><br><span class="line">    <span class="comment">//将soureBuilder放入searchRequest中</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//发送请求得到响应</span></span><br><span class="line">    SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">    System.out.println(<span class="string">"_________________________"</span>);</span><br><span class="line">    <span class="comment">//此处也可以对照查询返回的JSON字符串数据来使用两个hits都在结果的JSON字符串中出现过</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>搜索请求SearchRequest</li>
<li>条件构造SearchSourceBuilder：可以构建各种搜索条件<ul>
<li>HighLightBuilder</li>
<li>TermQueryBuilder</li>
<li>MatchAllQueryBuilder</li>
<li>。。。总之就是各种XXXQueryBuilder</li>
</ul>
</li>
</ol>
<h2 id="Elasticsearch实战—京东搜索"><a href="#Elasticsearch实战—京东搜索" class="headerlink" title="Elasticsearch实战—京东搜索"></a>Elasticsearch实战—京东搜索</h2><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>使用Spring Initializr创建一个Spring Boot项目，依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定Elasticsearch的版本，保持版本一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.9.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringData整合Elasticsearch--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模板引擎thymeleaf--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开发工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h3><p><strong>如何获取数据？</strong></p>
<ul>
<li>从数据库中获取</li>
<li>消息队列中获取</li>
<li>爬虫</li>
</ul>
<p>如何爬取数据？</p>
<p>获取请求返回的页面，筛选出需要的数据就可以了！</p>
<p>可以使用jsoup来爬取网页，jsoup使用起来十分简单，这里以在京东搜索栏查询java为例</p>
<h3 id="业务编写"><a href="#业务编写" class="headerlink" title="业务编写"></a>业务编写</h3><h3 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h3><h3 id="关键字高亮实现"><a href="#关键字高亮实现" class="headerlink" title="关键字高亮实现"></a>关键字高亮实现</h3>]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot与检索</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>十、SpringBoot与消息</title>
    <url>/2020/09/07/%E5%8D%81%E3%80%81SpringBoot%E4%B8%8E%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h1 id="Spring-Boot与消息"><a href="#Spring-Boot与消息" class="headerlink" title="Spring Boot与消息"></a>Spring Boot与消息</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol>
<li><p>在大多数应用中，可通过消息服务中间件来提升系统异步通信、扩展解耦能力</p>
</li>
<li><p>消息服务中两个重要概念：</p>
<ul>
<li><strong>消息代理</strong>（message broker）</li>
<li><strong>目的地</strong>（destination）</li>
</ul>
<p>当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地</p>
</li>
<li><p>消息队列主要有两种形式的目的地</p>
<ul>
<li><strong>队列</strong>（queue）：点对点消息通信（point-to-point）</li>
<li><strong>主题</strong>（topic）：发布（publish）/订阅（subscribe）消息通信</li>
</ul>
</li>
<li><p><strong>点对点式</strong>：</p>
<ul>
<li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列</li>
<li>消息只有唯一的发送者和<strong>接受者</strong>，但并不是说只能有一个<strong>接收者</strong>（可以有多个人查看信件，但是只能有一个人收下）</li>
</ul>
</li>
<li><p><strong>发布订阅式</strong>：</p>
<ul>
<li>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达同时受到消息</li>
</ul>
</li>
<li><p><strong>JMS</strong>（Java Message Service）Java消息服务</p>
<ul>
<li>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS的实现</li>
</ul>
</li>
<li><p><strong>AMQP</strong>（Advanced Message Queuing Protocol）</p>
<ul>
<li>高级消息队列协议，也是一个消息代理的规范，兼容JMS</li>
<li>RabbitMQ是AMQP的实现</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>JMS</th>
<th>AMQP</th>
</tr>
</thead>
<tbody><tr>
<td>定义</td>
<td>Java API</td>
<td>Wire-protocol</td>
</tr>
<tr>
<td>跨语言</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>跨平台</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>Model</td>
<td>提供两种消息模型：<br/>（1）Peer-2-Peeer<br/>（2）Pub/sub</td>
<td>提供了五种消息模型：<br/>（1）direct exchange<br/>（2）fanout exchange<br/>（3）topic exchange<br/>（4）headers exchange<br/>（5）system exchange<br/>本质上来说后四种和JMS的pub/sub模型没有太大差别，仅是路由机制上做了更详细的划分</td>
</tr>
<tr>
<td>支持消息类型</td>
<td>多种消息类型：TextMessageMapMessageBytesMessageStreamMessageObjectMessageMessage （只有消息头和属性）</td>
<td>byte[]当实际应用时，有复杂的消息，可以将消息序列化后发送。</td>
</tr>
<tr>
<td>综合评价</td>
<td>JMS 定义了JAVA API层面的标准；在java体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台的支持较差；</td>
<td>AMQP定义了wire-level层的协议标准；天然具有跨平台、跨语言特性。</td>
</tr>
</tbody></table>
<ol start="8">
<li>Spring支持<ul>
<li>spring-jms提供了对JMS的支持</li>
<li>spring-rabbit提供了对AMQP的支持</li>
<li>需要ConnectionFactory的实现来连接消息代理</li>
<li>提供JmsTemplate、RabbitTemplate来发送消息</li>
<li>@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息代理发布的消息</li>
<li>@EnableJms、@EnableRabbit开启支持</li>
</ul>
</li>
<li>Spring Boot自动配置<ul>
<li>JmsAutoConfiguration</li>
<li>RabbitAutoConfiguration</li>
</ul>
</li>
</ol>
<h2 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h2><p>RabbitMQ是一个由erlang开发的AMQP（Advanced Message Queuing Protocol）的开源实现</p>
<p><strong>核心概念</strong></p>
<ul>
<li><p><strong>Message</strong></p>
<p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等</p>
</li>
<li><p><strong>Publisher</strong></p>
<p>消息的生产者，也是一个向交换器发布消息的客户端应用程序</p>
</li>
<li><p><strong>Exchange</strong></p>
<p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</p>
<p>Exchange有4种类型：direct（默认）、fanout、topic、headers，不同类型的Exchange转发消息的策略有所区别</p>
</li>
<li><p><strong>Queue</strong></p>
<p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可以投入一个或者多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</p>
</li>
<li><p><strong>Binding</strong></p>
<p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由路由绑定构成的路由表。</p>
<p>Exchange和Queue的绑定可以是多对多的关系</p>
</li>
<li><p><strong>Connecting</strong></p>
<p>网络连接，比如一个TCP连接</p>
</li>
<li><p><strong>Channel</strong></p>
<p>信道，多路复用连接种的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成的。因为对于操作系统来说建立和销毁TCP都是非常昂贵的开销，所以引入了信道的概念，以复用一条TCP连接。</p>
</li>
<li><p><strong>Consumer</strong></p>
<p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序</p>
</li>
<li><p><strong>Virtual Host</strong></p>
<p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在连接时指定，RabbitMQ默认的vhost是<code>/</code></p>
</li>
<li><p><strong>Broker</strong></p>
<p>表示消息队列服务器实体</p>
</li>
</ul>
<p>关系图如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008095850218.png" align="left"/>



<h2 id="RabbitMQ运行机制"><a href="#RabbitMQ运行机制" class="headerlink" title="RabbitMQ运行机制"></a>RabbitMQ运行机制</h2><p>AMQP中的消息路由</p>
<ul>
<li><p>AMQP中消息的路由过程和Java开发者熟悉的JMS存在一些差别，AMQP中增加了<strong>Exchange</strong>和<strong>Binding</strong>的角色。生产者把消息发布到Exchange上，消息最终到达队列并被消费者接收，而Binding决定交换器的消息应该发送到哪个队列。</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008095919509.png" align="left"/>



</li>
</ul>
<h3 id="Exchange类型"><a href="#Exchange类型" class="headerlink" title="Exchange类型"></a>Exchange类型</h3><p>Exchange分发消息时根据类型的不同分发策略有所区别，目前一共四种：</p>
<ul>
<li>direct</li>
<li>fanout</li>
<li>topic</li>
<li>headers</li>
</ul>
<p>headers匹配AMQP消息的header而不是路由键，headers交换器和direct交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型</p>
<h4 id="Direct-Exchange（单播模式）"><a href="#Direct-Exchange（单播模式）" class="headerlink" title="Direct Exchange（单播模式）"></a>Direct Exchange（单播模式）</h4><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008095207664.png" align="left"/>

<p>消息中的路由键（routing key）如果和Binding中的binding key一致，交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换器要求路由键为“dog”，则只转发routing key标记为“dog”的消息，不会转发”dog.puppy“，也不会转发”dog.guard“等等。它是完全匹配、单播的模式。</p>
<h4 id="Facout-Exchange（广播模式）"><a href="#Facout-Exchange（广播模式）" class="headerlink" title="Facout Exchange（广播模式）"></a>Facout Exchange（广播模式）</h4><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008095524816.png" align="left"/>

<p>每个发布到fanout类型的交换器的消息都会分到所有绑定的队列上去。fanout交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout类型转发消息是最快的。</p>
<h4 id="Topic-Exchange（有选择性广播）"><a href="#Topic-Exchange（有选择性广播）" class="headerlink" title="Topic Exchange（有选择性广播）"></a>Topic Exchange（有选择性广播）</h4><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008100000333.png" align="left"/>

<p>topic交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些<strong>单词之间用点隔开</strong>。它同样也会识别两个通配符：符号<code>#</code>和符号<code>*</code>，<code>#</code>匹配0个或多个单词，<code>*</code>匹配一个单词。</p>
<h2 id="RabbitMQ整合"><a href="#RabbitMQ整合" class="headerlink" title="RabbitMQ整合"></a>RabbitMQ整合</h2><h3 id="安装RabbitMQ环境"><a href="#安装RabbitMQ环境" class="headerlink" title="安装RabbitMQ环境"></a>安装RabbitMQ环境</h3><p><strong>1、使用docker下载RabbitMQ镜像</strong><br>注意选择带management标签的版本，这样会有web管理页面，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>

<p>下载完成之后使用下面的命令查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008101530027.png" align="left"/>

<p><strong>2、运行下载的镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name myrabbitmq rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>

<p>注意：这里有两个端口映射</p>
<ul>
<li>5672端口：RabbitMQ的端口</li>
<li>15672端口：后台管理页面端口</li>
</ul>
<p>运行成功后访问：<code>主机ip:15672</code>，例如：<a href="http://192.168.0.113:15672，来到后台管理的登录页面">http://192.168.0.113:15672，来到后台管理的登录页面</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008102212076.png" align="left"/>

<p>使用guest用户登录（密码也是guest）进入后台管理页面：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008102319510.png" align="left"/>

<h3 id="测试RabbitMQ"><a href="#测试RabbitMQ" class="headerlink" title="测试RabbitMQ"></a>测试RabbitMQ</h3><p><strong>需求</strong>：测试上面介绍的三种Exchange类型的交换器（direct、fanout、exchange）</p>
<p><strong>1、在后台管理页面创建交换器</strong></p>
<p>创建名为<code>exchange.direct</code>、类型为<code>direct</code>的交换器</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008103545741.png" align="left"/>

<p>创建名为<code>exchange.fanout</code>、类型为<code>fanout</code>的交换器</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008103634650.png" align="left"/>

<p>创建名为<code>exchange.topic</code>、类型为<code>topic</code>的交换器</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008103727867.png" align="left"/>

<p><strong>2、创建一些用于测试的消息队列</strong></p>
<p>创建<code>zxw</code>队列：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008103958080.png" align="left"/>

<p>如此创建<code>zxw.news</code>、<code>zxw.emps</code>、<code>wuyifan.news</code>三个队列</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008104233939.png" align="left"/>



<p><strong>3、将交换器和队列进行绑定</strong></p>
<p><code>exchange.direct</code>交换器绑定<code>zxw</code>队列：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008104613399.png" align="left"/>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008104746452.png" align="left"/>

<p><code>exchange.fanout</code>绑定这四个队列：</p>
<p>这个交换器中路由器写不写都无所谓（因为是广播模式）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008105103642.png" align="left"/>



<p><code>exchange.topic</code>绑定这四个队列：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008105336000.png" align="left"/>



<p><strong>4、发送消息，进行测试</strong></p>
<p>在<code>exchange.direct</code>交换器中发布如下的消息：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008105716458.png" align="left"/>

<p>根据我们之前学过的知识，这个消息发布之后，只有<code>zxw</code>消息队列能够收到：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008110002707.png" align="left"/>

<p>查看消息：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008110046389.png" align="left"/>

<p>在<code>exchange.fanout</code>交换器发布如下消息：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008110235876.png" align="left"/>

<p>结果不出所料，所有的队列都接收到了消息：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008110322553.png" align="left"/>



<p>在<code>exchange.topic</code>中发布如下消息：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008110531143.png" align="left"/>

<p>结果所有队列都收到了消息：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008110740283.png" align="left"/>



<p><code>exchange.topic</code>中发送如下消息</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008110956206.png" align="left"/>

<p>结果<code>zxw.news</code>和<code>wuyifan.news</code>收到了消息：</p>
<h3 id="Spring-Boot整合RabbitMQ"><a href="#Spring-Boot整合RabbitMQ" class="headerlink" title="Spring Boot整合RabbitMQ"></a>Spring Boot整合RabbitMQ</h3><p>使用Spring Initializr创建一个Spring Boot项目，添加web和spring for rabbitmq依赖</p>
<h4 id="RabbitAutoConfiguration分析"><a href="#RabbitAutoConfiguration分析" class="headerlink" title="RabbitAutoConfiguration分析"></a>RabbitAutoConfiguration分析</h4><ol>
<li><p>配置了连接工厂<code>CachingConnectionFactory</code></p>
</li>
<li><p><code>RabbitProperties</code>中封装了RabbitMQ的所有配置，可以通过配置文件来覆盖这些默认的配置，示例配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.113</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>RabbitTemplate</code>：给RabbitMQ发送和接收消息</p>
</li>
<li><p><code>AmqpAdmin</code>：RabbitMQ的系统管理功能组件（可以用来创建队列、交换器等操作）</p>
</li>
</ol>
<h4 id="发送和接收消息"><a href="#发送和接收消息" class="headerlink" title="发送和接收消息"></a>发送和接收消息</h4><p><strong>发送消息</strong></p>
<p>发送消息需要提供：</p>
<ul>
<li>exchange（交换器）</li>
<li>routeKey（路由键）</li>
<li>message</li>
</ul>
<p><code>RabbitTemplate</code>中提供了一个<code>convertAndSend</code>方法分别对应上面三个部分，使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02AmqpApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.单播（点对点）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Message需要自己构造一个</span></span><br><span class="line">        <span class="comment">//rabbitTemplate.convertAndSend(exchange, routeKey, object);</span></span><br><span class="line">        <span class="comment">//这个方法只需要传入要发送的对象，会自动序列化发送给rabbitmq，object默认作为消息体</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"message"</span>, <span class="string">"这是第一个消息"</span>);</span><br><span class="line">        map.put(<span class="string">"data"</span>, Arrays.asList(<span class="string">"abc"</span>, <span class="number">123</span>, <span class="keyword">false</span>));</span><br><span class="line">        <span class="comment">//序列化默认会使用JDK的序列化方式</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"exchange.direct"</span>, <span class="string">"zxw.news"</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认会以JDK序列化的方式将传入的对象序列化然后存入消息中</p>
<p><strong>接收消息</strong></p>
<p>可以通过<code>RabbitTemplate</code>的<code>receiveAndConvert</code>方法来接收并将消息转换为对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) rabbitTemplate.receiveAndConvert(<span class="string">"zxw.news"</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如何将数据以JSON字符串形式序列化发送？</strong></p>
<p>在<code>RabbitTemplate</code>中默认使用<code>SimpleMessageConverter</code>对消息进行转化，它就是使用JDK的序列化进行转化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplateConfigurer <span class="title">rabbitTemplateConfigurer</span><span class="params">(RabbitProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         ObjectProvider&lt;MessageConverter&gt; messageConverter,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         ObjectProvider&lt;RabbitRetryTemplateCustomizer&gt; retryTemplateCustomizers)</span> </span>&#123;</span><br><span class="line">    RabbitTemplateConfigurer configurer = <span class="keyword">new</span> RabbitTemplateConfigurer();</span><br><span class="line">    <span class="comment">//此处会从容器中获取MessageConverter，如果没有则提供一个默认的</span></span><br><span class="line">    configurer.setMessageConverter(messageConverter.getIfUnique());</span><br><span class="line">    configurer</span><br><span class="line">        .setRetryTemplateCustomizers(retryTemplateCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">    configurer.setRabbitProperties(properties);</span><br><span class="line">    <span class="keyword">return</span> configurer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述的Bean是<code>RabbitAutoConfiguration</code>种配置的组件，所以可以通过提供一个<code>MessageConverter</code>来实现JSON方式转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAmqpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新运行测试类，在后台查看消息发送的格式，结果发现消息成功被转换为JSON数据</p>
<h4 id="EnableRabbit-RabbitListener监听消息队列的内容"><a href="#EnableRabbit-RabbitListener监听消息队列的内容" class="headerlink" title="@EnableRabbit + @RabbitListener监听消息队列的内容"></a>@EnableRabbit + @RabbitListener监听消息队列的内容</h4><p>Book实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name, String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用@EnableRabbit开启RabbitMQ的注解支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启基于注解的RabbitMQ</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAmqpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>BookService</code>种使用<code>@RabbitListener</code>并在queues属性种给出要监听的消息队列名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = &#123;<span class="string">"zxw.news"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动Spring Boot应用进行测试，只要监听到对应队列种有Book类型的数据，就会执行receive方法！</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201009224022682.png" align="left"/>



<p><strong>接收Message类型的参数</strong></p>
<p>当然，还可以接收Message类型的参数，这样可以获取消息头和消息体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = &#123;<span class="string">"zxw"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出消息体</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">    <span class="comment">//输出消息头信息</span></span><br><span class="line">    System.out.println(message.getMessageProperties());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="AmqpAdmin管理组件"><a href="#AmqpAdmin管理组件" class="headerlink" title="AmqpAdmin管理组件"></a>AmqpAdmin管理组件</h4><p>AmqpAdmin可以用于创建和删除交换器、消息队列等组件</p>
<p><strong>创建Exchange</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    amqpAdmin.declareExchange(<span class="keyword">new</span> DirectExchange(<span class="string">"amqpadmin.exchange"</span>));</span><br><span class="line">    System.out.println(<span class="string">"创建完成!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>创建Queue</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    amqpAdmin.declareQueue(<span class="keyword">new</span> Queue(<span class="string">"amqpadmin.queue"</span>, <span class="keyword">true</span>));</span><br><span class="line">    System.out.println(<span class="string">"创建完成！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>创建Binding</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    amqpAdmin.declareBinding(<span class="keyword">new</span> Binding(<span class="string">"amqpadmin.queue"</span>, Binding.DestinationType.QUEUE, <span class="string">"amqpadmin.exchange"</span>, <span class="string">"amqp.haha"</span>, <span class="keyword">null</span>));</span><br><span class="line">    System.out.println(<span class="string">"创建完成！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>删除组件，只需要调用<code>AmqpAdmin</code>的<code>deleteXXX</code>方法即可</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot高级应用</tag>
        <tag>SpringBoot与消息</tag>
      </tags>
  </entry>
  <entry>
    <title>十二、SpringBoot与任务</title>
    <url>/2020/09/07/%E5%8D%81%E4%BA%8C%E3%80%81SpringBoot%E4%B8%8E%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Spring-Boot与任务"><a href="#Spring-Boot与任务" class="headerlink" title="Spring Boot与任务"></a>Spring Boot与任务</h1><p>使用Spring Initializer创建一个Spring Boot项目，只添加web依赖</p>
<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>异步任务的使用非常简单，在说如何使用异步任务之前，先来演示同步的任务。</p>
<h3 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h3><p><code>AsyncService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"处理数据中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AsyncController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncService asyncService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        asyncService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时访问<a href="http://localhost:8080/hello，会等待3秒后才返回success" target="_blank" rel="noopener">http://localhost:8080/hello，会等待3秒后才返回success</a></p>
<h3 id="异步任务-1"><a href="#异步任务-1" class="headerlink" title="异步任务"></a>异步任务</h3><p>我们可以自己开启一个线程来执行这个耗时的操作，主线程则直接返回。自己编写是在有点麻烦，SpringBoot中异步任务的使用十分简单</p>
<ol>
<li><p>使用@EnableAsync开启Spring异步任务注解支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot04TaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot04TaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在对应的service中的耗时方法上使用@Async注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"处理数据中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时重新启动项目，访问<a href="http://localhost:8080/hello，此时会立刻返回success，3秒之后控制台打印：数据处理中…" target="_blank" rel="noopener">http://localhost:8080/hello，此时会立刻返回success，3秒之后控制台打印：数据处理中…</a></p>
</li>
</ol>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>除了异步任务，项目开发中也需要定时去执行一些任务，例如每天零点生成日志报告。Spring也提供了对定时任务的支持：</p>
<ul>
<li><code>TaskExecutor</code></li>
<li><code>TaskScheduler</code></li>
</ul>
<p><strong>两个注解</strong>：</p>
<ul>
<li><p>@EnableScheduling：开启定时任务</p>
</li>
<li><p>@Scheduled：作用在需要定时执行的方法上</p>
<p>这个注解中最终要的是<code>cron</code>属性，用于指定一个cron表达式，然后</p>
</li>
</ul>
<h3 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h3><p>一个cron表达式示例：<code>0 * * * * MON-FRI</code>，注意这里有六个字段（使用空格分隔），分别表示：</p>
<ul>
<li>second（秒）</li>
<li>minute（分）</li>
<li>hour（时）</li>
<li>day of month（日）</li>
<li>month（月）</li>
<li>day of week（星期几）</li>
</ul>
<p><code>0 * * * * MON-FRI</code>则表示星期一到星期五的每一个整分钟（0秒时）执行</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td><code>,</code> <code>-</code> <code>*</code> <code>/</code></td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td><code>,</code> <code>-</code> <code>*</code> <code>/</code></td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td><code>,</code> <code>-</code> <code>*</code> <code>/</code></td>
</tr>
<tr>
<td>日期</td>
<td>1-31</td>
<td><code>,</code> <code>-</code> <code>*</code> <code>?</code> <code>/</code> <code>L</code> <code>W</code>  <code>C</code></td>
</tr>
<tr>
<td>月份</td>
<td>1-12</td>
<td><code>,</code> <code>-</code> <code>*</code> <code>/</code></td>
</tr>
<tr>
<td>星期</td>
<td>0-7或者SUN-SAT，0和7都可以代表SUN</td>
<td><code>,</code> <code>-</code> <code>*</code> <code>?</code> <code>/</code> <code>L</code>  <code>#</code> <code>C</code></td>
</tr>
</tbody></table>
<p><strong>特殊字符含义</strong></p>
<ul>
<li><code>*</code>：表示匹配该域的任意值，假如在Minutes域使用<code>*</code>, 即表示每分钟都会触发事件</li>
<li><code>?</code>：只能用在day of month（日）和day of week（星期几）两个域。它也匹配域的任意值，但是和<code>*</code>有所不同。例如：如果想要在每个月的15日的0时0分0秒触发任务（无论是星期几），可以写为<code>0 0 0 15 * ?</code>，注意最后的<code>?</code>不能使用<code>*</code>，因为每个月的15号是周几是固定的，并非任意的。</li>
<li><code>-</code>：表示范围，例如在minute上使用<code>5-20</code>，表示5分到20分之间的每一分钟都会触发</li>
<li><code>/</code>：<code>/</code>之前的值表示触发的起始值，<code>/</code>之后的值表示触发的间隔。例如：在minute上使用<code>5/20</code>表示每个小时5分开始触发然后每隔20分钟触发一次（在当前小时内），也就是说5、25、45分的时候都会触发</li>
<li><code>,</code>：表示枚举，例如：在minute上使用<code>5,6,7</code>表示5、6、7分钟的时候都会触发</li>
<li><code>L</code>：表示最后，只能出现在day of week和day of month中，例如在day of week中使用<code>5L</code>表示最后一个星期四</li>
<li><code>W</code>：表示有效工作日（周一到周五），只能出现在day of month中，系统将在离指定日期的最近的有效工作日触发事件。例如<code>5W</code>表示距离5日的工作日，例如5日是周六，那么离5日最近的就是4日，所以会在4日触发（注意W不会跨月寻找）</li>
<li><code>LW</code>：这两个字符可以连用，表示某个月的最后一个工作日，即最后一个星期五</li>
<li><code>#</code>：用于确定每个月的第几个星期几，只能出现在day of week，例如<code>4#2</code>表示某个月的第二个星期四</li>
<li><code>C</code>：用于和Java的<code>Calendar</code>进行计算</li>
</ul>
<p><strong>使用示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * second（秒）, minute（分）, hour（时）, day of month（日）, month（月）, day of week（星期几）</span></span><br><span class="line"><span class="comment">     * 例如：0 * * * * SUN-FRI,表示周日到周五每分钟0秒时执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Scheduled(cron = "0,1,2,3,4 * * * * SUN-FRI")</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/4 * * * * 1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"定时执行的任务..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h2><p>发送邮件是一个非常常用的功能，Spring Boot也为此提供了相对应的场景启动器：<code>spring-boot-starter-mail</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮件场景启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MailSenderAutoConfiguration"><a href="#MailSenderAutoConfiguration" class="headerlink" title="MailSenderAutoConfiguration"></a>MailSenderAutoConfiguration</h3><p>下面将来分析邮件发送的相关自动配置：</p>
<p><code>MailSenderAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; MimeMessage<span class="class">.<span class="keyword">class</span>, <span class="title">MimeType</span>.<span class="title">class</span>, <span class="title">MailSender</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">//如果容器中存在了<span class="title">MailSender</span>类型的组件，这个配置类就不会生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">MailSender</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Conditional</span>(<span class="title">MailSenderCondition</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">//让<span class="title">MailProperties</span>生效</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">MailProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">//导入<span class="title">MailSenderJndiConfiguration</span>和<span class="title">MailSenderPropertiesConfiguration</span>这两个配置类</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; MailSenderJndiConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">MailSenderPropertiesConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MailSenderAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Condition to trigger the creation of a &#123;<span class="doctag">@link</span> MailSender&#125;. This kicks in if either</span></span><br><span class="line"><span class="comment">	 * the host or jndi name property is set.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSenderCondition</span> <span class="keyword">extends</span> <span class="title">AnyNestedCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		MailSenderCondition() &#123;</span><br><span class="line">			<span class="keyword">super</span>(ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mail"</span>, name = <span class="string">"host"</span>)</span><br><span class="line">		<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HostProperty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mail"</span>, name = <span class="string">"jndi-name"</span>)</span><br><span class="line">		<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiNameProperty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MailSenderJndiConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Session<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.mail"</span>, name = <span class="string">"jndi-name"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnJndi</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSenderJndiConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> MailProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于之前已经让MailProperties生效了，所以这里会使用容器中注入的MailProperties</span></span><br><span class="line">	MailSenderJndiConfiguration(MailProperties properties) &#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入一个JavaMailSenderImpl类型（实现了JavaMailSendder接口，而JavaMailSender接口继承了MailSender）</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function">JavaMailSenderImpl <span class="title">mailSender</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">		JavaMailSenderImpl sender = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">		sender.setDefaultEncoding(<span class="keyword">this</span>.properties.getDefaultEncoding().name());</span><br><span class="line">		sender.setSession(session);</span><br><span class="line">		<span class="keyword">return</span> sender;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入一个javax.mail.Session类型的组件</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function">Session <span class="title">session</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String jndiName = <span class="keyword">this</span>.properties.getJndiName();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> JndiLocatorDelegate.createDefaultResourceRefLocator().lookup(jndiName, Session<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (NamingException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(String.format(<span class="string">"Unable to find Session in JNDI location %s"</span>, jndiName), ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MailSenderPropertiesConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mail"</span>, name = <span class="string">"host"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSenderPropertiesConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用MailProperties配置的类容来返回一个JavaMailSenderImpl类型的组件</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(JavaMailSender<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">JavaMailSenderImpl</span> <span class="title">mailSender</span>(<span class="title">MailProperties</span> <span class="title">properties</span>) </span>&#123;</span><br><span class="line">		JavaMailSenderImpl sender = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">		applyProperties(properties, sender);</span><br><span class="line">		<span class="keyword">return</span> sender;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyProperties</span><span class="params">(MailProperties properties, JavaMailSenderImpl sender)</span> </span>&#123;</span><br><span class="line">		sender.setHost(properties.getHost());</span><br><span class="line">		<span class="keyword">if</span> (properties.getPort() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sender.setPort(properties.getPort());</span><br><span class="line">		&#125;</span><br><span class="line">		sender.setUsername(properties.getUsername());</span><br><span class="line">		sender.setPassword(properties.getPassword());</span><br><span class="line">		sender.setProtocol(properties.getProtocol());</span><br><span class="line">		<span class="keyword">if</span> (properties.getDefaultEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			sender.setDefaultEncoding(properties.getDefaultEncoding().name());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!properties.getProperties().isEmpty()) &#123;</span><br><span class="line">			sender.setJavaMailProperties(asProperties(properties.getProperties()));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Properties <span class="title">asProperties</span><span class="params">(Map&lt;String, String&gt; source)</span> </span>&#123;</span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		properties.putAll(source);</span><br><span class="line">		<span class="keyword">return</span> properties;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相关的配置及其功能可以查询<code>MailProperties</code></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>发送简单邮件</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxx@qq.com</span></span><br><span class="line">    <span class="comment">#为了安全使用的是授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxxxx</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br></pre></td></tr></table></figure>

<p>授权码可以通过如图所示的方式获得</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201019221341835.png" alt="image-20201019221341835"></p>
<p>编写测试类进行测试：</p>
<p><strong>发送简单邮件</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot04TaskApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage simpleMailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">//邮件设置</span></span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        simpleMailMessage.setSubject(<span class="string">"这是邮件标题"</span>);</span><br><span class="line">        <span class="comment">//设置文本内容</span></span><br><span class="line">        simpleMailMessage.setText(<span class="string">"这是邮件的文本内容"</span>);</span><br><span class="line">        <span class="comment">//设置邮件要发送的地址</span></span><br><span class="line">        simpleMailMessage.setTo(<span class="string">"def@qq.com"</span>);</span><br><span class="line">        <span class="comment">//设置发件人</span></span><br><span class="line">        simpleMailMessage.setFrom(<span class="string">"abc@qq.com"</span>);</span><br><span class="line">        mailSender.send(simpleMailMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>发送复杂邮件</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个复杂的消息邮件</span></span><br><span class="line">    MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">    <span class="comment">//邮件设置</span></span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//设置标题</span></span><br><span class="line">    helper.setSubject(<span class="string">"这是邮件标题"</span>);</span><br><span class="line">    <span class="comment">//设置文本内容</span></span><br><span class="line">    helper.setText(<span class="string">"&lt;font color=\"red\"&gt;这是邮件文本内容&lt;/font&gt;"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//设置收件人</span></span><br><span class="line">    helper.setTo(<span class="string">"3144528924@qq.com"</span>);</span><br><span class="line">    <span class="comment">//设置发件人</span></span><br><span class="line">    helper.setFrom(<span class="string">"2840088759@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传附件</span></span><br><span class="line">    helper.addAttachment(<span class="string">"1.jpg"</span>, <span class="keyword">new</span> File(<span class="string">"D:\\picture\\a.jpg"</span>));</span><br><span class="line">    helper.addAttachment(<span class="string">"2.jpg"</span>, <span class="keyword">new</span> File(<span class="string">"D:\\picture\\b.jpg"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送邮件</span></span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot与任务</tag>
      </tags>
  </entry>
  <entry>
    <title>十三、SpringBoot与安全</title>
    <url>/2020/09/07/%E5%8D%81%E4%B8%89%E3%80%81SpringBoot%E4%B8%8E%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h1 id="Spring-Boot与安全"><a href="#Spring-Boot与安全" class="headerlink" title="Spring Boot与安全"></a>Spring Boot与安全</h1><ul>
<li>应用程序最主要的两个区域就是“认证”和“授权”（或者访问控制）。这两个区域也是Spring Security的两个目标</li>
<li>认证（Authentication），是建立一个他声明的主体的过程（一个<strong>主体</strong>一般指用户、设备或者一些可以在你的应用程序中行动的其他系统）</li>
<li>授权（Authorization）指确定一个主体是否允许在你的应用程序执行一个动作的过程。为了抵达需要授权的店，主体的身份已经有认证的过程建立。</li>
<li>这个概念是通用的，并非Spring Security独有的</li>
</ul>
<p>&emsp;&emsp;简单来说，认证（Authentication）就是向系统证明你是谁的过程；而授权（Authorization）就是你能干什么</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><strong>1、引入Spring Security模块</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入Spring Security模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、编写Spring Security的配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由于这个注解中已经包含了@Configuration，所以不需要使用@Configuration来将这个类标注为配置类</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、定制授权的规则</strong></p>
<p>在配置类中编写如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//定制请求的授权规则</span></span><br><span class="line">    <span class="comment">//主页所有角色都能够访问</span></span><br><span class="line">    http.authorizeRequests().antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">        <span class="comment">//VIP1才能够访问level1下的所有内容</span></span><br><span class="line">        .antMatchers(<span class="string">"/level1/**"</span>).hasRole(<span class="string">"VIP1"</span>)</span><br><span class="line">        <span class="comment">//VIP2才能够访问level2下的所有内容</span></span><br><span class="line">        .antMatchers(<span class="string">"/level2/**"</span>).hasRole(<span class="string">"VIP2"</span>)</span><br><span class="line">        <span class="comment">//VIP3才能够访问level3下的所有内容</span></span><br><span class="line">        .antMatchers(<span class="string">"/level3/**"</span>).hasRole(<span class="string">"VIP3"</span>);</span><br><span class="line">    <span class="comment">//开启自动配置的登录功能。如果没有权限，就会来到登录页面</span></span><br><span class="line">    http.formLogin();</span><br><span class="line">    <span class="comment">//1、/login请求会来到登陆页面</span></span><br><span class="line">    <span class="comment">//2、重定向到/login?error表示登录失败</span></span><br><span class="line">    <span class="comment">//3、更多详细规则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行这个配置之后，<code>/</code>的请求所有人都能够访问，访问每个<code>level</code>等级则需要对应的VIP等级的角色才能够访问！</p>
<p>没有登录时访问其他页面会来到登录页面进行访问，登录失败则会重定向到<code>/login?error</code>，还可以定制更多的内容，详细可以定制的内容在API中都有说明</p>
<p><strong>4、定义认证规则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//定义三个用户zhangsan lisi wangwu</span></span><br><span class="line">    BCryptPasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">            <span class="comment">//在Spring 5之后密码的存储策略发生了改变，需要加密后存储，所以需要指定密码的加密器</span></span><br><span class="line">            <span class="comment">//推荐使用的是BCryptPasswordEncoder</span></span><br><span class="line">            .passwordEncoder(passwordEncoder)</span><br><span class="line">            .withUser(<span class="string">"zhangsan"</span>).password(passwordEncoder.encode(<span class="string">"123456"</span>)).roles(<span class="string">"VIP1"</span>,<span class="string">"VIP2"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">"lisi"</span>).password(passwordEncoder.encode(<span class="string">"123456"</span>)).roles(<span class="string">"VIP2"</span>,<span class="string">"VIP3"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">"wangwu"</span>).password(passwordEncoder.encode(<span class="string">"123456"</span>)).roles(<span class="string">"VIP1"</span>,<span class="string">"VIP3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>inMemoryAuthentication</code>表示在内存中获取密码进行对比，如果想要从数据库中获取可以使用<code>jdbcAuthentication</code>来获取密码</p>
<p><strong>注意</strong>：Spring 5之后密码的存储方式发生了改变，为了保证密码的安全性，只会对比加密后的密码。用户在注册时创建的用户民和密码，密码会被使用某种加密器加密后存储，所以对比密码时也应使用相同的加密器进行加密然后对比密码是否相同。Spring推荐使用BCrypt这种加密器进行加密</p>
<blockquote>
<p>密码的加密一般都使用不可逆加密，即加密之后无法复原；只有重新输入相同的密码与之对比才能够知道原有的密码是什么。也就是说只有创建密码的人才知道密码是什么，充分体现了安全性！</p>
</blockquote>
<p><strong>5、注销功能的实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问/logout会注销用户,删除session中的用户信息</span></span><br><span class="line"><span class="comment">//logoutSuccessUrl指定注销后访问的地址，默认会访问/login?logout</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br></pre></td></tr></table></figure>

<p>注销的表单如下：</p>
<p>此处必须使用post请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注销"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>6、根据用户的登录状态以及角色类型显示页面</strong></p>
<p>thymeleaf可以结合Spring Security使用，首先，需要引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Security和Thymeleaf结合使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入命名空间并使用对应的标签来使用Spring Securtity中的内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">	  <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/extras/spring-security"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>欢迎光临武林秘籍管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- isAnonymous()返回是否匿名，也就是是不是还没有登录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"isAnonymous()"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>游客您好，如果想查看武林秘籍 <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login&#125;"</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- isAuthenticated()返回是否已经认证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sec:authentication="name"得到认证的名称,authorities得到认证的角色 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,您好,您的角色有:<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注销"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hasRole()返回当前认证用户是否包含某个角色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('VIP1')"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>普通武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/1&#125;"</span>&gt;</span>罗汉拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/2&#125;"</span>&gt;</span>武当长拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level1/3&#125;"</span>&gt;</span>全真剑法<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('VIP2')"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>高级武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/1&#125;"</span>&gt;</span>太极拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/2&#125;"</span>&gt;</span>七伤拳<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level2/3&#125;"</span>&gt;</span>梯云纵<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">"hasRole('VIP3')"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>绝世武功秘籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/1&#125;"</span>&gt;</span>葵花宝典<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/2&#125;"</span>&gt;</span>龟派气功<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/level3/3&#125;"</span>&gt;</span>独孤九剑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>7、记住我功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">...</span><br><span class="line">      <span class="comment">//开启记住我的功能 默认cookie存在14天</span></span><br><span class="line">      http.rememberMe();</span><br><span class="line">      <span class="comment">//登录成功以后将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过登录检查就可以免登录</span></span><br><span class="line">      <span class="comment">//点击注销会删除这个cookie</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这个记住我的功能是通过cookie来实现的，这个cookie默认会存在14天。登录成功以后会将这个cookie发送给浏览器保存，以后就可以免登录了。注销会删除这个cookie</p>
<p><strong>8、定制登录页面</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制登录页面</span></span><br><span class="line">http.formLogin()</span><br><span class="line">    <span class="comment">//指定用户名和密码对应的参数</span></span><br><span class="line">    .usernameParameter(<span class="string">"username"</span>)</span><br><span class="line">    .passwordParameter(<span class="string">"password"</span>)</span><br><span class="line">    <span class="comment">//指定登录页面</span></span><br><span class="line">    .loginPage(<span class="string">"/userlogin"</span>);</span><br></pre></td></tr></table></figure>

<p>注意，指定了登录页面之后，登录相关的路径也发生了变化</p>
<p>原来：</p>
<ul>
<li>/login GET ：访问登录页</li>
<li>/login POST ：处理登录认证</li>
<li>/login?error GET：处理登录错误</li>
<li>/login?logout GET：处理登出</li>
</ul>
<p>修改了之后，例如使用<code>loginPage(“/userlogin”)</code>，则需要将默认的<code>/login</code>全部替换为<code>/userlogin</code></p>
<p>当然还可以定制remember me的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.rememberMe().rememberMeParameter(<span class="string">"remember"</span>);</span><br></pre></td></tr></table></figure>

<p>这样设置之后，只需要在页面上添加对应name的input表单就可以实现记住我的功能！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember"</span>/&gt;</span>记住我<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot与安全</tag>
      </tags>
  </entry>
  <entry>
    <title>十五、SpringBoot与开发热部署</title>
    <url>/2020/09/07/%E5%8D%81%E4%BA%94%E3%80%81SpringBoot%E4%B8%8E%E5%BC%80%E5%8F%91%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="Spring-Boot与开发热部署"><a href="#Spring-Boot与开发热部署" class="headerlink" title="Spring Boot与开发热部署"></a>Spring Boot与开发热部署</h1><p>在开发中修改一个Java文件后需要重新启动应用才能够看到效果，这会花费大量的时间。所以需要在不重启应用的情况下，程序可以自动部署（热部署）</p>
<p><strong>1、模板引擎</strong></p>
<ul>
<li>在Spring Boot中禁用模板引擎的cache，当模板页面改变时可以使用ctrl+F9可以重新编译当前页面并生效</li>
</ul>
<p><strong>2、Spring Loaded</strong></p>
<p>Spring官方提供的热部署程序，实现修改类文件的热部署</p>
<p><strong>3、JRebel</strong></p>
<p>一个收费的热部署软件，安装插件即可使用</p>
<p><strong>4、Spring Boot Devtools（推荐）</strong></p>
<p>要使用devtools需要导入对应的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入之后，修改了相关内容后使用ctrl+F9</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot与开发热部署</tag>
      </tags>
  </entry>
  <entry>
    <title>十六、SpringBoot与监控管理</title>
    <url>/2020/09/07/%E5%8D%81%E5%85%AD%E3%80%81SpringBoot%E4%B8%8E%E7%9B%91%E6%8E%A7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Spring-Boot与监控管理"><a href="#Spring-Boot与监控管理" class="headerlink" title="Spring Boot与监控管理"></a>Spring Boot与监控管理</h1><p>官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html</a></p>
<p>通过引入<code>spring-boot-starter-actuator</code>，可以使用Spring Boot为我们提供的准生产环境下的应用监控和管理功能。我们可以通过HTTP、JMX、SSH协议来进行操作，自动得到审计、健康及指标信息等。</p>
<p><strong>步骤</strong>：</p>
<p>1、引入<code>spring-boot-starter-actuator</code></p>
<p>2、通过http方式访问监控端点</p>
<p>3、可进行shutdown（POST提交，此端点默认关闭）</p>
<p><strong>使用示例</strong></p>
<p>使用Spring Initializr创建一个Spring Boot项目，添加web、devtools、actuator依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写<code>application.properties</code>配置文件</p>
<p>如果Spring Initailzr使用的阿里云的地址（<a href="https://start.aliyun.com），下面的配置文件则是自动创建的" target="_blank" rel="noopener">https://start.aliyun.com），下面的配置文件则是自动创建的</a></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-boot-08-actuator</span></span><br><span class="line"><span class="comment"># Actuator Web 访问端口</span></span><br><span class="line"><span class="meta">management.server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">management.endpoints.jmx.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"># spring 静态资源扫描路径</span></span><br><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/static/</span></span><br></pre></td></tr></table></figure>

<p>启动Spring Boot项目，访问<a href="http://localhost:8081/actuator" target="_blank" rel="noopener">http://localhost:8081/actuator</a></p>
<h2 id="端点（Endpoints）"><a href="#端点（Endpoints）" class="headerlink" title="端点（Endpoints）"></a>端点（Endpoints）</h2><p>Actuator endpoints（执行器端点）可用于监控应用以及与应用进行交互，Spring Boot包含很多内置的端点，你也可以添加自己的。例如，health端点提供了应用的基本健康信息。</p>
<p>每个端点都可以启用或者禁用，这控制着端点是否被创建，以及它的bean是否存在于应用程序上下文中。要远程访问端点，还必须通过JMX或HTTP进行暴漏，大部分应用选择HTTP，端点的ID映射到一个<code>/actuator</code>前缀的URL。例如，health端点默认映射到<code>/actuator/health</code>。</p>
<p>下面的端点都是可用的：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
<th>默认启用</th>
</tr>
</thead>
<tbody><tr>
<td>auditevents</td>
<td>显示当前应用程序的审计事件信息</td>
<td>Yes</td>
</tr>
<tr>
<td>beans</td>
<td>显示一个应用中<code>所有Spring Beans</code>的完整列表</td>
<td>Yes</td>
</tr>
<tr>
<td>conditions</td>
<td>显示<code>配置类和自动配置类</code>(configuration and auto-configuration</td>
<td>classes)的状态及它们被应用或未被应用的原因</td>
</tr>
<tr>
<td>configprops</td>
<td>显示一个所有<code>@ConfigurationProperties</code>的集合列表</td>
<td>Yes</td>
</tr>
<tr>
<td>env</td>
<td>显示来自Spring的 <code>ConfigurableEnvironment</code>的属性</td>
<td>Yes</td>
</tr>
<tr>
<td>flyway</td>
<td>显示数据库迁移路径，如果有的话</td>
<td>Yes</td>
</tr>
<tr>
<td>health</td>
<td>显示应用的<code>健康信息</code>（当使用一个未认证连接访问时显示一个简单</td>
<td>的’status’，使用认证连接访问则显示全部信息详情）</td>
</tr>
<tr>
<td>info</td>
<td>显示任意的<code>应用信息</code></td>
<td>Yes</td>
</tr>
<tr>
<td>liquibase</td>
<td>展示任何Liquibase数据库迁移路径，如果有的话</td>
<td>Yes</td>
</tr>
<tr>
<td>metrics</td>
<td>展示当前应用的<code>metrics</code>信息</td>
<td>Yes</td>
</tr>
<tr>
<td>mappings</td>
<td>显示一个所有<code>@RequestMapping</code>路径的集合列表</td>
<td>Yes</td>
</tr>
<tr>
<td>scheduledtasks</td>
<td>显示应用程序中的<code>计划任务</code></td>
<td>Yes</td>
</tr>
<tr>
<td>sessions</td>
<td>允许从Spring会话支持的会话存储中检索和删除(retrieval and deletion)</td>
<td>用户会话。使用Spring Session对反应性Web应用程序的支持时不可用。</td>
</tr>
<tr>
<td>shutdown</td>
<td>允许应用以优雅的方式关闭（默认情况下不启用）</td>
<td>No</td>
</tr>
<tr>
<td>threaddump</td>
<td>执行一个线程dump</td>
<td>Yes</td>
</tr>
</tbody></table>
<p>如果使用web应用（Spring MVC，Spring WebFlux或者Jersey），你还可以使用以下端点：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
<th>默认启用</th>
</tr>
</thead>
<tbody><tr>
<td>heapdump</td>
<td>返回一个GZip压缩的<code>hprof</code>堆dump文件</td>
<td>Yes</td>
</tr>
<tr>
<td>jolokia</td>
<td>通过HTTP暴露<code>JMX beans</code>（当Jolokia在类路径上时，WebFlux不可用）</td>
<td>Yes</td>
</tr>
<tr>
<td>logfile</td>
<td>返回<code>日志文件内容</code>（如果设置了logging.file或logging.path属性的话），支持使用HTTP <strong>Range</strong>头接收日志文件内容的部分信息</td>
<td>Yes</td>
</tr>
<tr>
<td>prometheus</td>
<td>以可以被Prometheus服务器抓取的格式显示<code>metrics</code>信息</td>
<td>Yes</td>
</tr>
</tbody></table>
<h3 id="启用端点"><a href="#启用端点" class="headerlink" title="启用端点"></a>启用端点</h3><p>默认情况下，除了<strong>shutdown</strong>以外的所有端点均已启用。要配置单个端点的启用：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">management.endpoint.&lt;id&gt;.enabled</span></span><br></pre></td></tr></table></figure>

<p>例如，启用shutdown端点：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>另外可以通过<code>management.endpoints.enabled-by-default</code>来修改全局端口默认配置，以下示例启用info端点并禁用所有其它端点：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">management.endpoint.info.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>禁用端点将从应用程序上下文中完全删除。如果你只是想要更改端点暴露的技术，请使用<code>include</code>和<code>exclude</code>属性</p>
</blockquote>
<h3 id="暴露端点"><a href="#暴露端点" class="headerlink" title="暴露端点"></a>暴露端点</h3><p>由于端点可能包含敏感信息，因此应仔细考虑何时公开（暴露）它们。下表显示了内置端点的默认曝光：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>JMX</th>
<th>Web</th>
</tr>
</thead>
<tbody><tr>
<td>auditevents</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>beans</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>conditions</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>configprops</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>env</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>flyway</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>health</td>
<td>Yes</td>
<td><code>Yes</code></td>
</tr>
<tr>
<td>heapdump</td>
<td>N/A</td>
<td>No</td>
</tr>
<tr>
<td>httptrace</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>info</td>
<td>Yes</td>
<td><code>Yes</code></td>
</tr>
<tr>
<td>jolokia</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>logfile</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>loggers</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>liquibase</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>metrics</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>mappings</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>prometheus</td>
<td>N/A</td>
<td>No</td>
</tr>
<tr>
<td>scheduledtasks</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>sessions</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>shutdown</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>threaddump</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody></table>
<p>要更改公开哪些端点，请使用以下技术特定的<code>include</code>和<code>exclude</code>属性：</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>management.endpoints.jmx.exposure.exclude</td>
<td></td>
</tr>
<tr>
<td>management.endpoints.jmx.exposure.include</td>
<td>*</td>
</tr>
<tr>
<td>management.endpoints.web.exposure.exclude</td>
<td></td>
</tr>
<tr>
<td>management.endpoints.web.exposure.include</td>
<td>info, health</td>
</tr>
</tbody></table>
<p>include属性列出了公开端点的ID，exclude属性列出了不应该公开的端点的ID</p>
<p>exclude属性优于include属性，include和exclude属性都可以使用端点ID列表进行配置。</p>
<blockquote>
<p>注意：</p>
<p>这里的优先级是指同一端点ID，同时出现在include属性表和exclude属性表中，exclude属性优先于include属性，即此端点没有暴露</p>
</blockquote>
<p>例如，要停止通过JMX公开所有端点并仅公开health和info端点，请使用如下属性</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.jmx.exposure.include</span>=<span class="string">health,info</span></span><br></pre></td></tr></table></figure>

<p><code>*</code>可以用来选择所有端点。例如，要通过HTTP公开除了<code>env</code>和<code>beans</code>端点之外的所有内容，请使用以下属性：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.exclude</span>=<span class="string">env,beans</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p><code>*</code>在YAML中有特殊含义，如果需要使用需要加上引号</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span> </span><br><span class="line">  <span class="attr">endpoints:</span> </span><br><span class="line">    <span class="attr">web:</span> </span><br><span class="line">      <span class="attr">exposure:</span> </span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="保护HTTP端点"><a href="#保护HTTP端点" class="headerlink" title="保护HTTP端点"></a>保护HTTP端点</h3><p>你应该像对待其它任何敏感URL一样，小心保护HTTP端点的安全。如果存在Spring Security，则默认情况下使用Spring Security的内容协商策略来保护端点安全。例如，如果你希望为HTTP端点配置自定义安全性，只允许具有特定角色的用户访问它们，Spring Boot提供了一些方便的RequestMatcher对象，可以将它们与Spring Security结合使用。</p>
<p>典型的Spring Security配置可能类似于以下示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActuatorSecurity</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests((requests) -&gt;</span><br><span class="line">                requests.anyRequest().hasRole(<span class="string">"ENDPOINT_ADMIN"</span>));</span><br><span class="line">        http.httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的示例使用<code>EndpointRequest.toAnyEndpoint()</code>将请求与所有端点进行匹配，然后确保所有端点都具有<strong>ENDPOINT_ADMIN</strong>角色。详细信息请参考API文档（<a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/actuator-api/html/" target="_blank" rel="noopener">HTML</a>或者<a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/actuator-api/pdf/spring-boot-actuator-web-api.pdf" target="_blank" rel="noopener">PDF</a>）。</p>
<p>如果你的应用部署在防火墙后，你可能更喜欢所有执行器端点都可以在无需验证的情况下进行访问。你可以通过更改<code>management.endpoints.web.exposure.include</code>属性来完成此操作，如下所示：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure>

<p>此外，如果存在Spring Security，则需要添加自定义安全配置，以允许对端点进行未经身份验证，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActuatorSecurity</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests((requests) -&gt;</span><br><span class="line">            requests.anyRequest().permitAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置端点缓存时间"><a href="#配置端点缓存时间" class="headerlink" title="配置端点缓存时间"></a>配置端点缓存时间</h3><p>对于不带任何参数的读取操作，端点自动缓存对其响应。要配置端点缓存响应的时间，请使用<code>cache.time-live</code>属性。下面的配置将<code>beans</code>端点缓存的生存时间设置为10秒：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoint.beans.cache.time-live</span>=<span class="string">10s</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>在进行认证的HTTP请求时，Principal将被视为端点的输入，因此不会缓存响应</p>
</blockquote>
<h3 id="端点的发现页"><a href="#端点的发现页" class="headerlink" title="端点的发现页"></a>端点的发现页</h3><p>端点的发现页就是各个端点的访问路径，默认情况下发现页可以通过<code>/actuator</code>访问。下面是访问<a href="http://localhost:8080/actuator的结果：" target="_blank" rel="noopener">http://localhost:8080/actuator的结果：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201028194931796.png" alt="image-20201028194931796"></p>
<p>发现也的路径和进出路劲有关，例如通过如下配置设置基础路径：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置基础路径</span></span><br><span class="line"><span class="meta">management.endpoints.web.base-path</span>=<span class="string">/management</span></span><br></pre></td></tr></table></figure>

<p>此时需要访问<code>/management</code>才能够访问到发现页。但是当基础路径设置为<code>/</code>时，需要禁用发现页面以防止与其他映射发生冲突的可能性。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁用发现页</span></span><br><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>



<h3 id="跨域（CORS）支持"><a href="#跨域（CORS）支持" class="headerlink" title="跨域（CORS）支持"></a>跨域（CORS）支持</h3><p>跨域资源共享（Cross-origin resource sharing，CORS）是W3C规范，允许你以灵活的方式指定授权哪种跨域请求。如果你使用Spring MVC或者Spring Flux，则可以配置Actuator的Web端点来支持这些场景。</p>
<p>默认情况下，CORS处于禁用状态，只有在设置了<code>management.endpoints.web.cors.allowed-origins</code>属性后才能启用。以下配置允许来自<code>example.com</code>域的GET和POST调用：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.web.cors.allowed-origins</span>=<span class="string">http://example.com</span></span><br><span class="line"><span class="meta">management.endpoints.web.cors.allowed-method</span>=<span class="string">GET,POST</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>请参考<a href="https://github.com/spring-projects/spring-boot/blob/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java" target="_blank" rel="noopener">CorsEndpointProperties</a>来获取完整的选项列表</p>
</blockquote>
<h3 id="实现自定义端点"><a href="#实现自定义端点" class="headerlink" title="实现自定义端点"></a>实现自定义端点</h3><p>如果在一个Bean中使用@Endpoint注解标注，则其中任何使用@ReadOperation、@WriteOperation或者@DeleteOperation注释的方法都会通过JMX暴露，并且也可以通过HTTP在Web应用程序中暴露。也可以使用Jersey、Spring MVC或Spring WebFlux通过HTTP暴露端点。</p>
<p><strong>使用示例</strong></p>
<p><code>CustomData</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CustomData&#123;"</span> +</span><br><span class="line">                <span class="string">"message='"</span> + message + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", number="</span> + number +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomData</span><span class="params">(String message, Integer number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CustomEndpoint</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint</span>(id = <span class="string">"customEndpoint"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomData <span class="title">getCustomData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomData(<span class="string">"test"</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动项目后访问：<a href="http://localhost:8081/actuator/customEndpoint，结果如下：" target="_blank" rel="noopener">http://localhost:8081/actuator/customEndpoint，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201028220730195.png" alt="image-20201028220730195"></p>
<p>当然，也可以使用@JmxEndpoint或者@WebEndpoint，将端点只暴露在JMX或者HTTP中。</p>
<h3 id="健康信息"><a href="#健康信息" class="headerlink" title="健康信息"></a>健康信息</h3><p>你可以使用健康信息来检查你正在运行的应用的状态。监控软件通常使用它在生产系统出现故障时向某人发出警报。<code>health</code>端点暴露的信息取决于<code>management.endpoint.health.show-details</code>和<code>management.endpoint.health.show-components</code>属性，这两个属性的取值如下：</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>never</code></td>
<td align="left">永远不显示细节</td>
</tr>
<tr>
<td align="left"><code>when-authorized</code></td>
<td align="left">详细信息仅向授权用户显示。授权角色可以使用<code>management.endpoint.health.roles</code>进行配置。</td>
</tr>
<tr>
<td align="left"><code>always</code></td>
<td align="left">详细信息显示给所有用户。</td>
</tr>
</tbody></table>
<p>默认值为<code>never</code>。当一个用户担任了端点的一个或者多个角色，那么它就被视为已授权的用户。如果端点没有配置角色（默认情况），则所有通过认证的用户均被视为已授权。可以使用<code>management.endpoint.health.roles</code>属性配置角色。</p>
<p>健康信息是从<code>HealthContributorRegistry</code>（默认情况下，所有的<code>HealthContributor</code>示例都定义在你的<code>ApplicationContext</code>容器中）的内容中收集的。Spring Boot中包含了许多自动配置的<code>HealthContributor</code>，你也可以自定义<code>HealthContributor</code></p>
<p><code>HealthContributor</code>可以是<code>HealthIndicator</code>或<code>CompositeHealthContributor</code>。<code>HealthIndicator</code>提供实际的健康信息，包括状态；<code>CompositeHealthContributor</code>提供了其他<code>HealthContributor</code>的组合。二者合起来，构成一个树形结构来代表整个系统的健康状况。</p>
<h4 id="自动配置的HealthIndicators"><a href="#自动配置的HealthIndicators" class="headerlink" title="自动配置的HealthIndicators"></a>自动配置的HealthIndicators</h4><p>下面的<code>HealthIndicator</code>会在合适的时候通过Spring Boot自动配置。你通过<code>management.health.key.enabled</code>属性来开启/禁用指定的indicator，<code>key</code>的值、对应的indicator以及描述如下表所示：</p>
<table>
<thead>
<tr>
<th align="left">Key</th>
<th align="left">对应的Indicator</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>cassandra</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraHealthIndicator.java" target="_blank" rel="noopener"><code>CassandraHealthIndicator</code></a></td>
<td align="left">检查Cassandra数据库是否启动</td>
</tr>
<tr>
<td align="left"><code>couchbase</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java" target="_blank" rel="noopener"><code>CouchbaseHealthIndicator</code></a></td>
<td align="left">检查Couchbase集群是否启动</td>
</tr>
<tr>
<td align="left"><code>datasource</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java" target="_blank" rel="noopener"><code>DataSourceHealthIndicator</code></a></td>
<td align="left">检查是否可否可以连接数据源</td>
</tr>
<tr>
<td align="left"><code>diskspace</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/DiskSpaceHealthIndicator.java" target="_blank" rel="noopener"><code>DiskSpaceHealthIndicator</code></a></td>
<td align="left">检查磁盘空间是否不足</td>
</tr>
<tr>
<td align="left"><code>elasticsearch</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestHealthIndicator.java" target="_blank" rel="noopener"><code>ElasticsearchRestHealthIndicator</code></a></td>
<td align="left">检查Elasticsearch集群是否启动</td>
</tr>
<tr>
<td align="left"><code>hazelcast</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/hazelcast/HazelcastHealthIndicator.java" target="_blank" rel="noopener"><code>HazelcastHealthIndicator</code></a></td>
<td align="left">检查Hazelcast服务是否启动</td>
</tr>
<tr>
<td align="left"><code>influxdb</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/influx/InfluxDbHealthIndicator.java" target="_blank" rel="noopener"><code>InfluxDbHealthIndicator</code></a></td>
<td align="left">检查InfluxDB服务是否启动</td>
</tr>
<tr>
<td align="left"><code>jms</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jms/JmsHealthIndicator.java" target="_blank" rel="noopener"><code>JmsHealthIndicator</code></a></td>
<td align="left">检查JMS代理是否启动</td>
</tr>
<tr>
<td align="left"><code>ldap</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/ldap/LdapHealthIndicator.java" target="_blank" rel="noopener"><code>LdapHealthIndicator</code></a></td>
<td align="left">检查LDAP服务是否启动</td>
</tr>
<tr>
<td align="left"><code>mail</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mail/MailHealthIndicator.java" target="_blank" rel="noopener"><code>MailHealthIndicator</code></a></td>
<td align="left">检查Mail服务是否启动</td>
</tr>
<tr>
<td align="left"><code>mongo</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mongo/MongoHealthIndicator.java" target="_blank" rel="noopener"><code>MongoHealthIndicator</code></a></td>
<td align="left">检查Mongo数据库是否启动</td>
</tr>
<tr>
<td align="left"><code>neo4j</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java" target="_blank" rel="noopener"><code>Neo4jHealthIndicator</code></a></td>
<td align="left">检查Neo4j数据库是否启动</td>
</tr>
<tr>
<td align="left"><code>ping</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/PingHealthIndicator.java" target="_blank" rel="noopener"><code>PingHealthIndicator</code></a></td>
<td align="left">总是以<code>UP</code>响应</td>
</tr>
<tr>
<td align="left"><code>rabbit</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/amqp/RabbitHealthIndicator.java" target="_blank" rel="noopener"><code>RabbitHealthIndicator</code></a></td>
<td align="left">检查Rabbit服务是否启动</td>
</tr>
<tr>
<td align="left"><code>redis</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/redis/RedisHealthIndicator.java" target="_blank" rel="noopener"><code>RedisHealthIndicator</code></a></td>
<td align="left">检查Redist服务是否启动</td>
</tr>
<tr>
<td align="left"><code>solr</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/solr/SolrHealthIndicator.java" target="_blank" rel="noopener"><code>SolrHealthIndicator</code></a></td>
<td align="left">检查Solr服务是否启动</td>
</tr>
</tbody></table>
<blockquote>
<p>你可以通过<code>management.health.defaults.enabled</code>属性来禁用它们！</p>
</blockquote>
<p>还有一些可用但是默认情况下不启动的<code>HealthIndicator</code></p>
<table>
<thead>
<tr>
<th align="left">Key</th>
<th align="left">对应的Indicator</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>livenessstate</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/availability/LivenessStateHealthIndicator.java" target="_blank" rel="noopener"><code>LivenessStateHealthIndicator</code></a></td>
<td align="left">暴露<code>Liveness</code>应用的可用性状态</td>
</tr>
<tr>
<td align="left"><code>readinessstate</code></td>
<td align="left"><a href="https://github.com/spring-projects/spring-boot/tree/v2.3.4.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/availability/ReadinessStateHealthIndicator.java" target="_blank" rel="noopener"><code>ReadinessStateHealthIndicator</code></a></td>
<td align="left">暴露<code>Readiness</code>应用的可用性状态</td>
</tr>
</tbody></table>
<h4 id="编写自定义的HealthIndicator"><a href="#编写自定义的HealthIndicator" class="headerlink" title="编写自定义的HealthIndicator"></a>编写自定义的HealthIndicator</h4><p>要提供自定义的健康信息，你需要在容器中注入一个<code>HealthIndicator</code>类型的Spring Bean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HealthIndicator</span> <span class="keyword">extends</span> <span class="title">HealthContributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return an indication of health.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> includeDetails if details should be included or removed</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the health</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 2.2.0</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Health <span class="title">getHealth</span><span class="params">(<span class="keyword">boolean</span> includeDetails)</span> </span>&#123;</span><br><span class="line">		Health health = health();</span><br><span class="line">		<span class="keyword">return</span> includeDetails ? health : health.withoutDetails();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return an indication of health.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the health</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">Health <span class="title">health</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.Health;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> errorCode = check(); <span class="comment">// perform some specific health check</span></span><br><span class="line">        <span class="keyword">if</span> (errorCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//设置状态和Detail</span></span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetail(<span class="string">"Error Code"</span>, errorCode).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot与监控管理</tag>
      </tags>
  </entry>
  <entry>
    <title>十四、SpringBoot与分布式</title>
    <url>/2020/09/07/%E5%8D%81%E5%9B%9B%E3%80%81SpringBoot%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Spring-Boot与分布式"><a href="#Spring-Boot与分布式" class="headerlink" title="Spring Boot与分布式"></a>Spring Boot与分布式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;在分布式系统中，国内常用zookeeper+dubbo组合，而Spring Boot推荐使用全栈的Spring，Spring Boot+Spring Cloud</p>
<p>&emsp;&emsp;在讲解分布式之前，先来介绍几个概念：</p>
<p><strong>单一应用架构</strong>：</p>
<p>&emsp;&emsp;当网站流量很小时，只需要一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的<strong>数据访问框架（ORM）</strong>是关键。</p>
<p><strong>垂直应用架构</strong>：</p>
<p>&emsp;&emsp;当访问量逐渐增大，单一应用增加机器带来的加速越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的<strong>Web框架（MVC）</strong>是关键。</p>
<p><strong>分布式服务架构</strong>：</p>
<p>&emsp;&emsp;当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速地响应多变的市场需求。此时，用于提高业务复用及整合的<strong>分布式服务框架（RPC）</strong>是关键。</p>
<p><strong>流动计算架构</strong>：</p>
<p>&emsp;&emsp;当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需要增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的<strong>资源调度和治理中心（SOA）</strong>是关键。</p>
<h2 id="Zookeeper和Dubbo"><a href="#Zookeeper和Dubbo" class="headerlink" title="Zookeeper和Dubbo"></a>Zookeeper和Dubbo</h2><p><strong>Zookeeper</strong></p>
<p>&emsp;&emsp;Zookeeper是一个分布式的，开放源代码的分布式应用程序协调服务。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<p><strong>Dubbo</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201021160326999.png" alt="image-20201021160326999"></p>
<p>&emsp;&emsp;Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）</p>
<ul>
<li><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务</li>
<li><strong>服务消费者（Consumer）</strong>：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li><strong>注册中心（Registry）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li>
<li><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li>
</ul>
<h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><p>这里介绍下载压缩包，然后在阿里云中启动zookeeper的方式</p>
<p>1、在官网下载对应的压缩包</p>
<p>官网地址：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></p>
<p>2、使用xshell连接阿里云，使用xftp上传下载的压缩包</p>
<p>3、解压压缩包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure>

<p>4、解压后进入<code>conf</code>目录，创建<code>zoo.cfg</code>配置文件（或者复制<code>zoo_sample.cfg</code>，给出基本的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">dataDir=/var/lib/zookeeper</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure>

<p>5、确保防火墙和阿里云安全组都开放了2181端口</p>
<p>开启端口是为了能够从外网访问服务器的zookeeper</p>
<p>防火墙开启2181端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启2181端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2181/tcp --permanent</span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>

<p>阿里云安全组开启2181端口</p>
<p>6、启动zookeeper</p>
<p>进入到bin目录，运行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure>

<p>7、测试zookeeper是否连接成功（使用其他zookeeper连接工具也可以）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./zkCli.sh</span><br></pre></td></tr></table></figure>

<p>8、关闭zookeeper</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure>



<h3 id="dubbo-admin安装测试"><a href="#dubbo-admin安装测试" class="headerlink" title="dubbo-admin安装测试"></a>dubbo-admin安装测试</h3><p>dubbo本身不是一个服务软件，它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费，提供服务。</p>
<p>官方Demo：<a href="https://github.com/apache/dubbo-spring-boot-project/tree/master/dubbo-spring-boot-samples/registry-samples/zookeeper-samples" target="_blank" rel="noopener">https://github.com/apache/dubbo-spring-boot-project/tree/master/dubbo-spring-boot-samples/registry-samples/zookeeper-samples</a></p>
<p>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序duubo-admin，不过这个监控即使不安装也不影响使用。</p>
<p>1、下载dubbo-admin</p>
<p>地址：<a href="https://github.com/apache/dubbo-admin" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin</a></p>
<h3 id="Spring-Boot、Dubbo、Zookeeper整合"><a href="#Spring-Boot、Dubbo、Zookeeper整合" class="headerlink" title="Spring Boot、Dubbo、Zookeeper整合"></a>Spring Boot、Dubbo、Zookeeper整合</h3><p>由于SpringBoot、Dubbo、Zookeeper是在不断更新的，具体应该如何整合可以在Github上查看对应的demo！</p>
<p>创建一个空项目，使用Spring Initializr添加两个module，分别叫<code>provider-ticket</code>和<code>consumer-user</code></p>
<h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>服务提供者需要将服务注册到服务注册中心（zookeeper中)</p>
<p>1、首先在<code>provider-ticket</code>中添加dubbo和springboot整合的starter以及zookeeper并排除冲突的日志</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo Spring Boot Starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--zookeeper dependencies--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-dependencies-zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、编写配置</p>
<p><code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-ticket</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="comment">#要扫描的包</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.zxw.ticket.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20880</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment">#注册中心的地址</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://47.114.180.118:2181</span></span><br><span class="line">    <span class="comment">#超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br><span class="line"><span class="comment">#修改端口号，防止端口冲突</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>由于使用了阿里云，所以这里的timeout十分重要（默认的时间比较短，很容易超时）</p>
<p>3、编写<code>TicketService</code>接口及其实现类<code>TicketServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务注册与发现</span></span><br><span class="line"><span class="meta">@DubboService</span><span class="comment">//可以被扫描到，项目以启动就会注册到注册中心</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//注入IoC容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"《罗密欧与朱丽叶》"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、启动SpringBoot项目</p>
<h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><p><code>consumer-provider</code>是消费者，消费者会在启动时向服务注册中心订阅自己所需要的服务，当服务发生改变的时候服务注册中心会提醒消费者（通知），在需要的时候会同步调用服务注册中心中可用的服务（可能会有多个可用服务，会根据先后顺序找到一个可用的服务）</p>
<p>1、添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dubbo Spring Boot Starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--zookeeper dependencies--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-dependencies-zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、编写<code>TicketService</code></p>
<p>在这里也提供<code>TicketService</code>接口（注意全类名必须完全一致，这是订阅服务的根据）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、编写配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-user</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment">#注册中心的地址</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://47.114.180.118:2181</span></span><br><span class="line">    <span class="comment">#超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>4、编写<code>UserService</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用@DubboReference注解从注册中心中根据全类名找到对应的服务</span></span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在业务方法中调用服务的方法</span></span><br><span class="line">        String ticket = ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">"买到了"</span> + ticket + <span class="string">"的票！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、编写测试类进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerUserApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201027220602802.png" alt="image-20201027220602802"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot与分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>四、SpringBoot与Web开发</title>
    <url>/2020/09/07/%E5%9B%9B%E3%80%81SpringBoot%E4%B8%8EWeb%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Spring-Boot与Web开发"><a href="#Spring-Boot与Web开发" class="headerlink" title="Spring Boot与Web开发"></a>Spring Boot与Web开发</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用Spring Boot的步骤：</p>
<ol>
<li><strong>创建Spring Boot应用，选择需要的场景</strong></li>
<li><strong>Spring Boot已经默认将这些场景配置好了，只需要在配置文件中指定少量的配置就可以运行起来</strong></li>
<li><strong>编写业务逻辑代码</strong></li>
</ol>
<p>要真正能够用好Spring Boot就一定要理解<strong>自动配置的原理</strong>：</p>
<p>XXXAutoConfiguration是Spring为各个场景提供的自动配置类，而这些自动配置类一般都会关联一个XXXProperties类，这个XXXProperties使用@ConfigurationProperties从配置文件中获取指定前缀的属性并将其绑定到类中所对应的属性中来</p>
<h2 id="Spring-Boot对静态资源的映射规则"><a href="#Spring-Boot对静态资源的映射规则" class="headerlink" title="Spring Boot对静态资源的映射规则"></a>Spring Boot对静态资源的映射规则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可以设置和静态资源有关的参数，例如缓存时间</span></span><br></pre></td></tr></table></figure>



<p><strong>1、所有<code>/webjars/</code>请求都去<code>classpath:/META-INF/resources/webjars</code>下找资源</strong></p>
<p>webjars：以jar包的方式引入静态资源</p>
<p>有一个webjars的网站：<a href="https://www.webjars.org/，在这个网站中可以将例如jQuery以Maven依赖的形式添加到项目中" target="_blank" rel="noopener">https://www.webjars.org/，在这个网站中可以将例如jQuery以Maven依赖的形式添加到项目中</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jQuery的webjar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果所示，导入了Maven依赖之后就可以在<code>classpath:/META-INF/resources/webjars</code>目录下找到该资源：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200915221503023.png" align="left"/>

<p>这里没有设置项目路径，所以访问这个jQuery的路径为：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></p>
<p><strong>2、<code>/**</code>，访问当前项目的任何资源如果没有处理都会从以下几个地方查找（<strong>静态资源文件夹</strong>）</strong></p>
<ul>
<li><code>classpath:/META-INF/resources/</code></li>
<li><code>classpath:/resources/</code></li>
<li><code>classpath:/static/</code></li>
<li><code>classpath:/public/</code></li>
<li><code>/</code>：当前项目的根路径</li>
</ul>
<p>如图所示，如果想要访问图中标注的文件，访问路径应该是什么？</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200915225105995.png" align="left"/>

<p>访问路径：<a href="http://localhost:8080/asserts/js/jquery-3.2.1.slim.min.js（如果访问不到，可以删除target目录之后再重启项目）" target="_blank" rel="noopener">http://localhost:8080/asserts/js/jquery-3.2.1.slim.min.js（如果访问不到，可以删除target目录之后再重启项目）</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//欢迎页设置</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、<code>/</code>请求会访问欢迎页，如果在上面的五个路径中找到了<code>index.html</code>文件则会访问这个文件</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200915230805033.png" align="left"/>

<p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh_CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">这是欢迎页！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/，结果如下：" target="_blank" rel="noopener">http://localhost:8080/，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200915230912214.png" align="left"/>

<p><strong>4、Spring Boot不同版本对Favicon的支持</strong></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200916082651037.png" align="left"/>

<p>&emsp;&emsp;通常情况下，每个网站都会有一个网站图标，如果上图中所标示的部分就是网站的图标。对此Spring Boot也提供了支持，但是在不同版本中有所区别。</p>
<p>&emsp;&emsp;在早期的Spring Boot中对Favicon进行了默认支持，也就是会有默认的Favicon，这个图标就是Spring的小绿叶标志。并且可以通过如下配置关闭Favicon的支持：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.favicon.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;但是随着Spring Boot项目的不断发展，发现如果提供默认的Favicon可能会导致网站信息泄露。如果用户不进行自定义的Favicon的设置，而Spring Boot项目又提供了默认的图标，那么势必会导致网站的开发框架泄露。因此，Spring Boot 2.2.x中将默认的Favicon移除，同时也不再提供上述的配置，更多信息可以参考：<a href="https://github.com/spring-projects/spring-boot/issues/17925" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/issues/17925</a></p>
<p><strong>自定义Favicon</strong></p>
<p>&emsp;&emsp;虽然现在Spring Boot不再提供默认的Favicon，但是还是可以自定义Favicon。正常情况下，直接将favicon.ico的图标放在<code>/**</code>映射的目录下（上面说过的五个路径）即可显示。如果使用的版本无法显示，首先应该排除浏览器缓存的问题。例如，将<code>favicon.ico</code>放在如下的位置：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200916085856826.png" align="left"/>

<p>运行Spring Boot然后访问：<a href="http://localhost:8080/，结果如下：" target="_blank" rel="noopener">http://localhost:8080/，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200916090002408.png" align="left"/>

<p>&emsp;&emsp;更多有关自定义Favicon的内容参考：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon</a></p>
<p>&emsp;&emsp;一个可以用于制作自定义的favicon的网站：<a href="https://tool.lu/favicon/" target="_blank" rel="noopener">https://tool.lu/favicon/</a></p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>
<p>&emsp;&emsp;模板引擎可以使用下面这张图来描述：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200916220756176.png" align="left"/>



<p>Spring Boot推荐使用Thymeleaf，因为它语法简单，功能强大！</p>
<h3 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h3><p>&emsp;&emsp;Spring Boot也为Thymeleaf提供了一个starter，叫<code>spring-boot-starter-thymeleaf</code></p>
<p>在<code>pom.xml</code>中添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意thymeleaf和layout的版本对应关系：</p>
<ul>
<li>thymeleaf3和layout2对应</li>
<li>thymeleaf2和layout1对应</li>
</ul>
<p>当然，至少在我所使用的Spring Boot 2.3.0版本中这些都已经是最新的了，所以在Spring Boot 2.3.0版本中，只需要导入上述依赖即可</p>
<h3 id="Thymeleaf使用"><a href="#Thymeleaf使用" class="headerlink" title="Thymeleaf使用"></a>Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    <span class="comment">//只需要把HTML页面放在classpath:/templates/路径下，thymeleaf就可以自动渲染了</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong>：</p>
<p>在<code>templates</code>目录下创建一个<code>success.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh_CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>成功页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">成功!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//classpath:/templates/success.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行项目，访问<a href="http://localhost:8080/success，结果如下：" target="_blank" rel="noopener">http://localhost:8080/success，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200917163039586.png" align="left"/>



<p><strong>使用步骤</strong>：</p>
<ol>
<li><p>导入thymeleaf的名称空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用thymeleaf语法</p>
<p>控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/success"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    map.put(<span class="string">"hello"</span>, <span class="string">"你好"</span>);</span><br><span class="line">    <span class="comment">//classpath:/templates/success.html</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>success.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh_CN"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>成功页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080/success，结果如下：" target="_blank" rel="noopener">http://localhost:8080/success，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200917164407931.png" align="left"/>

<p>注意此处如果没有经过thymeleaf解析，div中显示的文字就是原有的文字，而使用了thymeleaf解析之后，则使用指定的值替代</p>
</li>
</ol>
<h3 id="Thymeleaf的语法规则"><a href="#Thymeleaf的语法规则" class="headerlink" title="Thymeleaf的语法规则"></a>Thymeleaf的语法规则</h3><p>可以在配置文件中修改模板：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">check-template-location:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>prefix：模板所在的目录</li>
<li>check-template-location：检查模板目录是否存在</li>
<li>cache：是否缓存，开发中设为false，避免重启服务器，项目上线了可以设为true，提高性能。</li>
<li>encoding &amp; content-type：和Servlet通过Response设置的效果相同</li>
<li>mode：默认值为HTML5，是一个很严格的检查</li>
</ul>
<h4 id="th属性"><a href="#th属性" class="headerlink" title="th属性"></a>th属性</h4><p>html中的属性，thymeleaf几乎都有，常有的有如下八个，按照属性执行的优先级从高到底如下所示（使用order 1~8，数字越小优先级越高）</p>
<table>
<thead>
<tr>
<th align="center">Order</th>
<th align="center">属性</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><code>th:insert</code><br/><code>th:replace</code></td>
<td align="center">代码块引入</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><code>th:each</code></td>
<td align="center">循环遍历</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><code>th:if</code><br/><code>th:unless</code><br/><code>th:switch</code><br/><code>th:case</code></td>
<td align="center">条件判断</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><code>th:object</code></td>
<td align="center">局部变量的定义</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center"><code>th:attr</code><br/><code>th:attrprepend</code><br/><code>th:attrappend</code></td>
<td align="center">生成属性</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"><code>th:value</code><br/><code>th:href</code><br/><code>th:src</code><br/>…</td>
<td align="center">指定属性</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><code>th:text</code><br/><code>th:utext</code></td>
<td align="center">文本</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center"><code>th:fragment</code></td>
<td align="center">fragment定义</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center"><code>th:remove</code></td>
<td align="center">移除</td>
</tr>
</tbody></table>
<h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p><strong>简单表达式</strong>：</p>
<ul>
<li><p><code>${...}</code>：底层就是OGNL表达式</p>
<ol>
<li><p>获取对象的属性、调用方法</p>
</li>
<li><p>使用内置的基本对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ctx : the context object.</span><br><span class="line">#vars: the context variables.</span><br><span class="line">#locale : the context locale.</span><br><span class="line">#request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">#response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">#session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">#servletContext : (only in Web Contexts) the ServletContext object.</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用内置的工具对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#execInfo : information about the template being processed.</span><br><span class="line">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span><br><span class="line">#uris : methods for escaping parts of URLs&#x2F;URIs</span><br><span class="line">#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">#numbers : methods for formatting numeric objects.</span><br><span class="line">#strings : methods for String objects: contains, startsWith, prepending&#x2F;appending, etc.</span><br><span class="line">#objects : methods for objects in general.</span><br><span class="line">#bools : methods for boolean evaluation.</span><br><span class="line">#arrays : methods for arrays.</span><br><span class="line">#lists : methods for lists.</span><br><span class="line">#sets : methods for sets.</span><br><span class="line">#maps : methods for maps.</span><br><span class="line">#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><code>*{…}</code>：变量选择表达式，在<code>${}</code>在功能上是一致的，但有一个特殊的功能如下，可以配置<code>th:object</code>进行使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处*就代表上面设置的user对象--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;lastName&#125;"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;nationality&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>#{…}</code>：获取国际化内容</p>
</li>
<li><p><code>@{…}</code>：url表达式，链接一个地址和直接给出链接不同</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:href</span>=<span class="string">"@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>~{…}</code>：片段引用表达式</p>
</li>
</ul>
<p><strong>字面量</strong>：</p>
<ul>
<li>文本字面量: <code>&#39;one text&#39;</code>,<code>&#39;Another one!&#39;</code> ,…</li>
<li>数字字面量: <code>0</code>, <code>34</code> , <code>3.0</code> , <code>12.3</code>,…</li>
<li>布尔字面量: <code>true</code> , <code>false</code></li>
<li>Null字面量: <code>null</code></li>
<li>专用字面量: <code>one</code> , <code>sometext</code> , <code>main</code> ,…</li>
</ul>
<p><strong>文本操作</strong>：</p>
<ul>
<li>字符串连接：<code>+</code></li>
<li>字面量置换：<code>|The name is ${name}|</code></li>
</ul>
<p><strong>数学运算</strong>：</p>
<ul>
<li>二元运算符：<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li>
<li>单目运算符：<code>-</code></li>
</ul>
<p><strong>布尔运算</strong>：</p>
<ul>
<li>二元运算：<code>and</code>、<code>or</code></li>
<li>单目运算：<code>!</code>、<code>not</code></li>
</ul>
<p><strong>比较和等值</strong>：</p>
<ul>
<li>比较：<code>&gt;</code>, <code>&lt;</code>,<code>&gt;=</code>, <code>&lt;=</code>, （<code>gt</code>,<code>lt</code>, <code>ge</code>, <code>le</code>)</li>
<li>等值：<code>==</code>,<code>!=</code>（<code>eq</code>, <code>ne</code>）</li>
</ul>
<p><strong>条件运算</strong>：</p>
<ul>
<li>If-then：<code>(if) ? (then)</code></li>
<li>If-then-else：<code>(if) ? (then) : (else)</code></li>
<li>Default：<code>(value) ?: (defaultvalue)</code></li>
</ul>
<p><strong>专用记号</strong>：</p>
<ul>
<li>没有操作：<code>_</code>，可以配合上面的条件运算使用</li>
</ul>
<h2 id="Spring-MVC自动配置"><a href="#Spring-MVC自动配置" class="headerlink" title="Spring MVC自动配置"></a>Spring MVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-developing-web-applications" target="_blank" rel="noopener">参考文档</a></p>
<h3 id="Spring-MVC-auto-configuration"><a href="#Spring-MVC-auto-configuration" class="headerlink" title="Spring MVC auto-configuration"></a>Spring MVC auto-configuration</h3><p>Spring Boot自动配置了Spring MVC</p>
<p>以下是Spring Boot对Spring MVC的默认配置（WebMvcAutoConfiguration）：</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans</p>
<ul>
<li>自动配置了ViewResolver（视图解析器，根据方法的返回值得到View对象，View对象决定如何渲染（转发、重定向等））</li>
<li><code>ContentNegotiatingViewResolver</code>：组合所有的视图解析器（就是使用所有的视图解析器来返回一个视图集合），然后找到最合适的视图返回。这个类中的所有视图解析器是通过Spring IoC容器来获取到所有ViewResolver类型的对象，所<strong>以如果想要定制视图解析器，只需要将自定义的视图解析器注入到容器中即可</strong>。</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">later in this document</a>)).</p>
<ul>
<li>静态资源文件夹路径和webjars</li>
</ul>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
<ul>
<li>Converter：转换器，控制器方法中有例如User的对象，但是表单中提交到全是文本，这个时候就需要使用Converter进行转换</li>
<li>Formatter：格式化器，页面带来的数据例如日期类型，这个时候就需要这个Formatter来进行格式化转换</li>
</ul>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">later in this document</a>).</p>
<ul>
<li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的，例如将方法返回的User对象以JSON字符串的形式响应</p>
</li>
<li><p><code>HttpMessageConverters</code>：从容器中获取所有的HttpMessageConverter</p>
<p><strong>添加自己的HttpMessageConverter，只需要将其添加到容器中</strong></p>
</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes" target="_blank" rel="noopener">later in this document</a>).</p>
<ul>
<li>定义错误代码的生成规则</li>
</ul>
</li>
<li><p>Static <code>index.html</code> support.</p>
<ul>
<li>静态首页支持</li>
</ul>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">later in this document</a>).</p>
<ul>
<li>Favicon支持</li>
</ul>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">later in this document</a>).</p>
<ul>
<li><strong>可以添加一个<code>ConfigurableWebBindingInitializer</code>来替换默认的</strong></li>
<li>ConfigurableWebBindingInitializer的作用就是初始化WebDataBinder的，而WebDataBinder的作用就是将请求参数封装成控制器方法的JavaBean对象</li>
</ul>
</li>
</ul>
<p>所有的web自动配置场景都可以在<code>org.springframework.boot.autoconfigure.web</code>下的XXXAutoConfiguration中找到</p>
<h3 id="扩展Spring-MVC"><a href="#扩展Spring-MVC" class="headerlink" title="扩展Spring MVC"></a>扩展Spring MVC</h3><p>&emsp;&emsp;如果想要和之前使用Spring MVC一样自定义并扩展Spring MVC的配置（拦截器、格式化器，视图控制器，以及其他特性），i可以编写一个实现了<code>WebMvcConfigurer</code>且使用<code>@Configuration</code>标注且没有<code>@EnableWebMvc</code>的Spring MVC的配置类。</p>
<p>&emsp;&emsp;在<code>WebMvcConfigurer</code>接口中有很多默认方法，这些方法可以被重写来扩展Spring MVC，下面以<code>addViewControllers</code>方法为例</p>
<p>扩展配置类<code>MyMvcConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/baidu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样访问<code>/baidu</code>的映射请求时，就会使用视图解析器来解析字符串<code>success</code>所对应的视图，也就是通过thymeleaf解析的<code>success.html</code>文件</p>
<p><strong>原理</strong>：</p>
<ol>
<li><p>WebMvcAutoConfiguration是Spring MVC的自动配置类</p>
</li>
<li><p>在<code>WebMvcAutoConfiguration</code>的静态内部类<code>WebMvcConfigurationAdapter</code>（也是实现了<code>WebMvcConfigurer</code>）中使用了<code>@Import(EnableWebMvcConfiguration.class)</code>，这个类继承了<code>DelegatingWebMvcConfiguration</code>类，而<code>DelegatingWebMvcConfiguration</code>类中有这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="comment">//从容器中获取所有的WebMvcConfiurer类型的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWebMvcConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.delegates.addAll(configurers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说容器中所有的<code>WebMvcConfigurer</code>都会起作用</p>
<p>所以自定义的<code>WebMvcConfigurer</code>也会被调用，这就是Spring MVC的扩展配原理</p>
</li>
</ol>
<h3 id="全面接管Spring-MVC"><a href="#全面接管Spring-MVC" class="headerlink" title="全面接管Spring MVC"></a>全面接管Spring MVC</h3><p>&emsp;&emsp;如果想要完全自己配置Spring MVC，而不是用Spring Boot的自动配置，只需要在上述的配置类上加上<code>@EnableWebMvc</code>即可</p>
<p><strong>原理</strong>：</p>
<p>为什么使用了@EnableWebMvc注解之后，Spring MVC的自动配置就失效了？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到@EnableWebMvc注解的核心就是<code>@Import(DelegatingWebMvcConfiguration.class)</code></p>
<p><code>DelegatingWebMvcConfiguration</code>的描述如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>再来看一下Spring MVC的自动配置类<code>WebMvcAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">WebMvcConfigurationSupport</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureOrder</span>(<span class="title">Ordered</span>.<span class="title">HIGHEST_PRECEDENCE</span> + 10)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(</span>&#123; DispatcherServletAutoConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">TaskExecutionAutoConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ValidationAutoConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><code>@ConditionalOnMisssingBean(WebMvcConfigurationSupport.class)</code>说明这个自动配置只有在容器中没有<code>WebMvcConfigurationSupport</code>类型的对象时才会生效，所以使用了@EnableWebMvc注解之后Spring MVC的自动配置就失效了！</p>
<p><code>WebMvcConfigurationSupport</code>只有Spring MVC的基本功能！</p>
<h2 id="如何修改Spring-Boot的默认配置"><a href="#如何修改Spring-Boot的默认配置" class="headerlink" title="如何修改Spring Boot的默认配置"></a>如何修改Spring Boot的默认配置</h2><p><strong>模式</strong>：</p>
<ol>
<li>Spring Boot在自动配置很多组件的时候，都会先查看容器中有没有这种类型的组件，如果有就使用容器中的，否则添加默认的该类型组件。如果有多个，则将用户配置的和默认的组合起来，例如（ViewResolver）</li>
<li>在Spring Boot中会有非常多的XXXConfigurer来帮助我们进行扩展配置（例如WebMvcConfigurer）</li>
<li>在Spring Boot中会有非常多的XXXCustomizer来帮助我们进行定制配置（例如WebServerFactoryCustomizer）</li>
</ol>
<h2 id="RestfulCRUD"><a href="#RestfulCRUD" class="headerlink" title="RestfulCRUD"></a>RestfulCRUD</h2><p>&emsp;&emsp;如图所示，在static文件夹中导入assert静态资源，在template中导入前端的静态页面</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200920084057268.png" align="left"/>

<h3 id="首页设置"><a href="#首页设置" class="headerlink" title="首页设置"></a>首页设置</h3><p>&emsp;&emsp;这样设置完之后，默认访问的首页仍然是static下的<code>index.html</code></p>
<p>方式一：通过控制器方法来解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/"</span>, <span class="string">"index.html"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>方式二：通过WebMvcConfigurer实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">configurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebMvcConfigurer configurer = <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> configurer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态资源的导入</strong></p>
<p>之前在thymeleaf介绍过，可以使用<code>@{}</code>表达式来引入各种资源，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&downarrow;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.5.2/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>回顾Java Web中是如何实现国际化的：</p>
<ol>
<li><strong>编写国际化配置文件</strong></li>
<li>使用ResourceBundleMessageSource管理国际化资源文件</li>
<li>在页面使用<code>fmt:message</code>标签取出国际化内容</li>
</ol>
<p>在Spring Boot中进行国际化的步骤：</p>
<ol>
<li><p>编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p>在resource目录下创建i18n目录，分别建立国际化资源文件<code>login.properties</code>，<code>login_zh_CN.properties</code>，<code>login_en_US.properties</code>，idea会自动识别，可以使用idea的工具快速为对应的文件的对应值赋值</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200921165931599.png" align="left"/>
</li>
<li><p>Spring Boot自动配置好了管理国际化资源文件的组件</p>
<p>Spring Boot中和国际化有关的自动配置类叫<code>MessageSourceAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Conditional</span>(ResourceBundleCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到和国际化有关的配置，和配置文件中<code>spring.messages</code>相关的属性进行了绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">	ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">       <span class="comment">//设置国际化资源文件的基础名（去掉国家和地区，例如zh_CN），默认值为messages</span></span><br><span class="line">       <span class="comment">//也就是说可以在类路径下创建一个名为messages.properties的文件来进行国际化的配置</span></span><br><span class="line">	<span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">		messageSource.setBasenames(StringUtils</span><br><span class="line">				.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">		messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">	&#125;</span><br><span class="line">	messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">	Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">	<span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">		messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">	&#125;</span><br><span class="line">	messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">	messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">	<span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>且这个配置类中还在容器中注入了国际化所需要使用的<code>ResourceBundleMessageSource</code>对象</p>
<p>默认情况下会在加载类路径下的<code>messages.properties</code>文件中的内容，可以通过如下方式指定到我们配置的国际化文件中：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n.login</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在页面中获取国际化的值</p>
<p>在thymeleaf中可以通过<code>#{}</code>的形式来获取国际化文件中的值</p>
<p>设置标签体中的文本可以使用<code>th:text</code></p>
<p>设置输入文本框的提示内容可以使用<code>th:placeholder</code></p>
<p>设置纯文本的没有任何标签包含的文本，可以使用thymeleaf的行内写法：<code>[[表达式]]</code></p>
<p>在模板中完成这些设置之后，重新启动项目访问登录页面，就会根据浏览器设置的语言和地区来自动完成国际化操作！</p>
<p><code>login.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.5.2/css/bootstrap.min.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：根据浏览器语言设置的信息来进行国际化</p>
<p><strong>原理</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>WebMvcAutoConfiguration</code>中有上述的配置，在这段代码中我们可以获取如下几个重要的信息：</p>
<ol>
<li><p>可以通过设置<code>spring.mvc.locale-resolver</code>的值为<code>fixed</code>，然后指定<code>spring.mvc.locale</code>的值来返回指定的国际化页面（强制）</p>
</li>
<li><p>如果没有设置fixed，那么默认会返回浏览器Locale信息对应的页面</p>
</li>
<li><p>@ConditionalOnMissingBean表明我们可以自定义这个LocaleResolver来取来自动配置的效果</p>
<p>例如：如果需要实现点击<code>login.html</code>中的<code>中文</code>和<code>English</code>来切换，就可以通过自定义LocaleResolver来实现</p>
<p>添加链接并附带想要的语言国家信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='en_US')&#125;"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义LocaleResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认使用服务器操作系统默认的Locale</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l)) &#123;</span><br><span class="line">            <span class="comment">//参数不为空则使用参数来创建Locale对象</span></span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将自定义的LocaleResolver注册到组件中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启Spring Boot项目，就可以实现点击链接切换语言了</p>
</li>
</ol>
</li>
</ol>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><strong>基本的登录功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value = "/user/login", method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">    Map&lt;String, Object&gt; map,</span></span><br><span class="line"><span class="function">    HttpSession session) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username) &amp;&amp; <span class="string">"admin"</span>.equals(password)) &#123;</span><br><span class="line">        <span class="comment">//登录成功，重定向到dashboard</span></span><br><span class="line">        <span class="comment">//把用户信息存入session中</span></span><br><span class="line">        session.setAttribute(<span class="string">"loginUser"</span>, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//登录失败，转发到登录页面并保存错误信息</span></span><br><span class="line">        map.put(<span class="string">"msg"</span>, <span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意这里的<code>/main.html</code>，已经在<code>WebMvcConfigurer</code>中添加了视图映射，会访问<code>dashboard.html</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拦截器进行登录检查"><a href="#拦截器进行登录检查" class="headerlink" title="拦截器进行登录检查"></a>拦截器进行登录检查</h3><p><strong>登录权限控制</strong></p>
<p>首先需要编写一个登录的拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行登录检查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//从session中获取loginUser</span></span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//用户已经登录，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户没有登录，转发到登录页面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>, <span class="string">"没有权限，请先登录！"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>WebMvcConfigurer</code>中添加这个拦截器，并设置不拦截主页和登录请求的访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">        .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">        <span class="comment">//不能拦截主页和登录请求</span></span><br><span class="line">        .excludePathPatterns(<span class="string">"/"</span>, <span class="string">"/index.html"</span>, <span class="string">"/user/login"</span>)</span><br><span class="line">        <span class="comment">//排除静态资源的过滤</span></span><br><span class="line">        .excludePathPatterns(<span class="string">"/asserts/**"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关闭thymeleaf缓存</strong></p>
<ol>
<li><p>在配置文件中设置关闭thymeleaf缓存</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更新页面之后使用Ctrl+F9重新编译即可</p>
</li>
</ol>
<h3 id="CRUD-员工列表"><a href="#CRUD-员工列表" class="headerlink" title="CRUD-员工列表"></a>CRUD-员工列表</h3><p>实验要求：</p>
<ol>
<li><p>RESTful风格的CRUD</p>
<p>URI：/资源名称/资源标识      HTTP请求方式来区分CRUD操作</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">普通CRUD</th>
<th align="center">RESTful CRUD</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查询</td>
<td align="center">getEmp</td>
<td align="center">emp    GET方式</td>
</tr>
<tr>
<td align="center">添加</td>
<td align="center">addEmp?xxx=</td>
<td align="center">emp   POST方式</td>
</tr>
<tr>
<td align="center">修改</td>
<td align="center">updateEmp?id=xxx&amp;xxx=xxxx</td>
<td align="center">emp  PUT方式</td>
</tr>
<tr>
<td align="center">删除</td>
<td align="center">deleteEmp?id=xxx</td>
<td align="center">emp/{id}   DELETE方式</td>
</tr>
</tbody></table>
</li>
<li><p>实验的请求架构</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">请求URI</th>
<th align="center">请求方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查询所有员工</td>
<td align="center">emps</td>
<td align="center">GET</td>
</tr>
<tr>
<td align="center">查询某个员工</td>
<td align="center">emp/{id}</td>
<td align="center">GET</td>
</tr>
<tr>
<td align="center">来到添加页面</td>
<td align="center">emp</td>
<td align="center">GET</td>
</tr>
<tr>
<td align="center">添加员工</td>
<td align="center">emp</td>
<td align="center">POST</td>
</tr>
<tr>
<td align="center">来到修改页面（查出员工进行信息回显）</td>
<td align="center">emp/{id}</td>
<td align="center">GET</td>
</tr>
<tr>
<td align="center">修改员工</td>
<td align="center">emp/{id}</td>
<td align="center">PUT</td>
</tr>
<tr>
<td align="center">删除员工</td>
<td align="center">emp/{id}</td>
<td align="center">DELETE</td>
</tr>
</tbody></table>
</li>
<li><p>员工列表</p>
</li>
</ol>
<h4 id="公共页面抽取"><a href="#公共页面抽取" class="headerlink" title="公共页面抽取"></a>公共页面抽取</h4><p>&emsp;&emsp;thymeleaf中可以抽取公共页面，有两种方式：</p>
<p><strong>片段名方式</strong></p>
<p><code>~{模板名::片段名}</code></p>
<p>可以在一个模板页面的某个位置定义一个片段，然后在另一处引用这个片段，例如：</p>
<p><em>定义片段</em></p>
<p><code>footer.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>引用片段</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>选择器方式</strong></p>
<p><code>~{模板名::选择器}</code></p>
<p><code>footer.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ud</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>引用</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: #div1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>和<code>th:insert</code>相似的功能有三个：</p>
<ul>
<li><code>th:insert</code>：</li>
<li><code>th:replace</code></li>
<li><code>th:include</code>（Spring高版本中已经不推荐使用，也确实很少使用）</li>
</ul>
<p>下面举例来说明三者的区别：</p>
<p>有如下的HTML片段:</p>
<p><code>footer.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分别使用这三种标签来引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其解析效果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>th:insert</code>：将片段插入所在标签</li>
<li><code>th:replace</code>：将片段替换所在标签</li>
<li><code>th:include</code>：将片段标签体中的内容放到所在标签体中</li>
</ul>
<h3 id="员工添加"><a href="#员工添加" class="headerlink" title="员工添加"></a>员工添加</h3><p>添加员工的表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意表单中department对应的部门名下拉列表中的数据应该先从查询然后保存到request域中，然后再显示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//来到员工添加页面</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加页面中需要部门名称，所以需要查询部门名称，然后保存到request域</span></span><br><span class="line">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">    model.addAttribute(<span class="string">"departments"</span>, departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;departments&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改表单中对应项的name属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"department.id"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;departments&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里表单中存在birth，传递参数都是以字符串的形式进行传递的，Spring Boot存在默认的字符串转格式化为日期的解析格式：<code>dd/MM/yyyy</code>，可以通过如下配置来设置格式化的格式</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.format.date</span>=<span class="string">yyyy/MM/dd</span></span><br></pre></td></tr></table></figure>

<p>编写控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="员工修改"><a href="#员工修改" class="headerlink" title="员工修改"></a>员工修改</h3><p>员工修改有两个部分：</p>
<ul>
<li>来到修改页面</li>
<li>改变表单中的信息，然后提交修改内容，最后返回到员工管理页面查看修改结果</li>
</ul>
<h4 id="来到修改页面"><a href="#来到修改页面" class="headerlink" title="来到修改页面"></a>来到修改页面</h4><p>点击修改按钮来到修改页面，也就是查询指定id的employee</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toEditPage</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id, Model model) </span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询员工信息</span></span><br><span class="line">    Employee employee = employeeDao.get(id);</span><br><span class="line">    <span class="comment">//保存到request中</span></span><br><span class="line">    model.addAttribute(<span class="string">"employee"</span>, employee);</span><br><span class="line">    <span class="comment">//查询部门信息并保存在request域中</span></span><br><span class="line">    Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">    model.addAttribute(<span class="string">"departments"</span>, departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就是回显表单，将查询到的信息显示到之前的添加员工的表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.lastName&#125;"</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.email&#125;"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.gender==1&#125;"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.gender==0&#125;"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"department.id"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;employee.department.id==dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;departments&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">th:value</span>=<span class="string">"$&#123;employee!=null&#125;?$&#123;#dates.format(employee.birth,'yyyy/MM/dd')&#125;"</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;employee!=null&#125;?'修改'"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="提交修改内容"><a href="#提交修改内容" class="headerlink" title="提交修改内容"></a>提交修改内容</h4><p>之前提到过，RESTful风格的请求中要使用PUT请求来进行修改操作，在Spring MVC中我们通过HiddenHttpMethodFilter来将实现PUT、DELETE请求的响应，在<code>WebMvcAutoConfiguration</code>中有如下的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(HiddenHttpMethodFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.mvc.hiddenmethod.filter"</span>, name = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果配置了<code>spring.mvc.hiddenmethod.filter=true</code>（默认值为false）,且容器中没有<code>HiddenHttpMethodFilter</code>类型的组件，就会自动注入<code>OrderedHiddenHttpMethod</code>类型的组件</p>
<p>想要发起一个PUT请求，则需要在form表单中添加如下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在add.html为修改页面时才会发起put请求--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;employee!=null&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改employee还需要提供employee的id，添加如下隐藏项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;employee.id&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;employee!=null&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/emp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmp</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="员工删除"><a href="#员工删除" class="headerlink" title="员工删除"></a>员工删除</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger"</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmp</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这种方式会导致出现很多form表单，相当于每一条employee的信息都包含这样的一个表单，而且样式还会发生改变，所以可以把这个表单写在外面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"deleteEmpForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger btn-delete-emp"</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样的删除按钮有很多个，所以我们可以使用jQuery来编写其点击事件提交上面的表单并传递其del_uri属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".btn-delete-emp"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>, $(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>)).submit();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">	&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h2><h3 id="Spring-Boot默认的错误处理机制"><a href="#Spring-Boot默认的错误处理机制" class="headerlink" title="Spring Boot默认的错误处理机制"></a>Spring Boot默认的错误处理机制</h3><p><strong>浏览器</strong><br>在登录之后，访问<a href="http://localhost:8080/crud/aaa，结果如下：" target="_blank" rel="noopener">http://localhost:8080/crud/aaa，结果如下：</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200924102634008.png" align="left"/>

<p>accept请求头的信息如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200924102759060.png" align="left"/>

<p>也就是说使用浏览器访问，会优先接收<code>text/html</code>类型的结果（网页）</p>
<p><strong>postman模拟移动端访问</strong></p>
<p>可以使用postman来模拟移动端的访问，由于存在登录验证，所以需要将之前在浏览器中登录JSESSIONID放到postman中，结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200924104438705.png" align="left"/>



<p><strong>小结</strong>：</p>
<ul>
<li>浏览器：错误页面</li>
<li>移动端：JSON数据</li>
</ul>
<h3 id="Spring-Boot错误处理机制原理"><a href="#Spring-Boot错误处理机制原理" class="headerlink" title="Spring Boot错误处理机制原理"></a>Spring Boot错误处理机制原理</h3><p>&emsp;&emsp;Spring Boot中有很多XXXAutoConfiguration来完成某些功能的自动配置，错误处理机制就是通过<code>ErrorMvcAutoConfiguration</code>实现的。其中注入了以下组件：</p>
<ol>
<li><p>DefaultErrorAttributes：在页面共享信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    addStatus(errorAttributes, webRequest);</span><br><span class="line">    addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">    addPath(errorAttributes, webRequest);</span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>BasicErrorController</p>
</li>
<li><p>ErrorPageCustomizer</p>
</li>
<li><p>DefaultErrorViewResolver</p>
</li>
</ol>
<p>处理步骤：</p>
<ul>
<li><p>一旦系统出现4xx或5xx错误，ErrorPageCustomizer就会生效（定制错误的响应规则）</p>
<p>在<code>ErrorPageCustomizer</code>有一个用于注册错误页面的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry errorPageRegistry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认会从getPath()中来查找错误页面</span></span><br><span class="line">    ErrorPage errorPage = <span class="keyword">new</span> ErrorPage(</span><br><span class="line">        <span class="keyword">this</span>.dispatcherServletPath.getRelativePath(<span class="keyword">this</span>.properties.getError().getPath()));</span><br><span class="line">    errorPageRegistry.addErrorPages(errorPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个path会从server.error.path的值来加载，如果没有配置那么就是/error</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;</span><br></pre></td></tr></table></figure>

<p>这个组件的作用就是注册错误页面的位置，配置了<code>server.error.path</code>就从配置的位置加载，否则从<code>/error</code>中加载</p>
</li>
<li><p>制定了错误页面的位置，还需<strong>BasicErrorController</strong>来处理错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li>BasicErrorController是一个 用于处理错误的控制器</li>
<li>BasicErrorController处理的请求映射路径是<code>server.error.path</code>指定的值，如果没有指定该值，则默认使用<code>/error</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//produces=text/html，返回html类型的数据</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    <span class="comment">//model中保存了错误页面可以显示的数据</span></span><br><span class="line">    Map&lt;String, Object&gt; model = Collections</span><br><span class="line">        .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    <span class="comment">//解析应该去往哪一个页面</span></span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意Spring Boot 2.x版本中没有了@ResponseBody注解</span></span><br><span class="line"><span class="comment">//这里返回了一个ResponseEntity对象,这个对象可以</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BasicErrorController中还有如上两个方法：</p>
<ul>
<li><p>响应页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拿到所有的异常视图解析器，得到可以返回的ModelAndView</span></span><br><span class="line">    <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">        ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">        <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DefaultErrorViewResolver</strong>可以返回这个ModelAndView对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Spring Boot默认会找到某个错误页面，例如404错误就会找，error/404</span></span><br><span class="line">    String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">    <span class="comment">//如果模板引擎可以解析，就使用模板引擎指定的视图地址</span></span><br><span class="line">    TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">                                                                                           <span class="keyword">this</span>.applicationContext);</span><br><span class="line">    <span class="comment">//如果模板引擎不可用，则返回resolveResource方法的返回值</span></span><br><span class="line">    <span class="comment">//也就是返回静态资源文件夹下的error/xxx.html</span></span><br><span class="line">    <span class="comment">//如果静态资源中也没有则返回null</span></span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li>响应json数据</li>
</ul>
<h3 id="如何定制错误响应"><a href="#如何定制错误响应" class="headerlink" title="如何定制错误响应"></a>如何定制错误响应</h3><h4 id="如何定制错误的页面"><a href="#如何定制错误的页面" class="headerlink" title="如何定制错误的页面"></a>如何定制错误的页面</h4><ol>
<li><p><strong>有模板引擎的情况下</strong>：<code>error/状态码</code>会返回该路径所对应的视图，例如</p>
<ul>
<li>精确匹配：<code>error/404</code>默认就会找到<code>templates/error/404.html</code></li>
<li>模糊匹配：<code>error/4xx</code>，如果没有精确匹配的结果就会找到<code>templates/error/4xx.html</code>然后返回</li>
</ul>
<p><strong>页面中可以获取的信息</strong>：在<code>DefaultErrorAttributes</code>的<code>getErrorAttributes</code>方法中已经给出了，主要有如下几个：</p>
<ul>
<li>timestamp：时间戳</li>
<li>status：状态码</li>
<li>error：错误提示</li>
<li>exception：异常对象</li>
<li>message：异常消息</li>
<li>errors：JSR303数据校验的错误</li>
</ul>
</li>
<li><p>没有模板引擎的情况下，默认会从静态资源文件夹上找（此时就不能获取上述的共享数据了，所以不推荐）</p>
</li>
<li><p>如果模板引擎不能解析，静态资源文件夹下也没有对应的页面，那么就会返回一个默认的页面</p>
<p>在<code>ErrorMvcAutoConfiguration</code>中有如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"error"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"error"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">defaultErrorView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.defaultErrorView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是如何创建这个默认的页面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (response.isCommitted()) &#123;</span><br><span class="line">        String message = getMessage(model);</span><br><span class="line">        logger.error(message);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    response.setContentType(TEXT_HTML_UTF8.toString());</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Date timestamp = (Date) model.get(<span class="string">"timestamp"</span>);</span><br><span class="line">    Object message = model.get(<span class="string">"message"</span>);</span><br><span class="line">    Object trace = model.get(<span class="string">"trace"</span>);</span><br><span class="line">    <span class="keyword">if</span> (response.getContentType() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        response.setContentType(getContentType());</span><br><span class="line">    &#125;</span><br><span class="line">    builder.append(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;"</span>).append(</span><br><span class="line">        <span class="string">"&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;"</span>)</span><br><span class="line">        .append(<span class="string">"&lt;div id='created'&gt;"</span>).append(timestamp).append(<span class="string">"&lt;/div&gt;"</span>)</span><br><span class="line">        .append(<span class="string">"&lt;div&gt;There was an unexpected error (type="</span>).append(htmlEscape(model.get(<span class="string">"error"</span>)))</span><br><span class="line">        .append(<span class="string">", status="</span>).append(htmlEscape(model.get(<span class="string">"status"</span>))).append(<span class="string">").&lt;/div&gt;"</span>);</span><br><span class="line">    <span class="keyword">if</span> (message != <span class="keyword">null</span>) &#123;</span><br><span class="line">        builder.append(<span class="string">"&lt;div&gt;"</span>).append(htmlEscape(message)).append(<span class="string">"&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trace != <span class="keyword">null</span>) &#123;</span><br><span class="line">        builder.append(<span class="string">"&lt;div style='white-space:pre-wrap;'&gt;"</span>).append(htmlEscape(trace)).append(<span class="string">"&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    builder.append(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    response.getWriter().append(builder.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="如果定制错误的json数据"><a href="#如果定制错误的json数据" class="headerlink" title="如果定制错误的json数据"></a>如果定制错误的json数据</h4><ol>
<li><p>自定义异常处理并且返回自定义的json数据</p>
<p>编写自定义异常类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserNotExistException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"用户不存在！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改控制器代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam(<span class="string">"user"</span>)</span> String user) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"abc"</span>.equals(user)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserNotExistException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写异常处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; <span class="title">handleUserNotException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"User not exists!"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:8080/crud/hello?user=abc" target="_blank" rel="noopener">http://localhost:8080/crud/hello?user=abc</a></p>
<p><strong>缺点：这种方式无论是浏览器还是移动端都会返回JSON数据！</strong></p>
</li>
<li><p>转发到<code>/error</code>进行自适应处理</p>
<p>只需要修改异常处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handleUserNotException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"User not exists!"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改之后发现确实实现了根据客户端的不同返回不同内容的效果，但是网页端返回的是Spring Boot生成的默认页面（因为这种情况下状态码为200，没有对应的错误处理页面，所以会返回一个默认的页面），所以需要传入自己的错误状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">String</span> <span class="title">handleUserNotException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//设置状态码</span></span><br><span class="line">    request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"User not exists!"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>携带自定义的信息</strong></p>
<p>上面的这种方法仍然无法获取自己定义的信息，因为转发到了<code>/error</code>会使用<code>BasicErrorController</code>来进行处理，有两种方式来实现自定义信息的携带：</p>
<p><strong>自定义一个ErrorController组件</strong>：这种方式太过复杂，不推荐</p>
<p><strong>自定义ErrorAttributes组件</strong>：</p>
<p>无论是返回网页，还是返回json数据，都是调用<code>getErrorAttributes</code>方法来获取的，所以可以通过继承<code>DefaultErrorAttributes</code>并重写其<code>getErrorAttributes</code>方法来实现自定义信息的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">        <span class="comment">//从request中获取到要添加的自定义信息</span></span><br><span class="line">        Map&lt;String, Object&gt; ext = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">"ext"</span>, RequestAttributes.SCOPE_REQUEST);</span><br><span class="line">        <span class="comment">//添加到map中</span></span><br><span class="line">        map.put(<span class="string">"ext"</span>, ext);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改异常处理器的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleUserNotException</span><span class="params">(Exception e, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//设置状态码</span></span><br><span class="line">    request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>, <span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"User not exists!"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">    <span class="comment">//保存到request域中</span></span><br><span class="line">    request.setAttribute(<span class="string">"ext"</span>, map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用postman的访问结果如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200926104120673.png" align="left"/>



</li>
</ol>
<h2 id="配置嵌入式Servlet容器"><a href="#配置嵌入式Servlet容器" class="headerlink" title="配置嵌入式Servlet容器"></a>配置嵌入式Servlet容器</h2><p>&emsp;&emsp;Spring Boot默认使用的是嵌入式的Servlet容器，Spring Boot 2.3.0版本使用了Tomcat 9.0.3作为嵌入式的Servlet容器</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200926134547088.png" align="left"/>

<h3 id="嵌入式容器配置修改"><a href="#嵌入式容器配置修改" class="headerlink" title="嵌入式容器配置修改"></a>嵌入式容器配置修改</h3><ol>
<li><p>如何定制和修改Servlet容器的相关配置</p>
<p><strong>方式一</strong>：修改和server有关的配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/crud</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通用的servlet设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="comment">#Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>

<p>具体可以进行哪些配置可以查看<code>ServerProperties</code>类</p>
<p><strong>方式二</strong>：编写一个<strong>WebServerFactoryCustomizer</strong>（web服务工厂定制器）注入到组件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义和嵌入式容器相关的规则</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; <span class="title">webServerFactoryCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            factory.setPort(<span class="number">8088</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h3 id="注册JavaWeb三大组件"><a href="#注册JavaWeb三大组件" class="headerlink" title="注册JavaWeb三大组件"></a>注册JavaWeb三大组件</h3><p>&emsp;&emsp;由于Spring Boot使用的是jar包的方式启动嵌入式的Servlet容器，所以没有<code>web.xml</code>文件，所以注册三大组件可以使用如下方式：</p>
<ul>
<li><code>ServletRegistrationBean</code></li>
<li><code>ServletRegistrationBean</code></li>
<li><code>ServletListenerRegistrationBean</code></li>
</ul>
<p><strong>使用实例</strong></p>
<p>自定义Servlet、Filter、Listener</p>
<p><code>MyServlet</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理get请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理post请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"Hello, MyServlet!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MyFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFilter执行了..."</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MyListener</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext容器创建了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext容器销毁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册Servlet</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;HttpServlet&gt; <span class="title">myServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet(), <span class="string">"/myServlet"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册Filter</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;Filter&gt; <span class="title">myFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean&lt;Filter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>, <span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册Listener</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean&lt;EventListener&gt; <span class="title">myListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>应用</strong>：Spring Boot使用了这种方式为我们注册了Spring MVC的前端控制器，在<code>DispatcherServletAutoConfiguration</code>中有如下一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(value = DispatcherServlet<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(DispatcherServlet dispatcherServlet,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                       WebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> </span>&#123;</span><br><span class="line">    DispatcherServletRegistrationBean registration = <span class="keyword">new</span> DispatcherServletRegistrationBean(dispatcherServlet,</span><br><span class="line">                                                                                           webMvcProperties.getServlet().getPath());</span><br><span class="line">    registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">    registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">    multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码就是用于DispatcherServlet的注册，拦截的路径会从<code>WebMvcProperties</code>中获取（默认值为<code>/</code>，不会拦截jsp），可以通过<code>spring.mvc.servlet.path</code>来指定</p>
<h3 id="切换其他的嵌入式Servlet容器"><a href="#切换其他的嵌入式Servlet容器" class="headerlink" title="切换其他的嵌入式Servlet容器"></a>切换其他的嵌入式Servlet容器</h3><p>Spring Boot中可以使用如下的Servlet容器：</p>
<ul>
<li>Tomcat（默认使用）</li>
<li>Jetty（长链接，例如聊天）</li>
<li>Undertow（不支持JSP，但是高性能非阻塞，并发性好）</li>
</ul>
<p>前面介绍过，如果想要自定义Servlet服务器相关的配置，就需要注入一个<code>WebServerFactoryCustomizer</code>类型的组件，这个类需要一个<code>WebServerFactory</code>类型的泛型，其继承关系如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200928170336570.png" align="left"/>



<p>想要切换内嵌的Tomcat容器就要知道为什么Spring Boot默认使用Tomcat，这是因为<code>spring-boot-starter-web</code>中默认依赖了<code>spring-boot-starter-tomcat</code>，所以如果想要切换到其他类型的Servlet容器需要如下两个步骤：</p>
<ol>
<li><p>排除<code>spring-boot-starter-tomcat</code>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除tomcat--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>引入需要切换的Servlet容器对应的starter，例如<code>spring-boot-starter-jetty</code>或者<code>spring-boot-starter-undertow</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jetty--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="嵌入式Servlet容器自动配置原理"><a href="#嵌入式Servlet容器自动配置原理" class="headerlink" title="嵌入式Servlet容器自动配置原理"></a>嵌入式Servlet容器自动配置原理</h3><p><code>EmbeddedWebServerFactoryCustomizerAutoConfiguration</code>中是有关嵌入式Servlet容器的自动配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Tomcat is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">    <span class="comment">//Tomcat存在时才会加载</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Tomcat<span class="class">.<span class="keyword">class</span>, <span class="title">UpgradeProtocol</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">TomcatWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> TomcatWebServerFactoryCustomizer <span class="title">tomcatWebServerFactoryCustomizer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">				ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">    <span class="comment">//Jetty存在时该配置类才会生效</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Server<span class="class">.<span class="keyword">class</span>, <span class="title">Loader</span>.<span class="title">class</span>, <span class="title">WebAppContext</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">JettyWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> JettyWebServerFactoryCustomizer <span class="title">jettyWebServerFactoryCustomizer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">				ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JettyWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="comment">// Undertow存在时配置类才会生效</span></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(&#123; Undertow<span class="class">.<span class="keyword">class</span>, <span class="title">SslClientAuthMode</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">UndertowWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> UndertowWebServerFactoryCustomizer <span class="title">undertowWebServerFactoryCustomizer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">				ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> UndertowWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Nested configuration if Netty is being used.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(HttpServer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">NettyWebServerFactoryCustomizerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> NettyWebServerFactoryCustomizer <span class="title">nettyWebServerFactoryCustomizer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">				ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> NettyWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类的作用很简单，存在何种Servlet容器（Tomcat、Jetty、Undertow、Netty），就会加载对应容器的<code>XXXWebServerFactoryCustomizerConfiguration</code>配置类，而每个配置类中又存在一个<code>XXXWebServerFactoryCustomizer</code>组件，这个组件在前面介绍过，是用于Servlet容器的个性化配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从Environment对象和serverProperties中来加载个性化配置</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> XXXWebServerFactoryCustomizer(environment, serverProperties);</span><br></pre></td></tr></table></figure>

<p>这里以<code>TomcatWebServerFactoryCustomizer</code>为例进行讲解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatWebServerFactoryCustomizer</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableTomcatWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><code>TomcatWebServerFactoryCustomizer</code>实现了<code>WebServerFactoryCustomizer&lt;ConfigurableTomcatWebServerFactory&gt;</code>接口，这个接口中有一个<code>customize</code>方法可以用于Servlet容器的个性化配置，在这个<code>customize</code>方法中会获取<code>serverProperties</code>中对应的Servlet容器配置然后进行Servlet容器的个性化定制。</p>
<p>所以说想要定制Servlet容器的配置，有两种方式：</p>
<ul>
<li>通过配置来修改<code>ServerProperties</code>的属性</li>
<li>通过在配置类中添加一个<code>WebServerFactoryCustomizer</code>组件</li>
</ul>
<p>看到这个地方，你可能会好奇这里只是加载了<code>WebServerFactoryCustomizer</code>类型的组件，但是并没有调用，怎么会加载写个性化的配置？</p>
<p>这就要说到了<code>ServletWebServerFactoryAutoConfiguration</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; </span><br><span class="line">    	ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedTomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedJetty</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedUndertow</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p>@Import注解是Spring中用于快速导入组件的方法，这里主要加载了两类组件</p>
<ul>
<li><p><code>ServletWebServerFactoryConfiguration.EmbeddedXXX</code>（这里以<code>EmbeddedTomcat</code>为例）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">Tomcat</span>.<span class="title">class</span>, <span class="title">UpgradeProtocol</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">value</span> </span>= ServletWebServerFactory<span class="class">.<span class="keyword">class</span>, <span class="title">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TomcatServletWebServerFactory <span class="title">tomcatServletWebServerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;TomcatConnectorCustomizer&gt; connectorCustomizers,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;TomcatContextCustomizer&gt; contextCustomizers,</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectProvider&lt;TomcatProtocolHandlerCustomizer&lt;?&gt;&gt; protocolHandlerCustomizers)</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory();</span><br><span class="line">        factory.getTomcatConnectorCustomizers()</span><br><span class="line">            .addAll(connectorCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        factory.getTomcatContextCustomizers()</span><br><span class="line">            .addAll(contextCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        factory.getTomcatProtocolHandlerCustomizers()</span><br><span class="line">            .addAll(protocolHandlerCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个静态内部类是一个配置类，主要的作用是导入<code>XXXServletWebServerFactory</code>组件，这个组件是<code>customizer</code>方法的参数</p>
</li>
<li><p><code>ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar</code></p>
<p>其作用是注册<code>WebServerFactoryCustomizerBeanPostProcessor</code>这个后置处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    registerSyntheticBeanIfMissing(registry, <span class="string">"webServerFactoryCustomizerBeanPostProcessor"</span>,</span><br><span class="line">                                   WebServerFactoryCustomizerBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    registerSyntheticBeanIfMissing(registry, <span class="string">"errorPageRegistrarBeanPostProcessor"</span>,</span><br><span class="line">                                   ErrorPageRegistrarBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个后置处理器中有这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前的组件是WebServerFactory类型的组件</span></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> WebServerFactory) &#123;</span><br><span class="line">        postProcessBeforeInitialization((WebServerFactory) bean);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(WebServerFactory webServerFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此处调用了所有定制器的customize方法</span></span><br><span class="line">    LambdaSafe.callbacks(WebServerFactoryCustomizer<span class="class">.<span class="keyword">class</span>, <span class="title">getCustomizers</span>(), <span class="title">webServerFactory</span>)</span></span><br><span class="line"><span class="class">        .<span class="title">withLogger</span>(<span class="title">WebServerFactoryCustomizerBeanPostProcessor</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">        .<span class="title">invoke</span>((<span class="title">customizer</span>) -&gt; <span class="title">customizer</span>.<span class="title">customize</span>(<span class="title">webServerFactory</span>))</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说这个后置处理器会调用所有Customizer的<code>customize</code>方法，此处解释了这些自定义配置是如何被调用加载的！</p>
</li>
</ul>
<h3 id="嵌入式Servlet容器启动原理"><a href="#嵌入式Servlet容器启动原理" class="headerlink" title="嵌入式Servlet容器启动原理"></a>嵌入式Servlet容器启动原理</h3><p>上一小节介绍了嵌入式Servlet容器是如何自动配置的，下面将介绍Spring Boot是如何启动Servlet服务器的：</p>
<ol>
<li><p>Spring Boot都是从主程序的main方法开始运行的，启动嵌入式Servlet容器也不例外</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringApplication.run(SpringBoot04WebRestfulcrudApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建IoC容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context = createApplicationContext();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line">    <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                <span class="string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处会根据不同情况创建不同的ApplicationContext对象</p>
<ul>
<li>SERVLET：创建AnnotationConfigServletWebServerApplicationContext</li>
<li>REACTIVE：创建AnnotationConfigReactiveWebServerApplicationContext</li>
<li>其他情况下：创建AnnotationConfigApplicationContext</li>
</ul>
</li>
<li><p>刷新IoC容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">refreshContext(context);</span><br></pre></td></tr></table></figure>

<p>这里会调用<code>ApplicationContext</code>的<code>refresh()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                            <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果学习过Spring注解版的相关内容，对这一段代码一定不会陌生，这是Spring的核心！</p>
</li>
<li><p>在<code>refresh()</code>方法中会调用<code>onRefresh()</code>方法（由于此时在Web环境下，所以创建的是ServletWebServerApplicationContext对象，实际调用的也是这个类中的方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRefresh();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        createWebServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start web server"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>onRefresh()</code>方法中会调用<code>createWebServer()</code>方法来创建Web服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createWebServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebServer webServer = <span class="keyword">this</span>.webServer;</span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line">    <span class="keyword">if</span> (webServer == <span class="keyword">null</span> &amp;&amp; servletContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取WebServerFactory</span></span><br><span class="line">        ServletWebServerFactory factory = getWebServerFactory();</span><br><span class="line">        <span class="keyword">this</span>.webServer = factory.getWebServer(getSelfInitializer());</span><br><span class="line">        getBeanFactory().registerSingleton(<span class="string">"webServerGracefulShutdown"</span>,</span><br><span class="line">                                           <span class="keyword">new</span> WebServerGracefulShutdownLifecycle(<span class="keyword">this</span>.webServer));</span><br><span class="line">        getBeanFactory().registerSingleton(<span class="string">"webServerStartStop"</span>,</span><br><span class="line">                                           <span class="keyword">new</span> WebServerStartStopLifecycle(<span class="keyword">this</span>, <span class="keyword">this</span>.webServer));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getSelfInitializer().onStartup(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Cannot initialize servlet context"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    initPropertySources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>createWebServer()</code>中会调用<code>getWebServerFactory()</code>来创建Web服务器工厂对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ServletWebServerFactory <span class="title">getWebServerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Use bean names so that we don't consider the hierarchy</span></span><br><span class="line">    String[] beanNames = getBeanFactory().getBeanNamesForType(ServletWebServerFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (beanNames.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start ServletWebServerApplicationContext due to missing "</span></span><br><span class="line">                                              + <span class="string">"ServletWebServerFactory bean."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beanNames.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start ServletWebServerApplicationContext due to multiple "</span></span><br><span class="line">                                              + <span class="string">"ServletWebServerFactory beans : "</span> + StringUtils.arrayToCommaDelimitedString(beanNames));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(beanNames[<span class="number">0</span>], ServletWebServerFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ServletWebServerFactory这个类型之前见过，在<code>ServletWebServerFactoryAutoConfiguration</code>中使用了<code>@Import</code>注解导入了</p>
<ul>
<li><code>ServletWebServerFactoryConfiguration.EmbeddedTomcat.class</code></li>
<li><code>ServletWebServerFactoryConfiguration.EmbeddedJetty.class</code></li>
<li><code>ServletWebServerFactoryConfiguration.EmbeddedUndertow.class</code></li>
</ul>
<p>这三个静态内部类都是配置类，会导入：</p>
<ul>
<li><code>TomcatServletWebServerFactory</code></li>
<li><code>JettyServletWebServerFactory</code></li>
<li><code>UndertowServletWebServerFactory</code></li>
</ul>
<p>这三个<code>ServletWebServerFactory</code>类型的组件</p>
</li>
<li><p><code>createWebServer()</code>方法会调用之前获取到的<code>ServletWebServerFactory</code>对象的<code>getWebServer()</code>方法</p>
<p>默认情况下会调用<code>TomcatServletWebServerFactory</code>的<code>getWebServer()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServer <span class="title">getWebServer</span><span class="params">(ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.disableMBeanRegistry) &#123;</span><br><span class="line">        Registry.disableRegistry();</span><br><span class="line">    &#125;</span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span>) ? <span class="keyword">this</span>.baseDirectory : createTempDir(<span class="string">"tomcat"</span>);</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">    connector.setThrowOnFailure(<span class="keyword">true</span>);</span><br><span class="line">    tomcat.getService().addConnector(connector);</span><br><span class="line">    customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">    tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">    configureEngine(tomcat.getEngine());</span><br><span class="line">    <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line">    prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    <span class="keyword">return</span> getTomcatWebServer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>getWebServer</code>方法中又会调用<code>getTomcatWebServer</code>并传入其中创建的Tomcat类型对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TomcatWebServer <span class="title">getTomcatWebServer</span><span class="params">(Tomcat tomcat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServer(tomcat, getPort() &gt;= <span class="number">0</span>, getShutdown());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&downarrow;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatWebServer</span><span class="params">(Tomcat tomcat, <span class="keyword">boolean</span> autoStart, Shutdown shutdown)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(tomcat, <span class="string">"Tomcat Server must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.tomcat = tomcat;</span><br><span class="line">    <span class="keyword">this</span>.autoStart = autoStart;</span><br><span class="line">    <span class="keyword">this</span>.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? <span class="keyword">new</span> GracefulShutdown(tomcat) : <span class="keyword">null</span>;</span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&downarrow;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> WebServerException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"Tomcat initialized with port(s): "</span> + getPortsDescription(<span class="keyword">false</span>));</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.monitor) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            addInstanceIdToEngineName();</span><br><span class="line"></span><br><span class="line">            Context context = findContext();</span><br><span class="line">            context.addLifecycleListener((event) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (context.equals(event.getSource()) &amp;&amp; Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">                    <span class="comment">// Remove service connectors so that protocol binding doesn't</span></span><br><span class="line">                    <span class="comment">// happen when the service is started.</span></span><br><span class="line">                    removeServiceConnectors();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start the server to trigger initialization listeners</span></span><br><span class="line">            <span class="keyword">this</span>.tomcat.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can re-throw failure exception directly in the main thread</span></span><br><span class="line">            rethrowDeferredStartupExceptions();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ContextBindings.bindClassLoader(context, context.getNamingToken(), getClass().getClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (NamingException ex) &#123;</span><br><span class="line">                <span class="comment">// Naming is not enabled. Continue</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Unlike Jetty, all Tomcat threads are daemon threads. We create a</span></span><br><span class="line">            <span class="comment">// blocking non-daemon to stop immediate shutdown</span></span><br><span class="line">            startDaemonAwaitThread();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            stopSilently();</span><br><span class="line">            destroySilently();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> WebServerException(<span class="string">"Unable to start embedded Tomcat"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终在<code>initialize()</code>方法中调用了<code>Tomcat</code>对象的<code>start()</code>方法启动了Tomcat服务器（其他类型的Servlet服务器流程大致也是如此）</p>
</li>
<li><p>启动Servlet服务器都是在<code>onRefresh()</code>方法中发生的，也就是说Servlet服务器会在剩余的单实例bean实例化之前启动！</p>
</li>
</ol>
<h3 id="使用外部Servlet容器-amp-JSP支持"><a href="#使用外部Servlet容器-amp-JSP支持" class="headerlink" title="使用外部Servlet容器 &amp; JSP支持"></a>使用外部Servlet容器 &amp; JSP支持</h3><p>嵌入式Servlet容器：</p>
<p><strong>优点</strong>：简单、便携</p>
<p><strong>缺点</strong>：默认不支持JSP，优化和定制比较复杂（使用定制器）</p>
<p>使用外部Servlet容器：在外部安装Tomcat，应用使用war的打包方式</p>
<p><strong>使用步骤</strong>：</p>
<ol>
<li><p>必须创建一个war项目（打包方式为war，此处需要利用idea创建好webapps的目录结构）</p>
</li>
<li><p>将嵌入式的Tomcat指定为provided</p>
</li>
<li><p>必须编写一个<code>SpringBootServletInitializer</code>的子类，并调用其configure方法</p>
<p>configure方法中需要调用<code>SpringApplicationBuilder</code>类型对象的<code>sources</code>方法并传入主程序类的字节码（<code>.class</code>）</p>
</li>
<li><p>最终启动服务器就可以使用了</p>
</li>
</ol>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><strong>jar包的打包方式：</strong></p>
<p>&emsp;&emsp;直接执行Spring Boot主配置类的main方法，启动IoC容器，创建嵌入式Servlet容器</p>
<p><strong>war包的打包方式</strong>：</p>
<p>&emsp;&emsp;启动服务器，服务器启动Spring Boot应用，启动IoC容器</p>
<p>那么，服务器为什么能够启动Spring Boot应用，也就是<code>SpringBootServletInitializer</code>的子类为什么能够启动Spring Boot应用？</p>
<p>这就要说到了<strong>Servlet3.0的一个规范</strong>了：</p>
<ol>
<li>web应用启动时，会创建web应用里面每一个jar包里面的ServletContainerInitializer实例</li>
<li>ServletContainerInitializer的实现放在<code>META-INF/services</code>文件夹下，这个目录下有一个名为<code>javax.servlet.ServletContainerInitializer</code>文件，这个文件的内容就是<code>ServletContainerInitializer</code>实现类的全类名</li>
<li>还可以使用<code>@HandleTypes</code>注解，其作用是在应用启动的时候加载感兴趣的类</li>
</ol>
<p><strong>流程</strong>：</p>
<ol>
<li><p>启动Tomcat</p>
</li>
<li><p>在spring-web模块的jar包中<code>META-INF/services</code>目录下存在<code>javax.servlet.ServletContainerInitializer</code>，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.web.SpringServletContainerInitializer</span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringServletContainerInitializer将@HandleTypes标注的所有类型的类都传入<code>onStartup</code>方法的<code>Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses</code>集合中；然后<code>onStartup</code>方法中为<code>WebApplicationInitializer</code>类型的类创建实例</p>
</li>
<li><p>每一个<code>WebApplicationInitializer</code>都会调用自己的<code>onStartup</code>方法，其继承关系如下：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20200929194519518.png" align="left"/>

<p>从图中发现了<code>SpringBootServletInitializer</code>，所以编写的<code>SpringBootServletInitializer</code>的子类会创建实例并调用其<code>onStartup</code>方法</p>
<p>但是我们编写的子类中并没有<code>onStartup</code>方法，所以会调用SpringBootServletInitializer的这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// Logger initialization is deferred in case an ordered</span></span><br><span class="line">    <span class="comment">// LogServletContextInitializer is being used</span></span><br><span class="line">    <span class="keyword">this</span>.logger = LogFactory.getLog(getClass());</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    WebApplicationContext rootAppContext = createRootApplicationContext(servletContext);</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建SpringBoot应用的构建器</span></span><br><span class="line">    SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">    builder.main(getClass());</span><br><span class="line">    ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">        builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">    &#125;</span><br><span class="line">    builder.initializers(<span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">    builder.contextClass(AnnotationConfigServletWebServerApplicationContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//此处调用了configure方法</span></span><br><span class="line">    <span class="comment">//子类重写了configure方法，在builder中传入了SpringBoot主程序类字节码</span></span><br><span class="line">    builder = configure(builder);</span><br><span class="line">    builder.listeners(<span class="keyword">new</span> WebEnvironmentPropertySourceInitializer(servletContext));</span><br><span class="line">    <span class="comment">//通过SpringBoot的构建器创建一个SpringBoot应用</span></span><br><span class="line">    SpringApplication application = builder.build();</span><br><span class="line">    <span class="keyword">if</span> (application.getAllSources().isEmpty()</span><br><span class="line">        &amp;&amp; MergedAnnotations.from(getClass(), SearchStrategy.TYPE_HIERARCHY).isPresent(Configuration<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        application.addPrimarySources(Collections.singleton(getClass()));</span><br><span class="line">    &#125;</span><br><span class="line">    Assert.state(!application.getAllSources().isEmpty(),</span><br><span class="line">                 <span class="string">"No SpringApplication sources have been defined. Either override the "</span></span><br><span class="line">                 + <span class="string">"configure method or add an @Configuration annotation"</span>);</span><br><span class="line">    <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">        application.addPrimarySources(Collections.singleton(ErrorPageFilterConfiguration<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    application.setRegisterShutdownHook(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">    <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时SpringBoot应用就启动了，并且创建了IoC容器</p>
</li>
</ol>
<p>这种方式会先启动Servlet容器，然后启动</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>SpringBoot Web开发</tag>
        <tag>SpringBoot核心技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/2020/10/10/Elasticsearch/</url>
    <content><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><p>ELK = Elasticsearch + Logstash + Kibanas</p>
<h2 id="Elasticsearch概述"><a href="#Elasticsearch概述" class="headerlink" title="Elasticsearch概述"></a>Elasticsearch概述</h2><p>&emsp;&emsp;Elasticsearch，简称es，是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时存储、检索数据</strong>；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据（大数据）。es也能使用Java开发并用Luence作为其核心来实现所有索引和搜索功能，它的目的是通过简单的RestFul API来隐藏Luence的复杂性，从而简化全文搜索。根据DB-Enignes的排名显示，Elasticsearch是<strong>最受欢迎</strong>的企业搜索引擎，其次是Appache Solr（也基于Lucene）。</p>
<h3 id="Elasticsearch历史"><a href="#Elasticsearch历史" class="headerlink" title="Elasticsearch历史"></a>Elasticsearch历史</h3><p>&emsp;&emsp;多年前，Shay Banon还是一个刚结婚不久的事业开发者，在找工作的过程中，他想为妻子开发了一个食谱的搜索引擎，于是他开始基于Luence进行开发，但是直接使用Luence开发太过于复杂，于是他就开始抽象Luence中的代码以便开发者可以在应用中快捷的添加搜索功能，于是，他发布了他的第一个开源项目<code>Compass</code>。</p>
<p>&emsp;&emsp;后来Shay Banon找到了一份处在高性能和内存数据网格分布式环境中的工作。因此，他便想到了，自己的项目同样需要高性能、分布式的特性。他重写了<code>Compass</code>使其成为一个独立的服务，这就是Elasticsearch。</p>
<h2 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a>Elasticsearch安装</h2><p>Elasticsearch需要<strong>JDK 1.8及以上版本</strong></p>
<h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p>下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
<p>在Windows和Linux下学习Elasticsearch都可以（Linux中解压即用）</p>
<h4 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h4><ol>
<li><p>下载windows版本的Elasticsearch，解压即可使用</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201011220521005.png" align="left"/>
</li>
<li><p>目录结构</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201011220614004.png" align="left"/>

<ul>
<li>bin：可执行文件</li>
<li>config：配置文件<ul>
<li><code>log4j2.properties</code>：日志配置文件</li>
<li><code>jvm.options</code>：可以根据主机的配置进行修改（默认会占用1G内存）</li>
<li><code>elasticsearch.yml</code>：Elasticsearch的配置文件，默认使用9200端口</li>
</ul>
</li>
<li>lib：相关jar包</li>
<li>logs：日志</li>
<li>moudules：功能模块</li>
<li>plugins：插件，例如ik分词器</li>
</ul>
</li>
<li><p>启动（运行<code>elasticsearch.bat</code>），访问主机的9200端口</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201011221758080.png" align="left"/>
</li>
<li><p>访问测试</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201011221555892.png" align="left"/>

</li>
</ol>
<h4 id="安装可视化界面-head插件"><a href="#安装可视化界面-head插件" class="headerlink" title="安装可视化界面-head插件"></a>安装可视化界面-head插件</h4><ol>
<li><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head/archive/master.zip" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head/archive/master.zip</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201011223310248.png" align="left"/>
</li>
<li><p>进入下载目录，安装head插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问9100端口即可</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201011225532108.png" align="left"/>
</li>
<li><p>解决跨域问题：在<code>elasticsearch.yml</code>中添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>

<p>然后重新启动elasticsearch即可</p>
<p><strong>索引</strong>：在初学阶段，可以把Elasticsearch中的索引当作一个数据库（type在7.x版本中已经弃用）</p>
<p><strong>文档</strong>：索引中的数据</p>
</li>
<li><p>head插件就是一个数据展示插件，不建议在这里建立查询，建议在kibana中完成</p>
</li>
</ol>
<h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h2><h3 id="了解ELK"><a href="#了解ELK" class="headerlink" title="了解ELK"></a>了解ELK</h3><p>ELK是Elasticsearch、Logstash、Kibana三大开源框架首字母，也被成为Elastic Stack。其中Elasticsearch是一个基于Lucene、分布式、通过RestFul方式进行交互的接近实时搜索的搜索平台框架。想谷歌、百度这种大数据全文搜索引擎中都可以使用Elasticsearch作为底层支持框架。Logstash是ELK的中央数据引擎，用于从不同目标（文件/数据存储/MQ）收集不同格式的数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/Elasticsearch/kafka等）。Kibana可以将Elasticsearch的数据通过友好的页面展示出来，提供实时分析功能。</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012102925034.png" align="left"/>

<ul>
<li>Logstash：收集过滤数据</li>
<li>Elasticsearch：存储、搜索</li>
<li>Kibana：展示、分析</li>
</ul>
<p>ELK不仅仅适用于日志分析，它还可以支持其他任何数据分析和手机的场景，只是日志分析和收集更具有代表性</p>
<h3 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h3><p>&emsp;&emsp;Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。</p>
<p>&emsp;&emsp;Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。</p>
<p>&emsp;&emsp;设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><strong>Kibana官网</strong>：<a href="https://www.elastic.co/cn/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/kibana</a></p>
<p><strong>注意</strong>：下载的Kibana版本要与Elasticsearch版本一致！</p>
<p><strong>下载地址</strong>：<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a></p>
<p>解压后的目录：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012104857631.png" align="left"/>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>运行bin目录下的<code>kibana.bat</code></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012105246110.png" align="left"/>

<h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>访问<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a></p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012105651932.png" align="left"/>

<h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>在左侧菜单的Management中找到Dev Tools</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012110011907.png" align="left"/>

<p>之后的所有操作都在这里进行编写</p>
<h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p>在config目录下找到<code>kibana.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">i18n.locale:</span> <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>

<p>重启Kibana</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012145206319.png" align="left"/>



<h2 id="Elasticsearch核心概念"><a href="#Elasticsearch核心概念" class="headerlink" title="Elasticsearch核心概念"></a>Elasticsearch核心概念</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在学习如何使用Elasticsearch之前，需要先了解Elasticsearch的核心概念，了解什么是<strong>集群、节点、索引、类型、文档、分片以及映射</strong></p>
<p>Elasticsearch是<strong>面向文档</strong>，下面是es和关系型数据库的对比</p>
<table>
<thead>
<tr>
<th>关系型数据库</th>
<th>Elasticsearch</th>
</tr>
</thead>
<tbody><tr>
<td>数据库（database）</td>
<td>索引（index）</td>
</tr>
<tr>
<td>表（table）</td>
<td>type（慢慢会被弃用）</td>
</tr>
<tr>
<td>行（rows，记录）</td>
<td>文档（document）</td>
</tr>
<tr>
<td>字段（column）</td>
<td>field</td>
</tr>
</tbody></table>
<p>elasticsearch（集群）中可以包含多个索引（数据库），每个索引中可以包含多个类型（表），每个类型又可以包含多个文档（行），每个文档中又可以包含多个字段（列）</p>
<p><strong>物理设计</strong></p>
<p>elasticsearch在后台把每个索引<strong>划分成多个分片</strong>，每个分片可以在集群中的不同服务器之间迁移</p>
<p>默认的集群名称为elasticsearch</p>
<p><strong>逻辑设计</strong></p>
<p>一个索引类型中，包含多个文档。当我们搜索一篇文档时，可以按照：索引&rightarrow;类型&rightarrow;文档ID，来索引到某个具体的文档。</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>elasticsearch是面向文档的，所以在索引和搜索数据时的最小单位就是文档。</p>
<p>在elasticsearch中，文档有如下特性：</p>
<ul>
<li>一篇文档同时包含字段和对应的值（key:value）</li>
<li>可以是层次型的（就是一个json对象，在Java中可以使用fastjson或者jackson来快速转换）</li>
<li>灵活的结构（文档就是json，所以很灵活，可以快速添加或者删除某些字段）</li>
</ul>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>类型就是字段是何种类型，例如一个名为name的字段或者age字段，如果不设置类型，elasticsearch会去猜测其类型，所以比较安全的方式就是提前定义好所需要的映射（和数据库类似）</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是映射类型的容器，elasticsearch中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上。</p>
<p><strong>分片是如何工作的？</strong></p>
<p>一个集群至少有一个节点，而一个节点就是一个elasticsearch进程，节点可以有多个索引。默认情况下，创建索引会有5个分片（primary shard，主分片）构成，每个主分片都会有一个副本（replica shard，复制分片），如下图所示</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012170312596.png" align="left"/>

<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012170211664.png" align="left"/>

<p>如上图所示，这是一个有三个节点的集群，主分片和复制分片不在同一个节点上，这样即便某个节点出现了问题，数据仍然不会丢失。一个分片实际上就是一个Lucene索引（一个包含<strong>倒排索引</strong>的文件目录）</p>
<h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>这部分内容参考自：<a href="https://zhuanlan.zhihu.com/p/76485252" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/76485252</a></p>
<p>这里的索引不是Elasticsearch中的索引，而是Lucene中的索引</p>
<p><strong>为什么叫倒排索引？</strong></p>
<p>索引的目的就是为了快速搜索，在没有使用搜索引擎时，如果想要查找包含某个单词的文档时，就会从文档中不断查找，也就是：</p>
<p>document&rightarrow;words</p>
<p>通过文章来获取其中的单词，这就是正向索引，forward index</p>
<p>有了正向索引，倒排索引也就不难猜测了，就是：</p>
<p>words&rightarrow;document</p>
<p>也就是根据单词查找文档，这就是倒排索引，inverted index，或者翻译成<strong>反向索引</strong>更好</p>
<p>那么为什么Lucene使用的是倒排索引而不是正向索引？</p>
<p>原因很简单，正向索引需要加载所有的文档，然后查找有没有指定的关键字，互联网上那么多文档，这种方式效率实在太低</p>
<h4 id="倒排索引的数据结构"><a href="#倒排索引的数据结构" class="headerlink" title="倒排索引的数据结构"></a>倒排索引的数据结构</h4><p>在处理文档数据时会生成倒排索引，会将文档拆分成很多单词（这里不讲解如何拆分单词），然后记录每一个单词和它对应的文档id记录下来</p>
<p>文档1（文档id为1）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world java</span><br></pre></td></tr></table></figure>

<p>其对应的索引就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello	1</span><br><span class="line">world	1</span><br><span class="line">java	1</span><br></pre></td></tr></table></figure>

<p>文档2（文档id为2）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world python</span><br></pre></td></tr></table></figure>

<p>处理文档2之后，索引为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello	1,2</span><br><span class="line">world	1,2</span><br><span class="line">java	1</span><br><span class="line">python	1</span><br></pre></td></tr></table></figure>

<p>根据这个索引，搜索hello会返回文档1和文档2；搜索java会返回文档1。</p>
<p>但是很明显，上面这样的索引实现还远远不够。世界上有那么多单词，中文、英文、日文、韩文等等，每次找到对应的单词就要花费很长时间。这个好解决，可以对这些单词进行排序，就像B+树一样，然后使用二分查找。</p>
<p>排序了就能够解决了吗？还是不行，单词都存放在磁盘中，磁盘IO读取也太慢了。那像MySQL一样建立索引可不可以呢？索引需要放在内存中，服务器一般才多大点内存，建立那么多索引，内存也不够用啊。想想我们小时候使用字典的时候是怎么快速找到需要的单词的？</p>
<p>如图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012191301014.png" align="left"/>

<p>Lucene的倒排索引，在最左侧添加了一层字典树（term index），它不存储所有的单词，只存储单词的前缀，通过字典树找到单词所在的块（单词大概所处的位置），然后在块里进行二分查找，找到对应的单词，再找到单词对应的文档列表。</p>
<p>为了更加节省内存，Lucene还是用了FST（Finite State Transducer）进一步压缩。</p>
<p>最右侧的是Posting List是term所对应的文档id，一个单词可能会在很多文档中出现。</p>
<p><strong>Frame Of Reference</strong></p>
<p>原生的Posting List有以下两个需要解决的问题：</p>
<ul>
<li>如何压缩来节省磁盘空间</li>
<li>如何快速求交并集（intersections and unions）</li>
</ul>
<p>首先来谈谈如何压缩数据？</p>
<p>在Lucene中，数据是按片（Segment）存储的，每一个Segment最多存储65536个文档ID，所以文档ID的返回就是0~2^16-1，如果不进行处理，每一个文档ID都会占用2字节，对于如下文档ID的数组：</p>
<p>[73, 300, 302, 332, 343, 372]</p>
<p>就需要6x2=12字节，这毫无疑问也是非常占用空间的</p>
<p>那么应该如何进行压缩？</p>
<p><strong>压缩就是尽可能减少每个数据所占用的空间，同时保证信息不会失真，能够还原回来</strong></p>
<p><strong>步骤一</strong>：Delta-encode—增量编码</p>
<p>只记录元素与元素之间的增量，于是数组变成了：</p>
<p>[73, 227, 2, 30, 11, 29]</p>
<p><strong>步骤二</strong>：Split into blocks—分割成块</p>
<p>Lucene中每个块是256个文档ID，这样可以保证，每个块，增量编码之后，每个元素都不会超过256（1字节)</p>
<p>为了方便演示，假设每个块是3个文档ID</p>
<p>[73, 227, 2], [30, 11, 29]</p>
<p><strong>步骤三</strong>：Bit packing—按需分配空间</p>
<p>对于第一个块，最大元素是227，需要8 bit，那就给每个元素分配8bit的空间</p>
<p>对于第二个块，最大元素是30，需要5bit，那就给每个元素分配5bit的空间</p>
<p>以上三个步骤共同组成了一项编码技术，Frame Of Reference（FOR）</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012194838637.png" align="left"/>





<p><strong>Roaring bitmaps</strong></p>
<p>接下来就是如何快速求交并集的问题：</p>
<p>假设有下面三个数组：</p>
<p>[64, 300, 303, 343]</p>
<p>[73, 300, 302, 303, 343, 372]</p>
<p>[303, 311, 333, 343]</p>
<p>求它们的交集。</p>
<p><strong>Option 1: Integer 数组</strong></p>
<p>直接用原始的文档 ID ，可能你会说，那就逐个数组遍历一遍吧，遍历完就知道交集是什么了。</p>
<p>其实对于有序的数组，用跳表（skip table）可以更高效，这里就不展开了，因为不管是从性能，还是空间上考虑，Integer 数组都不靠谱，假设有100M 个文档 ID，每个文档 ID 占 2 bytes，那已经是 200 MB，而这些数据是要放到内存中进行处理的，把这么大量的数据，从磁盘解压后丢到内存，内存肯定撑不住。</p>
<p><strong>Option 2: Bitmap</strong></p>
<p>假设有这样一个数组：</p>
<p>[3,6,7,10]</p>
<p>那么我们可以这样来表示：</p>
<p>[0,0,1,0,0,1,1,0,0,1]</p>
<p>看出来了么，对，<strong>我们用 0 表示角标对应的数字不存在，用 1 表示存在。</strong></p>
<p>这样带来了两个好处：</p>
<ul>
<li>节省空间：既然我们只需要0和1，那每个文档 ID 就只需要 1 bit，还是假设有 100M 个文档，那只需要 100M bits = 100M * 1/8 bytes = 12.5 MB，比之前用 Integer 数组 的 200 MB，优秀太多</li>
<li>运算更快：0 和 1，天然就适合进行位运算，求交集，「与」一下，求并集，「或」一下，一切都回归到计算机的起点</li>
</ul>
<p><strong>Option 3: Roaring Bitmaps</strong></p>
<p>细心的你可能发现了，bitmap 有个硬伤，就是不管你有多少个文档，你占用的空间都是一样的，之前说过，Lucene Posting List 的每个 Segement 最多放 65536 个文档ID，举一个极端的例子，有一个数组，里面只有两个文档 ID：</p>
<p>[0, 65535]</p>
<p>用 Bitmap，要怎么表示？</p>
<p>[1,0,0,0,….(超级多个0),…,0,0,1]</p>
<p>你需要 65536 个 bit，也就是 65536/8 = 8192 bytes，而用 Integer 数组，你只需要 2 * 2 bytes = 4 bytes</p>
<p>呵呵，死板的 bitmap。可见在文档数量不多的时候，使用 Integer 数组更加节省内存。</p>
<p>我们来算一下临界值，很简单，无论文档数量多少，bitmap都需要 8192 bytes，而 Integer 数组则和文档数量成线性相关，每个文档 ID 占 2 bytes，所以：</p>
<p>8192 / 2 = 4096</p>
<p>当文档数量少于 4096 时，用 Integer 数组，否则，用 bitmap.</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012195612546.png" align="left"/>

<blockquote>
<p>这里补充一下 Roaring bitmaps 和 之前讲的 Frame Of Reference 的关系。<br>Frame Of Reference 是压缩数据，减少磁盘占用空间，所以当我们从磁盘取数据时，也需要一个反向的过程，即解压，解压后才有我们上面看到的这样子的文档ID数组：[73, 300, 302, 303, 343, 372] ，接着我们需要对数据进行处理，求交集或者并集，这时候数据是需要放到内存进行处理的，我们有三个这样的数组，这些数组可能很大，而内存空间比磁盘还宝贵，于是需要更强有力的压缩算法，同时还要有利于快速的求交并集，于是有了Roaring Bitmaps 算法。<br>另外，Lucene 还会把从磁盘取出来的数据，通过 Roaring bitmaps 处理后，缓存到内存中，Lucene 称之为 filter cache.</p>
</blockquote>
<h2 id="IK分词器插件"><a href="#IK分词器插件" class="headerlink" title="IK分词器插件"></a>IK分词器插件</h2><p><strong>分词</strong>：就是把中文或者其他文字划分成为一个个的关键字。例如：我是大聪明，默认会被划分为“我“、”是“、”大“、”聪“、”明“，毫无疑问这是不符合分词的要求的（比如是这个词在中文中出现的频率很高，不应该所谓关键词），所以需要安装中文分词器来解决这个问题，中文分词器建议使用ik分词器。</p>
<p>IK分词器提供了两个分词算法：ik_smart和ik_max_word，其中ik_smart为最少切分；而ik_max_word为最细粒度划分。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在GitHub中搜索elasticsearch ik，然后下载zip压缩包</p>
<p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/archive/master.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/archive/master.zip</a></p>
<p>下载完毕之后，放入elasticsearch的plugin目录下的ik目录下即可</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012202419910.png" align="left"/>

<p>然后重启elasticsearch</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012202812118.png" align="left"/>

<p>可以看到ik分词器插件被加载了</p>
<p>也可以使用<code>elasticsearch-plugin list</code>命令来查询</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012203204360.png" align="left"/>

<p>最后使用kibana的dev tool进行测试</p>
<p><strong>使用ik_smart</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012203832175.png" alt="image-20201012203832175"></p>
<p><strong>使用ik_max_word</strong></p>
<p>穷尽所有词库的可能（字典中所有的词）</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012203916872.png" alt="image-20201012203916872"></p>
<p><strong>问题</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012204346354.png" alt="image-20201012204346354"></p>
<p>可以看到，当对<code>超级喜欢龙傲天</code>进行分词时，龙傲天被分成了三个词，这是因为字典中没有龙傲天这个词，所以我们需要将龙傲天加入到分词器字典中</p>
<h3 id="ik分词器增加自己的配置"><a href="#ik分词器增加自己的配置" class="headerlink" title="ik分词器增加自己的配置"></a>ik分词器增加自己的配置</h3><ol>
<li><p>编写自己的字典<code>long.dic</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">龙傲天</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置到配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>long.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_stopwords"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;entry key="remote_ext_dict"&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;entry key="remote_ext_stopwords"&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启elasticsearch</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012210416640.png" alt="image-20201012210416640"></p>
</li>
<li><p>使用kibana进行测试</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201012210536996.png" alt="image-20201012210536996"></p>
<p>此时，龙傲天就成为一个词了！</p>
</li>
</ol>
<h2 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h2><p>基本Rest命令说明：</p>
<table>
<thead>
<tr>
<th>method</th>
<th>url地址</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>PUT</td>
<td>localhost:9200/索引名称/类型名称/文档id</td>
<td>创建文档（指定文档id）</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称</td>
<td>创建文档（随机文档id）</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称/文档id/_update</td>
<td>修改文档</td>
</tr>
<tr>
<td>DELETE</td>
<td>localhost:9200/索引名称/类型名称/文档id</td>
<td>删除文档</td>
</tr>
<tr>
<td>GET</td>
<td>localhost:9200/索引名称/类型名称/文档id</td>
<td>通过文档id查询文档</td>
</tr>
<tr>
<td>POST</td>
<td>localhost:9200/索引名称/类型名称/_search</td>
<td>查询所有数据</td>
</tr>
</tbody></table>
<p>Elasticsearch的rest API有很多内容，具体如何使用可以参考官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/rest-apis.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/rest-apis.html</a></p>
<h3 id="关于索引的基本操作"><a href="#关于索引的基本操作" class="headerlink" title="关于索引的基本操作"></a>关于索引的基本操作</h3><h4 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h4><p><strong>1、创建一个索引</strong></p>
<p><strong>格式</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;索引名&#x2F;类型名&#x2F;文档id</span><br><span class="line">&#123;</span><br><span class="line">	请求体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013161529244.png" alt="image-20201013161529244"></p>
<p>可以看到提示中说，不推荐使用type，可以使用<code>PUT /索引名称/_doc/文档id</code>或者<code>PUT /索引名称/_create/文档id</code></p>
<p>这样就完成了index的创建，可以启动head插件，访问<a href="http://localhost:9100查看索引的数据">http://localhost:9100查看索引的数据</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013161747709.png" alt="image-20201013161747709"></p>
<p><strong>2、指定字段的类型</strong></p>
<ul>
<li>字符串类型<ul>
<li>text</li>
<li>keyword</li>
</ul>
</li>
<li>数值类型<ul>
<li>long、integer、short、byte、double、float、half、scaled、float</li>
</ul>
</li>
<li>日期类型<ul>
<li>date</li>
</ul>
</li>
<li>布尔类型<ul>
<li>boolean</li>
</ul>
</li>
<li>二进制类型<ul>
<li>binary</li>
</ul>
</li>
<li>等等</li>
</ul>
<p>具体有哪些类型可以参考官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/mapping-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.9/mapping-types.html</a></p>
<p><em>使用示例</em></p>
<p>设置创建索引的规则</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013163211769.png" alt="image-20201013163211769"></p>
<p>获取索引的规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013163752567.png" alt="image-20201013163752567"></p>
<p><strong>3、查看默认的信息</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013165702888.png" alt="image-20201013165702888"></p>
<p>查询索引信息</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013165815006.png" alt="image-20201013165815006"></p>
<p>可以看到，即便没有给出字段的类型，elasticsearch也会有默认配置字段的类型</p>
<p><strong>扩展：通过命令获取elasticsearch索引的情况</strong></p>
<p>通过<code>_cat</code>命令可以获得ES当前的很多信息（索引、健康值等等）</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013170357488.png" alt="image-20201013170357488"></p>
<h4 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h4><p><strong>以前的方式</strong></p>
<p>修改还是使用PUT即可，覆盖相关的配置即可！</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013183324141.png" alt="image-20201013183324141"></p>
<p>将name的值修改为<code>赵子龙</code>，然后使用head插件查看修改后的结果</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013183419013.png" alt="image-20201013183419013"></p>
<p><strong>现在的方式</strong></p>
<p>使用PUT来更新索引信息有一个弊端，那就是修改信息时需要提供所有的信息，不能单独更新某一个字段的数据</p>
<p>所以POST方式来更新索引</p>
<p><code>POST /索引名称/_update/文档id</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013185709872.png" alt="image-20201013185709872"></p>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p><code>DELETE 索引名称</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013200639895.png" alt="image-20201013200639895"></p>
<p>删除文档：<code>DELETE /索引名称/_doc/文档id</code></p>
<h3 id="关于文档的基本操作（重点）"><a href="#关于文档的基本操作（重点）" class="headerlink" title="关于文档的基本操作（重点）"></a>关于文档的基本操作（重点）</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013213004168.png" alt="image-20201013213004168"></p>
<p>查看索引中的数据</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013213028313.png" alt="image-20201013213028313"></p>
<h5 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h5><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013213237916.png" alt="image-20201013213237916"></p>
<h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013214035348.png" alt="image-20201013214035348"></p>
<p>推荐使用POST进行更新：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013214328807.png" alt="image-20201013214328807"></p>
<h5 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h5><p><strong>通过id查询</strong></p>
<p><code>GET /索引名/_doc/文档id</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013214721452.png" alt="image-20201013214721452"></p>
<p><strong>条件查询</strong></p>
<p><code>GET /索引名/_search?p=查询条件</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201013220129737.png" alt="image-20201013220129737"></p>
<h4 id="复杂查询操作"><a href="#复杂查询操作" class="headerlink" title="复杂查询操作"></a>复杂查询操作</h4><p>了解过SQL的都知道，查询可不会这么简单，还有排序、分页、模糊查询、精确查询等等</p>
<p>Elasticsearch是一搜索引擎，那么毫无疑问，对于一个搜索引擎来说，最重要的是查询操作。所以这部分内容非常重要！</p>
<h2 id="集成Spring-Boot"><a href="#集成Spring-Boot" class="headerlink" title="集成Spring Boot"></a>集成Spring Boot</h2><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><h3 id="搜索高亮"><a href="#搜索高亮" class="headerlink" title="搜索高亮"></a>搜索高亮</h3>]]></content>
      <categories>
        <category>中间件</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/10/07/Redis/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="NoSQL入门和概述"><a href="#NoSQL入门和概述" class="headerlink" title="NoSQL入门和概述"></a>NoSQL入门和概述</h2><h2 id="Redis入门介绍"><a href="#Redis入门介绍" class="headerlink" title="Redis入门介绍"></a>Redis入门介绍</h2><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><h2 id="解析配置文件redis-conf"><a href="#解析配置文件redis-conf" class="headerlink" title="解析配置文件redis.conf"></a>解析配置文件<code>redis.conf</code></h2><h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><h2 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h2><h2 id="Redis的发布订阅"><a href="#Redis的发布订阅" class="headerlink" title="Redis的发布订阅"></a>Redis的发布订阅</h2><h2 id="Redis的复制（Master-Stave）"><a href="#Redis的复制（Master-Stave）" class="headerlink" title="Redis的复制（Master/Stave）"></a>Redis的复制（Master/Stave）</h2><h2 id="Redis的Java客户端Jedis"><a href="#Redis的Java客户端Jedis" class="headerlink" title="Redis的Java客户端Jedis"></a>Redis的Java客户端Jedis</h2>]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/10/22/Linux/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>这里不是讲解运维级别的Linux，而是基于Java全栈开发的Linux</p>
<p><strong>注意</strong>：这里的Linux是基于CentOS 7的（不同版本的CentOS命令是有所区别的），这部分的内容十分重要，必须掌握！</p>
<p><strong>学习方式</strong>：</p>
<ol>
<li>认使Linux</li>
<li>基本的命令（重点（文件操作、目录管理、文件属性、Vim编辑器、账号管理、磁盘管理）)</li>
<li>软件的安装和部署（Java、Tomcat、docker</li>
</ol>
<p>Linux中一切皆文件</p>
<h2 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h2><h3 id="为什么要学习Linux"><a href="#为什么要学习Linux" class="headerlink" title="为什么要学习Linux"></a>为什么要学习Linux</h3><p>&emsp;&emsp;很多项目都是部署在Linux服务器上的，在服务端，Linux越来越受欢迎了。很多岗位都需要会基础的Linux的使用。所以说，无论是为了找工作，还是作为一个开发人员来提升自己的专业技能，Linux都是必须学习的！</p>
<h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><p>&emsp;&emsp;Linux内核最初是由芬兰人Linus Torvalds在上大学时处于个人爱好而编写的，Linux就是Linus‘s Unix的简称，这也是它的名字的由来。</p>
<p>&emsp;&emsp;Linux是一套免费使用和自由传播的Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。</p>
<p>&emsp;&emsp;Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix<strong>以网络为核心</strong>的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<h3 id="Linux发行版"><a href="#Linux发行版" class="headerlink" title="Linux发行版"></a>Linux发行版</h3><p>&emsp;&emsp;Linux的发行版说简单点就是将Linux内核与应用软件做一个打包。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022135917690.png" alt="image-20201022135917690"></p>
<p>市面上比较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS等</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022140732010.png" alt="image-20201022140732010"></p>
<h3 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h3><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p>
<p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p>
<ul>
<li>巴西联邦政府由于支持 Linux 而世界闻名。</li>
<li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li>
<li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li>
<li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li>
<li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li>
<li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li>
<li>法国和德国同样开始逐步采用 Linux。</li>
</ul>
<h3 id="Linux-vs-Windows"><a href="#Linux-vs-Windows" class="headerlink" title="Linux vs Windows"></a>Linux vs Windows</h3><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p>
<table>
<thead>
<tr>
<th align="left">比较</th>
<th align="left">Windows</th>
<th align="left">Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">界面</td>
<td align="left">界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同</td>
<td align="left">图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 UNIX 传承下来，基本命令和操作方法也几乎一致。</td>
</tr>
<tr>
<td align="left">驱动程序</td>
<td align="left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。</td>
<td align="left">由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td>
</tr>
<tr>
<td align="left">使用</td>
<td align="left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td>
<td align="left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td>
</tr>
<tr>
<td align="left">学习</td>
<td align="left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td>
<td align="left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td>
</tr>
<tr>
<td align="left">软件</td>
<td align="left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td>
<td align="left">大部分软件都可以自由获取，同样功能的软件选择较少。</td>
</tr>
</tbody></table>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="虚拟机安装CentOS（不推荐）"><a href="#虚拟机安装CentOS（不推荐）" class="headerlink" title="虚拟机安装CentOS（不推荐）"></a>虚拟机安装CentOS（不推荐）</h3><p>1、下载或者制作CentOS镜像</p>
<p>2、安装虚拟机软件（VMWare或者Virtual Box），打开镜像文件</p>
<p>具体步骤参考地址：<a href="https://www.runoob.com/linux/linux-install.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-install.html</a></p>
<h3 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h3><p>虚拟机安装在自己的电脑上不是很方便，会占用内存和存储空间。所以购买一台云服务器是一种更好的选择，也更加接近真实的线上工作。</p>
<p>1、购买阿里云服务器：<a href="https://developer.aliyun.com/plan/grow-up（有活动的时候，云服务器的价格也不是很贵，有条件的话就尽量使用云服务器）" target="_blank" rel="noopener">https://developer.aliyun.com/plan/grow-up（有活动的时候，云服务器的价格也不是很贵，有条件的话就尽量使用云服务器）</a></p>
<p>2、购买完毕后，获取服务器的ip地址，重置服务器密码（阿里云默认已经开放了一些端口，端口开放可以在安全组中进行设置）</p>
<p>3、使用XShell连接购买的阿里云服务器</p>
<h2 id="走近Linux系统"><a href="#走近Linux系统" class="headerlink" title="走近Linux系统"></a>走近Linux系统</h2><h3 id="开机登录"><a href="#开机登录" class="headerlink" title="开机登录"></a>开机登录</h3><p>开机会启动许多程序。它们在Windows叫做“服务”（service），在Linux就叫做“守护进程”（daemon）。</p>
<p>开机成功后 ，会显示一个文本登录界面，这个界面是一个文本界面。在界面中输入用户名和密码即可登录。</p>
<p>一般来说，用户的登录方式有三种：</p>
<ul>
<li>命令行登录</li>
<li>ssh登录</li>
<li>图形界面登录</li>
</ul>
<p>最高权限用户的用户名为root，有所有的权限！</p>
<h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><p>linux一般用做服务器上，服务器是很少会有关机操作的。除非特殊情况，一般来说服务器是不会关机的。</p>
<p>关机指令为：<code>shutdown</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync #将数据由内存同步到硬盘中</span><br><span class="line"></span><br><span class="line">shutdown #关机指令，可以使用man shutdown来查看帮助文档，如下：</span><br><span class="line"></span><br><span class="line">shutdown -h 10 #在10分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown -h now #立马关机</span><br><span class="line"></span><br><span class="line">shutdown -h 18:00 #在今天18:00关机</span><br><span class="line"></span><br><span class="line">shutdown -h +10 #十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown -r now #系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown -r +10 #系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot #立刻重启，相当于shutdown -r now</span><br><span class="line"></span><br><span class="line">halt #关闭系统，等同于shutdown -h now 和 poweroff</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>：无论是重启系统还是关闭系统，首先要运行<code>sync</code>命令，把内存中的数据写到磁盘中</p>
<p><strong>Tips</strong>：Linux中没有错误就代表操作成功！</p>
<h3 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h3><ul>
<li>一切皆文件</li>
<li>根目录是<code>/</code>，所有文件都挂载在这个节点下</li>
</ul>
<p>登录之后，在当前命令窗口下输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022191517420.png" alt="image-20201022191517420"></p>
<p>下面是对这些目录的说明：</p>
<ul>
<li><code>/bin</code>：bin是Binary的缩写，这个目录存放着最经常使用的命令</li>
<li><code>/boot</code>：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件及镜像文件（不要动）</li>
<li><code>/dev</code>：dev是Device（设备）的缩写，存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的</li>
<li><font color="red"><code>/etc</code>：这个目录用来存放所有的系统管理所需要的<strong>配置文件</strong>和子目录</font></li>
<li><font color="red"><code>/home</code>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</font></li>
<li><code>/lib</code>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件（不要动）</li>
<li><code>/lost+found</code>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件（存放突然关机的一些文件）</li>
<li><code>/media</code>：Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux会把识别的设备挂在到这个目录下</li>
<li><code>/mnt</code>：系统提供了该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在<code>/mnt</code>上，然后进入该目录就可以查看光驱里的内容了（后面会把一些本地的文件挂载在这里）</li>
<li><font color="red"><code>/opt</code>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</font></li>
<li><code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息（不用管）</li>
<li><font color="red"><code>/root</code>：该目录为系统管理员，也称作超级权限者的用户主目录</font></li>
<li><code>/sbin</code>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</li>
<li><code>/srv</code>：该目录存放一些服务启动之后需要提取的数据</li>
<li><code>/sys</code>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</li>
<li><strong><code>/tmp</code>：这个目录是用来存放一些临时文件的</strong></li>
<li><font color="red"><code>/usr</code>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows中的program files目录</font></li>
<li><code>/user/bin</code>：系统用户使用的应用程序</li>
<li><code>/run</code>：一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</li>
<li><strong><code>/www</code>：存放服务器网站相关的资源、环境、网站的项目</strong></li>
</ul>
<h2 id="常用的基本命令"><a href="#常用的基本命令" class="headerlink" title="常用的基本命令"></a>常用的基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><h4 id="ls命令（列出目录）"><a href="#ls命令（列出目录）" class="headerlink" title="ls命令（列出目录）"></a>ls命令（列出目录）</h4><p>ls命令：列出目录</p>
<p><strong>可用参数</strong></p>
<ul>
<li><code>-a</code>：all，查看全部的文件，包括隐藏文件</li>
<li><code>-l</code>：列出所有的文件，包含文件的属性和权限，没有隐藏文件</li>
</ul>
<h4 id="cd命令（切换目录）"><a href="#cd命令（切换目录）" class="headerlink" title="cd命令（切换目录）"></a>cd命令（切换目录）</h4><p>cd命令：切换目录的命令</p>
<p><strong>可用参数</strong>：</p>
<ul>
<li><p><code>目录名</code>：可以是绝对路径，也可以是相对路径</p>
</li>
<li><p><code>/</code>：表示根目录</p>
</li>
<li><p><code>./</code>：表示当前目录</p>
</li>
<li><p><code>..</code>：表示上级目录</p>
</li>
<li><p><code>~</code>：root用户相当于<code>/root</code>，普通用户相当于<code>/home/当前用户名</code></p>
</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022215427843.png" alt="image-20201022215427843"></p>
<h4 id="pwd命令（显示当前目录）"><a href="#pwd命令（显示当前目录）" class="headerlink" title="pwd命令（显示当前目录）"></a>pwd命令（显示当前目录）</h4><p><strong>作用</strong>：显示当前用户所在的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zxwsaliyun /]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">[root@zxwsaliyun /]<span class="comment"># cd root</span></span><br><span class="line">[root@zxwsaliyun ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@zxwsaliyun ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h4 id="mkdir命令（创建目录）"><a href="#mkdir命令（创建目录）" class="headerlink" title="mkdir命令（创建目录）"></a>mkdir命令（创建目录）</h4><p><strong>作用</strong>：创建一个目录</p>
<p><strong>创建一个空目录：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir test1</span><br></pre></td></tr></table></figure>

<p><strong>递归创建一个目录</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p test2/test3/test4</span><br></pre></td></tr></table></figure>



<h4 id="rmdir命令（删除目录）"><a href="#rmdir命令（删除目录）" class="headerlink" title="rmdir命令（删除目录）"></a>rmdir命令（删除目录）</h4><p><strong>删除一个空目录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除test1目录</span></span><br><span class="line">rmdir test1</span><br></pre></td></tr></table></figure>

<p><strong>递归删除一个非空的目录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除test2目录</span></span><br><span class="line">rmdir -p test2/test3/test4</span><br></pre></td></tr></table></figure>



<h4 id="cp命令（复制文件或者目录）"><a href="#cp命令（复制文件或者目录）" class="headerlink" title="cp命令（复制文件或者目录）"></a>cp命令（复制文件或者目录）</h4><p>格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp 要复制的文件 目标位置</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将当前目录的install.sh文件复制到当前目录下的zxw目录中</span></span><br><span class="line">cp install.sh zxw</span><br></pre></td></tr></table></figure>

<p>如果目标位置已经存在了同名文件，则会提示是否覆盖该文件！</p>
<h4 id="rm命令（移除文件或者目录）"><a href="#rm命令（移除文件或者目录）" class="headerlink" title="rm命令（移除文件或者目录）"></a>rm命令（移除文件或者目录）</h4><p><strong>参数</strong>：</p>
<ul>
<li><code>-f</code>：忽略不存在的文件，不会出现警告，也就是强制删除</li>
<li><code>-r</code>：递归删除文件或者目录</li>
<li><code>-i</code>：询问是否删除</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#linux中最危险的命令，删除根目录中的所有内容</span></span><br><span class="line">rm -rf /</span><br></pre></td></tr></table></figure>



<h4 id="mv命令（移动、重命名文件或者目录）"><a href="#mv命令（移动、重命名文件或者目录）" class="headerlink" title="mv命令（移动、重命名文件或者目录）"></a>mv命令（移动、重命名文件或者目录）</h4><p>Linux mv（英文全拼：move file）命令用来为文件或目录改名、或将文件或目录移入其它位置。</p>
<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv [options] <span class="built_in">source</span> dest</span><br><span class="line">mv [options] <span class="built_in">source</span>... directory</span><br></pre></td></tr></table></figure>



<p><strong>参数</strong>：</p>
<ul>
<li><code>-f</code>：强制移动</li>
<li><code>-u</code>：当源文件比目标文件新或者目标文件不存在时，才执行移动操作</li>
<li><code>-b</code>：当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份</li>
<li><code>-i</code>：询问是否覆盖已存在的同名文件或目录</li>
<li><code>-n</code>：不覆盖任何已存在的文件或目录</li>
</ul>
<p><strong>mv参数设置与运行结果</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023190523530.png" alt="image-20201023190523530"></p>
<h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p>
<p>为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
<p>在Linux中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p>
<ul>
<li><code>chown</code>（change ownerp）：修改所属用户与组</li>
<li><code>chmod</code>（change mode）：修改用户的权限</li>
</ul>
<p>在Linux中我们可以使用<code>ll</code>或者<code>ls -l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023192830214.png" alt="image-20201023192830214"></p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p>
<ul>
<li><strong><code>d</code>：目录</strong></li>
<li><strong><code>-</code>：文件</strong></li>
<li><strong><code>l</code>：链接文档（link file）</strong></li>
<li><code>b</code>：装置文件里面的可供存储的接口设备（可随机存取装置）</li>
<li><code>c</code>：装置文件里面的串行端口设备，例如：键盘、鼠标（一次性读取装置）</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为<code>rwx</code>的三个参数的组合。</p>
<ul>
<li><code>r</code>：代表可读（read）</li>
<li><code>w</code>：代表可写（write）</li>
<li><code>x</code>：代表可执行（execute）</li>
</ul>
<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号<code>-</code>而已。</p>
<p>每个文件的属性由左边第一部分的10个字符来确定，如下图所示：</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023194619764.png" align="left"/>



<h4 id="文件属主和属组"><a href="#文件属主和属组" class="headerlink" title="文件属主和属组"></a>文件属主和属组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zxwsaliyun /]<span class="comment"># ls -l</span></span><br><span class="line">total 68</span><br><span class="line">lrwxrwxrwx.  1 root root     7 Sep 14 15:14 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5 root root  4096 Sep 14 15:28 boot</span><br><span class="line">drwxr-xr-x  19 root root  2960 Oct 22 19:02 dev</span><br><span class="line">drwxr-xr-x. 82 root root  4096 Oct 22 10:00 etc</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023200619664.png" alt="image-20201023200619664"></p>
<p><strong>属主</strong>：文件或目录所属于的用户</p>
<p><strong>属组</strong>：文件或目录所属用户所在的用户组</p>
<h4 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h4><h5 id="chgrp：更改文件属组"><a href="#chgrp：更改文件属组" class="headerlink" title="chgrp：更改文件属组"></a>chgrp：更改文件属组</h5><p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>

<p>参数选项：</p>
<ul>
<li><code>-R</code>：递归更改文件属组，就是在更改某个目录的属组时，如果加上<code>-R</code>的参数，那么该目录下的所有文件的属组都会更改。</li>
</ul>
<h5 id="chown：更改文件属主，也可以同时更改文件属组"><a href="#chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="chown：更改文件属主，也可以同时更改文件属组"></a>chown：更改文件属主，也可以同时更改文件属组</h5><p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名:属组名 文件名</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-R</code>：递归更改文件属主和属组</li>
</ul>
<h5 id="chmod：更改文件的9个属性（必须要掌握）"><a href="#chmod：更改文件的9个属性（必须要掌握）" class="headerlink" title="chmod：更改文件的9个属性（必须要掌握）"></a>chmod：更改文件的9个属性（必须要掌握）</h5><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p><strong>数字类型改变权限</strong></p>
<p>Linux文件的基本权限就有九个，分别是<code>owner</code>、<code>group</code>、<code>others</code>（属主、属组、其他）三种身份各有自己的read、write、execute权限。</p>
<p>我们可以使用数字来代表各个权限，各个权限的分数如下：</p>
<ul>
<li>r：4</li>
<li>w：2</li>
<li>x：1</li>
</ul>
<p>每种身份各自的三个权限分数是累加的，例如：<code>-rwxrwx—</code>的分数则是：</p>
<ul>
<li>owner = 4 + 2 + 1 = 7</li>
<li>group = 4 + 2 + 1 = 7</li>
<li>others = 0 + 0 + 0 = 0</li>
</ul>
<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li><code>xyz</code>：就是刚刚提到的数字类型的权限属性，为<code>rwx</code>属性数值的相加</li>
<li><code>-R</code>：递归操作</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 .bashrc</span><br></pre></td></tr></table></figure>



<p><strong>符号类型改变权限</strong></p>
<p>还有一个改变权限的方法：</p>
<ul>
<li><code>u</code>：user</li>
<li><code>g</code>：group</li>
<li><code>o</code>：others</li>
</ul>
<p>可以使用u、g、o代表三种身份的权限，此外<strong>a</strong>代表<strong>all</strong>，即全部的身份。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023203413721.png" alt="image-20201023203413721"></p>
<p>示例：</p>
<p>例如将文件权限设置为<code>-rwxr-xr–</code>来修改test1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改test1的权限</span></span><br><span class="line">chmod u=rwx,g=rx,o=r test1</span><br></pre></td></tr></table></figure>

<p>去除全部人的可执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod a-x test1</span><br></pre></td></tr></table></figure>



<h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li><p><strong><code>cat</code>：由第一行开始显示文件内容，用来读取文章、配置文件</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023222604695.png" alt="image-20201023222604695"></p>
</li>
<li><p><code>tac</code>：从最后一行开始显示，<code>tac</code>就是<code>cat</code>倒着写</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023222627093.png" alt="image-20201023222627093"></p>
</li>
<li><p><strong><code>nl</code>：显示的时候，会显示行号，看代码的时候经常使用</strong> </p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023222651299.png" alt="image-20201023222651299"></p>
</li>
<li><p><strong><code>more</code>：一页一页地显示文件内容（空格代表向下翻一行，enter代表向下看一行，<code>:f</code>可看到当前的行号）</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023223127216.png" alt="image-20201023223127216"></p>
</li>
<li><p><strong><code>less</code>：和<code>more</code>类似，但是比more更好的地方是，可以往前翻页！（空格翻页，上下键代表翻动页面，<code>q</code>退出）</strong></p>
<p><strong>查询字符串：</strong></p>
<ul>
<li><code>/字符</code>：向下查询指定字符</li>
<li><code>?字符</code>：向上查询指定字符</li>
<li><code>n</code>来搜索下一个</li>
<li><code>N</code>向上寻找</li>
</ul>
</li>
<li><p><code>head</code>：只看头几行，可以使用<code>-n</code>来指定要查看的行数</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023223942411.png" alt="image-20201023223942411"></p>
</li>
<li><p><code>tail</code>：只看尾部几行，<code>-n</code>指定要查看的行数</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023224146069.png" alt="image-20201023224146069"></p>
</li>
</ul>
<p>可以使用<code>man</code>命令来查看各个命令的使用文档，如<code>man cp</code></p>
<p>网络配置目录：<code>cd /etc/sysconfig/network-scripts</code>，下面标记了网络配置的配置文件</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201023222008125.png" alt="image-20201023222008125"></p>
<p>ifconfig命令查看网络</p>
<h3 id="拓展：Linux链接（了解"><a href="#拓展：Linux链接（了解" class="headerlink" title="拓展：Linux链接（了解)"></a>拓展：Linux链接（了解)</h3><p>Linux的链接分为两种：</p>
<ul>
<li><strong>硬链接</strong>：A—B，假设B是A的硬链接，那么A和B都指向同一个文件。硬链接是通过索引节点进行的链接。在Linux中，多个文件指向同一个索引节点是允许的，像这样的链接就是硬链接。硬链接只能在同一文件系统的文件之间进行链接，不能对目录进行创建。如果删除硬链接对应的源文件，则硬链接文件仍然存在，而且保存了原有的内容，这样可以起到防止误删文件的作用。由于硬链接是有着相同inode号仅文件名不同的文件。因此，删除一个硬链接文件并不影响其他有相同inode号的文件。</li>
<li><strong>软链接</strong>：又称符号链接，与硬链接不同，文件用户数据块中存放的内容是另一文件的路径名的指向。软链接就是一个普通文件，只是数据块内容有点特殊。软链接可对文件或目录创建。（就类似Windows中的快捷方式）</li>
</ul>
<h4 id="touch命令（创建文件）"><a href="#touch命令（创建文件）" class="headerlink" title="touch命令（创建文件）"></a>touch命令（创建文件）</h4><p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch 文件名</span><br></pre></td></tr></table></figure>



<h4 id="ln命令（创建链接"><a href="#ln命令（创建链接" class="headerlink" title="ln命令（创建链接)"></a>ln命令（创建链接)</h4><p><strong>创建硬链接语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln 源文件 硬链接文件名</span><br></pre></td></tr></table></figure>

<p><strong>创建软链接语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s 源文件 硬链接文件名</span><br></pre></td></tr></table></figure>

<p><strong>使用示例</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024090455149.png" alt="image-20201024090455149"></p>
<h4 id="echo命令（输入字符串）"><a href="#echo命令（输入字符串）" class="headerlink" title="echo命令（输入字符串）"></a>echo命令（输入字符串）</h4><p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"要输入的字符串"</span> &gt;&gt;目标文件</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024091223879.png" alt="image-20201024091223879"></p>
<p>可以看到在f1文件中写入了字符串之后，f2、f3都会发生变化</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024091726876.png" alt="image-20201024091726876"></p>
<p>删除f1之后，f2还是存在（删除f1只是删除了别名，实际上这个文件还是存在的），f3由于指向了f1，所以f1删除之后快捷方式就失效了（会显示为红色）</p>
<h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="什么是Vim编辑器"><a href="#什么是Vim编辑器" class="headerlink" title="什么是Vim编辑器"></a>什么是Vim编辑器</h4><p>Vim是从vi发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中广泛使用（尤其是Linux中，必须要使用vim（<strong>查看内容、编辑内容、保存内容</strong>））</p>
<p>简单来说，vi是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>
<p>vim则可以说是程序开发人员的利器。所有的Unix Like系统都会内建vi文本编辑器，其他的文书编辑器则不一定会存在。</p>
<p>vim键盘图：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024092925761.png" alt="image-20201024092925761"></p>
<h4 id="vi-vim的使用"><a href="#vi-vim的使用" class="headerlink" title="vi/vim的使用"></a>vi/vim的使用</h4><p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi/vim 文件名</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024102108545.png" alt="image-20201024102108545"></p>
<p>如果这个文件存在则会打开这个文件，如果这个文件不存在则会新建这个文件</p>
<p>基本上 vi/vim 共分为三种模式，分别是</p>
<ul>
<li>命令模式（Command mode）</li>
<li>输入模式（Insert mode）</li>
<li>底线命令模式（Last line mode）</li>
</ul>
<h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>用户刚刚启动 vi/vim，便进入了命令模式</p>
<p>此状态下敲击键盘动作便会被vim识别为命令，而非输入字符。比如我们此时按下<code>i</code>，并不会输入一个字符，<code>i</code>被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><code>i</code>：切换到输入模式，以输入字符</li>
<li><code>x</code>：删除当前光标所在处的字符</li>
<li><code>:</code>   切换到底线命令模式，以在最底一行输入命令</li>
</ul>
<p>如果想要编辑文本：启动vim，进入命令模式，按下<code>i</code>，切换到输入模式</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>在命令模式下按下<code>i</code>就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>：输入字符</li>
<li><strong>ENTER</strong>：回车键，换行</li>
<li><strong>BACK SPACE</strong>：退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>：删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>：在文本中移动光标</li>
<li><strong>HOME/END</strong>：移动光标到行首/行尾</li>
<li><strong>Page Up/Page Down</strong>：上/下翻页</li>
<li><strong>Insert</strong>：切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>：退出输入模式，切换到命令模式</li>
</ul>
<h5 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h5><p>在命令模式下按下<code>:</code>（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）</p>
<ul>
<li><code>q</code>：退出程序</li>
<li><code>w</code>：保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p>简单的说，我们可以将这三个模式使用下图来表示：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024095003880.png" alt="image-20201024095003880"></p>
<h4 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi/vim 按键说明"></a>vi/vim 按键说明</h4><p>除了上面简易范例的<code>i</code>、<code>Esc</code>、<code>wq</code>之外，其实 <code>vim</code> 还有非常多的按键可以使用。</p>
<p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p>
<table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red">h 或 向左箭头键(←)</font></td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left"><font color="red">j 或 向下箭头键(↓)</font></td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left"><font color="red">k 或 向上箭头键(↑)</font></td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left"><font color="red">l 或 向右箭头键(→)</font></td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td>
<td></td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td align="left"><font color="red">n<space></font></td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td align="left"><font color="red">n<Enter></font></td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
<tr>
<td align="left">搜索替换</td>
<td></td>
</tr>
<tr>
<td align="left"><font color="red">/word</font></td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left"><font color="red">n</font></td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left"><font color="red">N</font></td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td align="left">使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td>
<td></td>
</tr>
<tr>
<td align="left">:n1,n2s/word1/word2/g</td>
<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td align="left"><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
<tr>
<td align="left">删除、复制与贴上</td>
<td></td>
</tr>
<tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td>
<td></td>
</tr>
<tr>
<td align="left">.</td>
<td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td>
</tr>
</tbody></table>
<p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">i, I</td>
<td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td>
</tr>
<tr>
<td align="left">a, A</td>
<td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">o, O</td>
<td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td align="left">r, R</td>
<td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td>
<td></td>
</tr>
<tr>
<td align="left">[Esc]</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody></table>
<p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left"><font color="red">:wq</font></td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td>
</tr>
<tr>
<td align="left">ZQ</td>
<td>不保存，强制退出。效果等同于 <strong>:q!</strong>。</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td align="left">vim 环境的变更</td>
<td></td>
</tr>
<tr>
<td align="left"><font color="red">:set nu</font></td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p>
<p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>
<h3 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h3><p>一般来说，如果你不是DBA，用的一般都不是root账户！</p>
<p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有以下几个方面：</p>
<ul>
<li>用户账号的添加、删除和修改</li>
<li>用户口令的管理</li>
<li>用户组的管理</li>
</ul>
<h4 id="Linux系统用户账号的管理"><a href="#Linux系统用户账号的管理" class="headerlink" title="Linux系统用户账号的管理"></a>Linux系统用户账号的管理</h4><h5 id="useradd命令（添加用户）"><a href="#useradd命令（添加用户）" class="headerlink" title="useradd命令（添加用户）"></a>useradd命令（添加用户）</h5><p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure>

<p>选项：</p>
<ul>
<li><font color="red"><code>-m</code>：自动创建这个用户的主目录（<code>/home/zxw</code>）</font></li>
<li><code>-c</code>：指定一段注释性描述</li>
<li><code>-d</code>：指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li><code>-g</code>：指定用户所属的用户组</li>
<li><code>-G</code>：用户组 指定用户所属的附加组</li>
<li><code>-s</code>：指定用户的登录Shell</li>
<li><code>-u</code>：指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个用户</span></span><br><span class="line">useradd -m zxw</span><br></pre></td></tr></table></figure>

<p>结果发现会在<code>/home</code>下创建一个zxw目录，这是因为Linux中<strong>一切皆文件</strong>，这里的添加用户其实就是在某个文件中写入用户信息！</p>
<p>这些都存在与<code>/etc/passwd</code>文件中</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024191503267.png" alt="image-20201024191503267"></p>
<h5 id="userdel命令（删除用户）"><a href="#userdel命令（删除用户）" class="headerlink" title="userdel命令（删除用户）"></a>userdel命令（删除用户）</h5><p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure>

<p>常用的选项是<code>-r</code>，它的作用是把用户的主目录一起删除</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel -r zxw</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024191717505.png" alt="image-20201024191717505"></p>
<p>添加了<code>-r</code>选项之后，主目录也会被删除</p>
<h5 id="usermod命令（修改用户）"><a href="#usermod命令（修改用户）" class="headerlink" title="usermod命令（修改用户）"></a>usermod命令（修改用户）</h5><p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure>

<p>选项和<code>useradd</code>命令相同，此外有些系统还支持<code>-l</code>修改用户名</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -s /bin/ksh -d /home/z -g developer sam</span><br></pre></td></tr></table></figure>

<p>此命令将用户sam的登录shell修改为ksh，主目录修改为/home/z，用户组改为developer</p>
<h5 id="passwd命令（用户口令管理）"><a href="#passwd命令（用户口令管理）" class="headerlink" title="passwd命令（用户口令管理）"></a>passwd命令（用户口令管理）</h5><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即便是指定空指令。</p>
<p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure>

<p>可使用的选项：</p>
<ul>
<li><code>-l</code>：锁定口令，即禁用账号</li>
<li><code>-u</code>：口令解锁</li>
<li><code>-d</code>：使账号无口令</li>
<li><code>-f</code>：强迫用户下次登录时修改口令</li>
</ul>
<p>如果默认用户名，则修改当前用户的口令。</p>
<p>例如，假设当前用户是sam，则下面的命令修改该用户自己的口令（Linux中输入密码是不会显示的，所以下面的<code>*</code>其实也是不存在的）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd </span><br><span class="line">Old password:****** </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>

<p>如果是超级用户，可以使用下列形式指定任何用户的口令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd sam </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>

<p>普通用户修改自己的口令时，passwd命令先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令给指定用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位的长口令，口令中包含大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>
<p>为用户指定空口令时，执行下列形式的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -d sam</span><br></pre></td></tr></table></figure>

<p>此命令将用户sam的口令删除，这样用户sam下次登录时，系统就不再允许该用户登录了。</p>
<p>passwd命令还可以用<code>-l</code>（lock）选项锁定某一用户，使其不能登录，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -l sam</span><br></pre></td></tr></table></figure>



<h5 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h5><p>root用户</p>
<ol>
<li><p>切换用户的命令为：<code>su 用户名</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201024221633916.png" alt="image-20201024221633916"></p>
<p>可以看到，从普通用户切换到其他用户需要输入密码。从root用户切换到其他用户不需要输入密码（不然怎么叫root用户）</p>
</li>
<li><p>从普通用户切换到root用户，还可以使用命令：<code>sudo su</code></p>
<p>注意：默认情况下普通用户是不能使用sudo命令的，需要进行配置</p>
</li>
<li><p>在终端输入<code>exit</code>或<code>logout</code>或者使用快捷方式<code>ctrl+d</code>，可以退回到原来的用户</p>
</li>
<li><p>在切换用户时，如果想要在切换用户后使用新的工作环境，可以在su和用户名之间加上<code>-</code>，例如：<code>su - root</code></p>
</li>
<li><p><code>$</code>表示普通用户，<code>#</code>表示超级用户（root用户）</p>
</li>
</ol>
<p>查看主机名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<p>修改主机名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname 修改后的主机名</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这种方式修改主机名，一旦重启就会失效。</p>
<h4 id="Linux系统用户组的管理"><a href="#Linux系统用户组的管理" class="headerlink" title="Linux系统用户组的管理"></a>Linux系统用户组的管理</h4><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新</p>
<h5 id="groupadd命令（添加用户组）"><a href="#groupadd命令（添加用户组）" class="headerlink" title="groupadd命令（添加用户组）"></a>groupadd命令（添加用户组）</h5><p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure>

<p>可以使用的选项有：</p>
<ul>
<li><code>-g GID</code>：指定新用户组的组标识号（GID）</li>
<li><code>-o</code>：一般与<code>-g</code>同时使用，表示新用户组的GID可以与系统已有用户组的GID相同</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd group1</span><br></pre></td></tr></table></figure>

<p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd -g 101 group2</span><br></pre></td></tr></table></figure>

<p>此命令向系统中增加了一个新组group2，新组的组标识号是101</p>
<h5 id="groupdel命令（删除用户组）"><a href="#groupdel命令（删除用户组）" class="headerlink" title="groupdel命令（删除用户组）"></a>groupdel命令（删除用户组）</h5><p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupdel group1</span><br></pre></td></tr></table></figure>

<p>此命令从系统中删除组group1</p>
<h5 id="groupmod命令（修改用户组）"><a href="#groupmod命令（修改用户组）" class="headerlink" title="groupmod命令（修改用户组）"></a>groupmod命令（修改用户组）</h5><p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>

<p>常用的选项有：</p>
<ul>
<li><code>-g GID</code>：为用户组指定新的组标识号</li>
<li><code>-o</code>：与<code>-g</code>同时使用，用户组的新GID可以与系统中已有用户组的GID相同</li>
<li><code>-n 新用户组</code>：将用户组的名字改为新的名字</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod -g 102 group2</span><br></pre></td></tr></table></figure>

<p>此命令将组group2的组标识号修改为102</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod -g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>

<p>此命令将组group2 的组标识号修改为10000，将组名修改为group3</p>
<h5 id="newgrp命令（切换用户组）"><a href="#newgrp命令（切换用户组）" class="headerlink" title="newgrp命令（切换用户组）"></a>newgrp命令（切换用户组）</h5><p>用户可以在登陆后，使用命令newgrp切换到其他用户组，这个命令的参数是目标用户组。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">newgrp root</span><br></pre></td></tr></table></figure>

<p>此命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或者附加组。类似于用户账号的管理，用户组的管理可以通过集成的系统管理工具来完成。</p>
<h5 id="拓展：相关文件查看（了解）"><a href="#拓展：相关文件查看（了解）" class="headerlink" title="拓展：相关文件查看（了解）"></a>拓展：相关文件查看（了解）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p>文件的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名:口令（登陆密码，不可见）:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure>

<p>这个文件中每一行都是一个用户的信息，口令一般不可见（为<code>x</code>或者<code>*</code>），加密后的口令放在<code>/etc/shadow</code>中</p>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux磁盘管理常用三个命令：</p>
<ul>
<li><code>df</code>：列出文件系统的整体磁盘使用量</li>
<li><code>du</code>：检查磁盘空间使用量</li>
<li><code>fdisk</code>：用于磁盘分区</li>
</ul>
<h4 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h4><p>df命令可以用于获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df [选项] [目录或文件名]</span><br></pre></td></tr></table></figure>

<p>可用选项：</p>
<ul>
<li><code>-a</code>：列出所有的文件系统，包括系统特有的<code>/proc</code>等文件系统</li>
<li><code>-k</code>：以KBytes的容量显示各文件系统</li>
<li><code>-m</code>：以MBytes的容量显示各文件系统</li>
<li><code>-h</code>：以人们容易阅读的GBytes、MBytes、KBytes等格式自行显示</li>
<li><code>-H</code>：以M=1000K取代M=1024K的进位方式</li>
<li><code>-T</code>：显示文件系统类型，连同该partition的filesystem名称（例如ext3）也列出来</li>
<li><code>-i</code>：不用硬盘容量，而以inode的数量显示</li>
</ul>
<p><strong>实例</strong></p>
<p>1、将系统内所有的文件系统列出来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201025194802193.png" alt="image-20201025194802193"></p>
<p>在Linux地下如果df没有加任何选项，那么默认会将系统内所有的（不含特殊内存的文件系统与swap）都以1KBytes的容量显示出来</p>
<p>2、将容量以易读的容量格式显示出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201025195248849.png" alt="image-20201025195248849"></p>
<p>3、将系统内所有特殊文件格式及名称都列出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -aT</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201025195353617.png" alt="image-20201025195353617"></p>
<p>4、将<code>/etc</code>地下的可用磁盘容量以易读的容量格式显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h /etc</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201025195458235.png" alt="image-20201025195458235"></p>
<h4 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h4><p>Linux du命令也是查看使用空间的，但是与df命令不同的是du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的</p>
<p><strong>语法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du [选项] 文件或目录</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><code>-a</code>：列出所有的文件与目录容量，默认只会列出目录</li>
<li><code>-h</code>：以人们较易读的容量格式 (G/M) 显示</li>
<li><code>-s</code>：列出总量而已，而不列出每个各别的目录占用容量</li>
<li><code>-S</code>：不包括子目录下的总计，与 -s 有点差别</li>
<li><code>-k</code>：以 KBytes 列出容量显示</li>
<li><code>-m</code>：以 MBytes 列出容量显示</li>
</ul>
<p><strong>实例</strong></p>
<p>1、只列出当前目录下的所有文件夹容量（包含隐藏文件夹）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201025205112284.png" alt="image-20201025205112284"></p>
<p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</p>
<p>2、将文件的容量也列出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -a</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201025205212589.png" alt="image-20201025205212589"></p>
<p>3、检查根目录下每个目录所占的容量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -sm /*</span><br></pre></td></tr></table></figure>



<h4 id="磁盘挂载与卸除"><a href="#磁盘挂载与卸除" class="headerlink" title="磁盘挂载与卸除"></a>磁盘挂载与卸除</h4><p>Linux的磁盘挂载使用mount命令，写在使用umount命令</p>
<p><strong>磁盘挂载语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<p>用默认的方式，将创建的<code>/dev/hdc6</code>挂载到<code>/mnt/hdc6</code>上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /dev/hdc6</span><br><span class="line">mount /dev/hdc6 /mnt/hdc6</span><br><span class="line">df</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">.....中间省略.....</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></table></figure>



<p><strong>磁盘卸载命令语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure>

<p>选项：</p>
<ul>
<li><code>-f</code>：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下</li>
<li><code>-n</code>：不升级 /etc/mtab 情况下卸除</li>
</ul>
<p><strong>实例</strong></p>
<p>卸载/dev/hdc6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /dev/hdc6</span><br></pre></td></tr></table></figure>



<p>除此之外，安装了JDK之后，可以使用Java中的命令来进行查看。</p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>对于开发人员来说，Linux更多偏向于使用即可。（运维人员需要精通Linux）</p>
<h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h4><ol>
<li>在Linux中，每一个程序都有自己的一个进程 ，每一个进程都有一个id号！</li>
<li>每一个进程，都有一个父进程</li>
<li>进程可以有两种存在方式：前台和后台</li>
<li>一般情况下，服务都是后台运行的，基本的程序都是前台运行的</li>
</ol>
<h4 id="ps命令（查看进程）"><a href="#ps命令（查看进程）" class="headerlink" title="ps命令（查看进程）"></a>ps命令（查看进程）</h4><p>ps（process status）：查看当前系统中正在执行的各种进程信息</p>
<p><strong>语法</strong>：</p>
<ul>
<li><code>-a</code>：显示当前终端运行的所有的进程信息</li>
<li><code>-A</code>：列出所有的进程</li>
<li><code>-u</code>：以用户的信息显示进程</li>
<li><code>-x</code>：显示后台运行进程的参数</li>
</ul>
<p><code>|</code>：在Linux中叫做管道符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">命令1|命令2</span><br></pre></td></tr></table></figure>

<p>命令1的正确输出作为命令2的操作对象</p>
<p>grep命令：Linux grep命令用于查找文件里符合条件的字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux|grep mysql</span><br></pre></td></tr></table></figure>

<p>此命令的作用就是查询系统中和mysql相关的进程信息</p>
<p><code>ps -ef</code>可以查看到父进程的信息（看父进程一般可以通过目录树结构来查看）</p>
<p><code>pstree</code>命令：可以树状结构来查看进程</p>
<ul>
<li><code>-p</code>：显示父进程id</li>
<li><code>-u</code>：显示用户组</li>
</ul>
<p>更多内容参考：<a href="https://www.runoob.com/linux/linux-comm-ps.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-comm-ps.html</a></p>
<h4 id="kill命令（结束进程）"><a href="#kill命令（结束进程）" class="headerlink" title="kill命令（结束进程）"></a>kill命令（结束进程）</h4><p>Linux kill命令用于删除执行中的程序或工作。</p>
<p>kill可将指定的信息送至程序。预设的信息为SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可以利用ps命令或者jobs命令查看</p>
<p><strong>语法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-s &lt;信息名称或编号&gt;][程序]</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-l &lt;信息编号&gt;]</span><br></pre></td></tr></table></figure>

<p>使用<code>kill - l</code>命令可以列出所有可用信号。</p>
<p>最常用d信号是：</p>
<ul>
<li>1(HUP)：重新加载进程</li>
<li>9(KILL)：杀死一个进程</li>
<li>15(TERM)：正常停止一个进程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程的id</span><br></pre></td></tr></table></figure>





<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>安装软件一般有三种方式：</p>
<ul>
<li>rpm（jdk，在线发布一个SpringBoot项目）</li>
<li>解压缩安装（tomcat，启动并通过外网访问）</li>
<li>yum在线安装（docker）</li>
</ul>
<h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>开发Java必要的环境</p>
<p>1、下载JDK rmp包，去Oracle下载即可（百度中搜索jdk8 rpm）</p>
<p>2、上传到服务器的指定目录下（使用xshell连接，使用xftp上传，目录可以自己指定）</p>
<p>3、安装Java环境</p>
<p>首先使用<code>java -version</code>命令来检查是否已经安装了Java环境，如果有就需要卸载</p>
<p>检查jdk版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep jdk</span><br></pre></td></tr></table></figure>

<p>强制移除</p>
<p><code>–nodeps</code>后面要移除的jdk是通过上面的<code>rpm -qa|grep jdk</code>查询出来的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh jdk-8u271-linux-x64.rpm</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201026144547320.png" alt="image-20201026144547320"></p>
<p><strong>rpm方式安装jdk不需要进行环境变量的配置！</strong></p>
<p>安装了jdk之后就可以使用<code>java -jar xxx.jar</code>来将Spring Boot项目打包后得到的jar文件上传到服务器然后执行（注意需要开启对应的端口！）</p>
<h3 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h3><p>SpringBoot内嵌了一个Tomcat服务器，所以不需要服务器安装Tomcat。但是对于普通的SSM项目，还是会打成war包。此时就需要放在Tomcat中来执行。所以还需要安装Tomcat。</p>
<p>1、去官网下载Tomcat（Linux中下载<code>tar.gz</code>格式的压缩包）</p>
<p>2、解压这个文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.39.tar.gz</span><br></pre></td></tr></table></figure>

<p>3、启动Tomcat测试，<code>./xxx.sh</code>即可运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行</span></span><br><span class="line">./startup.sh</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201026151918873.png" alt="image-20201026151918873"></p>
<p>此时，如果防火墙开放了8080端口且阿里云安全组也开放了，就可以直接访问<code>http://服务器ip:8080</code>进行测试</p>
<h4 id="防火墙的相关命令"><a href="#防火墙的相关命令" class="headerlink" title="防火墙的相关命令"></a>防火墙的相关命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看firewall的状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启、重启、关闭 firewalld.service服务</span></span><br><span class="line"><span class="comment">#开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="comment">#只看端口信息</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启端口</span></span><br><span class="line"><span class="comment">#开启命令</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#选项含义：</span></span><br><span class="line">--zone <span class="comment">#作用域</span></span><br><span class="line">--add-port=8080/tcp <span class="comment">#添加端口，格式为：端口/通信协议</span></span><br><span class="line">--permanent <span class="comment">#永久生效，没有此参数重启后会失效</span></span><br></pre></td></tr></table></figure>



<h3 id="Docker安装（yum）"><a href="#Docker安装（yum）" class="headerlink" title="Docker安装（yum）"></a>Docker安装（yum）</h3><p>官网参考文档：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p>
<p>yum是在线安装，所以一定要联网！</p>
<p>1、确定当前系统是CentOS7及以上版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201026185927909.png" alt="image-20201026185927909"></p>
<p>我的阿里云上安装的是CentOS 7.8</p>
<p>2、yum安装gcc相关</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install 包名</span><br></pre></td></tr></table></figure>

<p><code>yum install</code>是安装命令，<code>-y</code>表示所有的选择都选择<code>yes</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>

<p>3、卸载旧版本的docker，后面根据官网安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>4、安装yum-utils</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<p>5、设置镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>6、更新yum软件包索引</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<p>7、安装Docker CE</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>8、启动Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>9、测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">docker run 镜像名/镜像id</span><br><span class="line"></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>七、Ribbon负载均衡服务调用</title>
    <url>/2020/11/04/%E4%B8%83%E3%80%81Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="七、Ribbon负载均衡服务调用"><a href="#七、Ribbon负载均衡服务调用" class="headerlink" title="七、Ribbon负载均衡服务调用"></a>七、Ribbon负载均衡服务调用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是Ribbon"><a href="#什么是Ribbon" class="headerlink" title="什么是Ribbon"></a>什么是Ribbon</h3><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡工具</strong>。</p>
<p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端组件提供一系列完善的配置项如连接超时、重试等。简单地说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询、随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p>
<h3 id="官网资料"><a href="#官网资料" class="headerlink" title="官网资料"></a>官网资料</h3><p>参考地址：<a href="https://github.com/Netflix/ribbon/wiki/Getting-Started" target="_blank" rel="noopener">https://github.com/Netflix/ribbon/wiki/Getting-Started</a></p>
<p>Ribbon现在进入了维护模式，未来准备使用SpringCloud LoadBalancer来替换它。但是目前由于Ribbon比较优秀，SpringCloud LoadBalancer还没有能够替换Ribbon！</p>
<h3 id="Ribbon能干什么"><a href="#Ribbon能干什么" class="headerlink" title="Ribbon能干什么"></a>Ribbon能干什么</h3><p>一句话就是：负载均衡+RestTemplate调用</p>
<p><strong>负载均衡（Load Balance）是什么</strong></p>
<p>简单的说就是将用户的请求分摊到多个服务上，从而达到系统的HA（高可用）。</p>
<p>常见的负载均衡有软件Nginx，LVS，硬件 F5等。</p>
<p><strong>Ribbon本地负载均衡客户端 ** VS **Nginx服务端负载均衡</strong></p>
<p>Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</p>
<p>Ribbon是本地负载均衡，在调用微服务接口时，会在注册中心上获取注册信息服务列表然后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p>
<p><strong>集中式LB</strong></p>
<p>即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如nginx），由该设施负责把访问请求通过某种策略转发至服务的提供方。</p>
<p><strong>进程内LB</strong></p>
<p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p>
<p><strong>Ribbon就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p>
<h2 id="负载均衡演示"><a href="#负载均衡演示" class="headerlink" title="负载均衡演示"></a>负载均衡演示</h2><p>架构说明：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104193316898.png" alt="image-20201104193316898"></p>
<p>也就是说使用Ribbon来实现服务消费方的负载均衡和服务调用！</p>
<p>Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中一个实例。</p>
<p><strong>Ribbon工作步骤</strong></p>
<ol>
<li><p>选择EurekaServer，它优先选择在同一个区域内负载较少的server</p>
</li>
<li><p>然后根据用户指定的策略，在server取到的服务注册列表中选择一个地址</p>
<p>其中Ribbon提供了多种策略，例如：轮询、随机和根据响应时间加权。</p>
</li>
</ol>
<p><strong>问题：为什么之前在服务消费者中没有引入Ribbon也能够实现负载均衡（轮询）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是应为<code>spring-cloud-starter-netflix-eureka-client</code>中引入了ribbon</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104194450227.png" alt="image-20201104194450227"></p>
<h3 id="RestTemplate的使用"><a href="#RestTemplate的使用" class="headerlink" title="RestTemplate的使用"></a>RestTemplate的使用</h3><p>官网参考：<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p>
<h4 id="getForObject方法和getForEntity方法"><a href="#getForObject方法和getForEntity方法" class="headerlink" title="getForObject方法和getForEntity方法"></a>getForObject方法和getForEntity方法</h4><p>二者的区别：</p>
<ul>
<li><p>getForObject方法可以将响应体中的数据转化为对象（基本上可以理解为JSON）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">"/payment/get"</span> + id, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>getForEntity返回的是一个<code>ResponseEntity</code>对象，其中包含了响应的一些重要信息（例如，响应头、响应状态码、响应体等）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/getForEntity/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getForEntityPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL + <span class="string">"/payment/get/"</span> + id, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">"操作失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="postForObject方法和postForEntity方法"><a href="#postForObject方法和postForEntity方法" class="headerlink" title="postForObject方法和postForEntity方法"></a>postForObject方法和postForEntity方法</h4><p>同理可得postForObject和postForEntity方法的使用</p>
<p><strong>postForObject</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/create"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Integer&gt; <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">"/payment/create"</span>, payment, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>postForEntity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/postForEntity/create"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Integer&gt; <span class="title">postForEntityCreate</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.postForEntity(PAYMENT_URL + <span class="string">"/payment/create"</span>, payment, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">"创建失败！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Ribbon核心组件IRule"><a href="#Ribbon核心组件IRule" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h2><h3 id="IRule接口"><a href="#IRule接口" class="headerlink" title="IRule接口"></a>IRule接口</h3><p><strong>IRule</strong>：根据特定算法从服务列表中选取一个要访问的服务。这是一个接口，其集成关系如下：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104201645388.png" alt="image-20201104201645388"></p>
<p>默认使用的是RoundRobinRule，也就是轮询，这就解释了为什么刷新的时候会轮流调用这两个服务。</p>
<p>下面是可用的常用的几种：</p>
<table>
<thead>
<tr>
<th>IRule种类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>轮询</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机</td>
</tr>
<tr>
<td>RetryRule</td>
<td>先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>先过滤掉故障实例，再选择并发较小的实例</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>默认规则，复合判断server所在区域的性能和server的可用性选择服务器</td>
</tr>
</tbody></table>
<h3 id="如何替换"><a href="#如何替换" class="headerlink" title="如何替换"></a>如何替换</h3><p>默认使用的是<code>RoundRobinRule</code>，那么如何替换默认的负载规则？</p>
<p>修改<code>cloud-consumer-order80</code></p>
<p><strong>注意</strong>：官方文档给出了警告，这个自定义的配置类不能放在@ComponentScan所扫描当前包及其子包下。否则，这个配置就会被所有的Ribbon客户端所共享，也就达不到特殊化定制的效果了！（也就是不能放在主启动类所在包及其子包中）</p>
<p><strong>1、在主配置类所在包外创建一个配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、在主配置类中使用@RibbonClient指定服务名称和配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>, configuration = MySelfRule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：此处的@RibbonClient注解的name属性的值必须和Controller中使用的完全相同，否则还是会使用默认的轮询策略。</p>
<h2 id="Ribbon负载均衡算法"><a href="#Ribbon负载均衡算法" class="headerlink" title="Ribbon负载均衡算法"></a>Ribbon负载均衡算法</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启后rest接口计数从1开始</p>
<p>例如：</p>
<p>使用一个<code>List&lt;String&gt; serviceUrls</code>来表示从服务注册中心获得到的可用服务地址的集合（假设集合中有3个地址）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">serviceUrls[0] &#x3D; 127.0.0.1:8003</span><br><span class="line">serviceUrls[1] &#x3D; 127.0.0.1:8001</span><br><span class="line">serviceUrls[2] &#x3D; 127.0.0.1:8002</span><br></pre></td></tr></table></figure>

<p>8001+8002+8003组成集群，即服务器集群数量为3</p>
<ul>
<li>第1次：1 % 3 = 1，下标为1，访问127.0.0.1:8001</li>
<li>第2次：2 % 3 = 2，下标为2，访问127.0.0.1:8002</li>
<li>第3次：3 % 3 = 0，下标为3，访问127.0.0.1:8003</li>
<li>…</li>
</ul>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">"no load balancer"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Server server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">        List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">        <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">        <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">            log.warn(<span class="string">"No up servers available from load balancer: "</span> + lb);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nextServerIndex = incrementAndGetModulo(serverCount);</span><br><span class="line">        server = allServers.get(nextServerIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* Transient. */</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next.</span></span><br><span class="line">        server = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">"No available alive servers after 10 tries from load balancer: "</span></span><br><span class="line">                 + lb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">        <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="手写一个负载均衡算法"><a href="#手写一个负载均衡算法" class="headerlink" title="手写一个负载均衡算法"></a>手写一个负载均衡算法</h3><p>原理+JUC（CAS+自旋锁）</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Ribbon负载均衡服务调用</tag>
      </tags>
  </entry>
  <entry>
    <title>三、微服务架构编码构建</title>
    <url>/2020/10/30/%E4%B8%89%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h1><h2 id="父工程构建"><a href="#父工程构建" class="headerlink" title="父工程构建"></a>父工程构建</h2><p>1、创建一个Maven项目作为父工程，名字和包名自己选择</p>
<p><strong>注意</strong>：使用的archetype可能已经很久没有更新过了，如果pom文件报红，可以查看以下报红的位置是不是少了什么</p>
<p>2、父工程的pom文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--版本管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--锁定版本且子module不用写groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.3.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR8--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba 2.2.1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis-spring-boot--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Rest微服务工程构建"><a href="#Rest微服务工程构建" class="headerlink" title="Rest微服务工程构建"></a>Rest微服务工程构建</h2><p>构建步骤：</p>
<p>1、新建module</p>
<p>2、修改<code>pom.xml</code>文件</p>
<p>3、编写yml配置文件</p>
<p>4、主启动类</p>
<p>5、业务类</p>
<h3 id="支付模块构建"><a href="#支付模块构建" class="headerlink" title="支付模块构建"></a>支付模块构建</h3><p>1、新建module</p>
<p>在父工程下新建一个module，创建一个maven子工程，名为<code>cloud-privider-payment8001</code></p>
<p>2、修改<code>pom.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot集成mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot整合jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、编写<code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment"># 数据源类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span>    <span class="comment"># mysql驱动类型</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2020?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zxw.springcloud.entities</span></span><br></pre></td></tr></table></figure>

<p>4、主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、业务类</p>
<h4 id="编写业务类"><a href="#编写业务类" class="headerlink" title="编写业务类"></a>编写业务类</h4><p>1、使用SQL建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`payment`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="string">`serial`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>



<p>2、编写entities</p>
<p>订单的实体类<code>Payment</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JSON封装体实体类<code>CommonResult</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON封装体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3、编写dao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PaymentMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zxw.springcloud.dao.PaymentDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"create"</span> <span class="attr">parameterType</span>=<span class="string">"payment"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        INSERT INTO payment(serial) VALUES(#&#123;serial&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"paymentBaseResultMap"</span> <span class="attr">type</span>=<span class="string">"payment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"serial"</span> <span class="attr">property</span>=<span class="string">"serial"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getPaymentById"</span> <span class="attr">parameterType</span>=<span class="string">"Long"</span> <span class="attr">resultMap</span>=<span class="string">"paymentBaseResultMap"</span>&gt;</span></span><br><span class="line">        SELECT id,serial from payment WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>虽然已经配置了别名，但是在实际开发中还是建议使用<code>resultMap</code>来进行映射，这样不容易出错</p>
<p>4、编写service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5、编写controller</p>
<p> <code>PaymentController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Integer&gt; <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">"插入结果:"</span> + result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;Integer&gt;(<span class="number">200</span>, <span class="string">"插入数据库成功！"</span>, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">"插入数据库失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">query</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">"查询到的Payment:"</span> + payment);</span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">200</span>, <span class="string">"查询成功！"</span>, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">"没有对应记录，查询的id为:"</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>最后，可以使用postman进行测试！</p>
<p>关于热部署，热部署就是引入<code>devtools</code>进行热部署。我更喜欢ctrl+f9来使修改的内容生效，如果是那种完全的热部署可能会比较卡，体验比较差！</p>
<h3 id="订单模块构建"><a href="#订单模块构建" class="headerlink" title="订单模块构建"></a>订单模块构建</h3><p>1、建module</p>
<p>在父工程下创建名为<code>cloud-consumer-order80</code>的module</p>
<p>2、改pom</p>
<p>修改<code>pom.xml</code>文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、编写配置文件</p>
<p><code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>消费者模块只需要去消费所提供的服务，所以不需要service和dao，所以配置比较简单</p>
<p>4、主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、业务编写</p>
<p>首先还是导入<code>Payment</code>和<code>CommonResult</code>这两个实体类</p>
<p>消费模块需要调用支付模块来实现controller的编写，所以需要在配置类中注入一个<code>RestTemplate</code>类型组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>OrderController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">"http://localhost:8001"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Integer&gt; <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">"/payment/create"</span>, payment, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">"/payment/get/"</span> + id, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改支付模块的controller</p>
<p>添加@RequestBody注解确保能够从请求体中正确封装数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Integer&gt; <span class="title">create</span><span class="params">(@RequestBody Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">"插入结果:"</span> + result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;Integer&gt;(<span class="number">200</span>, <span class="string">"插入数据库成功！"</span>, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">"插入数据库失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">query</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">"查询到的Payment:"</span> + payment);</span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">200</span>, <span class="string">"查询成功！"</span>, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">"没有对应记录，查询的id为:"</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h3><p>上面这两个模块都有<code>Payment</code>和<code>CommonResult</code>，如果有很多模块都需要这部分的内容，在每一个工程中都这样写就太过冗余了！</p>
<p>想想之前我们需要使用一个第三方库中的某个类，只需要导入对应的jar包或者通过maven的坐标来引入。所以我们可以创建一个maven工程，然后在其他模块中引入对应的坐标导入即可！</p>
<p>1、建module</p>
<p>新建一个名为<code>cloud-api-commons</code></p>
<p>2、改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- hutool-all --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、编写业务类</p>
<p>将<code>Payment</code>和<code>CommonResult</code>复制到该module的对应包下</p>
<p>由于这个module存放的是一些公用的API，而非一个SpringBoot项目，所以不需要主配置类和配置文件！</p>
<p>4、对这个module执行clean和install操作</p>
<p>5、删除支付模块和订单模块的entities包，然后在pom中引入<code>cloud-api-commons</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>微服务架构编码构建</tag>
      </tags>
  </entry>
  <entry>
    <title>二、关于Cloud各种组件的停更/升级/替换</title>
    <url>/2020/10/29/%E4%BA%8C%E3%80%81%E5%85%B3%E4%BA%8ECloud%E5%90%84%E7%A7%8D%E7%BB%84%E4%BB%B6%E7%9A%84%E5%81%9C%E6%9B%B4%E3%80%81%E5%8D%87%E7%BA%A7%E3%80%81%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="关于Cloud各种组件的停更、升级、替换"><a href="#关于Cloud各种组件的停更、升级、替换" class="headerlink" title="关于Cloud各种组件的停更、升级、替换"></a>关于Cloud各种组件的停更、升级、替换</h1><p><strong>之前</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201029215246364.png" alt="image-20201029215246364"></p>
<p>组件的升级与替换如下所示：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201030091826298.png" alt="image-20201030091826298"></p>
<p>从上面这个图中可以看出，Nacos一个框架就承担了服务注册中心、服务配置、服务总线的三个角色。</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Cloud组件升级替换</tag>
      </tags>
  </entry>
  <entry>
    <title>一、微服务架构理论入门</title>
    <url>/2020/10/29/%E4%B8%80%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="微服务架构理论入门"><a href="#微服务架构理论入门" class="headerlink" title="微服务架构理论入门"></a>微服务架构理论入门</h1><h2 id="微服务架构概述"><a href="#微服务架构概述" class="headerlink" title="微服务架构概述"></a>微服务架构概述</h2><h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><p>微服务架构是一种架构模式，它提倡将单一的应用程序划分成一组小的服务，服务之间相互调用、相互配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p>
<h2 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h2><h3 id="Spring-Cloud是什么"><a href="#Spring-Cloud是什么" class="headerlink" title="Spring Cloud是什么"></a>Spring Cloud是什么</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201029210851267.png" alt="image-20201029210851267"></p>
<p>Spring Cloud = 分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p>
<p>Spring Cloud已经成为微服务开发的主流技术栈，在国内开发者社区非常火爆。</p>
<h2 id="Spring-Cloud技术栈"><a href="#Spring-Cloud技术栈" class="headerlink" title="Spring Cloud技术栈"></a>Spring Cloud技术栈</h2><h3 id="各个技术栈功能介绍"><a href="#各个技术栈功能介绍" class="headerlink" title="各个技术栈功能介绍"></a>各个技术栈功能介绍</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201029211857767.png" alt="image-20201029211857767"></p>
<h3 id="Spring-Cloud和Spring-Boot的版本选择"><a href="#Spring-Cloud和Spring-Boot的版本选择" class="headerlink" title="Spring Cloud和Spring Boot的版本选择"></a>Spring Cloud和Spring Boot的版本选择</h3><p>Spring Boot：2.x版</p>
<p>Spring Cloud：H版（Hoxton.SR8）</p>
<p>当然，除了H版，后面还会介绍Spring Cloud Alibaba</p>
<h4 id="Spring-Boot的版本选择"><a href="#Spring-Boot的版本选择" class="headerlink" title="Spring Boot的版本选择"></a>Spring Boot的版本选择</h4><p><strong>Spring Boot的Github地址</strong>：<a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot</a></p>
<p><strong>Spring Boot 2.0新特性</strong>：<a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes</a></p>
<p>官方强烈推荐升级的Spring Boot 2.0及以上版本！</p>
<p>那是不是说Spring Boot就要使用官网的最新稳定版本？</p>
<p>当然不是，要注意Spring Cloud和Spring Boot的版本对应关系：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201029213800723.png" alt="image-20201029213800723"></p>
<p>更详细的版本划分可以参考：<a href="http://start.spring.io/actuator/info" target="_blank" rel="noopener">http://start.spring.io/actuator/info</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201029214127125.png" alt="image-20201029214127125"></p>
<p>更详细的版本可以参考Spring Cloud的官方文档：<a href="https://docs.spring.io/spring-cloud/docs/Hoxton.SR8/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud/docs/Hoxton.SR8/reference/html/</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201029214431761.png" alt="image-20201029214431761"></p>
<p>文档都是用的是这个boot和cloud的版本，那么我们同样使用这个版本准没错！</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>微服务架构</tag>
      </tags>
  </entry>
  <entry>
    <title>五、Zookeeper服务注册与发现</title>
    <url>/2020/11/03/%E4%BA%94%E3%80%81Zookeeper%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Zookeeper服务注册与发现"><a href="#Zookeeper服务注册与发现" class="headerlink" title="Zookeeper服务注册与发现"></a>Zookeeper服务注册与发现</h1><h2 id="Eureka停止更新了该如何处理"><a href="#Eureka停止更新了该如何处理" class="headerlink" title="Eureka停止更新了该如何处理"></a>Eureka停止更新了该如何处理</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201103093149996.png" alt="image-20201103093149996"></p>
<p>这段话的意思就是，Eureka已经停止更新了，如果想要继续使用Eureka就需要承担所有的风险。作为一个开源项目，一旦不再继续更新维护，那也就没有任何吸引力了。</p>
<h2 id="Spring-Cloud整合Zookeeper代替Eureka"><a href="#Spring-Cloud整合Zookeeper代替Eureka" class="headerlink" title="Spring Cloud整合Zookeeper代替Eureka"></a>Spring Cloud整合Zookeeper代替Eureka</h2><h3 id="Zookeeper环境"><a href="#Zookeeper环境" class="headerlink" title="Zookeeper环境"></a>Zookeeper环境</h3><p>请确保Zookeeper已经被安装到了Linux虚拟机或者云服务器当中，并且已经联网；</p>
<p>确保CentOS 7中已经在防火墙中开放了对应的端口，如果使用的是阿里云服务器还需要确保安全组开放了对应端口。</p>
<p><strong>启动zookeeper</strong></p>
<p>进入zookeeper的bin目录，执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./zkClient.sh start</span><br></pre></td></tr></table></figure>



<h3 id="cloud-provider-payment8004"><a href="#cloud-provider-payment8004" class="headerlink" title="cloud-provider-payment8004"></a><code>cloud-provider-payment8004</code></h3><p><strong>1、新建名为<code>cloud-provider-payment8004</code>的module</strong></p>
<p><strong>2、修改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud整合zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、<code>application.yml</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure>

<p>通过<code>spring.cloud.zookeeper.connect-string</code>指定zookeeper的地址</p>
<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5、业务编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentZk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springcloud with zookeeper: "</span> + serverPort + <span class="string">"\t"</span> + UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong>：</p>
<p>启动项目之后结果发现报错了，而且报错的位置是在主配置类的main方法处，这一般是环境所导致的。其实还是由于导入的zookeeper版本和服务器的zookeeper版本不同，所以需要排除原有依赖，然后引入正确的zookeeper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springcloud整合zookeeper客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除自带的zookeeper 3.5.3依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr305<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.findbugs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HdrHistogram<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hdrhistogram<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入正确的zookeeper版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除slf4j，防止日志冲突--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再次启动项目，使用zooInspector查看</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201103194112214.png" alt="image-20201103194112214"></p>
<p>可以看到此时，服务就被注册到了zookeeper中了</p>
<p><strong>问题：zookeeper中存放的是临时节点还是永久节点？</strong></p>
<p>临时节点，一旦项目出现异常心跳时间到了没有发送心跳，那么节点信息会立即从zookeeper中删除！</p>
<h3 id="cloud-consumerzk-order80"><a href="#cloud-consumerzk-order80" class="headerlink" title="cloud-consumerzk-order80"></a><code>cloud-consumerzk-order80</code></h3><p><strong>1、建module</strong></p>
<p>新建<code>cloud-consumerzk-order80</code> module</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumerzk-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springcloud zookeeper discovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--排除zookeeper依赖，避免和服务器zookeeper冲突--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsr305<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.findbugs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HdrHistogram<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hdrhistogram<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--排除日志，解决日志冲突--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、<code>application.yml</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderZKMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、写业务</strong></p>
<p>在配置类中提供一个<code>RestTemplate</code>组件</p>
<p><code>ApplicationContextConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>OrderController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PAYMENT_URL = <span class="string">"http://cloud-provider-payment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">"/payment/zk"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6、测试</strong></p>
<p>启动<code>cloud-provider-payment8004</code>和<code>cloud-consumerzk-order80</code></p>
<p>访问：<a href="http://localhost/consumer/payment/zk" target="_blank" rel="noopener">http://localhost/consumer/payment/zk</a></p>
<p><strong>问题：如何使用zookeeper集群作为注册中心？</strong></p>
<p>设置<code>connect-string</code>的值为<code>ip1:port1,ip2:port2,…</code>即可（前提是已经配置好了zookeeper集群）</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Zookeeper服务注册与发现</tag>
      </tags>
  </entry>
  <entry>
    <title>六、Consul服务注册与发现</title>
    <url>/2020/11/03/%E5%85%AD%E3%80%81Consul%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Consul服务注册与发现"><a href="#Consul服务注册与发现" class="headerlink" title="Consul服务注册与发现"></a>Consul服务注册与发现</h1><h2 id="Consul简介"><a href="#Consul简介" class="headerlink" title="Consul简介"></a>Consul简介</h2><p>参考：<a href="https://www.consul.io/docs/intro" target="_blank" rel="noopener">https://www.consul.io/docs/intro</a></p>
<h3 id="Consul是什么"><a href="#Consul是什么" class="headerlink" title="Consul是什么"></a>Consul是什么</h3><p>Consul是HashiCorp公司推出的开源工具，Consul是分布式的、高可用的、可横向扩展的用于分布式系统的服务发现与配置。</p>
<h3 id="Consul能干什么"><a href="#Consul能干什么" class="headerlink" title="Consul能干什么"></a>Consul能干什么</h3><ul>
<li><p><strong>服务发现</strong>：Consul提供了通过<strong>DNS</strong>或者<strong>HTTP</strong>接口的方式来注册和发现服务。一些外部的服务通过Consul很容易的找到它所依赖的服务。</p>
</li>
<li><p><strong>健康检测</strong>：Consul的Client提供了健康检查机制，可以通过用来避免流量被转发到有故障的服务上。支持多种协议：HTTP、TCP、Docker、Shell脚本定制化</p>
</li>
<li><p><strong>Key/Value存储</strong>：应用程序可以根据自己的需要使用Consul提供的Key/Value存储。Consul提供了简单易用的HTTP接口，结合其他的工具可以实现动态配置、功能标记、领袖选举等等功能。</p>
</li>
<li><p><strong>多数据中心</strong>：Consul支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。</p>
</li>
<li><p><strong>可视化Web界面</strong></p>
</li>
</ul>
<h3 id="怎么下载Consul"><a href="#怎么下载Consul" class="headerlink" title="怎么下载Consul"></a>怎么下载Consul</h3><p>下载地址：<a href="https://www.consul.io/downloads" target="_blank" rel="noopener">https://www.consul.io/downloads</a></p>
<h3 id="如何整合Spring-Cloud来使用"><a href="#如何整合Spring-Cloud来使用" class="headerlink" title="如何整合Spring Cloud来使用"></a>如何整合Spring Cloud来使用</h3><p>参考文档：<a href="https://www.springcloud.cc/spring-cloud-consul.html" target="_blank" rel="noopener">https://www.springcloud.cc/spring-cloud-consul.html</a></p>
<h2 id="安装并运行Consul"><a href="#安装并运行Consul" class="headerlink" title="安装并运行Consul"></a>安装并运行Consul</h2><p>consul安装参考文档：<a href="https://learn.hashicorp.com/consul/getting-started/install.html" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/getting-started/install.html</a></p>
<p>以下是windows下的consul安装和启动</p>
<p><strong>1、解压下载好的压缩包</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104180416557.png" alt="image-20201104180416557"></p>
<p>可以看到只有<code>consul.exe</code>这个文件</p>
<p><strong>2、查看当前consul的版本</strong></p>
<p>在当前目录打开cmd窗口，运行下面的命令查看consul版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">consul -version</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104180630626.png" alt="image-20201104180630626"></p>
<p><strong>3、以开发模式启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure>

<p>可以通过以下地址访问Consul的首页：<a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104180811570.png" alt="image-20201104180811570"></p>
<h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>本节内容将介绍如何将服务提供者注册到consul中</p>
<p><strong>1、建module</strong></p>
<p>新建<code>cloud-provider-consul-payment8006</code>模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-consul-payment8006<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud consul discovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、编写<code>application.yml</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务编写</strong></p>
<p>编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/consul"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springcloud with consul: "</span> + serverPort + <span class="string">"\t"</span> + UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6、测试</strong></p>
<p>启动项目，访问：<a href="http://localhost:8006/payment/consul" target="_blank" rel="noopener">http://localhost:8006/payment/consul</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104182930937.png" alt="image-20201104182930937"></p>
<p>访问：<a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104183009830.png" alt="image-20201104183009830"></p>
<p>可以看到名为<code>cloud-provider-payment</code>的服务提供者已经被注册到了consul中</p>
<h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>本节将介绍如何将服务消费者注册到consul中</p>
<p><strong>1、建module</strong></p>
<p>新建<code>cloud-consumer-consul-order80</code>模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springboot web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springboot actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springboot devtools--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring cloud consul discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、编写<code>application.yml</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderConsulMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务类</strong></p>
<p>编写配置类，注入<code>RestTemplate</code>组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PAYMENT_URL = <span class="string">"http://cloud-provider-payment"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/consul"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">"/payment/consul"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6、测试</strong></p>
<p>访问<a href="http://localhost/consumer/payment/consul" target="_blank" rel="noopener">http://localhost/consumer/payment/consul</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104185012390.png" alt="image-20201104185012390"></p>
<h2 id="三个注册中心异同点"><a href="#三个注册中心异同点" class="headerlink" title="三个注册中心异同点"></a>三个注册中心异同点</h2><p><strong>CAP原则</strong>：又称CAP定理，指的是在一个分布式系统中，<strong>一致性（Consistency）</strong>、<strong>可用性（Availabilty）</strong>、<strong>分区容错性（Partition tolerance）</strong>。CAP原则指的是，这三个要素最多只能同时实现两点，<strong>不可能三者兼顾</strong>。</p>
<p><strong>CAP理论关注粒度是数据，而不是整体系统设计的策略</strong></p>
<p>经典CAP图：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104190114972.png" alt="image-20201104190114972"></p>
<p><strong>AP架构</strong>：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104190435490.png" alt="image-20201104190435490"></p>
<p>当网络分区出现了以后，为了保证可用性，系统B<strong>可以返回旧值</strong>，保证系统可用性。</p>
<p><strong>结论</strong>：违背了一致性C的要求，只满足可用性和分区容错性，即AP</p>
<p><strong>CP架构</strong>：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201104190457133.png" alt="image-20201104190457133"></p>
<p>当网络分区出现后，为了保证一致性，就必须拒绝请求，否则无法保证一致性。</p>
<p><strong>结论</strong>：违背了可用性A的要求，只满足一致性和分区容错性，即CP</p>
<ul>
<li><strong>AP</strong>：Eureka</li>
<li><strong>CP</strong>：Zookeeper、Consul</li>
</ul>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Consul服务注册与发现</tag>
      </tags>
  </entry>
  <entry>
    <title>四、Eureka服务注册与发现</title>
    <url>/2020/11/01/%E5%9B%9B%E3%80%81Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h1><h2 id="Eureka基础知识"><a href="#Eureka基础知识" class="headerlink" title="Eureka基础知识"></a>Eureka基础知识</h2><h3 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h3><p>Spring Cloud封装了Netflix公司开发的Eureka模块来实现服务治理</p>
<p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p>
<h3 id="什么是服务注册与发现"><a href="#什么是服务注册与发现" class="headerlink" title="什么是服务注册与发现"></a>什么是服务注册与发现</h3><p>Eureka采用了CS的设计架构，Eureka Server作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。</p>
<p>在服务注册与发现中，有一个服务注册中心。当服务器启动的时候，会把当前自己服务器的信息以别名的形式注册到注册中心上。另一方面（服务消费者）以该别名从服务注册中心获取实际的服务通讯地址，然后在通过RPC远程调用框架调用对应的服务。</p>
<p><strong>Eureka系统架构</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201101220019871.png" alt="image-20201101220019871"></p>
<p><strong>Dubbo的架构</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201101220725437.png" alt="image-20201101220725437"></p>
<h3 id="Eureka的两个组件"><a href="#Eureka的两个组件" class="headerlink" title="Eureka的两个组件"></a>Eureka的两个组件</h3><ul>
<li><p>Eureka Server提供服务注册服务</p>
<p>各个微服务节点通过配置启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表中就会存储所有的可用服务节点，服务节点信息可以在界面中直观地看到</p>
</li>
<li><p>Eureka Client通过注册中心进行访问</p>
<p>是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询负载算法的负载均衡器。在应用启动后，将会向Eureka Server中发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个节点移除（默认90秒）</p>
</li>
</ul>
<h2 id="单机Eureka构建步骤"><a href="#单机Eureka构建步骤" class="headerlink" title="单机Eureka构建步骤"></a>单机Eureka构建步骤</h2><h3 id="IDEA生成Eureka-Server服务端注册中心"><a href="#IDEA生成Eureka-Server服务端注册中心" class="headerlink" title="IDEA生成Eureka Server服务端注册中心"></a>IDEA生成Eureka Server服务端注册中心</h3><p><strong>1、建module</strong></p>
<p>在父工程新建一个名为<code>cloud-eureka-server7001</code>的module</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka server--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、写yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务所需要依赖的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、测试</strong></p>
<p>启动项目，访问<a href="http://localhost:7001" target="_blank" rel="noopener">http://localhost:7001</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102103007877.png" alt="image-20201102103007877"></p>
<h3 id="cloud-provider-payment8001向注册中心注册为服务提供者"><a href="#cloud-provider-payment8001向注册中心注册为服务提供者" class="headerlink" title="cloud-provider-payment8001向注册中心注册为服务提供者"></a>cloud-provider-payment8001向注册中心注册为服务提供者</h3><p><strong>1、改pom，添加如下依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、改yml，在<code>application.yml</code>中添加如下配置：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进Eureka Server，默认值为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从Eureka Server抓取已有的注册信息，默认为true。集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>

<p><strong>3、修改主配置类，添加@EnableEurekaClient注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、测试</strong></p>
<ul>
<li><p>先启动Eureka Server，也就是前面的<code>cloud-eureka-server</code>模块</p>
</li>
<li><p>访问<a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a></p>
</li>
<li><p>微服务注册的名称就是<code>spring.application.name</code>的值</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102143317925.png" alt="image-20201102143317925"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102143338207.png" alt="image-20201102143338207"></p>
<p>可以通过在<code>application.yml</code>中修改<code>spring.application.name</code>的值来修改注册服务的名称</p>
</li>
</ul>
<h4 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102144153335.png" alt="image-20201102144153335"></p>
<p><strong>自我保护背景</strong></p>
<p>Eureka各个节点都是平等的，没有zookeeper中角色的概念，即使N-1个节点挂掉也不会影响其他节点的正常运行。</p>
<p>默认情况下，<strong>如果Eureka Server在一定时间内（默认90秒）没有接收到某个微服务实例的心跳，Eureka Server将会移除该实例</strong>。但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，而微服务本身是正常运行的，此时不应该移除这个微服务，所以引入了自我保护机制。</p>
<p><strong>自我保护机制</strong></p>
<blockquote>
<p>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加健壮、稳定的运行。</p>
</blockquote>
<p><strong>自我保护机制的工作机制是</strong>：如果在15分钟内超过了85%的客户端点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制，此时会出现以下几种情况：</p>
<ol>
<li>Eureka Server不再从注册列表中移除因为长时间没有收到心跳而应该过期的服务</li>
<li>Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上，保证当前节点依然可用</li>
<li>当网络稳定时，当前Eureka Server新的注册信息会被同步到其他节点中。</li>
</ol>
<p>因此Eureka Server可以很好的应对因网络故障导致部分节点失联的情况，而不会像zookeeper那样如果有一半不可用的情况下会导致整个集群不可用而变成瘫痪。</p>
<p><strong>自我保护开关</strong></p>
<p>Eureka自我保护机制，通过配置<code>eureka.server.enable-self-preservation</code>为<code>true/false</code>来开启/禁用自我保护机制，默认值为<code>true</code>，建议生产环境打开此配置。</p>
<h3 id="cloud-consumer-order80向注册中心注册为服务消费者"><a href="#cloud-consumer-order80向注册中心注册为服务消费者" class="headerlink" title="cloud-consumer-order80向注册中心注册为服务消费者"></a>cloud-consumer-order80向注册中心注册为服务消费者</h3><p><strong>1、改pom</strong></p>
<p>添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、写YML</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>



<p><strong>3、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>4、测试</strong></p>
<ul>
<li>启动<code>cloud-eureka-server7001</code></li>
<li>启动<code>cloud-provider-payment8001</code></li>
<li>启动<code>cloud-consumer-order80</code></li>
<li>访问<a href="http://localhost/consumer/payment/get/1" target="_blank" rel="noopener">http://localhost/consumer/payment/get/1</a></li>
</ul>
<p>到目前位置，还只是实现了服务的注册功能，服务的远程调用还是通过<code>RestTemplate</code>来实现的。</p>
<h2 id="集群Eureka构建步骤"><a href="#集群Eureka构建步骤" class="headerlink" title="集群Eureka构建步骤"></a>集群Eureka构建步骤</h2><h3 id="Eureka集群原理说明"><a href="#Eureka集群原理说明" class="headerlink" title="Eureka集群原理说明"></a>Eureka集群原理说明</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102154759063.png" alt="image-20201102154759063"></p>
<p>微服务RPC远程服务调用最核心的是什么？</p>
<p>高可用，如果注册中心只有一个，那么一旦这个注册中心出现了问题，就会导致整个服务不可用。解决方法就是：搭建Eureka注册中心集群，实现负载均衡+故障容错。</p>
<p><strong>集群原理</strong></p>
<p>各个Eureka Server会互相注册，整个集群会作为一个整体对外暴露。这样即使其中某一个注册中心出现了故障，其他注册中心仍然可以保证注册中心的正常运行。</p>
<h3 id="Eureka-Server集群环境构建步骤"><a href="#Eureka-Server集群环境构建步骤" class="headerlink" title="Eureka Server集群环境构建步骤"></a>Eureka Server集群环境构建步骤</h3><p><strong>1、创建moudle</strong></p>
<p>和<code>cloud-eureka-server7001</code>相同，创建<code>cloud-eureka-server7002</code>和<code>cloud-eureka-server7003</code></p>
<p><strong>2、修改hosts文件</strong></p>
<p>添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br><span class="line">127.0.0.1 eureka7003.com</span><br></pre></td></tr></table></figure>

<p><strong>3、修改<code>application.yml</code>配置文件</strong></p>
<p><code>cloud-eureka-server7001</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务所需要依赖的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>

<p><code>cloud-eureka-server7002</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务所需要依赖的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>

<p><code>cloud-eureka-server7003</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7003.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eureka server交互的地址查询服务和注册服务所需要依赖的地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure>

<p><strong>4、主配置类</strong></p>
<p><code>cloud-eureka-server7002</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7002</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7002<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>cloud-eureka-server7003</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7003</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7003<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong></p>
<p>启动<code>cloud-eureka-server7001</code>、<code>cloud-eureka-server7002</code>、<code>cloud-eureka-server7003</code></p>
<p>访问：<a href="http://eureka7001:7001" target="_blank" rel="noopener">http://eureka7001:7001</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102201508157.png" alt="image-20201102201508157"></p>
<p>可以看到其他两个注册中心也把自己注册到其他注册中心中</p>
<h3 id="将支付微服务发布到Eureka集群中"><a href="#将支付微服务发布到Eureka集群中" class="headerlink" title="将支付微服务发布到Eureka集群中"></a>将支付微服务发布到Eureka集群中</h3><p>修改<code>cloud-provider-payment8001</code>的<code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进Eureka Server，默认值为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从Eureka Server抓取已有的注册信息，默认为true。集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka</span></span><br></pre></td></tr></table></figure>

<p>支付微服务集群，创建<code>cloud-provider-payment8002</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br></pre></td></tr></table></figure>



<h3 id="将订单微服务发布到Eureka集群中"><a href="#将订单微服务发布到Eureka集群中" class="headerlink" title="将订单微服务发布到Eureka集群中"></a>将订单微服务发布到Eureka集群中</h3><p>修改<code>cloud-consumer-order80</code>的<code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka</span></span><br></pre></td></tr></table></figure>



<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>启动了所有模块之后，访问<a href="http://localhost/consumer/payment/get/1" target="_blank" rel="noopener">http://localhost/consumer/payment/get/1</a></p>
<p>结果发现，虽然注册中心中同一个名称对应的服务已经有两个地址了</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102212906630.png" alt="image-20201102212906630"></p>
<p>但是无论怎么访问，都是调用的8001端口对应的支付服务提供者，这是因为在<code>cloud-consumer-order80</code>中远程调用的地址已经写死了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">"http://localhost:8001"</span>;</span><br></pre></td></tr></table></figure>

<p>可以将其修改为（也就是eureka server中对应服务的名称）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">"http://CLOUD-PAYMENT-SERVICE"</span>;</span><br></pre></td></tr></table></figure>

<p>这样获取的服务地址会有多个，所以需要开启<code>RestTemplate</code>的负载均衡功能，可以使用@LoadBalanced</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能了！</p>
<h2 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h2><h3 id="主机名称：服务名称修改"><a href="#主机名称：服务名称修改" class="headerlink" title="主机名称：服务名称修改"></a>主机名称：服务名称修改</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102215037995.png" alt="image-20201102215037995"></p>
<p>如果想要修改这里显示的信息，可以设置<code>eureka.instance.instance-id</code>的值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">instance:</span> </span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102215257434.png" alt="image-20201102215257434"></p>
<h3 id="访问信息有ip信息提示"><a href="#访问信息有ip信息提示" class="headerlink" title="访问信息有ip信息提示"></a>访问信息有ip信息提示</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102215542835.png" alt="image-20201102215542835"></p>
<p>如图所示，超链接不显示ip地址，如果想要显示ip地址，则可以设置<code>eureka.instance.prefer-ip-address</code>的值为<code>true</code>即可（默认值为false）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">instance:</span> </span><br><span class="line">  <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102215746441.png" alt="image-20201102215746441"></p>
<h2 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h2><p>对于注册再eureka中的微服务，可以通过服务发现来获得该服务的信息</p>
<p><strong>1、修改<code>cloud-provider-payment8001</code>的controller</strong></p>
<p>添加如下内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/discovery"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取注册中心的所有服务名称</span></span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">        log.info(<span class="string">"****服务名称: "</span> + service);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取对应服务名称中的实例</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"cloud-payment-service"</span>);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(<span class="string">"****实例信息: "</span> + instance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> services;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、在主配置类使用@EnableDiscoveryClient开启服务发现功能</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、热部署后进行测试</strong></p>
<p>访问：<a href="http://localhost:8001/payment/discovery" target="_blank" rel="noopener">http://localhost:8001/payment/discovery</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102222914395.png" alt="image-20201102222914395"></p>
<p>服务端控制台显示</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201102223006529.png" alt="image-20201102223006529"></p>
<h2 id="Eureka自我保护"><a href="#Eureka自我保护" class="headerlink" title="Eureka自我保护"></a>Eureka自我保护</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，<strong>Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务</strong></p>
<p>如果在Eureka Server的首页看到下图所示的提示，说明Eureka进入了保护模式</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201103074741125.png" alt="image-20201103074741125"></p>
<h3 id="自我保护出现的原因"><a href="#自我保护出现的原因" class="headerlink" title="自我保护出现的原因"></a>自我保护出现的原因</h3><p>为了保证Eureka Client正常运行，但是Eureka Server网络不通畅的情况下，Eureka Server<strong>不会立刻</strong>将Eureka Client服务剔除。</p>
<p><strong>什么是自我保护模式？</strong></p>
<p>默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）。但是当网络分区发生故障时（延时、卡顿、拥挤）时，微服务与Eureka Server之间无法正常通信，以上行为可能很危险。因为服务本身其实是健康的，<strong>此时不应该注销这个微服务</strong>。Eureka通过自我保护模式来解决这个问题，当Eureka Server节点在短时间内丢失过多客户端时，那么这个节点就会进入自我保护模式。</p>
<p>自我保护机制的工作机制是：<strong>如果在15分钟内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制</strong>，此时会出现以下几种情况：</p>
<ol>
<li>Eureka Server不再从注册列表中移除因为长时间没收到心跳而应该过期的服务。</li>
<li>Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上，保证当前节点依然可用。</li>
<li>当网络稳定时，当前Eureka Server新的注册信息会被同步到其它节点中。</li>
</ol>
<p>因此Eureka Server可以很好的应对因网络故障导致部分节点失联的情况，而不会像ZK那样如果有一半不可用的情况会导致整个集群不可用而变成瘫痪。</p>
<h3 id="自我保护开关"><a href="#自我保护开关" class="headerlink" title="自我保护开关"></a>自我保护开关</h3><p>Eureka自我保护机制，通过配置<code>eureka.server.enable-self-preservation</code>为<code>true</code>打开/<code>false</code>禁用自我保护机制，默认值为<code>true</code>，生产环境中建议打开此配置。</p>
<h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><p>开发环境中如果要实现服务失效能自动移除，只需要修改以下配置。</p>
<p><strong>1、注册中心关闭自我保护机制，修改检查失效服务的时间</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">server:</span> </span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p><strong>2、微服务修改微服务的心跳时间</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">instance:</span> </span><br><span class="line">    <span class="comment">#默认值为90秒</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">#默认值为30秒</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Eureka服务注册与发现</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器相关知识</title>
    <url>/2020/10/22/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="服务器相关知识"><a href="#服务器相关知识" class="headerlink" title="服务器相关知识"></a>服务器相关知识</h1><p><strong>为什么需要一个自己的服务器？</strong></p>
<ol>
<li>作为一个程序员，需要发布自己的网站和项目</li>
<li>练习Linux操作</li>
<li>搭建自己的远程仓库、远程数据库、远程Tomcat，这些都可以搭建在服务器上</li>
<li>练习，生产环境中服务器都是使用Linux，所以自己练习的时最好也使用Linux</li>
</ol>
<h2 id="服务器购买"><a href="#服务器购买" class="headerlink" title="服务器购买"></a>服务器购买</h2><p>购买的途径有很多，例如：腾讯云、阿里云等等</p>
<p>香港服务器可以不用备案，但是尽量不要自己挂VPN，容易被封！</p>
<p>可以购买在做活动的服务器，或者24岁以下购买学生机！</p>
<h2 id="买完服务器之后应该做什么"><a href="#买完服务器之后应该做什么" class="headerlink" title="买完服务器之后应该做什么"></a>买完服务器之后应该做什么</h2><p>服务器就是一个远程的Linux，我们可以通过一些本地的工具来连接Linux！</p>
<ol>
<li><p>在阿里云购买的，需要开通安全组设置，进行端口映射；否则外部无法访问</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022091808926.png" alt="image-20201022091808926"></p>
</li>
<li><p>获取服务器的公网IP地址；修改实例名称和密码</p>
</li>
<li><p>使用这个公网ip、root以及修改之后的密码</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022092550175.png" alt="image-20201022092550175"></p>
<p>连接之后就是普通的Linux使用了！</p>
</li>
</ol>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="傻瓜式（宝塔面板）"><a href="#傻瓜式（宝塔面板）" class="headerlink" title="傻瓜式（宝塔面板）"></a>傻瓜式（宝塔面板）</h3><p>安装教程</p>
<p>官网网址：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p>
<p>安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<p>下载完毕之后，就可以得到一个地址，也就是宝塔的管理面板的地址，地址下面就是用户名密码</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022094804503.png" alt="image-20201022094804503"></p>
<p>想要安装某个软件，可以在软件商店中搜索然后安装</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022094852034.png" alt="image-20201022094852034"></p>
<p><strong>一键部署</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022095356692.png" alt="image-20201022095356692"></p>
<p><strong>端口开启</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201022095541440.png" alt="image-20201022095541440"></p>
<p>当然，还是需要在阿里云的安全组中开启对应端口！</p>
<p>放入网站进行访问：</p>
<p>tomcat就放在webapps目录下</p>
<p>特殊的网站：开源项目，就安装官方文档进行操作即可！</p>
<p><strong>上传文件尽量使用XFTP</strong></p>
<p>（访问不到，一定是防火墙出现了问题，需要在Linux服务器上开启对应端口）</p>
<p>war包丢到tomcat即可</p>
<p>jar直接用java -jar执行即可访问</p>
<h3 id="命令式（原生"><a href="#命令式（原生" class="headerlink" title="命令式（原生)"></a>命令式（原生)</h3><p>原生也就是使用Linux，在Linux相关的内容讲解！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS</title>
    <url>/2020/11/05/CAS/</url>
    <content><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><h2 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h2>]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile</title>
    <url>/2020/11/05/volatile/</url>
    <content><![CDATA[<h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><p><strong>面试题</strong>：谈谈你对volatile的理解</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>经典面试题</tag>
        <tag>volatile</tag>
      </tags>
  </entry>
  <entry>
    <title>八、OpenFeign服务接口调用</title>
    <url>/2020/11/05/%E5%85%AB%E3%80%81OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="OpenFeign服务接口调用"><a href="#OpenFeign服务接口调用" class="headerlink" title="OpenFeign服务接口调用"></a>OpenFeign服务接口调用</h1><p>官方文档：<a href="https://docs.spring.io/spring-cloud-openfeign/docs/2.2.5.RELEASE/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-openfeign/docs/2.2.5.RELEASE/reference/html/</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="OpenFeign是什么"><a href="#OpenFeign是什么" class="headerlink" title="OpenFeign是什么"></a>OpenFeign是什么</h3><p>Feign是一个声明式Web Service客户端。使用Feign能让编写Web Service客户端更加简单。</p>
<p>它的使用方法是<strong>定义一个服务接口然后在上面添加注解</strong>。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign也可以与Eureka和Ribbon组合用以支持负载均衡。</p>
<h3 id="可以做什么"><a href="#可以做什么" class="headerlink" title="可以做什么"></a>可以做什么</h3><p>Feign旨在让编写Java Http客户端更加简单。</p>
<p>前面介绍过使用Ribbon + RestTemplate，利用RestTemplate对HTTP请求的封装处理，形成了一套模块化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往<strong>一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖的调用</strong>。所以，Feign在此基础上做了进一步封装，由它来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，<strong>只需要创建一个接口并使用注解的方式来配置它（以前是Dao接口上标注Mapper注解，现在是一个微服务接口上标注一个Feign注解即可）</strong>，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon时，自动封装服务调用客户端的开发量。</p>
<p><strong>Feign集成了Ribbon</strong>。在之前的模块中，利用了Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</p>
<h3 id="Feign和OpenFeign的区别"><a href="#Feign和OpenFeign的区别" class="headerlink" title="Feign和OpenFeign的区别"></a>Feign和OpenFeign的区别</h3><table>
<thead>
<tr>
<th>Feign</th>
<th>OepnFeign</th>
</tr>
</thead>
<tbody><tr>
<td>Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端<br/>Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务。</td>
<td>OpenFeign是SpringCloud在Feign的基础上支持了Spring MVC的注解，如@RequestMapping等等。OpenFeign的@FeignClient可以解析Spring MVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td>
</tr>
</tbody></table>
<p>Feign依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>OpenFeign依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="OpenFeign使用步骤"><a href="#OpenFeign使用步骤" class="headerlink" title="OpenFeign使用步骤"></a>OpenFeign使用步骤</h2><p><strong>1、建module</strong></p>
<p>新建<code>cloud-consumer-feign-order80</code>模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、编写<code>application.yml</code></strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,</span> <span class="string">http://eureka7002.com:7002/eureka,</span> <span class="string">http://eureka7003.com:7003</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务类</strong></p>
<p>在service包下创建服务调用的接口，使用@FeignClient指定要调用的服务名称，使用@RequestMapping下的注解来指定要访问的请求路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong></p>
<p>启动Eureka集群：<code>cloud-eureka-server7001</code>、<code>cloud-eureka-server7002</code>、<code>cloud-eureka-server7003</code></p>
<p>启动服务提供者：<code>cloud-provider-payment8001</code>、<code>cloud-provider-payment8002</code></p>
<p>最后启动：<code>cloud-consumer-feign-order80</code></p>
<p>访问：<a href="http://localhost/consumer/payment/get/1" target="_blank" rel="noopener">http://localhost/consumer/payment/get/1</a></p>
<h2 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h2><h3 id="超时演示"><a href="#超时演示" class="headerlink" title="超时演示"></a>超时演示</h3><p>正常情况下是不会超时的，为了模拟超时，在<code>cloud-provider-payment8001</code>的controller中添加如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/feign/timeout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">timeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>cloud-consumer-feign-order80</code>的PaymentFeignService中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/payment/feign/timeout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">timeout</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>OrderFeignController中添加如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/feign/timeout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">timeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.timeout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>访问：<a href="http://localhost/consumer/payment/feign/timeout，结果如下：" target="_blank" rel="noopener">http://localhost/consumer/payment/feign/timeout，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201105175305194.png" alt="image-20201105175305194"></p>
<h3 id="OpenFeign超时机制"><a href="#OpenFeign超时机制" class="headerlink" title="OpenFeign超时机制"></a>OpenFeign超时机制</h3><p>默认情况下，Feign客户端只会等待1s，但是服务端处理需要超过1s，导致Feign客户端等待超时，直接报错。为了避免这种情况，有时需要设置Feign客户端的超时控制。</p>
<p><strong>超时配置</strong></p>
<p>feign中使用了ribbon，所以引入了open feign就不需要引入ribbon</p>
<p>在<code>cloud-consumer-feign-order80</code>的<code>application.yml</code>中添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>



<h2 id="OpenFeign日志打印功能"><a href="#OpenFeign日志打印功能" class="headerlink" title="OpenFeign日志打印功能"></a>OpenFeign日志打印功能</h2><p>Feign还提供了日志打印功能，可以通过配置来调整日志级别，从而了解Feign中HTTP请求的细节。其实就是对<strong>对Feign接口的调用情况进行监控</strong></p>
<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul>
<li><strong>NONE</strong>：默认值，不显示任何日志</li>
<li><strong>BASIC</strong>：仅记录请求方法、URL、响应状态码及执行时间</li>
<li><strong>HEADERS</strong>：除了BASIC中定义的信息外，还有请求和响应的头信息</li>
<li><strong>FULL</strong>：除了HEADERS中定义的信息之外，还有请求和响应的正文和元数据</li>
</ul>
<h3 id="配置日志级别"><a href="#配置日志级别" class="headerlink" title="配置日志级别"></a>配置日志级别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>yml配置，打开对应包的日志</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.zxw.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>



<p><strong>测试</strong></p>
<p>访问：<a href="http://localhost/consumer/payment/feign/timeout，结果如下" target="_blank" rel="noopener">http://localhost/consumer/payment/feign/timeout，结果如下</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201105182722748.png" alt="image-20201105182722748"></p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>OpenFeign服务接口调用</tag>
      </tags>
  </entry>
  <entry>
    <title>九、Hystrix断路器</title>
    <url>/2020/11/05/%E4%B9%9D%E3%80%81Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Hystrix断路器"><a href="#Hystrix断路器" class="headerlink" title="Hystrix断路器"></a>Hystrix断路器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h3><p>复杂的分布式系统结构一般都有很多依赖关系，一旦其中一个微服务出现了问题，可能会导致依赖其的其他微服务也出现问题，从而发生“雪崩”。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201105202640069.png" alt="image-20201105202640069"></p>
<p>如上所示，服务D由于处理的请求过多，导致响应时间变长，从而影响到了依赖微服务D的微服务B；又由于微服务A依赖了微服务B，所以微服务A也被影响了。</p>
<p>可以看见分布式系统中，一个服务出现了问题，就可能出现<strong>服务雪崩</strong>。所以我们需要一个处理这种问题的方法，让在某个微服务发生问题时系统能够最大限度的减小损失！</p>
<h3 id="Hystrix是什么"><a href="#Hystrix是什么" class="headerlink" title="Hystrix是什么"></a>Hystrix是什么</h3><p>Hystrix是一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库。在分布式系统里，许多依赖不可避免的会调用失败（比如超时、异常等），Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong></p>
<p><strong>断路器</strong>本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似保险丝熔断），<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方法无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免在分布式系统中的蔓延，乃至雪崩。</p>
<p>官方资料：<a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p>
<h3 id="Hystrix能做什么"><a href="#Hystrix能做什么" class="headerlink" title="Hystrix能做什么"></a>Hystrix能做什么</h3><ul>
<li><p>服务降级</p>
</li>
<li><p>服务熔断</p>
</li>
<li><p>接近实时的监控</p>
<p>。。。</p>
</li>
</ul>
<h3 id="Hystrix停止更新，进入维护"><a href="#Hystrix停止更新，进入维护" class="headerlink" title="Hystrix停止更新，进入维护"></a>Hystrix停止更新，进入维护</h3><p>访问：<a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201105204447103.png" alt="image-20201105204447103"></p>
<p>Hystrix已经停止更新，进入了维护状态！</p>
<ul>
<li>被动修复bugs</li>
<li>不再接受合并请求</li>
<li>不再发布新版本</li>
</ul>
<p>这里还提到了，推荐使用resilience4j来替代。但是，国内一般会使用Sentinel来替换</p>
<h2 id="Hystrix重要概念"><a href="#Hystrix重要概念" class="headerlink" title="Hystrix重要概念"></a>Hystrix重要概念</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>fallback</p>
<p>可以这样来描述降级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务降级就相当于这个<code>else {…}</code>的作用，当服务不可用的时候，需要使用服务降级来<strong>兜底</strong>，即实在无法解决就使用服务降级来返回一个友好的提示（fallback）</p>
<p><strong>哪些情况会触发降级</strong></p>
<ul>
<li>程序运行异常</li>
<li>超时</li>
<li>服务熔断触发服务降级</li>
<li>线程池/信号量打满也会导致服务降级</li>
</ul>
<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>break</p>
<p>服务熔断就是<strong>保险丝</strong>，当服务达到最大服务访问时，直接拒绝访问，然后调用服务降级的方法返回友好提示</p>
<p>可以看出服务熔断是比服务降级更加严重的措施。</p>
<p>服务降级&rightarrow;服务熔断&rightarrow;恢复调用链路</p>
<p>开始会使用服务降级来处理，如果访问过多就会进行服务熔断操作，当访问两恢复了正常值就恢复调用链路。</p>
<h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3><p>flowlimit</p>
<p>秒杀等高并发操作，严禁一窝蜂拥挤过来，大家排队，每秒的访问量固定，有序进行</p>
<h2 id="Hystrix案例"><a href="#Hystrix案例" class="headerlink" title="Hystrix案例"></a>Hystrix案例</h2><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><p><strong>1、建module</strong></p>
<p>新建名为<code>cloud-provider-hystrix-payment8001</code>的模块</p>
<p><strong>2、POM</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-hystrix-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、YML</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务编写</strong></p>
<p><code>PaymentService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常访问，不会出现问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池: "</span> + Thread.currentThread().getName() + <span class="string">" paymentInfo_OK,id: "</span> + id + <span class="string">"\t"</span> + <span class="string">"😍😍👍"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeInSeconds = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeInSeconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池: "</span> + Thread.currentThread().getName() + <span class="string">" paymentInfo_timeout,id: "</span> + id + <span class="string">"\t"</span> + <span class="string">"耗时"</span> + timeInSeconds + <span class="string">"秒钟"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PaymentController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentInfo_OK(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentService.paymentInfo_timeout(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6、测试</strong></p>
<ol>
<li><p>启动<code>cloud-eureka-server7001</code></p>
</li>
<li><p>启动<code>cloud-provider-hystrix-payment8001</code></p>
</li>
<li><p>访问</p>
<ul>
<li><p><a href="http://localhost:8001/payment/hystrix/ok/1" target="_blank" rel="noopener">http://localhost:8001/payment/hystrix/ok/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201105220516170.png" alt="image-20201105220516170"></p>
</li>
<li><p><a href="http://localhost:8001/payment/hystrix/timeout/1" target="_blank" rel="noopener">http://localhost:8001/payment/hystrix/timeout/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201105220535163.png" alt="image-20201105220535163"></p>
</li>
</ul>
</li>
</ol>
<p>测试成功之后就可以使用这个模块来演示</p>
<h3 id="高并发测试"><a href="#高并发测试" class="headerlink" title="高并发测试"></a>高并发测试</h3><p>上面的测试是建立在非高并发访问的情况下，所以还没有出现问题。</p>
<h3 id="jmeter压力测试"><a href="#jmeter压力测试" class="headerlink" title="jmeter压力测试"></a>jmeter压力测试</h3><p>下载jmeter：<a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">https://jmeter.apache.org/download_jmeter.cgi</a></p>
<p>启动jmeter，在测试计划中先建立线程组，配置如下：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106095809738.png" alt="image-20201106095809738"></p>
<p>在线程组中建立HTTP请求，配置如下：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201105223938197.png" alt="image-20201105223938197"></p>
<p>此时在浏览器中访问：<a href="http://localhost/payment/hystrix/ok/1，和之前的此时不同，这次需要等待一段时间（等待、卡顿、延时）才能够得到响应" target="_blank" rel="noopener">http://localhost/payment/hystrix/ok/1，和之前的此时不同，这次需要等待一段时间（等待、卡顿、延时）才能够得到响应</a></p>
<p><strong>结论</strong>：此处的测还支持直接访问8001的结果，如果是来自消费者80端口的访问，那消费者只能等待甚至报错！</p>
<h4 id="加入消费者进行测试"><a href="#加入消费者进行测试" class="headerlink" title="加入消费者进行测试"></a>加入消费者进行测试</h4><p><strong>1、建module</strong></p>
<p>新建名为<code>cloud-consumer-feign-hystrix-order80</code>的模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-hystrix-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtool--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--open feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、YML</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务类</strong></p>
<p><code>PaymentHystrixService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>OrderHystrixController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">"result: "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_timeout(id);</span><br><span class="line">        log.info(<span class="string">"result: "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>访问：</p>
<ul>
<li><a href="http://localhost/consumer/payment/hystrix/ok/1，这个可以正常访问" target="_blank" rel="noopener">http://localhost/consumer/payment/hystrix/ok/1，这个可以正常访问</a></li>
<li><a href="http://localhost/consumer/payment/hystrix/timeout/1，这个会报错，因为feign的超时时间为1秒，超过了就会报错" target="_blank" rel="noopener">http://localhost/consumer/payment/hystrix/timeout/1，这个会报错，因为feign的超时时间为1秒，超过了就会报错</a></li>
</ul>
<p>同样进行jmeter进行高并发测试，结果就是</p>
<ul>
<li>延时返回结果（不断转圈）</li>
<li>否则就是超时报错（等待时间太长超过了feign的超时时间）</li>
</ul>
<p>原因：tomcat服务器中使用了线程池，当线程池中的所有线程都被使用时，其他请求就必须等待</p>
<h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>服务提供者（8001）超时了，服务消费者（80）不能一直等待，必须有服务降级</p>
<p>服务提供者（8001）宕机了，服务消费者（80）不能一直等待，必须有服务降级</p>
<p>服务提供者（8001）没有问题，服务消费者出现故障或者等待时间小于服务提供者，自己也要进行服务降级</p>
<h3 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h3><p>降级配置要使用@HystrixCommand注解</p>
<h4 id="服务提供者服务降级"><a href="#服务提供者服务降级" class="headerlink" title="服务提供者服务降级"></a>服务提供者服务降级</h4><p>修改<code>PaymentService</code></p>
<p>在要配置服务降级的方法上使用@HystrixCommand注解进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常访问，不会出现问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池: "</span> + Thread.currentThread().getName() + <span class="string">" paymentInfo_OK,id: "</span> + id + <span class="string">"\t"</span> + <span class="string">"😍😍👍"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_timeoutHandler"</span>, commandProperties = &#123;</span><br><span class="line">            <span class="comment">//3秒以内就执行正常业务逻辑，否则调用fallbackMethod指定的方法</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"3000"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeInSeconds = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeInSeconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池: "</span> + Thread.currentThread().getName() + <span class="string">" paymentInfo_timeout,id: "</span> + id + <span class="string">"\t"</span> + <span class="string">"耗时"</span> + timeInSeconds + <span class="string">"秒钟"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeoutHandler</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池: "</span> + Thread.currentThread().getName() + <span class="string">" 系统繁忙，请稍后再试！id:"</span> + id + <span class="string">"\t😼"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主启动类上添加@EnableCircuitBreaker注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong>：访问<a href="http://localhost:8001/payment/hystrix/timeout/1" target="_blank" rel="noopener">http://localhost:8001/payment/hystrix/timeout/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106164443636.png" alt="image-20201106164443636"></p>
<p>由于<code>paymentInfo_timeout</code>方法会休眠5秒，超过了@HystrixCommand中配置的3秒的超时时间，所以会调用fallbackMethod指定的方法<code>paymentInfo_timeoutHandler</code>（参数和<code>paymentInfo_timeout</code>相同）</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106170707152.png" alt="image-20201106170707152"></p>
<p>注意：这里的线程名称是HystrixTimer，使用的是Hystrix的超时线程池；如果线程名是<code>hystrix-PaymentService</code>，则说明是业务方法内部发生了错误！</p>
<p>只要是当前服务不可用了，就会调用服务降级来兜底！也就是调用<code>paymentInfo_timeoutHandler</code>方法</p>
<h4 id="服务消费者服务降级"><a href="#服务消费者服务降级" class="headerlink" title="服务消费者服务降级"></a>服务消费者服务降级</h4><p>同理也可以对服务消费者进行服务降级（参照服务提供者的服务降级）</p>
<p><strong>yml配置</strong></p>
<p>开启feign的hystrix的支持</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>主启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>OrderHystrixController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_timeoutHandler"</span>, commandProperties = &#123;</span><br><span class="line">    <span class="comment">//3秒以内就执行正常业务逻辑，否则调用fallbackMethod指定的方法</span></span><br><span class="line">    <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"3000"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    String result = paymentHystrixService.paymentInfo_timeout(id);</span><br><span class="line">    log.info(<span class="string">"result: "</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeoutHandler</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"线程池: "</span> + Thread.currentThread().getName() + <span class="string">" 80系统繁忙，请稍后再试！id:"</span> + id + <span class="string">"\t😼"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong>：</p>
<p>1、等待服务提供者返回结果超时</p>
<p>访问：<a href="http://localhost/consumer/payment/hystrix/timeout/1" target="_blank" rel="noopener">http://localhost/consumer/payment/hystrix/timeout/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106173158726.png" alt="image-20201106173158726"></p>
<p>出现这个结果是因为，调用服务提供者的服务的时候超过3秒会执行服务提供者的服务降级，但是feign默认1秒就超时了，所以会报错，但是服务消费者也提供了服务降级，所以会执行服务消费者的服务降级方法。</p>
<p>2、服务消费者本身超时</p>
<p>修改controller中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_timeoutHandler"</span>, commandProperties = &#123;</span><br><span class="line">    <span class="comment">//3秒以内就执行正常业务逻辑，否则调用fallbackMethod指定的方法</span></span><br><span class="line">    <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"3000"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> timeInSeconds = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//休眠5秒</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(timeInSeconds);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    String result = paymentHystrixService.paymentInfo_timeout(id);</span><br><span class="line">    log.info(<span class="string">"result: "</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时访问<a href="http://localhost/consumer/payment/hystrix/timeout/1，结果如下：" target="_blank" rel="noopener">http://localhost/consumer/payment/hystrix/timeout/1，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106173649794.png" alt="image-20201106173649794"></p>
<p>此时由于服务消费者中的方法休眠导致方法的执行时间超过了@HystrixCommand中指定的超时时间，所以调用了fallbackMethod指定的方法</p>
<p>3、服务消费者发生错误</p>
<p>修改controller中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_timeoutHandler"</span>, commandProperties = &#123;</span><br><span class="line">    <span class="comment">//3秒以内就执行正常业务逻辑，否则调用fallbackMethod指定的方法</span></span><br><span class="line">    <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"3000"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    <span class="comment">//认为制造一个异常</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    String result = paymentHystrixService.paymentInfo_timeout(id);</span><br><span class="line">    log.info(<span class="string">"result: "</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次访问结果如下:</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106173905815.png" alt="image-20201106173905815"></p>
<p>此时由于服务消费者内部发生了异常从而调用了fallbackMethod指定的方法！</p>
<h4 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h4><p>1、<strong>代码耦合</strong>，业务方法和兜底方法都放在一个类中会导致代码耦合！</p>
<p>2、<strong>代码膨胀</strong>，每一个业务方法都需要一个兜底方法！</p>
<h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p><strong>解决代码膨胀问题</strong></p>
<p>可以使用<code>@DefaultProperties(defaultFallback = “”)</code>来解决，即提供一个默认的兜底方法（针对没有配置兜底方法的来说），如果使用@HystrixCommand的fallbackMethod属性注解指定了兜底方法，则使用指定的方法来实现服务降级；如果使用了@HsytrixCommand注解但是没有指定fallbackMethod属性指定，则使用默认的兜底方法！</p>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultHandler"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">"result: "</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">defaultHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池: "</span> + Thread.currentThread().getName() + <span class="string">" 默认的兜底方法！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时访问<a href="http://localhost/consumer/payment/hystrix/ok/1，结果如下" target="_blank" rel="noopener">http://localhost/consumer/payment/hystrix/ok/1，结果如下</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106175310708.png" alt="image-20201106175310708"></p>
<p><strong>解决代码耦合问题</strong></p>
<p>代码耦合的问题，只需要提供一个@FeignClient注解标注的接口的实现类，然后再@FeignClient的fallback属性为这个实现类即可。</p>
<p><code>PaymentHystrixService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>, fallback = PaymentFallbackService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PaymentFallbackService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"paymentInfo_OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"paymentInfo_timeout"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>停止服务提供者8001，然后访问<a href="http://localhost/consumer/payment/hystrix/ok/1和http://localhost/consumer/payment/hystrix/timeout/1" target="_blank" rel="noopener">http://localhost/consumer/payment/hystrix/ok/1和http://localhost/consumer/payment/hystrix/timeout/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106201112941.png" alt="image-20201106201112941"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201106201135023.png" alt="image-20201106201135023"></p>
<p>这样就实现了服务方法和服务降级方法的分离</p>
<h3 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h3><h4 id="服务熔断是什么"><a href="#服务熔断是什么" class="headerlink" title="服务熔断是什么"></a>服务熔断是什么</h4><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。</p>
<p><strong>当检测到该节点的微服务调用响应正常后，恢复调用链路</strong></p>
<p>在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是@HystrixCommand</p>
<p>熟悉的大神Martin Fowler的论文：<a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">https://martinfowler.com/bliki/CircuitBreaker.html</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108160044903.png" alt="image-20201108160044903"></p>
<p>断路器有三种状态</p>
<ul>
<li>开</li>
<li>关</li>
<li>半开</li>
</ul>
<p>将设断路器能够接收的访问量是每秒100次</p>
<p>如果每秒的访问量小于100次，那么断路器处于关闭状态，服务能够正常访问</p>
<p>此时，如果每秒的访问量突然激增到了每秒500次，断路器觉得超过了阈值，所以就打开了，服务也就不能够访问了</p>
<p>但是，断路器不能一直开着，不然服务就没法访问了，所以断路器是进入了半开状态（一种受保护的调用状态），如果访问量恢复了正常，那么断路器就会关闭，此时调用链路也就恢复了。</p>
<h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h4><p>光说不练假把式，下面就写一个Hystrix服务熔断的示例</p>
<p>修改<code>cloud-provider-hystrix-payment8001</code>的<code>PaymentService</code>，添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentCircuitBreaker_fallback"</span>, commandProperties = &#123;</span><br><span class="line">    <span class="comment">//开启断路器</span></span><br><span class="line">    <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.enabled"</span>, value = <span class="string">"true"</span>),</span><br><span class="line">    <span class="comment">//请求次数</span></span><br><span class="line">    <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>, value = <span class="string">"10"</span>),</span><br><span class="line">    <span class="comment">//时间窗口期</span></span><br><span class="line">    <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>, value = <span class="string">"10000"</span>),</span><br><span class="line">    <span class="comment">//失败率达到多少后跳闸</span></span><br><span class="line">    <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>, value = <span class="string">"60"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"id不能为负数！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String serialNumber = IdUtil.simpleUUID();</span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"调用成功, 流水号:"</span> + serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id 不能为负数，请稍后再试(￣▽￣)~~ id:"</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段的配置，就是在请求10次如果有6次失败了，断路器就跳闸。过了窗口期时间10s之后会进入half open状态</p>
<p>@HystrixCommand能配置哪些内容可以参考这篇博客：<a href="https://blog.csdn.net/u010395804/article/details/80266335" target="_blank" rel="noopener">https://blog.csdn.net/u010395804/article/details/80266335</a></p>
<p>也可以参考<code>HystrixCommandProperties</code>这个属性类</p>
<p><code>PaymentController</code>添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/circuit/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">    String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">"result:"</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong>：</p>
<p>正常测试：<a href="http://localhost:8001/payment/circuit/1，结果如下：" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/1，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108164816391.png" alt="image-20201108164816391"></p>
<p>访问负数id：<a href="http://localhost:8001/payment/circuit/-1，结果如下：" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/-1，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108164905477.png" alt="image-20201108164905477"></p>
<p>疯狂刷新，保证10内以负数id访问的次数超过10次，然后以正常id访问：<a href="http://localhost:8001/payment/circuit/1" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108165028000.png" alt="image-20201108165028000"></p>
<p>结果发现，现在连正常的id访问都会调用fallback方法，这说明服务熔断被触发了</p>
<p>过一段时间，再次以正常id访问：<a href="http://localhost:8001/payment/circuit/1" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108165146753.png" alt="image-20201108165146753"></p>
<p>结果发现服务又可以正常访问了</p>
<h4 id="熔断类型"><a href="#熔断类型" class="headerlink" title="熔断类型"></a>熔断类型</h4><ul>
<li><strong>熔断打开</strong>：请求不再调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态</li>
<li><strong>熔断关闭</strong>：不会对服务进行熔断</li>
<li><strong>熔断半开</strong>：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li>
</ul>
<h4 id="官网断路器流程"><a href="#官网断路器流程" class="headerlink" title="官网断路器流程"></a>官网断路器流程</h4><p><strong>涉及断路器的重要参数</strong>：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108180044826.png" alt="image-20201108180044826"></p>
<ul>
<li><p><strong>circuitBreaker 配置</strong></p>
<p>该配置前缀为 <strong>hystrix.command.default</strong></p>
<ul>
<li><strong>circuitBreaker.enabled</strong>：该属性用来确定当服务请求命令失败时，是否使用断路器来跟踪其健康指标和熔断请求，默认值 true</li>
<li><strong>circuitBreaker.requestVolumeThreshold</strong>：该属性用来设置在滚动时间窗中，断路器的最小请求数。例如：默认值 20 的情况下，如果滚动时间窗（默认值 10秒）内仅收到19个请求，即使这19个请求都失败了，断路器也不会打开。</li>
<li><strong>circuitBreaker.sleepWindowInMilliseconds</strong>：该属性用来设置当断路器打开之后的休眠时间窗。默认值 5000 毫秒，休眠时间窗结束之后，会将断路器设置为”半开”状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为”打开”状态，如果成功就设置为”关闭”状态。</li>
<li><strong>circuitBreaker.errorThresholdPercentage</strong>：该属性用来设置断路器打开的错误百分比条件。例如，默认值为 50 的情况下，表示在滚动时间窗中，在请求数量超过 circuitBreaker.requestVolumeThreshold 阈值的请求下，如果错误请求数的百分比超过50，就把断路器设置为”打开”状态，否则就设置为”关闭”状态。</li>
<li><strong>circuitBreaker.forceOpen</strong>：该属性用来设置断路器强制进入”打开”状态，会拒绝所有请求，该属性优先于 circuitBreaker.forceClosed</li>
<li><strong>circuitBreaker.forceClosed</strong>：该属性用来设置断路器强制进入”关闭”状态，会接收所有请求。</li>
</ul>
</li>
</ul>
<h2 id="服务监控hystrixDashboard"><a href="#服务监控hystrixDashboard" class="headerlink" title="服务监控hystrixDashboard"></a>服务监控hystrixDashboard</h2><p>除了隔离依赖服务的调用外，Hystrix还提供了<strong>准实时的调用监控（Hystrix Dashboard）</strong>，Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求、多少成功、多少失败等。Netflix通过<code>hystrix-metrics-event-stream</code>项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，将监控内容转换为可视化界面。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p><strong>1、建module</strong></p>
<p>建立名为<code>cloud-consumer-hystrix-dashboard9001</code>模块</p>
<p><strong>2、pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-hystrix-dashboard9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix dashboard--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">  	<span class="comment">#允许localhost</span></span><br><span class="line">    <span class="attr">proxy-stream-allow-list:</span> <span class="string">"localhost"</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主配置</strong></p>
<p>使用@EnableHystrixDashboard开启Hystrix Dashboard</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardMain9001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong></p>
<p>访问<a href="http://localhost:9001/hystrix，出现下面的界面说明成功：" target="_blank" rel="noopener">http://localhost:9001/hystrix，出现下面的界面说明成功：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108191007476.png" alt="image-20201108191007476"></p>
<p><strong>修改服务提供者8001</strong></p>
<p>1、引入actuator依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、配置文件中开放health、info、hystrix.stream端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include:</span><br><span class="line">        - <span class="string">'hystrix.stream'</span></span><br><span class="line">        - <span class="string">'health'</span></span><br><span class="line">        - <span class="string">'info'</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108200811541.png" alt="image-20201108200811541"></p>
<p>点击Monitor Stream，开始监控</p>
<blockquote>
<p>如果一直loading，说明还没有访问监控的服务，访问一个就可以显示了</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108201052689.png" alt="image-20201108201052689"></p>
<p>没有熔断前的访问：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108201231951.png" alt="image-20201108201231951"></p>
<p>可以看到此时处于Closed状态</p>
<p>连续多次访问负数id</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108201325383.png" alt="image-20201108201325383"></p>
<p>此时Circuit的状态已经变成了Open状态</p>
<p>过一段时间，访问一个正数id，发现Circuit又变成了Closed状态</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108201456442.png" alt="image-20201108201456442"></p>
<h3 id="怎么看"><a href="#怎么看" class="headerlink" title="怎么看"></a>怎么看</h3><p><strong>7色</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108201808068.png" alt="image-20201108201808068"></p>
<p><strong>1圈</strong></p>
<p>实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康程度从绿色&lt;黄色&lt;橙色&lt;红色递减。</p>
<p>该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量实例中快速发现<strong>故障实例和高压力实例</strong>。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108202156996.png" alt="image-20201108202156996"></p>
<p><strong>1线</strong></p>
<p>曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108202310059.png" alt="image-20201108202310059"></p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Hystrix断路器</tag>
      </tags>
  </entry>
  <entry>
    <title>十五、Spring Cloud Alibaba入门简介</title>
    <url>/2020/11/14/%E5%8D%81%E4%BA%94%E3%80%81Spring%20Cloud%20Alibaba%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Alibaba入门简介"><a href="#Spring-Cloud-Alibaba入门简介" class="headerlink" title="Spring Cloud Alibaba入门简介"></a>Spring Cloud Alibaba入门简介</h1><h2 id="为什么会出现Spring-Cloud-Alibaba"><a href="#为什么会出现Spring-Cloud-Alibaba" class="headerlink" title="为什么会出现Spring Cloud Alibaba"></a>为什么会出现Spring Cloud Alibaba</h2><p>因为Spring Cloud已经进入了<strong>维护模式</strong>！</p>
<p><strong>什么是维护模式？</strong></p>
<p>将模块置于维护模式，意味着Spring Cloud团队将不再会向模块添加新功能。将修复block级别的bug以及安全问题，也会考虑并审查社区的小型pull request。</p>
<p><strong>进入维护模式意味着什么？</strong></p>
<p>Spring Cloud Netflix将不再开发新的组件</p>
<p>Spring Cloud版本迭代还算是比较快的，因而出现了很多重大ISSUE都还来不及Fix就又推出了另一个Release了。进入维护模式意思就是目前以及以后一段时间Spring Cloud Netflix提供的服务和功能就这么多了，不再开发新的组件和功能。以后将维护和Merge分支Full Request为主。</p>
<p><strong>新组建功能将以其他替代平替代的方式实现</strong></p>
<h2 id="Spring-Cloud-Alibaba带来了什么"><a href="#Spring-Cloud-Alibaba带来了什么" class="headerlink" title="Spring Cloud Alibaba带来了什么"></a>Spring Cloud Alibaba带来了什么</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p><strong>官网</strong>：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p>
<p>Spring Cloud Alibaba致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用服务的必需组件，方便开发者通过Spring Cloud编程模型轻松使用这些组件来开发分布式应用服务。</p>
<p>依托Spring Cloud Alibaba，只需要添加一些注解和少量配置，就可以将Spring Cloud应用接入阿里分布式应用解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>
<h3 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h3><p>Spring Cloud Alibaba主要功能如下：</p>
<ul>
<li><strong>服务限流降级</strong>：默认支持WebSocket、WebFlux、OpenFeign、RestTemplate、Spring Cloud Gateway、Zuul、Dubbo和RocketMQ限流降级功能的接入，可以在运行时通过控制台修改限流降级规则，还支持查看限流降级Metrics监控。</li>
<li><strong>服务注册与发现</strong>：适配Spring Cloud服务注册与发现标准，默认集成了Ribbon的支持。</li>
<li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li>
<li><strong>消息驱动能力</strong>：基于Spring Cloud Stream为微服务应用构建消息驱动能力。</li>
<li><strong>分布式事务</strong>：使用@GlobalTransaction注解，高效并且对业务零侵入地解决分布式事务问题。</li>
<li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>
<li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于Cron表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker（schedulerx-client）上执行。</li>
<li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li>
</ul>
<h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p><strong>如何引入依赖</strong></p>
<p>如果需要使用已发布的版本，在<code>dependencyManagement</code>中添加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在<code>dependencies</code>中添加自己所需使用的依赖即可使用。</p>
<p><strong>组件</strong></p>
<p><strong><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a></strong>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p><strong><a href="https://github.com/alibaba/Nacos" target="_blank" rel="noopener">Nacos</a></strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>
<p><strong><a href="https://rocketmq.apache.org/" target="_blank" rel="noopener">RocketMQ</a></strong>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p>
<p><strong><a href="https://github.com/apache/dubbo" target="_blank" rel="noopener">Dubbo</a></strong>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p>
<p><strong><a href="https://github.com/seata/seata" target="_blank" rel="noopener">Seata</a></strong>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p>
<p><strong><a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener">Alibaba Cloud OSS</a></strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>
<p><strong><a href="https://help.aliyun.com/document_detail/43136.html" target="_blank" rel="noopener">Alibaba Cloud SchedulerX</a></strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p>
<p><strong><a href="https://www.aliyun.com/product/sms" target="_blank" rel="noopener">Alibaba Cloud SMS</a></strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>
<p>更多组件请参考 <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/Roadmap-zh.md" target="_blank" rel="noopener">Roadmap</a>。</p>
<h2 id="Spring-Cloud-Alibaba学习资料获取"><a href="#Spring-Cloud-Alibaba学习资料获取" class="headerlink" title="Spring Cloud Alibaba学习资料获取"></a>Spring Cloud Alibaba学习资料获取</h2><p><strong>官网</strong>：<a href="https://spring.io/projects/spring-cloud-alibaba" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-alibaba</a></p>
<p><strong>中文</strong>：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p>
<p><strong>英文</strong>：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README.md" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README.md</a></p>
<p><strong>官方手册</strong>：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html</a></p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud Alibaba</category>
      </categories>
      <tags>
        <tag>Spring Cloud Alibaba入门简介</tag>
      </tags>
  </entry>
  <entry>
    <title>十三、消息驱动</title>
    <url>/2020/11/12/%E5%8D%81%E4%B8%89%E3%80%81%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="消息驱动"><a href="#消息驱动" class="headerlink" title="消息驱动"></a>消息驱动</h1><p>说到驱动，就要说到JDBC驱动了。和JDBC驱动类似，消息驱动是消息中间件的驱动。常用的消息队列（MQ）：</p>
<ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li>Kafka</li>
</ul>
<p>这四种消息队列都经常使用，如果要全部掌握，成本就未免太大了。所以出现了消息驱动，开发人员只需要学习如何使用消息驱动，无需关系具体使用的是何种消息队列！</p>
<h2 id="消息驱动概述"><a href="#消息驱动概述" class="headerlink" title="消息驱动概述"></a>消息驱动概述</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型。</p>
<p>官方定义Spring Cloud Stream是一个构建消息驱动微服务的框架。</p>
<p>应用程序通过inputs或者outputs来与Spring Cloud Stream中binder对象交互</p>
<p>通过我们配置来binding（绑定），而Spring Cloud Stream的binder对象负责与消息中间件交互。</p>
<p>所以，我们只需要搞清楚如何与Spring Cloud Stream交互就可以方便使用消息驱动的方式。</p>
<p>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。</p>
<p>Spring Cloud Stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。</p>
<p><font color="red">目前仅支持RabbitMQ、Kafka</font></p>
<p><strong>官网</strong>：<a href="https://spring.io/projects/spring-cloud-stream" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-stream</a></p>
<h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><h4 id="标准MQ"><a href="#标准MQ" class="headerlink" title="标准MQ"></a>标准MQ</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201112180206972.png" alt="image-20201112180206972"></p>
<ul>
<li>生产者和消费者之间靠<strong>消息</strong>媒介传递信息内容—Message</li>
<li>消息必须走特定的<strong>通道</strong>—消息通道（MessageChannel）</li>
<li>消息通道里的消息如何被消费，谁负责收发<strong>处理</strong>—消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅</li>
</ul>
<h4 id="为什么用Spring-Cloud-Stream"><a href="#为什么用Spring-Cloud-Stream" class="headerlink" title="为什么用Spring Cloud Stream"></a>为什么用Spring Cloud Stream</h4><p>不同MQ的实现细节是不同的，对于开发人员来说直接切换MQ的种类代价是十分大的。</p>
<blockquote>
<p>想一想，在一个开发维护了很久的项目中使用了某种消息队列（很多微服务中都使用了），但是由于需求的改变，这个项目需要使用一种新的消息队列技术，此时切换消息队列的代价就十分巨大。</p>
</blockquote>
<p>使用了Spring Cloud Stream之后，我们只需要Spring Cloud Stream提供的binder来操作消息中间件，无需关心使用的是何种消息中间件。</p>
<p><strong>stream凭什么可以统一底层差异？</strong></p>
<p>在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异。通过定义绑定器（<strong>Binder</strong>）作为中间层，完美地实现了<strong>应用程序域消息中间件之间的隔离</strong>。通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各种不同的消息中间件实现。</p>
<h4 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h4><p>Spring Cloud Stream提供了一个<code>Binder</code>抽象，可以用于连接到外部中间件上的物理目标上。这小节提供有关Binder SPI背后的主要概念，其主要组件以及特定于实现的详细信息。</p>
<p><strong>生产者和消费者</strong></p>
<p>下图展示了生产者和消费者之间的关系</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201112185614433.png" alt="image-20201112185614433" style="zoom:80%;" />

<ul>
<li>inputs：消费者</li>
<li>outputs：生产者</li>
</ul>
<p>可以看到和生产者和消费者通过Binder与消息中间件进行交互，从而屏蔽了消息中间件的实现细节</p>
<h4 id="Stream中的消息通信方式遵循了发布-订阅模式"><a href="#Stream中的消息通信方式遵循了发布-订阅模式" class="headerlink" title="Stream中的消息通信方式遵循了发布-订阅模式"></a>Stream中的消息通信方式遵循了发布-订阅模式</h4><p>使用Topic进行广播：</p>
<ul>
<li>在RabbitMQ就是Exchange</li>
<li>在Kafka中就是Topic</li>
</ul>
<h3 id="Spring-Cloud-Stream标准流程套路"><a href="#Spring-Cloud-Stream标准流程套路" class="headerlink" title="Spring Cloud Stream标准流程套路"></a>Spring Cloud Stream标准流程套路</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201112192719075.png" alt="image-20201112192719075"></p>
<p><strong>Binder</strong></p>
<p>绑定器，用于连接中间件，屏蔽中间件的实现细节</p>
<p><strong>Channel</strong></p>
<p>通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</p>
<p><strong>Source</strong>和<strong>Sink</strong></p>
<p>可以理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接收消息就是输入。</p>
<h3 id="编码API和常用注解"><a href="#编码API和常用注解" class="headerlink" title="编码API和常用注解"></a>编码API和常用注解</h3><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201112185614433.png" alt="image-20201112185614433" style="zoom:50%;" />

<table>
<thead>
<tr>
<th>组成</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Middleware</td>
<td>中间件，目前只支持RabbitMQ和Kafka</td>
</tr>
<tr>
<td>Binder</td>
<td>Binder是应用与消息中间件之间的封装，目前只实现了Kafka和RabbitMQ的Binder，通过Binder可以很方便地连接中间件，可以动态的改变消息类型（对应于Kafka的topic，RabbitMQ的exchange），这些都可以通过配置文件来实现</td>
</tr>
<tr>
<td>@Input</td>
<td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序</td>
</tr>
<tr>
<td>@Output</td>
<td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td>
</tr>
<tr>
<td>@StreamListener</td>
<td>监听队列，用于消费者的队列的消息接收</td>
</tr>
<tr>
<td>@EnableBinding</td>
<td>指定信道channel和exchange绑定在一起</td>
</tr>
</tbody></table>
<h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p><strong>1、安装RabbitMQ环境</strong></p>
<p><strong>2、创建三个子模块</strong></p>
<ul>
<li><code>cloud-stream-rabbitmq-provider8801</code>：作为生产者进行消息发送模块</li>
<li><code>cloud-stream-rabbitmq-consumer8802</code>：作为消息接收模块</li>
<li><code>cloud-stream-rabbitmq-consumer8803</code>：作为消息接收模块</li>
</ul>
<h2 id="消息驱动之生产者"><a href="#消息驱动之生产者" class="headerlink" title="消息驱动之生产者"></a>消息驱动之生产者</h2><p><strong>1、建立module</strong></p>
<p>新建名为<code>cloud-stream-rabbitmq-provider8801</code>的子模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-provider8801<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud stream rabbit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span>  <span class="comment">#在此处配置要绑定的rabbitmq的服务信息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span>  <span class="comment">#表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span>  <span class="comment">#消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span>  <span class="comment">#设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment">#这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称的定义</span></span><br><span class="line">          <span class="attr">context-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，文本则设置text/plain</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment">#设置心跳的时间（默认为30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#多久收不到心跳会删除服务，默认90秒</span></span><br></pre></td></tr></table></figure>

<p>学过Spring Boot的童鞋应该知道，配置文件中的内容是和<code>XXXProperties</code>绑定。</p>
<p>此处的配置可以查看<code>BinderProperties</code>和<code>BindingProperties</code></p>
<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8801</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8801<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务类</strong></p>
<p>发送消息接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发送消息接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableBinding</span>(Source<span class="class">.<span class="keyword">class</span>) //定义消息的推送管道</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output; <span class="comment">//消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        log.info(<span class="string">"serial:"</span> + serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6、测试</strong></p>
<ul>
<li>启动eureka7001</li>
<li>启动rabbitmq</li>
<li>启动8801</li>
<li>访问<a href="http://localhost:8801/sendMessage" target="_blank" rel="noopener">http://localhost:8801/sendMessage</a></li>
</ul>
<p>登录RabbitMQ的后台页面（通过15672端口访问）</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201112214917862.png" alt="image-20201112214917862"></p>
<p>出现波峰说明测试成功！</p>
<h2 id="消息驱动之消费者"><a href="#消息驱动之消费者" class="headerlink" title="消息驱动之消费者"></a>消息驱动之消费者</h2><p><strong>1、建立module</strong></p>
<p>新建名为<code>cloud-stream-rabbitmq-consumer8802</code>模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-consumer8802<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud stream rabbit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span>  <span class="comment">#在此处配置要绑定的rabbitmq的服务信息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span>  <span class="comment">#表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span>  <span class="comment">#消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment">#这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称的定义</span></span><br><span class="line">          <span class="attr">context-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，文本则设置text/plain</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment">#设置心跳的时间（默认为30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8802.com</span>  <span class="comment">#在信息列表显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment">#访问路径变为IP地址</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8802</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8802<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务类</strong></p>
<p>控制器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ReceiveMessageListenerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel input;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"serverPort:"</span> + serverPort + <span class="string">", message:"</span> + message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6、测试</strong></p>
<p>启动之后，疯狂访问：<a href="http://localhost:8801/sendMessage" target="_blank" rel="noopener">http://localhost:8801/sendMessage</a></p>
<p>生产者控制台：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201112224118648.png" alt="image-20201112224118648"></p>
<p>消费者控制台：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201112224345686.png" alt="image-20201112224345686"></p>
<h2 id="分组消费与持久化"><a href="#分组消费与持久化" class="headerlink" title="分组消费与持久化"></a>分组消费与持久化</h2><p>依照<code>cloud-stream-rabbitmq-consumer8802</code>创建<code>cloud-stream-rabbitmq-consumer8803</code></p>
<p>此时系统的结构如下：</p>
<ul>
<li>RabbitMQ—消息中间件</li>
<li><code>cloud-eureka-server7001</code>—服务注册</li>
<li><code>cloud-stream-rabbitmq-provider8801</code>—消息生产者</li>
<li><code>cloud-stream-rabbitmq-consumer8802</code>—消息消费者</li>
<li><code>cloud-stream-rabbitmq-consumer8803</code>—消息消费者</li>
</ul>
<p><strong>运行之后的两个问题</strong></p>
<ul>
<li>有重复消费问题</li>
<li>消费持久化的问题</li>
</ul>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113094538464.png" alt="image-20201113094538464"></p>
<p>如果所示，8801是消息生产者，8802、8803是消息消费者，它们之间通过RabbitMQ来传递消息。当8801发出一个订单消息之后，8802和8803都会收到这个消息并进行处理（一个订单被处理的两次），这很明显是不合理的。一个订单只能被一个订单系统处理，多个订单系统之间应当处于竞争关系。</p>
<p>在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。<strong>不同group是可以重复消费的</strong></p>
<p>登录rabbitmq后台管理页面，查看队列信息</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113101443659.png" alt="image-20201113101443659"></p>
<p>可以看到有两个队列，这两个队列就对应两个group，这也是为什么两个消息消费者都能够收到消息。所以我们需要做的就是将这两个消息消费者放到同一个group中</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>首先将8802、8803分为两个自定义（而非系统随机的）的group：consumerA、consumerB</p>
<p>8802修改yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span>  <span class="comment">#在此处配置要绑定的rabbitmq的服务信息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span>  <span class="comment">#表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span>  <span class="comment">#消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment">#这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称的定义</span></span><br><span class="line">          <span class="attr">context-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，文本则设置text/plain</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">consumerA</span></span><br></pre></td></tr></table></figure>

<p>同理，8803修改yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span>  <span class="comment">#定义整合的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span>  <span class="comment">#消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称</span></span><br><span class="line">          <span class="attr">context-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">consumerB</span></span><br></pre></td></tr></table></figure>

<p>修改完成后重启项目，访问rabbitmq后台管理页面</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113102851358.png" alt="image-20201113102851358"></p>
<p>再次访问：<a href="http://localhost:8801/sendMessage，查看控制台" target="_blank" rel="noopener">http://localhost:8801/sendMessage，查看控制台</a></p>
<p>结果很明显，两个消费者都收到了消息！</p>
<p>修改为同一个组</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span>  <span class="comment">#定义整合的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span>  <span class="comment">#消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称</span></span><br><span class="line">          <span class="attr">context-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">consumerA</span></span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8801/sendMessage两次，结果两个消费者各收到了一条消息：" target="_blank" rel="noopener">http://localhost:8801/sendMessage两次，结果两个消费者各收到了一条消息：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113104241990.png" alt="image-20201113104241990"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113104259192.png" alt="image-20201113104259192"></p>
<p>此时，每次发送的消息只会被一个消费者获得！</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>消息持久化示例：</p>
<p>关闭8802和8803，访问<a href="http://localhost:8801/sendMessage" target="_blank" rel="noopener">http://localhost:8801/sendMessage</a> 4次</p>
<p>删除8802的分组，启动8802，结果没有收到消息</p>
<p>然后启动8803，查看结果，结果发现8803的控制台中输出了收到的4条消息。</p>
<p>以上就是消息的持久化，也就是说Spring Cloud Stream在使用RabbitMQ的时候会将消息持久化到RabbitMQ中（默认情况下Exchange和Queue的durable属性为false，即默认不支持持久化）</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>消息驱动</tag>
        <tag>Spring Cloud Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>十一、服务配置</title>
    <url>/2020/11/10/%E5%8D%81%E4%B8%80%E3%80%81%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h1><p>服务配置+服务总线有三种：</p>
<ul>
<li>Spring Cloud Config + Spring Cloud Bus</li>
<li>阿里巴巴的Nacos</li>
<li>携程的Appollo</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="分布式系统面临的配置问题"><a href="#分布式系统面临的配置问题" class="headerlink" title="分布式系统面临的配置问题"></a>分布式系统面临的配置问题</h3><p>随着分布式微服务系统中微服务的数量不断增加，就像之前所看到的那样，每个微服务都需要建一个module，每个module都需要一个<code>application.yml</code>配置文件；可能会有某些微服务需要使用相同的数据库配置，这些配置在这些微服务中又需要重复编写很多次。所以一套集中式的、动态的配置管理设施是必不可少的。</p>
<p>Spring Cloud提供了ConfigServer来解决这个问题！</p>
<h3 id="Spring-Cloud-Config是什么"><a href="#Spring-Cloud-Config是什么" class="headerlink" title="Spring Cloud Config是什么"></a>Spring Cloud Config是什么</h3><p>Spring Cloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为<strong>各个不同微服务应用</strong>的所有环境提供了一个<strong>中心化的外部配置</strong></p>
<p>Spring Cloud Config分为<strong>服务端</strong>和<strong>客户端</strong>两部分</p>
<p>服务端也称为<strong>分布式配置中心</strong>，它是<strong>一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供获取配置信息、加密/解密信息等访问接口</p>
<p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。配置服务器默认采用git来存储配置信息，这样就有助于对环境进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p>
<h3 id="Spring-Cloud-Config能干什么"><a href="#Spring-Cloud-Config能干什么" class="headerlink" title="Spring Cloud Config能干什么"></a>Spring Cloud Config能干什么</h3><ul>
<li>集中管理配置文件</li>
<li>不同环境不同配置，动态化的配置更新，分环境部署，比如dev/test/prod/beta/release/pre</li>
<li>运行期间动态调整配置，不需要再每个服务部署的机器上编写配置文件，服务会像配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li>
<li>将配置信息以REST接口的形式暴露</li>
</ul>
<h3 id="与Github整合配置"><a href="#与Github整合配置" class="headerlink" title="与Github整合配置"></a>与Github整合配置</h3><p>由于SpringCloud Config默认使用Git来存储配置文件（也有其他方式，比如支持SVN和本地文件），但是最推荐的还是Git，而且使用的是http/https访问的形式</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://spring.io/projects/spring-cloud-config" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-config</a></p>
<h2 id="Config服务端配置与测试"><a href="#Config服务端配置与测试" class="headerlink" title="Config服务端配置与测试"></a>Config服务端配置与测试</h2><p>首先用自己的Github创建一个名为<code>springcloud-config</code>的Repository，然后获取到对应的git地址：<code>git@github.com:zxwzxh/springcloud-config.git</code>，然后使用<code>git clone</code>命令将其下载到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:zxwzxh/springcloud-config.git</span><br></pre></td></tr></table></figure>



<p><strong>1、建module</strong></p>
<p>新建名为<code>cloud-config-center-3344</code>的模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-center3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud config--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/zxwzxh/springcloud-config.git</span> <span class="comment">#自己的git路径(http)</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span> <span class="comment">#搜索目录</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#读取分支</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#将服务注册到eureka服务注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>github现在将启用main作为默认分支名，master会称为历史！</p>
</blockquote>
<p><strong>4、主配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、修改hosts文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 config-3344.com</span><br></pre></td></tr></table></figure>



<p><strong>6、测试通过Config微服务是否可以从Github上获取配置内容</strong></p>
<ul>
<li><p>启动<code>cloud-config-center3344</code></p>
</li>
<li><p>访问：<a href="http://config-3344.com:3344/main/config-dev.md" target="_blank" rel="noopener">http://config-3344.com:3344/main/config-dev.md</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201110223310378.png" alt="image-20201110223310378"></p>
</li>
</ul>
<h3 id="配置的读取规则"><a href="#配置的读取规则" class="headerlink" title="配置的读取规则"></a>配置的读取规则</h3><p>官方文档：<a href="https://docs.spring.io/spring-cloud-config/docs/current/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-config/docs/current/reference/html/</a></p>
<p>常用的三种：</p>
<ul>
<li><p><code>/{label}/{application}-{profile}.yml</code>（<font color="red">推荐使用</font>)</p>
<ul>
<li>main分支<ul>
<li><a href="http://config-3344.com:3344/main/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/main/config-dev.yml</a></li>
<li><a href="http://config-3344.com:3344/main/config-test.yml" target="_blank" rel="noopener">http://config-3344.com:3344/main/config-test.yml</a></li>
<li><a href="http://config:3344.com:3344/main/config-prod.yml">http://config:3344.com:3344/main/config-prod.yml</a></li>
</ul>
</li>
<li>dev分支<ul>
<li><a href="http://config-3344.com:3344/dev/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/dev/config-dev.yml</a></li>
<li><a href="http://config-3344.com:3344/dev/config-test.yml" target="_blank" rel="noopener">http://config-3344.com:3344/dev/config-test.yml</a></li>
<li><a href="http://config-3344.com:3344/dev/config-prod.yml" target="_blank" rel="noopener">http://config-3344.com:3344/dev/config-prod.yml</a></li>
</ul>
</li>
</ul>
</li>
<li><p><code>/{application}-{profile}.yml</code></p>
<p>没有给出分支，则默认的label就是配置文件中<code>spring.cloud.config.label</code>属性的值</p>
<p><a href="http://config-3344.com:3344/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/config-dev.yml</a> 等价于 <a href="http://config-3344.com:3344/main/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/main/config-dev.yml</a></p>
</li>
<li><p><code>/{application}/{profile}[/{label}]</code></p>
<p>把分支后置，例如：<a href="http://config-3344.com:3344/config/dev/main" target="_blank" rel="noopener">http://config-3344.com:3344/config/dev/main</a></p>
<p><strong>注意</strong>：这种方式会返回json字符串</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201111082358588.png" alt="image-20201111082358588"></p>
</li>
</ul>
<h2 id="Config客户端配置与测试"><a href="#Config客户端配置与测试" class="headerlink" title="Config客户端配置与测试"></a>Config客户端配置与测试</h2><p><strong>1、建module</strong></p>
<p>新建名为<code>cloud-config-client3355</code></p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud config client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、yml</strong></p>
<p><code>application.yml</code>是用户级的资源配置项</p>
<p><code>bootstrap.yml</code>是系统级的，<font color="red">优先级更加高</font></p>
<p>Spring Cloud会创建一个<code>Bootstrap Context</code>，作为Spring 应用的<code>ApplicationContext</code>的<font color="red">父上下文</font>。初始化的时候<code>Bootstrap Context</code>负责从<strong>外部源</strong>加载配置属性并解析配置。这两个上下文共享一个从外部获取的<code>Environment</code>。</p>
<p><code>Bootstrap</code>属性有高优先级，默认情况下，它们不会被本地配置覆盖。<code>Bootstrap Context</code>和<code>Application Context</code>有着不同的约定，所以新增了一个<code>bootstrap.yml</code>文件，保证<code>Bootstrap Context</code>和<code>Application Context</code>配置的分离。</p>
<p><strong>要将<code>cloud-config-client3355</code>模块下的<code>application.yml</code>文件改为<code>bootstrap.yml</code>，这是很关键的</strong>，因为<code>bootstrap.yml</code>是比<code>application.yml</code>先加载的。<code>bootstrap.yml</code>优先级高于<code>application.yml</code></p>
<p><code>bootstrap.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://config-3344.com:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将服务注册到eureka中</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="string">http://eureka7001:7001/eureka/</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务类</strong></p>
<p>编写一个控制器，通过RESTful api暴露配置信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.info&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以restful风格暴露配置信息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/configInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试</strong></p>
<p>访问：<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a></p>
<h2 id="Config客户端之动态刷新"><a href="#Config客户端之动态刷新" class="headerlink" title="Config客户端之动态刷新"></a>Config客户端之动态刷新</h2><p><strong>问题</strong>：</p>
<p>修改github或者gitee上<code>config-dev.yml</code>的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">config: </span><br><span class="line">  info: <span class="string">"master springcloud-config 2020 config-dev.yml version=2"</span></span><br><span class="line">  help: <span class="string">"master help"</span></span><br></pre></td></tr></table></figure>

<p>将版本号修改为2</p>
<p>通过3344端口访问：<a href="http://localhost:3344/master/config-dev.yml" target="_blank" rel="noopener">http://localhost:3344/master/config-dev.yml</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201111103539555.png" alt="image-20201111103539555"></p>
<p>可以看到，配置中心访问时改动已经生效！</p>
<p>通过3355端口访问暴露的配置信息<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201111103639824.png" alt="image-20201111103639824"></p>
<p>结果发现配置客户端访问时改动没有生效！</p>
<p>重启服务客户端，然后访问，重启后改动就生效了。但是项目上线后，总不可能每次改配置就重启配置客户端吧！</p>
<p>如果每次运维改配置文件都需要重启客户端，那运维估计要骂人了。所以需要有一个不启动就可以生效的方法！</p>
<h3 id="动态刷新"><a href="#动态刷新" class="headerlink" title="动态刷新"></a>动态刷新</h3><p><strong>1、确保添加了actuator依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、修改yml，暴露监控端口</strong></p>
<p>在<code>bootstrap.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<p><strong>3、修改主配置类</strong></p>
<p>在需要使用到配置的组件上添加@RefreshScope注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.info&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以restful风格暴露配置信息</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/configInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverPort + <span class="string">", "</span> + configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、测试</strong></p>
<p>在GitHub或者gitee上修改<code>config-dev.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span> </span><br><span class="line">  <span class="attr">info:</span> <span class="string">"master springcloud-config 2020 config-dev.yml version=3"</span></span><br><span class="line">  <span class="attr">help:</span> <span class="string">"master help"</span></span><br></pre></td></tr></table></figure>

<p>3344端口访问：<a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201111205145166.png" alt="image-20201111205145166"></p>
<p>3355端口访问：<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201111205235979.png" alt="image-20201111205235979"></p>
<p>可以看到修改仍然没有生效</p>
<p><strong>那么问题出现在哪里？</strong></p>
<p>此时需要运维工程师<strong>发送一个post</strong>请求到3355（配置客户端）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"http://localhost:3355/actuator/refresh"</span></span><br></pre></td></tr></table></figure>

<p>此时配置客户端就可以获取最新的配置文件了</p>
<h3 id="还有什么问题？"><a href="#还有什么问题？" class="headerlink" title="还有什么问题？"></a>还有什么问题？</h3><p>假设有多个配置客户端（3355、3366、3377…）</p>
<p>那么每一个微服务都需要执行一个post请求，如果微服务数量太多怎么办？</p>
<p>有没有什么方法可以一步到位？</p>
<p>这就要说到<strong>消息总线</strong>了，也就是下一章的内容！</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>SpringCloud Config</tag>
      </tags>
  </entry>
  <entry>
    <title>十七、Spring Cloud Alibaba Sentinel实现熔断与限流</title>
    <url>/2020/11/16/%E5%8D%81%E4%B8%83%E3%80%81Spring%20Cloud%20Alibaba%20Sentinel%E5%AE%9E%E7%8E%B0%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Alibaba-Sentinel实现熔断与限流"><a href="#Spring-Cloud-Alibaba-Sentinel实现熔断与限流" class="headerlink" title="Spring Cloud Alibaba Sentinel实现熔断与限流"></a>Spring Cloud Alibaba Sentinel实现熔断与限流</h1><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p><strong>Github</strong>：<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a></p>
<p><strong>Github介绍</strong>：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p>
<p><strong>Sentinel官网</strong>：<a href="https://sentinelguard.io/" target="_blank" rel="noopener">https://sentinelguard.io/</a></p>
<blockquote>
<p>学习一门新技术的时候，最好的学习方式就是查看官网的文档和案例！</p>
</blockquote>
<p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应等多个维度来帮助您保障微服务的稳定性。</p>
<h3 id="Sentinel基本概念"><a href="#Sentinel基本概念" class="headerlink" title="Sentinel基本概念"></a>Sentinel基本概念</h3><p><strong>资源</strong></p>
<p>资源是Sentinel的关键概念。它可以是Java应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其他应用提供的服务，甚至可以是一段代码。接下来，我们都会使用资源来描述代码块。</p>
<p>只要通过Sentinel API定义的代码，就是资源，能够被Sentinel保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标识资源。</p>
<p><strong>规则</strong></p>
<p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>
<h3 id="Sentinel功能和设计理念"><a href="#Sentinel功能和设计理念" class="headerlink" title="Sentinel功能和设计理念"></a>Sentinel功能和设计理念</h3><h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>流量控制在网络传输中是一个常用的概念，它用于调整网络包的发送数据。然而，从系统稳定性角度考虑，在处理请求的速度上，也有非常多的讲究。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel作为一个调配器，可以根据需要把随机的请求调整成合适的形状，如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117075945622.png" alt="image-20201117075945622"></p>
<p>流量控制有以下几个角度：</p>
<ul>
<li>资源的调用关系，例如资源的调用链路，资源和资源之间的关系；</li>
<li>运行指标，例如：QPS、线程池、系统负载等；</li>
<li>控制的效果：例如：直接限流、冷启动、排队等。</li>
</ul>
<p>Sentinel的设计理念是让你自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>
<h4 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h4><p><strong>什么是熔断降级</strong></p>
<p>除了流量控制以外，降低调用链路中的不稳定资源也是Sentinel的使命之一。由于调用关系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。这个问题和<strong>Hystrix</strong>里面描述的问题是一样的。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117080528424.png" alt="image-20201117080528424"></p>
<p>Sentinel和Hystrix的原则是一致的：当调用链路中某个资源出现不稳定，例如，表现为timeout，异常比例升高时，则对这个资源的调用进行限制，并让请求快速失败，避免影响到其他的资源，最终产生雪崩的效果。</p>
<p><strong>熔断降级设计理念</strong></p>
<p>在限制的手段上，Sentinel和Hystrix采取了完全不一样的方法。</p>
<p>Hystrix通过<strong>线程池</strong>的方式，来对依赖（在我们的概念中对应资源）进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本，还需要预先对各个资源做线程池大小进行分配。</p>
<p>Sentinel对这个问题采取了两种手段：</p>
<ul>
<li><p><strong>通过并发线程数进行限制</strong></p>
<p>和资源池隔离的方法不同，Sentinel通过限制资源并发线程的数量，来减少不稳定资源对其他资源的影响。但这样不但没有线程切换的损耗，也不需要预先分配线程池的大小。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就会造成线程数的逐步堆积。当线程数在特定资源上堆积到了一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</p>
</li>
<li><p><strong>通过响应时间对资源进行降级</strong></p>
<p>除了对并发线程数进行控制以外，Sentinel还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</p>
</li>
</ul>
<h4 id="系统负载保护"><a href="#系统负载保护" class="headerlink" title="系统负载保护"></a>系统负载保护</h4><p>Sentinel同时提供系统维度的自适应保护能力。防止雪崩，是系统防护中的重要的一环。当系统负载较高的时候，如果还持续让请求进入，可能会导致系统崩溃，无法响应。在集群环境下，网络负载均衡会把本应这台机器承载的流量转发到其他的机器上去。如果这个时候其他的机器也处在一个边缘状态的时候，这个增加的流量就会导致这台机器也崩溃，最后导致整个集群不可用。</p>
<p>针对这个情况，Sentinel提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>
<h3 id="Sentinel是如何工作的"><a href="#Sentinel是如何工作的" class="headerlink" title="Sentinel是如何工作的"></a>Sentinel是如何工作的</h3><p>Sentinel 的主要工作机制如下：</p>
<ul>
<li>对主流框架提供适配或者显示的 API，来定义需要保护的资源，并提供设施对资源进行实时统计和调用链路分析。</li>
<li>根据预设的规则，结合对资源的实时统计信息，对流量进行控制。同时，Sentinel 提供开放的接口，方便您定义及改变规则。</li>
<li>Sentinel 提供实时的监控系统，方便您快速了解目前系统的状态。</li>
</ul>
<h2 id="安装Sentinel控制台"><a href="#安装Sentinel控制台" class="headerlink" title="安装Sentinel控制台"></a>安装Sentinel控制台</h2><p>参考文档：<a href="https://sentinelguard.io/zh-cn/docs/dashboard.html" target="_blank" rel="noopener">https://sentinelguard.io/zh-cn/docs/dashboard.html</a></p>
<p>下载Sentinel：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117085321649.png" alt="image-20201117085321649"></p>
<p>下载完成之后，使用XShell连接阿里云服务器（CentOS7），使用xftp将下载的jar包上传到阿里云服务器中</p>
<p><strong>启动Sentinel控制台</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.0.jar</span><br></pre></td></tr></table></figure>

<p><strong>后台启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nohup java -jar sentinel-dashboard-1.8.0.jar &amp;</span><br></pre></td></tr></table></figure>



<p>官网中给出了更完整的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>

<p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。</p>
<p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。可以参考 <a href="https://sentinelguard.io/zh-cn/docs/dashboard.html#鉴权" target="_blank" rel="noopener">鉴权模块文档</a> 配置用户名和密码。</p>
<blockquote>
<p>注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以通过 Spring 配置文件来指定配置，详情请参考 <a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Sentinel" target="_blank" rel="noopener">Spring Cloud Alibaba Sentinel 文档</a>。</p>
</blockquote>
<p>成功启动之后，访问<code>ip:8080</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117085802121.png" alt="image-20201117085802121"></p>
<p>使用默认的用户名和密码（都是sentinel）登录</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117085835397.png" alt="image-20201117085835397"></p>
<p><strong>关闭sentinel</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看后台运行的sentinel的进程信息</span></span><br><span class="line">ps -ef|grep sentinel-dashboard-1.8.0.jar</span><br><span class="line"><span class="comment">#杀死对应进程</span></span><br><span class="line"><span class="built_in">kill</span> -15 查询到的PID</span><br></pre></td></tr></table></figure>

<p>当然，你也可以编写<code>startup.sh</code>和<code>shutdown.sh</code>来启动和关闭sentinel</p>
<h2 id="客户端接入控制台"><a href="#客户端接入控制台" class="headerlink" title="客户端接入控制台"></a>客户端接入控制台</h2><p>新建一个微服务模块用来被Sentinel监控保护</p>
<p><strong>1、建module</strong></p>
<p>新建名为<code>cloudalibaba-sentinel-service8401</code>的模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-service8401<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtool--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos discovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://47.114.180.118:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelMain8401</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5、业务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"*********testA********"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testB"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"**********testB***********"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6、测试</strong></p>
<p>1、启动nacos（8848端口）</p>
<p>2、启动sentinel（8080端口）</p>
<blockquote>
<p>这里没有在阿里云上部署sentinel，因为如果分别将监控的服务和sentinel控制台部署在Windows操作系统和Linux操作系统由于时区和ntp同步问题，导致能看到服务器却监控不到访问的资源，如果全部部署在Linux服务器中就不会出现这个问题。</p>
</blockquote>
<p>3、启动<code>cloudalibaba-sentinel-service8401</code></p>
<p>登录sentinel控制台</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117101553607.png" alt="image-20201117101553607"></p>
<p>结果发现什么都没有，这是因为sentinel是懒加载的，必须要访问一次才能显式</p>
<p>访问：</p>
<ul>
<li><a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a></li>
<li><a href="http://localhost:8401/testB" target="_blank" rel="noopener">http://localhost:8401/testB</a></li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117174842871.png" alt="image-20201117174842871"></p>
<h2 id="流量控制规则（FlowRule）"><a href="#流量控制规则（FlowRule）" class="headerlink" title="流量控制规则（FlowRule）"></a>流量控制规则（FlowRule）</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117202944309.png" alt="image-20201117202944309"></p>
<p>可以如上图所示新建一个流控规则，下面是新建流控规则的选项：</p>
<ul>
<li>资源名：唯一名称，流控规则的作用对象，默认值为请求路径，例如<code>/testA</code>、<code>/testB</code></li>
<li>针对来源：Sentinel可以针对调用者进行限流，填写微服务名，默认default（不区分来源）</li>
<li>阈值类型：<ul>
<li>QPS：Query Per Second，每秒的请求数，默认值（超过指定单机阈值的QPS进行限流）</li>
<li>线程数：当前请求该资源的线程数（超过指定单机阈值的线程数进行限流）</li>
</ul>
</li>
<li>单机阈值：限流的阈值（和阈值类型对应）</li>
<li>是否集群：如果使用了Sentinel集群则需要勾选</li>
<li>流控模式：<ul>
<li>直接：默认值，api达到限流条件时，直接限流</li>
<li>关联：当关联的资源达到阈值时，就限流自己</li>
<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api级别的针对来源】</li>
</ul>
</li>
<li>流控效果：<ul>
<li>快速失败：直接失败，抛出异常</li>
<li>Warm Up：根据codeFactor（冷加载因子，默认为3），从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值</li>
<li>排队等待：匀速排队，让请求以均匀的速度通过，阈值类型必须设置为QPS，否则无效</li>
</ul>
</li>
</ul>
<h3 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h3><ul>
<li>直接</li>
<li>关联</li>
<li>链路</li>
</ul>
<h4 id="直接"><a href="#直接" class="headerlink" title="直接"></a>直接</h4><p><strong>QPS</strong></p>
<p>新增如下流控规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117204705679.png" alt="image-20201117204705679">**</p>
<p>然后在1秒内访问两次：<a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a></p>
<p>第一次结果：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117204857262.png" alt="image-20201117204857262"></p>
<p>第二次结果：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117204923385.png" alt="image-20201117204923385"></p>
<p>由于配置了QPS的值为1，且流控模式为直接，所以第二次访问时，QPS=2已经超过了阈值，且流控模式为直接，表示一旦达到阈值就执行流控效果（默认为快速失败，也就是报错）</p>
<p><em>思考</em>：直接报错一个固定的错误信息不是很合理，能不能像Hystrix一样弄一个fallback方法来处理？</p>
<p><strong>线程数</strong></p>
<p>要演示通过访问资源的线程数限流，需要修改controller中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testA"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用于演示线程数限流</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"*********testA**********"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后新建如下流控规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117205747923.png" alt="image-20201117205747923"></p>
<p>访问两次：<a href="http://localhost:8401/testA（保证第二次要在第一次返回还没有响应结果时访问）" target="_blank" rel="noopener">http://localhost:8401/testA（保证第二次要在第一次返回还没有响应结果时访问）</a></p>
<p>结果第二次快速失败了：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117212206810.png" alt="image-20201117212206810"></p>
<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p>当关联的资源达到了阈值就限流自己：</p>
<p>新建如下流控规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117212622050.png" alt="image-20201117212622050"></p>
<p>快速多次访问：<a href="http://localhost:8401/testB，然后立即访问http://localhost:8401/testA（手速不够快可以使用postman）" target="_blank" rel="noopener">http://localhost:8401/testB，然后立即访问http://localhost:8401/testA（手速不够快可以使用postman）</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117213436755.png" alt="image-20201117213436755"></p>
<p>20个线程，每隔300毫秒发起一次选中的请求，在这个过程中访问：<a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117212830660.png" alt="image-20201117212830660"></p>
<p>关联资源testB超过阈值，资源testA就被限流。</p>
<h4 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h4><p>多个请求请求同一个微服务！</p>
<p>新增如下流控规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117214825973.png" alt="image-20201117214825973"></p>
<p>可以在<strong>簇点链路</strong>中找到来链路的入口资源！</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117214758466.png" alt="image-20201117214758466"></p>
<p>多次访问<a href="http://localhost:8401/testA，结果如下：" target="_blank" rel="noopener">http://localhost:8401/testA，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117214723943.png" alt="image-20201117214723943"></p>
<h3 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h3><ul>
<li>快速失败</li>
<li>Warm Up</li>
<li>排队等待</li>
</ul>
<h4 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h4><p>前面已经介绍过了快速失败，也是默认的流控效果，就是Blocked by Sentinel (flow limiting)</p>
<h4 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm Up"></a>Warm Up</h4><p>Warm Up就是热身</p>
<p>加入访问的QPS一致处于一个很低的水准，突然访问量暴增应该如何处理？</p>
<p>最开始的阈值为单机阈值 / 冷加载因子，经过预热时长之后慢慢恢复到单机阈值的正常值（冷加载因子默认为3）</p>
<p>新增如下流控配置：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117220058227.png" alt="image-20201117220058227"></p>
<p>快速访问<a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117220410667.png" alt="image-20201117220410667"></p>
<p>开始还有很多快速失败的结果，5秒后就没有了（我是鼠标点击刷新的，我的手速一秒点击不了10次）</p>
<h4 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h4><p>如果突然有大量的请求，就让它们按照顺序匀速通过，如果超过了超时时间，则快速失败。</p>
<p>新增如下流控规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117221731460.png" alt="image-20201117221731460"></p>
<p><strong>测试</strong>：</p>
<p>使用postman发起100个<a href="http://localhost:8401/testA请求，每个请求间隔400毫秒，中途可以自己在浏览器中访问几次" target="_blank" rel="noopener">http://localhost:8401/testA请求，每个请求间隔400毫秒，中途可以自己在浏览器中访问几次</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201117222306419.png" alt="image-20201117222306419"></p>
<p>可以看到，无论访问量多大，每秒也只能接收两个请求。而超时的请求就快速失败！</p>
<h2 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h2><p><strong>官网</strong>：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p>
<h3 id="熔断降级-1"><a href="#熔断降级-1" class="headerlink" title="熔断降级"></a>熔断降级</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，后者第三方API等。例如，支付的时候，可能需要远程调用银联提供的API，查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖的服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间边长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118144523090.png" alt="image-20201118144523090"></p>
<p>现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>
<blockquote>
<p>注意本文档针对 Sentinel 1.8.0 及以上版本。1.8.0版本对熔断降级特性进行了全新的改进升级，请使用最新版本以更好地利用熔断降级的能力。</p>
</blockquote>
<h4 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a>熔断策略</h4><p>Sentinel提供了以下几种熔断策略：</p>
<ul>
<li><strong>慢比例调用（SLOW_REQUEST_RATIO）</strong>：选择以慢调用比例作为阈值，需要设置允许的慢调用RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li>
<li><strong>异常比例（ERROR_RATIO）</strong>：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</li>
<li><strong>异常数（ERROR_COUNT）</strong>：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>
</ul>
<p>注意异常降级<strong>仅针对业务异常</strong>，对 Sentinel 限流降级本身的异常（<code>BlockException</code>）不生效。为了统计异常比例或异常数，需要通过 <code>Tracer.trace(ex)</code> 记录业务异常。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  entry = SphU.entry(key, EntryType.IN, key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write your biz code here.</span></span><br><span class="line">  <span class="comment">// &lt;&lt;BIZ CODE&gt;&gt;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!BlockException.isBlockException(t)) &#123;</span><br><span class="line">    Tracer.trace(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">    entry.exit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开源整合模块，如 Sentinel Dubbo Adapter, Sentinel Web Servlet Filter 或 <strong><code>@SentinelResource</code> 注解会自动统计业务异常，无需手动调用</strong>。</p>
<h4 id="熔断降级规则说明"><a href="#熔断降级规则说明" class="headerlink" title="熔断降级规则说明"></a>熔断降级规则说明</h4><p>熔断降级规则（DegradeRule）包含下面几个重要的属性：</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>资源名，即规则的作用对象</td>
<td></td>
</tr>
<tr>
<td>grade</td>
<td>熔断策略，支持慢调用比例/异常比例/异常数策略</td>
<td>慢调用比例</td>
</tr>
<tr>
<td>count</td>
<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td>
<td></td>
</tr>
<tr>
<td>timeWindow</td>
<td>熔断时长，单位为 s</td>
<td></td>
</tr>
<tr>
<td>minRequestAmount</td>
<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>
<td>5</td>
</tr>
<tr>
<td>statIntervalMs</td>
<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>
<td>1000 ms</td>
</tr>
<tr>
<td>slowRatioThreshold</td>
<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>
<td></td>
</tr>
</tbody></table>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>这里给出Sentinel 界面中添加降级规则的UI，你可以将其与降级策略的相关内容对应起来（上面的内容来自官网，学习前先看以下官网中的相关介绍，然后再看这些参数就不会发懵了）</p>
<p><strong>慢调用比例</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118151322906.png" alt="image-20201118151322906"></p>
<p>Sentinel 1.8.0开始将RT（平均响应时间）替换成慢调用比例</p>
<p><strong>异常比例</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118151343700.png" alt="image-20201118151343700"></p>
<p><strong>异常数</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118151404080.png" alt="image-20201118151404080"></p>
<h3 id="降级策略实战"><a href="#降级策略实战" class="headerlink" title="降级策略实战"></a>降级策略实战</h3><p><strong>注意</strong>：Sentinel 1.8.0版本开始，RT被替换为了慢调用比例，而且Sentinel的熔断降级机制也和Hystrix一样有了半开状态（HALF-OPEN）</p>
<p><strong>流量控制和熔断降级的区别</strong></p>
<p>流量控制是流量激增的处理手段</p>
<p>熔断降级往往是业务内部发生错误、超时等情况时的处理手段</p>
<h4 id="慢调用比例"><a href="#慢调用比例" class="headerlink" title="慢调用比例"></a>慢调用比例</h4><p>在控制器添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testC"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"*********testC**********"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Sentinel控制台中添加如下降级规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118153359914.png" alt="image-20201118153359914"></p>
<p>使用postman发起10个请求，请求地址为<a href="http://localhost:8401/testC，请求之间间隔1毫秒" target="_blank" rel="noopener">http://localhost:8401/testC，请求之间间隔1毫秒</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118153645463.png" alt="image-20201118153645463"></p>
<p>结果这10个请求全部通过，但是我们知道这10个请求都超过了最大RT（最大响应时间），所以1秒内有10个慢调用，慢调用比例为100%，所以会触发熔断降级。此时（测试完成10秒内）访问<a href="http://localhost:8401/testC，结果如下：" target="_blank" rel="noopener">http://localhost:8401/testC，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118153912557.png" alt="image-20201118153912557"></p>
<p>10秒后再次访问<a href="http://localhost:8401/testC，结果如下：" target="_blank" rel="noopener">http://localhost:8401/testC，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118153953879.png" alt="image-20201118153953879"></p>
<p>由于过了熔断时间，进入了HALF-OPEN状态，此时访问该地址，服务满足了解除熔断的条件，所以熔断器关闭了，也就可以访问该服务了！</p>
<h4 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h4><p>修改控制器中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testC"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Math.random() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"*********testC**********"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Sentinel控制台中添加如下降级规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118154420458.png" alt="image-20201118154420458"></p>
<p>使用postman发起100个请求，请求地址为<a href="http://localhost:8401/testC，每个请求之间的间隔时间为10毫秒" target="_blank" rel="noopener">http://localhost:8401/testC，每个请求之间的间隔时间为10毫秒</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118154806539.png" alt="image-20201118154806539"></p>
<p>访问完成之后，立刻在浏览器中访问<a href="http://localhost:8401/testC，结果如下：" target="_blank" rel="noopener">http://localhost:8401/testC，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155023296.png" alt="image-20201118155023296"></p>
<p>熔断时间（10s）后，再次访问<a href="http://localhost:8401/testC，结果如下：" target="_blank" rel="noopener">http://localhost:8401/testC，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155059598.png" alt="image-20201118155059598"></p>
<p>或者</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155112097.png" alt="image-20201118155112097"></p>
<h4 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h4><p>在Sentinel控制台中添加如下降级规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155231715.png" alt="image-20201118155231715"></p>
<p>使用postman发起100个请求，请求地址为<a href="http://localhost:8401/testC，每个请求之间的间隔时间为10毫秒" target="_blank" rel="noopener">http://localhost:8401/testC，每个请求之间的间隔时间为10毫秒</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155333479.png" alt="image-20201118155333479"></p>
<p>访问完成之后，立刻在浏览器中访问<a href="http://localhost:8401/testC，结果如下：" target="_blank" rel="noopener">http://localhost:8401/testC，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155023296.png" alt="image-20201118155023296"></p>
<p>熔断时间（10s）后，再次访问<a href="http://localhost:8401/testC，结果如下：" target="_blank" rel="noopener">http://localhost:8401/testC，结果如下：</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155059598.png" alt="image-20201118155059598"></p>
<p>或者</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118155112097.png" alt="image-20201118155112097"></p>
<h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><h3 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。</p>
<p>比如：</p>
<ul>
<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>
<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>
</ul>
<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118160355004.png" alt="image-20201118160355004"></p>
<p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。热点参数限流支持集群模式。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>在控制器添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hotkey"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(value = <span class="string">"hotkey"</span>, blockHandler = <span class="string">"handleHotkey"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hotkey</span><span class="params">(@RequestParam(value = <span class="string">"p1"</span>, required = <span class="keyword">false</span>)</span> String p1,</span></span><br><span class="line"><span class="function">                     @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"p2"</span>, required = <span class="keyword">false</span>)</span> String p2) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"**********hotkey**********"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleHotkey</span><span class="params">(String p1, String p2, BlockException exception)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"************handleHotKey**********"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用到了@SentinelResource注解，这里只是简单使用，后面会详细讲解，下面给出用到的两个属性：</p>
<ul>
<li>value：资源名称，如果不指定，默认值就是请求路径</li>
<li>blockHandler：指定违反Sentinel控制台中配置的各种规则（流控规则、降级规则、热点规则等）会调用的兜底方法</li>
</ul>
<p>在Sentinel控制台中添加如下的热点规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118164227059.png" alt="image-20201118164227059"></p>
<p>测试：</p>
<ul>
<li><p>多次访问<a href="http://localhost:8401/hotkey" target="_blank" rel="noopener">http://localhost:8401/hotkey</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118164452386.png" alt="image-20201118164452386"></p>
</li>
<li><p>多次访问<a href="http://localhost:8401/hotkey?p1=a，结果发现当QPS超过了1时" target="_blank" rel="noopener">http://localhost:8401/hotkey?p1=a，结果发现当QPS超过了1时</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118164547122.png" alt="image-20201118164547122"></p>
</li>
</ul>
<p>这就是热点规则的作用，可以对指定参数进行限流</p>
<h4 id="参数例外项"><a href="#参数例外项" class="headerlink" title="参数例外项"></a>参数例外项</h4><p>当然还可以指定例外的情况，例如当p1=b时，将QPS设置为100</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118164756387.png" alt="image-20201118164756387"></p>
<p>测试：</p>
<p>此时不断访问<a href="http://localhost:8401/hotkey?p1=b，结果一直都没有被限流" target="_blank" rel="noopener">http://localhost:8401/hotkey?p1=b，结果一直都没有被限流</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118164853954.png" alt="image-20201118164853954"></p>
<p><strong>参数类型说明</strong>：仅支持String和Java的8种基本类型！</p>
<h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p>官方文档：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p>
<p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<p>系统保护规则是应用<strong>整体维度的</strong>，而<strong>不是资源维度的</strong>，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>
<p>系统规则支持以下的模式：</p>
<ul>
<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li>
<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>
<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>
<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>
<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>
</ul>
<p><strong>以入口QPS为示例</strong></p>
<p>在Sentinel控制台中添加如下系统规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118215238776.png" alt="image-20201118215238776"></p>
<p>1秒内多次访问：<a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118215454831.png" alt="image-20201118215454831"></p>
<h2 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="@SentinelResource"></a>@SentinelResource</h2><h3 id="按资源名称限流-后续处理"><a href="#按资源名称限流-后续处理" class="headerlink" title="按资源名称限流 + 后续处理"></a>按资源名称限流 + 后续处理</h3><p><strong>pom中添加<code>cloud-api-commons</code></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试发现，原本应该返回json数据，结果却返回了xml类型的数据，这是因为Sentinel的依赖中包含了<code>jackson-dataformat-xml</code>，将其排除即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>添加RateLimitController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/byResource"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"byResource"</span>, blockHandler = <span class="string">"handleByResource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">"按资源名称限流测试成功！"</span>, <span class="keyword">new</span> Payment(<span class="number">2048L</span>, <span class="string">"serial01"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleByResource</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, exception.getClass().getCanonicalName() + <span class="string">"\t 服务不可用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在Sentinel控制台中添加如下流控规则</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118222338081.png" alt="image-20201118222338081"></p>
<p><strong>测试</strong></p>
<p>访问：<a href="http://localhost:8401/byResource" target="_blank" rel="noopener">http://localhost:8401/byResource</a></p>
<ul>
<li><p>成功</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118222423349.png" alt="image-20201118222423349"></p>
</li>
<li><p>限流</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118222449341.png" alt="image-20201118222449341"></p>
</li>
</ul>
<p>从中可以看出，流控是通过FlowException来实现的。</p>
<h3 id="按Url地址限流-后续处理"><a href="#按Url地址限流-后续处理" class="headerlink" title="按Url地址限流 + 后续处理"></a>按Url地址限流 + 后续处理</h3><p><strong>在控制器中添加如下内容</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/byUrl"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(<span class="string">"byUrl"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">"按url限流测试成功！"</span>, <span class="keyword">new</span> Payment(<span class="number">1024L</span>, <span class="string">"serial02"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在Sentinel控制台添加如下限流规则</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118222826479.png" alt="image-20201118222826479"></p>
<p><strong>测试</strong></p>
<p>访问：<a href="http://localhost:8401/byUrl" target="_blank" rel="noopener">http://localhost:8401/byUrl</a></p>
<ul>
<li><p>成功</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118222906243.png" alt="image-20201118222906243"></p>
</li>
<li><p>限流</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201118222918673.png" alt="image-20201118222918673"></p>
</li>
</ul>
<p>这说明按照url限流，会调用系统默认的处理方法</p>
<h3 id="上面兜底方案面临的问题"><a href="#上面兜底方案面临的问题" class="headerlink" title="上面兜底方案面临的问题"></a>上面兜底方案面临的问题</h3><p>和Hystrix一样，现在也面临这些问题：</p>
<ol>
<li>系统默认的，没有体现自己的业务要求</li>
<li>自定义的处理方法和业务代码耦合在一起，不直观</li>
<li>每个业务方法都添加一个兜底方法，代码会膨胀</li>
<li>没有全局同一的处理方法</li>
</ol>
<h3 id="客户自定义限流处理逻辑"><a href="#客户自定义限流处理逻辑" class="headerlink" title="客户自定义限流处理逻辑"></a>客户自定义限流处理逻辑</h3><p>首先编写一个用于存放兜底方法的类<code>CustomBlockHandler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">blockHandler1</span><span class="params">(BlockException blockException)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">"用户自定义blockHandler 1..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">blockHandler2</span><span class="params">(BlockException blockException)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">"用户自定义blockHandler 2..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里必须提供的是静态方法！</p>
<p>在Controller中添加如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/customBlockHandler"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(</span><br><span class="line">    value = <span class="string">"customBlockHandler"</span>, </span><br><span class="line">    blockHandlerClass = CustomBlockHandler<span class="class">.<span class="keyword">class</span>, </span></span><br><span class="line"><span class="class">    <span class="title">blockHandler</span> </span>= <span class="string">"blockHandler1"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">customBlockHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">"按用户自定义"</span>, <span class="keyword">new</span> Payment(<span class="number">2077L</span>, <span class="string">"serial03"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>blockHandlerClass</code>属性指定blockHandler方法的所在类，使用<code>blockHandler</code>属性指定用其中的方法名！</p>
<p>添加如下的流控规则：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201120203153076.png" alt="image-20201120203153076"></p>
<p>测试：多次访问<a href="http://localhost:8401/customBlockHandler" target="_blank" rel="noopener">http://localhost:8401/customBlockHandler</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201120203742378.png" alt="image-20201120203742378"></p>
<h3 id="更多注解属性说明"><a href="#更多注解属性说明" class="headerlink" title="更多注解属性说明"></a>更多注解属性说明</h3><p>@SentinelResource注解属性说明：</p>
<ul>
<li><strong>value</strong>：Sentinel资源的名称</li>
<li><strong>entryType</strong>：entry类型，默认值为<code>EntryType.OUT</code></li>
<li><strong>fallback</strong>：<code>fallback</code>函数名称，可选项，用于在抛出异常的时候提供 <code>fallback</code>处理逻辑。<code>fallback</code>函数可以针对所有类型的异常（除了<code>exceptionsToIgnore</code>里面排除掉的异常类型）进行处理。<code>fallback</code>函数签名和位置要求： 返回值类型必须与原函数返回值类型一致；方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code>类型的参数用于接收对应的异常。<code>fallback</code>函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code>为对应的类的 Class 对象，注意对应的函数必需为 <code>static</code>函数，否则无法解析。 <code>defaultFallback</code>（since 1.6.0）：默认的 <code>fallback</code>函数名称，可选项，通常用于通用的 <code>fallback</code>逻辑（即可以用于很多服务或方法）。默认 <code>fallback</code>函数可以针对所有类型的异常（除了<code>exceptionsToIgnore</code>里面排除掉的异常类型）进行处理。若同时配置了 <code>fallback</code>和 <code>defaultFallback</code>，则只有 <code>fallback</code>会生效。<code>defaultFallback</code>函数签名要求：返回值类型必须与原函数返回值类型一致；</li>
<li><strong>blockHandler</strong>：<code>blockHandler</code>函数名称，上面已经介绍了如何使用，可以配合<code>blockHandlerClass</code>属性使用</li>
<li><strong>exceptionsToTrace</strong>：要追踪的异常列表（the list of exception classes to trace, Throwable by default），默认值为Throwable</li>
<li><strong>exceptionsToIgnore</strong>：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li>
</ul>
<h2 id="服务熔断功能"><a href="#服务熔断功能" class="headerlink" title="服务熔断功能"></a>服务熔断功能</h2><p>sentinel整合ribbon + openfeign + fallback</p>
<h3 id="Ribbon系列"><a href="#Ribbon系列" class="headerlink" title="Ribbon系列"></a>Ribbon系列</h3><p><strong>1、新建module</strong></p>
<p>新建服务消费者9003和9004，模块名称为<code>cloudalibaba-provider-payment9003/9004</code></p>
<h3 id="Feign系列"><a href="#Feign系列" class="headerlink" title="Feign系列"></a>Feign系列</h3><h3 id="熔断框架比较"><a href="#熔断框架比较" class="headerlink" title="熔断框架比较"></a>熔断框架比较</h3>]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud Alibaba</category>
      </categories>
      <tags>
        <tag>Spring Cloud Alibaba Sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>十二、消息总线</title>
    <url>/2020/11/11/%E5%8D%81%E4%BA%8C%E3%80%81%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>上一章介绍过，服务配置中心中服务客户端如果想要动态刷新，就需要运维人员来发送一个POST请求刷新，这很不方便，我们可以通过Spring Cloud Config + Spring Cloud Bus实现配置的动态刷新</p>
<p>配置动态刷新的功能，需要GitHub/gitee上修改配置文件后，服务配置服务端可以立即生效，那么如何让所有的微服务也收到这个改变的通知从而刷新配置？</p>
<p>这是不是让你想到了之前学习过的消息中间件？服务配置中心就是消息提供者，各个微服务消息客户端就是消息消费者。它们之间通过消息队列来广播消息，当消息提供者发布了一个消息后，可以通过消息队列来广播到各个消息消费者。</p>
<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>Spring Cloud Bus配合Spring Cloud Config使用可以实现<strong>配置的动态刷新</strong></p>
<p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，<strong>它整合了Java的事件处理机制和消息中间件功能</strong>。</p>
<p>Spring Cloud Bus目前支持RabbitMQ和Kafka</p>
<h3 id="能干什么"><a href="#能干什么" class="headerlink" title="能干什么"></a>能干什么</h3><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道</p>
<h3 id="为何被称为总线"><a href="#为何被称为总线" class="headerlink" title="为何被称为总线"></a>为何被称为总线</h3><p>在微服务架构的系统中，通常会使用<strong>轻量级的消息代理</strong>来构建一个<strong>共用的消息主题</strong>，并让系统中所有微服务实例都连接上来。由于<strong>该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线</strong>。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p>
<p><strong>基本原理</strong><br>ConfigClient实例都监听MQ中同一个topic（默认springCloudBus）当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其他监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p>
<h2 id="RabbitMQ环境配置"><a href="#RabbitMQ环境配置" class="headerlink" title="RabbitMQ环境配置"></a>RabbitMQ环境配置</h2><p><strong>1、使用docker下载RabbitMQ镜像</strong><br>注意选择带management标签的版本，这样会有web管理页面，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>

<p>下载完成之后使用下面的命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><a href="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008101530027.png" target="_blank" rel="noopener"><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008101530027.png" alt="img"></a></p>
<p><strong>2、运行下载的镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name myrabbitmq rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>

<p>注意：这里有两个端口映射</p>
<ul>
<li>5672端口：RabbitMQ的端口</li>
<li>15672端口：后台管理页面端口</li>
</ul>
<p>运行成功后访问：<code>主机ip:15672</code>（请确保阿里云安全组和CentOS 7开放了5672和15672端口）</p>
<p><a href="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008102212076.png" target="_blank" rel="noopener"><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008102212076.png" alt="img"></a></p>
<p>使用guest用户登录（密码也是guest）进入后台管理页面：</p>
<p><a href="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008102319510.png" target="_blank" rel="noopener"><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201008102319510.png" alt="img"></a></p>
<h2 id="Spring-Cloud-Bus动态刷新全局广播"><a href="#Spring-Cloud-Bus动态刷新全局广播" class="headerlink" title="Spring Cloud Bus动态刷新全局广播"></a>Spring Cloud Bus动态刷新全局广播</h2><p><strong>1、确保正确安装了RabbitMQ环境</strong></p>
<p><strong>2、为了演示广播效果，仿照<code>cloud-config-client3355</code>创建<code>cloud-config-client3366</code></strong></p>
<p><strong>3、设计思想</strong></p>
<p>1）利用消息总线触发一个客户端<code>/bus/refresh</code>，从而刷新所有客户端的配置</p>
<p>2）利用消息总线触发一个服务端<code>/bus/refresh</code>，从而刷新所有客户端的配置</p>
<p>显然，第二种更加适合，原因如下：</p>
<ul>
<li>方式一打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担刷新的职责</li>
<li>打破了微服务各个节点的对等性</li>
<li>有一定局限性。例如，微服务在迁移时，它的网络地址常常发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li>
</ul>
<p><strong>4、服务配置服务端添加消息总线支持</strong></p>
<p>首先在在pom文件中添加bus的RabbitMQ依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring cloud bus amqp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>application.yml</code>中添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="comment">#rabbitmq相关配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'bus-refresh'</span></span><br></pre></td></tr></table></figure>

<p><strong>5、服务配置客户端添加消息总线支持</strong></p>
<p>首先在pom文件中添加bus的RabbitMQ依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring cloud bus amqp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>bootstrap.yml</code>中添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rabbitmq相关配置</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.114</span><span class="number">.180</span><span class="number">.118</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>

<p>由于之前已经配置了暴露所有的端点，这里不需要再进行配置</p>
<p><strong>6、测试</strong></p>
<p>修改<code>config-dev.yml</code>中的版本号：</p>
<p>服务配置服务端：<a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a></p>
<p>服务配置客户端3355：<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a></p>
<p>服务配置客户端3366：<a href="http://localhost:3366/configInfo" target="_blank" rel="noopener">http://localhost:3366/configInfo</a></p>
<p>让更改生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"http://config-3344.com:3344/actuator/bus-refresh"</span></span><br></pre></td></tr></table></figure>

<p>服务配置客户端3355：<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a></p>
<p>服务配置客户端3366：<a href="http://localhost:3366/configInfo" target="_blank" rel="noopener">http://localhost:3366/configInfo</a></p>
<h2 id="Spring-Cloud-Bus动态刷新定点通知"><a href="#Spring-Cloud-Bus动态刷新定点通知" class="headerlink" title="Spring Cloud Bus动态刷新定点通知"></a>Spring Cloud Bus动态刷新定点通知</h2><p>上面是全局通知，那如果想要只通知某些微服务更新配置应该如何做？</p>
<p><strong>需求</strong>：只通知3355，不通知3366</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"http://localhost:3344/actuator/bus-refresh/config-client:3355"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>消息总线</tag>
        <tag>Spring Cloud Bus</tag>
      </tags>
  </entry>
  <entry>
    <title>十六、Spring Cloud Alibaba Nacos服务注册和配置中心</title>
    <url>/2020/11/14/%E5%8D%81%E5%85%AD%E3%80%81Spring%20Cloud%20Alibaba%20Nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Alibaba-Nacos服务注册和配置中心"><a href="#Spring-Cloud-Alibaba-Nacos服务注册和配置中心" class="headerlink" title="Spring Cloud Alibaba Nacos服务注册和配置中心"></a>Spring Cloud Alibaba Nacos服务注册和配置中心</h1><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><h3 id="Nacos是什么"><a href="#Nacos是什么" class="headerlink" title="Nacos是什么"></a>Nacos是什么</h3><ul>
<li>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台</li>
<li><strong>Nacos</strong>：Dynamic <strong>Na</strong>ming and <strong>Co</strong>nfiguration <strong>S</strong>ervice</li>
<li>Nacos就是<strong>注册中心</strong> + <strong>配置中心</strong>的组合</li>
</ul>
<p><strong>Nacos = Eureka + Config + Bus</strong></p>
<h3 id="Nacos可以干什么"><a href="#Nacos可以干什么" class="headerlink" title="Nacos可以干什么"></a>Nacos可以干什么</h3><ul>
<li>替代Eureka作为服务注册中心</li>
<li>替代Config作为服务配置中心</li>
</ul>
<h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><strong>GitHub地址</strong>：<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a></p>
<p><strong>官网</strong>：<a href="https://nacos.io（可以切换中英文）" target="_blank" rel="noopener">https://nacos.io（可以切换中英文）</a></p>
<p><strong>下载地址</strong>：<a href="https://github.com/alibaba/nacos/releases/tag/1.4.0（版本可以在Tags中选择，可以选择最新稳定版本）" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases/tag/1.4.0（版本可以在Tags中选择，可以选择最新稳定版本）</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201114205826093.png" alt="image-20201114205826093"></p>
<h3 id="各个注册中心的比较"><a href="#各个注册中心的比较" class="headerlink" title="各个注册中心的比较"></a>各个注册中心的比较</h3><table>
<thead>
<tr>
<th>服务注册与发现框架</th>
<th>CAP模型</th>
<th>控制管理</th>
<th>社区活跃度</th>
</tr>
</thead>
<tbody><tr>
<td>Eureka</td>
<td>AP</td>
<td>支持</td>
<td>低（2.x版本闭源）</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>CP</td>
<td>不支持</td>
<td>中</td>
</tr>
<tr>
<td>Consul</td>
<td>CP</td>
<td>支持</td>
<td>高</td>
</tr>
<tr>
<td>Nacos</td>
<td>AP</td>
<td>支持</td>
<td>高</td>
</tr>
</tbody></table>
<p>Nacos已经经历过了双十一的考验！！！</p>
<h2 id="安装并运行Nacos"><a href="#安装并运行Nacos" class="headerlink" title="安装并运行Nacos"></a>安装并运行Nacos</h2><p>参考网址：<a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/quick-start.html</a></p>
<h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>你可以在Nacos的<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">release notes</a>及<a href="https://nacos.io/zh-cn/blog/index.html" target="_blank" rel="noopener">博客</a>中找到每个版本支持的功能的介绍，当前推荐的稳定版本为1.3.1。</p>
<h3 id="预备环境准备"><a href="#预备环境准备" class="headerlink" title="预备环境准备"></a>预备环境准备</h3><p>Nacos 依赖 <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/" target="_blank" rel="noopener">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href="https://maven.apache.org/index.html" target="_blank" rel="noopener">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>
<ol>
<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>
<li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载</a> &amp; <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/" target="_blank" rel="noopener">配置</a>。</li>
<li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载</a> &amp; <a href="https://maven.apache.org/settings.html" target="_blank" rel="noopener">配置</a>。</li>
</ol>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>下载地址：<a href="https://github.com/alibaba/nacos/releases/tag/1.4.0" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases/tag/1.4.0</a></p>
<p>使用xftp上传到阿里云服务器，然后解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nacos-server-1.4.0.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>单机模式启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>

<p><strong>开放8848端口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8848/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>

<p>开放端口后，访问<code>http://ip:8848/nacos</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201114213857941.png" alt="image-20201114213857941"></p>
<p>默认用户名和端口号都是nacos</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201114213926239.png" alt="image-20201114213926239"></p>
<h2 id="Nacos作为服务注册中心演示"><a href="#Nacos作为服务注册中心演示" class="headerlink" title="Nacos作为服务注册中心演示"></a>Nacos作为服务注册中心演示</h2><p>官方文档：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_spring_cloud_alibaba_nacos_discovery" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_spring_cloud_alibaba_nacos_discovery</a></p>
<h3 id="基于Nacos的服务提供者"><a href="#基于Nacos的服务提供者" class="headerlink" title="基于Nacos的服务提供者"></a>基于Nacos的服务提供者</h3><p><strong>1、建module</strong></p>
<p>新建名为<code>cloudalibaba-provider-payment9001</code></p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud alibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#配置nacos地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://47.114.180.118:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlibabaPaymentMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AlibabaPaymentMain9001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、业务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/nacos/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"nacos registry, serverPort: "</span> + serverPort + <span class="string">"\t id: "</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6、测试</strong></p>
<ul>
<li><p>访问<a href="http://localhost:9001/payment/nacos/1" target="_blank" rel="noopener">http://localhost:9001/payment/nacos/1</a></p>
</li>
<li><p>nacos控制台查看</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201114224808827.png" alt="image-20201114224808827"></p>
</li>
</ul>
<p><strong>7、服务集群</strong></p>
<p>参照<code>cloudalibaba-provider-payment9001</code>创建<code>cloudalibaba-provider-payment9002</code>作为服务集群</p>
<p>也可以通过idea的copy configuration来创建一个微服务的复制</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115073000492.png" alt="image-20201115073000492"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115073202057.png" alt="image-20201115073202057"></p>
<h3 id="基于Nacos的服务消费者"><a href="#基于Nacos的服务消费者" class="headerlink" title="基于Nacos的服务消费者"></a>基于Nacos的服务消费者</h3><p><strong>1、建module</strong></p>
<p>新建名为<code>cloudalibaba-consumer-nacos-order83</code>模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order83<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud alibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为什么nacos自带负载均衡？</p>
<p>因为其中已经集成了Ribbon</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115075830699.png" alt="image-20201115075830699"></p>
<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://47.114.180.118:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>



<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlibabaOrderMain83</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AlibabaOrderMain83<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、编写业务</strong></p>
<p>提供RestTemplate类型Bean的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;service-url.nacos-user-service&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/nacos/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serviceURL + <span class="string">"/payment/nacos/"</span> + id, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>6、测试</strong></p>
<p>nacos控制台：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115081939151.png" alt="image-20201115081939151"></p>
<p>不断访问：<a href="http://localhost:83/consumer/payment/nacos/1" target="_blank" rel="noopener">http://localhost:83/consumer/payment/nacos/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115082005461.png" alt="image-20201115082005461"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115082018438.png" alt="image-20201115082018438"></p>
<p>9001和9002轮询调用！</p>
<h3 id="服务注册中心对比"><a href="#服务注册中心对比" class="headerlink" title="服务注册中心对比"></a>服务注册中心对比</h3><p><strong>nacos生态图</strong></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115082425670.png" alt="image-20201115082425670"></p>
<p><strong>nacos与cap</strong></p>
<p>从上图可以看出，nacos是可以在AP和CP中进行切换的</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115083119793.png" alt="image-20201115083119793"></p>
<p><strong><font color="red">Nacos AP和CP的切换</font></strong></p>
<p><font color="red">C是所有节点在同一时间看到的数据是一致的；而A的定义是所有的请求都会收到响应</font></p>
<p><strong>如何选择？</strong></p>
<p>一般来说，如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如Spring Cloud和Dubbo服务，都适用于AP模式，AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例。</p>
<p>如果需要在服务级别编辑或者存储配置信息，那么必须使用CP，K8S服务和DNS服务则适用于CP模式。</p>
<p>CP模式下支持注册持久化实例，此时是以Raft协议为集群运行模式，改模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p>
<p><strong>如何切换</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">"http://ip:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP"</span></span><br></pre></td></tr></table></figure>



<h2 id="Nacos作为服务配置中心演示"><a href="#Nacos作为服务配置中心演示" class="headerlink" title="Nacos作为服务配置中心演示"></a>Nacos作为服务配置中心演示</h2><h3 id="Nacos作为配置中心-基础配置"><a href="#Nacos作为配置中心-基础配置" class="headerlink" title="Nacos作为配置中心-基础配置"></a>Nacos作为配置中心-基础配置</h3><p><strong>1、建module</strong></p>
<p>新建名为<code>cloudalibaba-config-nacos-client3377</code>的模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-config-nacos-client3377<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos config--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos discovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring boot test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、yml</strong></p>
<p><code>bootstrap.xml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://47.114.180.118:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment">#配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://47.114.180.118:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br></pre></td></tr></table></figure>

<p><code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#激活开发环境</span></span><br></pre></td></tr></table></figure>

<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5、业务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//支持Nacos的动态刷新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;config.info&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/config/info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6、在Nacos中添加配置信息</strong></p>
<p>Nacos中的匹配规则：</p>
<p>Nacos中的dataid的组成格式及与Spring Boot配置文件中的匹配规则</p>
<p><strong>官网</strong>：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p>
<p>在Nacos Spring Cloud中，<code>dataId</code>的完整格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>prefix</strong>：默认为<code>spring.application.name</code>的值，也可以通过<code>spring.cloud.nacos.config.prefix</code>来配置</li>
<li><strong>spring.profiles.active</strong>：即为当前环境对应的profile，详情可以参考 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles" target="_blank" rel="noopener">Spring Boot文档</a>。<strong>注意：当<code>spring.profiles.active</code>为空时，对应的连接符<code>-</code>也将不存在，<code>dataId</code>的拼接格式变成<code>${prefix}.${file-extension}</code></strong></li>
<li><strong>file-extension</strong>：为配置内容的数据格式，可以通过配置项<code>spring.cloud.nacos.config.file-extension</code>来配置。目前只支持<code>properties</code>和<code>yaml</code>类型。</li>
</ul>
<p>所以在这个模块中的配置文件名为：<code>nacos-config-client-dev.yml</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115133559356.png" alt="image-20201115133559356"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115134047391.png" alt="image-20201115134047391"></p>
<p><strong>注意</strong>：如果配置的<code>file-extension</code>为<code>yaml</code>，则配置文件的后缀名必须为<code>yaml</code>，而不能是<code>yml</code></p>
<p>访问：<a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115134333612.png" alt="image-20201115134333612"></p>
<p>修改版本号为2，再次访问：<a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115134439680.png" alt="image-20201115134439680"></p>
<p>相较于Spring Cloud Config + Spring Cloud Bus，Nacos的使用就显得十分便捷。Spring Cloud Alibaba是建立在Spring Cloud的基础之上的，所以比Spring Cloud更加优秀也是很正常的。如果不是Spring Cloud进入了维护状态，Spring Cloud Alibaba可能也不会发展起来。</p>
<h3 id="Nacos作为配置中心-分类配置"><a href="#Nacos作为配置中心-分类配置" class="headerlink" title="Nacos作为配置中心-分类配置"></a>Nacos作为配置中心-分类配置</h3><h4 id="多环境多项目管理"><a href="#多环境多项目管理" class="headerlink" title="多环境多项目管理"></a>多环境多项目管理</h4><p><strong>问题1</strong></p>
<p>实际开发中，一个系统通常会有：</p>
<ul>
<li>dev开发环境</li>
<li>test测试环境</li>
<li>prod生产环境</li>
</ul>
<p><strong>问题2</strong></p>
<p>一个大型分布式微服务系统会有很多的微服务子项目，而每个微服务子项目又有dev开发环境、test测试环境、prod生产环境</p>
<h4 id="Namespace-Group-Data-ID三者的关系？为什么要这么设计？"><a href="#Namespace-Group-Data-ID三者的关系？为什么要这么设计？" class="headerlink" title="Namespace + Group + Data ID三者的关系？为什么要这么设计？"></a>Namespace + Group + Data ID三者的关系？为什么要这么设计？</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115215301892.png" alt="image-20201115215301892"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201115222358749.png" alt="image-20201115222358749"></p>
<p>总的来说，<strong>Namespace</strong>用来区分部署环境的，而<strong>Group</strong>和<strong>DataID</strong>逻辑上区分两个目标对象。</p>
<p>默认情况下：</p>
<p><strong>Namespace=public</strong></p>
<p><strong>Group=DEFAULT_GROUP</strong></p>
<p><strong>Cluster=DEFAULT</strong></p>
<p>Nacos默认的命名空间是public，Namespace主要用来实现隔离。比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建3个Namespace，不同的Namespace之间是隔离的。</p>
<p>Group默认是DEFAULT_GROUP，Group可以把<strong>不同微服务</strong>划分到<strong>同一个分组</strong>里面去</p>
<p>Service就是微服务，一个Service可以包含多个Cluster（集群），Nacos默认的Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分。比方说，将Service微服务分别部署在杭州机房和广州机房，这时就可以给杭州机房的Service微服务起一个集群名称<code>HZ</code>，给广州机房起一个集群名称<code>GZ</code>，还可以尽量让同一个机房的微服务互相调用，以提升性能。</p>
<p>最后是Instance，就是微服务实例。</p>
<h4 id="Data-ID解决"><a href="#Data-ID解决" class="headerlink" title="Data ID解决"></a>Data ID解决</h4><p>需求：使用Data ID从dev环境切换到test环境</p>
<p><strong>nacos控制台操作</strong>：</p>
<p>进入nacos控制台，添加如下配置：</p>
<p>Data ID：nacos-config-client-test.yaml</p>
<p>Group：DEFAULT_GROUP</p>
<p>Namespace：public</p>
<p>配置文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span> </span><br><span class="line">  <span class="attr">info:</span> <span class="string">nacos-config-client-test.yaml</span> <span class="string">version=2</span></span><br></pre></td></tr></table></figure>

<p><strong>修改<code>application.yml</code></strong></p>
<p>将<code>spring.profiles.active</code>的值为<code>test</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line"><span class="comment">#    active: dev #激活开发环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span> <span class="comment">#激活测试环境</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>启动项目后访问<a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116082254750.png" alt="image-20201116082254750"></p>
<h4 id="Group解决"><a href="#Group解决" class="headerlink" title="Group解决"></a>Group解决</h4><p><strong>相同Namespace</strong> + <strong>相同Data ID</strong> + <strong>不同Group</strong></p>
<p><strong>添加开发环境配置文件</strong></p>
<p>Namespace：public</p>
<p>Data ID：nacos-config-client-info.yaml</p>
<p>Group: DEV_GROUP</p>
<p>配置文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span> </span><br><span class="line">  <span class="attr">info:</span> <span class="string">nacos-config-client-info.yaml,</span> <span class="string">DEV_GROUP</span></span><br></pre></td></tr></table></figure>



<p><strong>添加测试文件配置文件</strong></p>
<p>Namespace: public</p>
<p>Data ID：nacos-config-client-info.yaml</p>
<p>Group: TEST_GROUP</p>
<p>配置文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span> </span><br><span class="line">  <span class="attr">info:</span> <span class="string">nacos-config-client-info.yaml,</span> <span class="string">TEST_GROUP</span></span><br></pre></td></tr></table></figure>



<p><strong>修改<code>application.yml</code>和<code>bootstrap.yml</code></strong></p>
<p>修改<code>spring.profiles.active</code>的值为<code>info</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line"><span class="comment">#    active: dev #激活开发环境</span></span><br><span class="line"><span class="comment">#    active: test #激活测试环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure>



<p>修改<code>spring.cloud.nacos.config.group</code>的值为<code>DEV_GROUP</code></p>
<p><strong>测试</strong></p>
<p>启动项目后访问<a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116084158489.png" alt="image-20201116084158489"></p>
<p>修改<code>spring.cloud.nacos.config.group</code>的值为<code>TEST_GROUP</code>，然后访问<a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116084323275.png" alt="image-20201116084323275"></p>
<h4 id="Namespace解决"><a href="#Namespace解决" class="headerlink" title="Namespace解决"></a>Namespace解决</h4><p><strong>相同Data ID</strong> + <strong>相同Group</strong> + <strong>不同Namespace</strong></p>
<p>进入Nacos控制台，新建dev和test命名空间</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116093302358.png" alt="image-20201116093302358"></p>
<p>可以通过<code>spring.cloud.nacos.config.namespace</code>的值，给出对应namespace的命名空间ID来切换不同的namespace</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>配置文件的查找是根据：Namespace、Group、Data ID来决定的</p>
<ul>
<li>Namespace默认值为public，是Nacos的保留命名空间，如果配置了<code>spring.cloud.nacos.config.namespace</code>来指定命名空间ID，则根据这个命名空间ID去Nacos中对应的命名空间下查找配置文件</li>
<li>Group默认值为DEFAULT_GROUP，如果配置了<code>spring.cloud.nacos.config.group</code>，则在指定的<code>group</code>中查找配置文件</li>
<li>Data ID：根据Data ID的命名规则去Nacos中查找对应的配置文件</li>
</ul>
<h2 id="Nacos集群和持久化配置（重要）"><a href="#Nacos集群和持久化配置（重要）" class="headerlink" title="Nacos集群和持久化配置（重要）"></a>Nacos集群和持久化配置（重要）</h2><p>实际生产中，不可能只有一个服务注册中心，我们需要的是一个服务注册中心的集群。</p>
<p><strong>部署手册</strong>：<a href="https://nacos.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/deployment.html</a></p>
<p><strong>集群部署说明</strong>：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html" target="_blank" rel="noopener">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p>
<h3 id="官网说明"><a href="#官网说明" class="headerlink" title="官网说明"></a>官网说明</h3><p><strong>集群部署架构图</strong></p>
<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>
<p><a href="http://ip1/" target="_blank" rel="noopener">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>
<p><a href="http://vip/" target="_blank" rel="noopener">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>
<p><a href="http://nacos.com/" target="_blank" rel="noopener">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116105519585.png" alt="image-20201116105519585"></p>
<p>这里的VIP是虚拟IP的意思，不是Very Important Person，而是Vitual Internet Protocol！</p>
<p>真实架构图：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116105541512.png" alt="image-20201116105541512"></p>
<p><strong>默认Nacos使用嵌入式数据库</strong>实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos采用了<strong>集中式存储的方式来支持集群化部署，目前只支持MySQL的存储</strong></p>
<p><strong>Nacos支持三种部署模式</strong></p>
<ul>
<li>单机模式：用于测试和单机试用</li>
<li>集群模式：用于生产环境，确保高可用</li>
<li>多集群模式：用于多数据中心场景</li>
</ul>
<p><strong>单机模式支持mysql</strong></p>
<p>在0.7版本之前，在单机模式时nacos使用嵌入式数据库实现数据的存储，不方便观察数据的存储情况。0.7版本增加了支持mysql数据源能力，具体操作步骤如下：</p>
<ol>
<li><p>安装mysql数据库，要求版本在5.6.5以上</p>
</li>
<li><p>初始化mysql数据库，数据库初始化文件：nacos-mysql.sql（在conf目录下）</p>
</li>
<li><p>修改<code>config/application.properties</code>文件，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">nacos_devtest</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">youdontknow</span></span><br></pre></td></tr></table></figure>

<p>再以单机模式启动nacos，nacos所有写入嵌入式数据库的数据都写到了mysql</p>
</li>
</ol>
<h3 id="Nacos持久化配置解释"><a href="#Nacos持久化配置解释" class="headerlink" title="Nacos持久化配置解释"></a>Nacos持久化配置解释</h3><p>Nacos默认自带的是嵌入式数据库derby，可以在GitHub源码中<code>pom.xml</code>文件的依赖：<a href="https://github.com/alibaba/nacos/blob/develop/config/pom.xml" target="_blank" rel="noopener">https://github.com/alibaba/nacos/blob/develop/config/pom.xml</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116135926268.png" alt="image-20201116135926268"></p>
<p><strong>derby切换到mysql配置步骤</strong></p>
<ol>
<li><p>使用docker安装mysql5.7在阿里云中</p>
<ul>
<li><p>拉取mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:5.7</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用数据库连接工具（SQLyog等）连接阿里云的mysql容器，创建名为<code>nacos_config</code>的数据库，执行nacos安装目录中conf目录下的<code>nacos-mysql.sql</code></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116143645663.png" alt="image-20201116143645663"></p>
</li>
<li><p>修改confi目录下的<code>application.properties</code>添加如下配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://$&#123;mysql服务器IP&#125;:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>修改完成之后重启nacos</p>
<p>重新登录nacos控制台，添加一个配置文件，然后查看mysql数据库中的信息变化：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201116152933134.png" alt="image-20201116152933134"></p>
</li>
</ol>
<h3 id="Linux版Nacos-MySQL生产环境配置"><a href="#Linux版Nacos-MySQL生产环境配置" class="headerlink" title="Linux版Nacos + MySQL生产环境配置"></a>Linux版Nacos + MySQL生产环境配置</h3><p>需要：1个Nginx + 3个Nacos + 1个MySQL</p>
<p>暂时没有内容，等我学完Nignx和MySQL高级（包含主从复制）再来补充！</p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud Alibaba</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
        <tag>服务注册和配置中心</tag>
      </tags>
  </entry>
  <entry>
    <title>十四、分布式请求链路跟踪</title>
    <url>/2020/11/13/%E5%8D%81%E5%9B%9B%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/</url>
    <content><![CDATA[<h1 id="分布式请求链路跟踪"><a href="#分布式请求链路跟踪" class="headerlink" title="分布式请求链路跟踪"></a>分布式请求链路跟踪</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p><strong>问题</strong>：在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后请求的结果，每一个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p>
<img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113135605337.png" alt="image-20201113135605337" style="zoom: 67%;" />

<p>由于调用的链路非常多，所以我们需要对请求链路进行跟踪，分析其中每一环的情况，从而优化微服务系统。</p>
<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>GitHub地址：<a href="https://github.com/spring-cloud/spring-cloud-sleuth" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-sleuth</a></p>
<p>Spring官网地址：<a href="https://spring.io/projects/spring-cloud-sleuth" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-sleuth</a></p>
<p>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案</p>
<p>在分布式系统中提供追踪解决方案并兼容支持了zipkin</p>
<h2 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h2><p>微服务跟踪（sleuth）其实是一个<strong>工具</strong>，它在整个分布式系统中能<strong>跟踪一个用户请求的过程</strong>（包括数据采集，数据传输，数据存储，数据分析，数据可视化），捕获这些跟踪数据，就能构建微服务的整个调用链的视图，这是调试和监控微服务的关键工具。</p>
<p>Spring Cloud Sleuth有4个特点：</p>
<table>
<thead>
<tr>
<th>特点</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>提供链路追踪</td>
<td align="left">通过sleuth可以很清楚的看出一个请求经过了哪些服务， 可以方便的理清服务局的调用关系</td>
</tr>
<tr>
<td>性能分析</td>
<td align="left">通过sleuth可以很方便的看出每个采集请求的耗时， 分析出哪些服务调用比较耗时，当服务调用的耗时 随着请求量的增大而增大时，也可以对服务的扩容提 供一定的提醒作用</td>
</tr>
<tr>
<td>数据分析 优化链路</td>
<td align="left">对于频繁地调用一个服务，或者并行地调用等， 可以针对业务做一些优化措施</td>
</tr>
<tr>
<td>可视化</td>
<td align="left">对于程序未捕获的异常，可以在zipkpin界面上看到</td>
</tr>
</tbody></table>
<h2 id="搭建链路监控步骤"><a href="#搭建链路监控步骤" class="headerlink" title="搭建链路监控步骤"></a>搭建链路监控步骤</h2><h3 id="zipkin"><a href="#zipkin" class="headerlink" title="zipkin"></a>zipkin</h3><p>Spring Cloud 从F版开始已经不需要自己构建Zipkin Server了，只需要调用jar包即可</p>
<p><strong>docker拉取zipkin</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull openzipkin/zipkin</span><br></pre></td></tr></table></figure>

<p><strong>启动zipkin</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9411:9411 --name zipkin01 openzipkin/zipkin</span><br></pre></td></tr></table></figure>

<p><strong>访问zipkin的Web界面</strong></p>
<p><a href="http://ip:9411/zipkin/" target="_blank" rel="noopener">http://ip:9411/zipkin/</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113220201634.png" alt="image-20201113220201634"></p>
<p><strong>开放9411端口</strong></p>
<p>阿里云服务器需要在安全组中开放9411端口</p>
<p>CentOS开启9411端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9411/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>



<h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>Spring Cloud Sleuth采用的是Google的开源项目Dapper的专业术语</p>
<p><strong>Span</strong>：基本的工作单元。例如，发送一个RPC是一个新的Span，就像发S送一个响应到RPC中一样。Span由</p>
<p>完整的调用链路：</p>
<p>表示一请求链路，一条链路通过Trace Id唯一标识，Span标识发起的请求信息，各span通过parent id关联起来</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113220529745.png" alt="image-20201113220529745"></p>
<p>一条链路通过Trace Id唯一标识，Span标识发起的请求信息，各span通过parent id关联起来</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113222445422.png" alt="image-20201113222445422"></p>
<p>整个链路的依赖关系如下：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201113222533552.png" alt="image-20201113222533552"></p>
<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p><strong>修改<code>cloud-provider-payment8001</code>模块的pom，添加如下依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了Sleuth+Zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在<code>application.yml</code>中添加sleuth和zipkin的配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#zipkin相关配置</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://47.114.180.118:9411</span></span><br><span class="line">  <span class="comment">#sleuth相关配置</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率值介于0到1之间，1则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>在控制器中添加如下方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/zipkin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> serverPort + <span class="string">"abcdfakfjkdajfkd(～o￣3￣)～"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><strong>修改<code>cloud-consumer-order80</code>，添加sleuth和zipkin依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在<code>application.yml</code>中添加sleuth和zipkin的配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#zipkin相关配置</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://47.114.180.118:9411</span></span><br><span class="line">  <span class="comment">#sleuth相关配置</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率值介于0到1之间，1则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>在控制器中添加如下方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/zipkin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">"/payment/zipkin"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动<code>cloud-eureka-server7001</code>、<code>cloud-provider-payment8001</code>、<code>cloud-consumer-order80</code></p>
<p>多次访问：<a href="http://localhost/consumer/payment/zipkin" target="_blank" rel="noopener">http://localhost/consumer/payment/zipkin</a></p>
<p>通过9411端口访问zipkin的web界面，查询跟踪的结果（根据服务名查询）</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201114155122538.png" alt="image-20201114155122538"></p>
<p>点击show，查看详细是请求链路：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201114155211015.png" alt="image-20201114155211015"></p>
<p>当然，你也可以点击依赖来查看微服务之间的依赖关系：</p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201114155337834.png" alt="image-20201114155337834"></p>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>分布式请求链路跟踪</tag>
        <tag>Spring Cloud Sleuth</tag>
      </tags>
  </entry>
  <entry>
    <title>十、服务网关</title>
    <url>/2020/11/08/%E5%8D%81%E3%80%81%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h1 id="服务网关Gateway"><a href="#服务网关Gateway" class="headerlink" title="服务网关Gateway"></a>服务网关Gateway</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>上一代zuul 1.x：<a href="https://github.com/Netflix/zuul/wiki" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki</a></p>
<p>gateway官网：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/</a></p>
<h3 id="Gateway是什么"><a href="#Gateway是什么" class="headerlink" title="Gateway是什么"></a>Gateway是什么</h3><p>SpringCloud Gateway是Spring Cloud的一个全新项目，基于Spring 5和Spring Boot 2和Project Reactor等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的API路由管理方式。</p>
<p>SpringCloud Gateway所谓Spring Cloud生态系统中的网关，目标是替代Zuul，在Spring Cloud 2.0以上版本中，没有对新版本Zuul 2.0以上最新高新能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，<strong>SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层使用了高性能的Reactor模式通信框架Netty。</strong></p>
<p>SpringCloud Gateway的目标是提供统一的路由方式且基于Filter链的方式提供了网关的基本功能。例如：安全、监控/指标、限流</p>
<blockquote>
<p>Cloud全家桶中有个很重要的组件就是网关，在1.x版本中都是采用Zuul网关</p>
<p>但是在2.x版本中，Zuul的升级Zuul 2一直跳票，于是Spring Cloud自己开发了一个网关替代Zuul</p>
<p>所以说，SpringCloud Gateway就是用来替代Zuul 1.x作为Spring Cloud的网关组件</p>
</blockquote>
<h3 id="Gateway可以干什么"><a href="#Gateway可以干什么" class="headerlink" title="Gateway可以干什么"></a>Gateway可以干什么</h3><ul>
<li><p>反向代理</p>
</li>
<li><p>鉴权</p>
</li>
<li><p>流量控制</p>
</li>
<li><p>熔断</p>
</li>
<li><p>日志监控</p>
<p>…</p>
</li>
</ul>
<h3 id="网关处于微服务架构的什么位置"><a href="#网关处于微服务架构的什么位置" class="headerlink" title="网关处于微服务架构的什么位置"></a>网关处于微服务架构的什么位置</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108212321093.png" alt="image-20201108212321093"></p>
<h3 id="有了Zuul为什么又出Gateway"><a href="#有了Zuul为什么又出Gateway" class="headerlink" title="有了Zuul为什么又出Gateway"></a>有了Zuul为什么又出Gateway</h3><h4 id="为什么要选择Gateway"><a href="#为什么要选择Gateway" class="headerlink" title="为什么要选择Gateway"></a>为什么要选择Gateway</h4><ol>
<li><p>netflix不靠谱，zuul 2.0一直跳票</p>
<ul>
<li>一方面因为Zuul 已经进入了维护阶段，而且Gateway是SpringCloud团队开发的产品，亲儿子肯定比养子好。而且Gateway使用起来十分简单便捷。</li>
<li>Gateway是基于异步非阻塞模型进行开发的，性能方面无需担心。虽然Netflix早就发布了Zuul 2.x，但是Spring Cloud并没有整合计划，而且Netflix相关组件都宣布进入维护，前景不明。</li>
<li>多方面综合考虑Gateway是很理想的网关选择</li>
</ul>
</li>
<li><p>Spring Cloud Gateway具有以下特性</p>
<ul>
<li><strong>基于Spring Framework 5、Project Reactor和Spring Boot 2进行构建</strong></li>
<li>动态路由：能够匹配任何请求属性</li>
<li>可以对路由指定Predicate（断言）和Filter（过滤器）</li>
<li>集成Hystrix的断路器功能</li>
<li>集成Spring Cloud服务发现功能</li>
<li>易于编写的Predicate（断言）和Filter（过滤器）</li>
<li>请求限流功能</li>
<li>支持路径重写</li>
</ul>
</li>
<li><p>Spring Cloud Gateway和Zuul的区别</p>
<p>在SpringCloud Finchley正式版之前，Spring Cloud推荐的网关是Netflix提供的Zuul</p>
<ol>
<li>Zuul 1.x，是一个基于阻塞I/O的API Gateway</li>
<li>Zuul 1.x<strong>基于Servlet 2.5使用阻塞架构</strong>它不支持任何长连接（如WebSocket）Zuul的设计模式和Nginx较相，每次I/O操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java实现，而JVM本身会有第一次加载比较慢的情况，使得Zuul的性能相对较差</li>
<li>Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但是SpringCloud目前还没有整合。Zuul 2.x的性能较Zuul 1.x有较大提升。在性能方面，根据官方提供的基准测试，Spring Cloud Gateway的RPS（每秒请求数）是Zuul的1.6倍</li>
<li>Spring Cloud Gateway建立在Spring Framework 5、Project Reactor和Spring Boot 2之上，使用非阻塞API</li>
<li>Spring Cloud Gateway还支持WebSocket，并且与Spring紧密集成拥有更好的开发体验！</li>
</ol>
</li>
</ol>
<h4 id="Zuul-1-x模型"><a href="#Zuul-1-x模型" class="headerlink" title="Zuul 1.x模型"></a>Zuul 1.x模型</h4><p>SpringCloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型</p>
<p>Servlet的生命周期？servlet由servlet container进行生命周期管理</p>
<ul>
<li><p>container启动时构造servlet对象并调用servlet init()进行初始化</p>
</li>
<li><p>container运行时接受请求，并为每个请求分配一个线程（一般是从线程池中获取空闲线程）然后调用service()</p>
</li>
<li><p>container关闭时调用servlet destroy()销毁servlet</p>
</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201108215531616.png" alt="image-20201108215531616"></p>
<h4 id="Gateway模型"><a href="#Gateway模型" class="headerlink" title="Gateway模型"></a>Gateway模型</h4><p>传统的Web框架，比如说：struts2、springmvc等都是基于Servlet API与Servlet容器基础上运行的</p>
<p>但是<strong>在Servlet 3.1之后有了异步非阻塞式的支持</strong>，而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在注入Netty、Undertow以及支持Servlet 3.1的容器上非阻塞式+函数式编程（Spring 5必须在Java 8及以上）</p>
<p>Spring WebFlux是Spring 5.0引入的新的响应式框架，区别于Spring  MVC，它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</p>
<h2 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h2><h3 id="Route（路由）"><a href="#Route（路由）" class="headerlink" title="Route（路由）"></a>Route（路由）</h3><p>路由是构建网关的基本模块，它由ID、目标URI、一系列的断言和过滤器组成，如果断言为true，则匹配该路由</p>
<h3 id="Predicate（断言）"><a href="#Predicate（断言）" class="headerlink" title="Predicate（断言）"></a>Predicate（断言）</h3><p>参考的是Java8的<code>java.util.function.Predicate</code>，开发人员可以匹配HTTP请求中的所有内容（例如请求头、请求参数等），如果请求与断言相匹配则进行路由</p>
<h3 id="Filter（过滤）"><a href="#Filter（过滤）" class="headerlink" title="Filter（过滤）"></a>Filter（过滤）</h3><p>指的是Spring框架中Gateway Filter实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</p>
<p>web请求，通过一些匹配条件，定位到真正的服务节点。并在转发过程的前后，进行一些精细化控制。</p>
<p>predicate就是匹配条件，而filter可以理解为一个无所不能的拦截器。有了这连个元素，再加上目标uri，就可以实现一个具体的路由了。</p>
<h2 id="Gateway的工作流程"><a href="#Gateway的工作流程" class="headerlink" title="Gateway的工作流程"></a>Gateway的工作流程</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201109200123708.png" alt="image-20201109200123708"></p>
<p>客户端向Spring Cloud Gateway发出请求，然后在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler。</p>
<p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（pre）或之后（post）执行业务逻辑</p>
<p>Filter在pre类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等；在post类型中可以做响应内容、响应头的修改、日志的输出、流量监控等有着非常重要的作用。</p>
<p><strong>Gateway的核心逻辑</strong>：路由转发+执行过滤链</p>
<h2 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h2><p><strong>1、建立module</strong></p>
<p>新建名为<code>cloud-gateway-gateway9527</code>模块</p>
<p><strong>2、改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--devtools--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--cloud-api-commons--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zxw.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，不要添加<code>spring-boot-starter-web</code>，会和spring cloud gateway冲突</p>
<p><strong>3、yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p><strong>4、主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayMain9527<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>5、检查需要映射什么地址</strong></p>
<p>查看<code>cloud-provider-payment8001</code>的controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">query</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">    Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">    log.info(<span class="string">"查询到的Payment:"</span> + payment);</span><br><span class="line">    <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">200</span>, <span class="string">"查询成功，serverPort: "</span> + serverPort, payment);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">"没有对应记录，查询的id为:"</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问路径为：<a href="http://localhost:8001/payment/get/{id}" target="_blank" rel="noopener">http://localhost:8001/payment/get/{id}</a></p>
<p>我们希望通过Gateway使得通过访问<a href="http://localhost:9527/payment/get/{id}也能够访问到" target="_blank" rel="noopener">http://localhost:9527/payment/get/{id}也能够访问到</a></p>
<p><strong>6、新增网关配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的ID，没有固定规则，但是要唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> <span class="comment">#断言，路径匹配的进行路由</span></span><br></pre></td></tr></table></figure>

<p>可以通过<code>spring.cloud.gateway.routes</code>属性来设置路由</p>
<p><strong>7、测试</strong></p>
<p>访问：<a href="http://localhost:8001/payment/get/1" target="_blank" rel="noopener">http://localhost:8001/payment/get/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201109212136173.png" alt="image-20201109212136173"></p>
<p>访问：<a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201109212203044.png" alt="image-20201109212203044"></p>
<p>至此已经实现了通过9527端口来访问8001端口的服务</p>
<h3 id="Gateway网关路由的两种配置方式"><a href="#Gateway网关路由的两种配置方式" class="headerlink" title="Gateway网关路由的两种配置方式"></a>Gateway网关路由的两种配置方式</h3><ul>
<li>配置文件的方式（如上所示）</li>
<li>配置类中注入RouteLocator类型的Bean</li>
</ul>
<p><strong>配置类方式示例</strong>：</p>
<p>需求：访问<a href="http://localhost:9527/house，可以路由到http://news.baidu.com/house" target="_blank" rel="noopener">http://localhost:9527/house，可以路由到http://news.baidu.com/house</a></p>
<p>添加如下配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(<span class="string">"baidu_news_house"</span>,</span><br><span class="line">                        r -&gt; r.path(<span class="string">"/house"</span>)</span><br><span class="line">                                .uri(<span class="string">"http://news.baidu.com/house"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:9527/house" target="_blank" rel="noopener">http://localhost:9527/house</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201109214039445.png" alt="image-20201109214039445"></p>
<h2 id="通过微服务名实现动态路由"><a href="#通过微服务名实现动态路由" class="headerlink" title="通过微服务名实现动态路由"></a>通过微服务名实现动态路由</h2><p>上面的路由配置还是存在一些问题的：</p>
<ul>
<li>将地址给写死了，不能像之前ribbon负载均衡那样动态地来获取服务的地址</li>
</ul>
<p>解决方式也很简单，在配置文件中开启动态创建路由的功能，然后通过微服务名进行路由</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启动态路由，开启后可以根据微服务名来路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的ID，没有固定规则，但是要唯一</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:8001 #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> <span class="comment">#断言，路径匹配的进行路由</span></span><br></pre></td></tr></table></figure>

<p>uri中的<code>lb</code>指的是负载均衡协议，表示启用Gateway的负载均衡功能</p>
<p><strong>测试</strong></p>
<p>再启动<code>cloud-provider-payment8002</code>，访问<a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201109220355974.png" alt="image-20201109220355974"></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201109220410854.png" alt="image-20201109220410854"></p>
<h2 id="Predicate的使用"><a href="#Predicate的使用" class="headerlink" title="Predicate的使用"></a>Predicate的使用</h2><p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201109220755914.png" alt="image-20201109220755914"></p>
<p>项目加载时控制台打印了上述内容，回想我们之前在yml中配置的predicates，使用了<code>Path</code>类型的Predicate</p>
<h3 id="Predicate的使用-1"><a href="#Predicate的使用-1" class="headerlink" title="Predicate的使用"></a>Predicate的使用</h3><p>参考文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gateway-request-predicates-factories" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gateway-request-predicates-factories</a></p>
<p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。</p>
<p>Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个Route Predicate工厂可以进行组合</p>
<p>Spring Cloud Gateway创建Route对象时，使用RoutePredicateFactory创建Predicate对象，Predicate对象可以赋值给Route。Spring Cloud Gateway包含许多内置的Route Predicate Factories。</p>
<h3 id="常用的Route-Predicate"><a href="#常用的Route-Predicate" class="headerlink" title="常用的Route Predicate"></a>常用的Route Predicate</h3><h4 id="After-Route-Predicate"><a href="#After-Route-Predicate" class="headerlink" title="After Route Predicate"></a>After Route Predicate</h4><p>表示在指定时间后，示例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure>

<p>那么如何得到After之后的这个字符串？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime zdj = ZonedDateTime.now();</span><br><span class="line">System.out.println(zdj);</span><br></pre></td></tr></table></figure>

<p>得到的就是我们需要的字符串！</p>
<h4 id="Before-Route-Predicate"><a href="#Before-Route-Predicate" class="headerlink" title="Before Route Predicate"></a>Before Route Predicate</h4><p>在指定时间之前，示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure>



<h4 id="Between-Route-Predicate"><a href="#Between-Route-Predicate" class="headerlink" title="Between Route Predicate"></a>Between Route Predicate</h4><p>在指定时间之间，示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">between_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Between=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017</span><span class="number">-01</span><span class="string">-21T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure>



<h4 id="Cookie-Route-Predicate"><a href="#Cookie-Route-Predicate" class="headerlink" title="Cookie Route Predicate"></a>Cookie Route Predicate</h4><p>Cookie Route Predicate需要两个参数，一个是Cookie name，一个是正则表达式。</p>
<p>路由规则会通过获取对应的Cookie name的值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=username,</span> <span class="string">zxw</span></span><br></pre></td></tr></table></figure>

<p>不带cookie的curl访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9527/payment/get/1</span><br></pre></td></tr></table></figure>

<p>带cookie的curl访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9527/payment/get/1 --cookie <span class="string">"username=zxw"</span></span><br></pre></td></tr></table></figure>



<h4 id="Header-Route-Predicate"><a href="#Header-Route-Predicate" class="headerlink" title="Header Route Predicate"></a>Header Route Predicate</h4><p>两个参数：属性名称和正则表达式（和cookie类似）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span> <span class="comment">#请求头要有X-Request-Id属性并且值为正整数的正则表达式</span></span><br></pre></td></tr></table></figure>

<p>curl测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:9527/payment/get/1 -H <span class="string">"X-Request-Id:1234"</span></span><br></pre></td></tr></table></figure>



<h4 id="Host-Route-Predicate-Factory"><a href="#Host-Route-Predicate-Factory" class="headerlink" title="Host Route Predicate Factory"></a>Host Route Predicate Factory</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br></pre></td></tr></table></figure>

<p>只有当host匹配<code>**.somehost.org</code>、<code>**.anotherhost.org</code>时返回true，例如：<code>www.somehost.org</code>、<code>beta.anotherhost.org</code>都可以匹配</p>
<h4 id="Method-Route-Predicate"><a href="#Method-Route-Predicate" class="headerlink" title="Method Route Predicate"></a>Method Route Predicate</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure>

<p>请求方法匹配时返回true</p>
<h4 id="Path-Route-Predicate"><a href="#Path-Route-Predicate" class="headerlink" title="Path Route Predicate"></a>Path Route Predicate</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">path_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/red/&#123;segment&#125;,/blue/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问路径匹配时返回true</p>
<h4 id="Query-Route-Predicate"><a href="#Query-Route-Predicate" class="headerlink" title="Query Route Predicate"></a>Query Route Predicate</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=username,</span> <span class="string">\d+</span> <span class="comment">#要有参数名称username，并且值为正数才能路由</span></span><br></pre></td></tr></table></figure>



<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理</p>
<h2 id="Filter的使用"><a href="#Filter的使用" class="headerlink" title="Filter的使用"></a>Filter的使用</h2><h3 id="Filter是什么"><a href="#Filter是什么" class="headerlink" title="Filter是什么"></a>Filter是什么</h3><p>路由过滤器可以用于进入HTTP请求和返回HTTP响应的期间进行修改。路由过滤器作用域特定的路由。Spring Cloud Gateway中包含了很多内置的 GatewayFilter Factories。</p>
<h3 id="Spring-Cloud-Gateway的Filter"><a href="#Spring-Cloud-Gateway的Filter" class="headerlink" title="Spring Cloud Gateway的Filter"></a>Spring Cloud Gateway的Filter</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul>
<li>pre：业务逻辑执行前</li>
<li>post：业务逻辑执行后</li>
</ul>
<h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul>
<li><p>GatewayFilter：作用域单一路由的过滤器</p>
<p>官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories</a></p>
<p>包含了31种Gateway Filter</p>
</li>
<li><p>GlobalFilter：全局过滤器</p>
<p>官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#global-filters" target="_blank" rel="noopener">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#global-filters</a></p>
<p>包含了10种Global Filter</p>
</li>
</ul>
<p><strong>以AddRequestHeader为例</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure>

<p>对于所有匹配的请求在请求头种添加<code>X-Request-red:blue</code></p>
<h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>需要实现两个接口：</p>
<ul>
<li><code>GlobalFilter</code></li>
<li><code>Ordered</code></li>
</ul>
<p>可以干什么</p>
<ul>
<li><p>全局日志记录</p>
</li>
<li><p>统一网关鉴权</p>
<p>。。。。。。</p>
</li>
</ul>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"come in MyLogGatewayFilter: "</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        String username = exchange.getRequest().getQueryParams().getFirst(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"用户名为null，非法用户，(❤ ω ❤)"</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个过滤器要求访问时必须提供username参数，否则就返回406响应状态码</p>
<p><strong>测试</strong></p>
<ul>
<li><p><a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201110202944922.png" alt="image-20201110202944922"></p>
</li>
<li><p><a href="http://localhost:9527/payment/get/1?username=zhangsan" target="_blank" rel="noopener">http://localhost:9527/payment/get/1?username=zhangsan</a></p>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/zxwscoffee/img/raw/master/img/image-20201110202958427.png" alt="image-20201110202958427"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web框架</category>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>服务网关</tag>
        <tag>Gateway</tag>
      </tags>
  </entry>
</search>
